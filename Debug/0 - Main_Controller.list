
0 - Main_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd6c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002190  0800e010  0800e010  0001e010  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080101a0  080101a0  000201a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080101a8  080101a8  000201a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080101ac  080101ac  000201ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  24000000  080101b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240001e4  08010394  000301e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000244  080103f4  00030244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c470  240002a4  08010454  000302a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400c714  08010454  0003c714  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000302a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d99a  00000000  00000000  000302d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e8c  00000000  00000000  0005dc6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001948  00000000  00000000  00061af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001820  00000000  00000000  00063440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ab05  00000000  00000000  00064c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c4f3  00000000  00000000  0009f765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001758f9  00000000  00000000  000bbc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00231551  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008160  00000000  00000000  002315a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  00239704  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  00239740  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002a4 	.word	0x240002a4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800dff4 	.word	0x0800dff4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002a8 	.word	0x240002a8
 80002dc:	0800dff4 	.word	0x0800dff4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068e:	f003 f9fd 	bl	8003a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000692:	f000 f967 	bl	8000964 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000696:	f000 fbfb 	bl	8000e90 <MX_GPIO_Init>
  MX_ETH_Init();
 800069a:	f000 f9df 	bl	8000a5c <MX_ETH_Init>
  MX_FDCAN1_Init();
 800069e:	f000 fa29 	bl	8000af4 <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 80006a2:	f000 fb77 	bl	8000d94 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006a6:	f000 fbc1 	bl	8000e2c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80006aa:	f000 fa87 	bl	8000bbc <MX_TIM2_Init>
  MX_TIM3_Init();
 80006ae:	f000 fad3 	bl	8000c58 <MX_TIM3_Init>
  MX_TIM4_Init();
 80006b2:	f000 fb1f 	bl	8000cf4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3);
 80006b6:	488a      	ldr	r0, [pc, #552]	; (80008e0 <main+0x258>)
 80006b8:	f002 fd4a 	bl	8003150 <RetargetInit>

  printf("POPUP Robot Main Controller V0.1\n");
 80006bc:	4889      	ldr	r0, [pc, #548]	; (80008e4 <main+0x25c>)
 80006be:	f00a fe5b 	bl	800b378 <puts>


  printf("CAN Register Configuring... \n");
 80006c2:	4889      	ldr	r0, [pc, #548]	; (80008e8 <main+0x260>)
 80006c4:	f00a fe58 	bl	800b378 <puts>

   CAN_RxFilter_Config();
 80006c8:	f000 fcbe 	bl	8001048 <CAN_RxFilter_Config>
   CAN_TxHeader_Config();
 80006cc:	f000 fcdc 	bl	8001088 <CAN_TxHeader_Config>

   if (   (HAL_FDCAN_Start(& hfdcan1)) == HAL_OK)   // l'ultimo argomento non ci interessa se usiamo la FIFO
 80006d0:	4886      	ldr	r0, [pc, #536]	; (80008ec <main+0x264>)
 80006d2:	f004 fa2f 	bl	8004b34 <HAL_FDCAN_Start>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d103      	bne.n	80006e4 <main+0x5c>
 	  printf("CAN PHY started\n");
 80006dc:	4884      	ldr	r0, [pc, #528]	; (80008f0 <main+0x268>)
 80006de:	f00a fe4b 	bl	800b378 <puts>
 80006e2:	e002      	b.n	80006ea <main+0x62>
   else {
	  printf("CAN PHY initialization error\n");
 80006e4:	4883      	ldr	r0, [pc, #524]	; (80008f4 <main+0x26c>)
 80006e6:	f00a fe47 	bl	800b378 <puts>
	  //while(1);

   }
   //HAL_FDCAN_ConfigInterruptLines(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, FDCAN_INTERRUPT_LINE0);
   if ( HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) == HAL_OK)   // l'ultimo argomento non ci interessa se usiamo la FIFO
 80006ea:	2200      	movs	r2, #0
 80006ec:	2101      	movs	r1, #1
 80006ee:	487f      	ldr	r0, [pc, #508]	; (80008ec <main+0x264>)
 80006f0:	f004 fc14 	bl	8004f1c <HAL_FDCAN_ActivateNotification>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d102      	bne.n	8000700 <main+0x78>
 	  printf("CAN Configuring: DONE\n\n\n");
 80006fa:	487f      	ldr	r0, [pc, #508]	; (80008f8 <main+0x270>)
 80006fc:	f00a fe3c 	bl	800b378 <puts>


   HAL_Delay(2000);
 8000700:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000704:	f003 fa54 	bl	8003bb0 <HAL_Delay>
   ////////////////////////////////////////////////////
   //assign controllers parameter

   //joint 1 position PID controller gain
	 pos_KP[0] = 5;
 8000708:	4b7c      	ldr	r3, [pc, #496]	; (80008fc <main+0x274>)
 800070a:	4a7d      	ldr	r2, [pc, #500]	; (8000900 <main+0x278>)
 800070c:	601a      	str	r2, [r3, #0]
	 pos_KI[0] = 0;
 800070e:	4b7d      	ldr	r3, [pc, #500]	; (8000904 <main+0x27c>)
 8000710:	f04f 0200 	mov.w	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
	 pos_KD[0] = 0;
 8000716:	4b7c      	ldr	r3, [pc, #496]	; (8000908 <main+0x280>)
 8000718:	f04f 0200 	mov.w	r2, #0
 800071c:	601a      	str	r2, [r3, #0]

	//joint 2 position PID controller gain
	 pos_KP[1] = 12;
 800071e:	4b77      	ldr	r3, [pc, #476]	; (80008fc <main+0x274>)
 8000720:	4a7a      	ldr	r2, [pc, #488]	; (800090c <main+0x284>)
 8000722:	605a      	str	r2, [r3, #4]
	 pos_KI[1] = 0;
 8000724:	4b77      	ldr	r3, [pc, #476]	; (8000904 <main+0x27c>)
 8000726:	f04f 0200 	mov.w	r2, #0
 800072a:	605a      	str	r2, [r3, #4]
	 pos_KD[1] = 0;
 800072c:	4b76      	ldr	r3, [pc, #472]	; (8000908 <main+0x280>)
 800072e:	f04f 0200 	mov.w	r2, #0
 8000732:	605a      	str	r2, [r3, #4]

	//joint 3 position PID controller gain
	 pos_KP[2] = 12;
 8000734:	4b71      	ldr	r3, [pc, #452]	; (80008fc <main+0x274>)
 8000736:	4a75      	ldr	r2, [pc, #468]	; (800090c <main+0x284>)
 8000738:	609a      	str	r2, [r3, #8]
	 pos_KI[2] = 0;
 800073a:	4b72      	ldr	r3, [pc, #456]	; (8000904 <main+0x27c>)
 800073c:	f04f 0200 	mov.w	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
	 pos_KD[2] = 0;
 8000742:	4b71      	ldr	r3, [pc, #452]	; (8000908 <main+0x280>)
 8000744:	f04f 0200 	mov.w	r2, #0
 8000748:	609a      	str	r2, [r3, #8]

	//joint 1 speed PID controller gain
	 speed_KP[0] = 0;
 800074a:	4b71      	ldr	r3, [pc, #452]	; (8000910 <main+0x288>)
 800074c:	f04f 0200 	mov.w	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
	 speed_KI[0] = 0;
 8000752:	4b70      	ldr	r3, [pc, #448]	; (8000914 <main+0x28c>)
 8000754:	f04f 0200 	mov.w	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
	 speed_KD[0] = 0;
 800075a:	4b6f      	ldr	r3, [pc, #444]	; (8000918 <main+0x290>)
 800075c:	f04f 0200 	mov.w	r2, #0
 8000760:	601a      	str	r2, [r3, #0]

	//joint 2 speed PID controller gain
	 speed_KP[1] = 8;
 8000762:	4b6b      	ldr	r3, [pc, #428]	; (8000910 <main+0x288>)
 8000764:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8000768:	605a      	str	r2, [r3, #4]
	 speed_KI[1] = 0;
 800076a:	4b6a      	ldr	r3, [pc, #424]	; (8000914 <main+0x28c>)
 800076c:	f04f 0200 	mov.w	r2, #0
 8000770:	605a      	str	r2, [r3, #4]
	 speed_KD[1] = 0;
 8000772:	4b69      	ldr	r3, [pc, #420]	; (8000918 <main+0x290>)
 8000774:	f04f 0200 	mov.w	r2, #0
 8000778:	605a      	str	r2, [r3, #4]
	 //joint 3 speed PID controller gain
	 speed_KP[2] = 8;
 800077a:	4b65      	ldr	r3, [pc, #404]	; (8000910 <main+0x288>)
 800077c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8000780:	609a      	str	r2, [r3, #8]
	 speed_KI[2] = 0;
 8000782:	4b64      	ldr	r3, [pc, #400]	; (8000914 <main+0x28c>)
 8000784:	f04f 0200 	mov.w	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
	 speed_KD[2] = 0;
 800078a:	4b63      	ldr	r3, [pc, #396]	; (8000918 <main+0x290>)
 800078c:	f04f 0200 	mov.w	r2, #0
 8000790:	609a      	str	r2, [r3, #8]

	/////////////////////////////////////
  //veryfy system status (link + sensors)
	POPUP_system_check();
 8000792:	f002 fb47 	bl	8002e24 <POPUP_system_check>
 //send calibration command to link boards
	POPUP_calibrate_link_sensors(11);
 8000796:	200b      	movs	r0, #11
 8000798:	f002 fc02 	bl	8002fa0 <POPUP_calibrate_link_sensors>


  //activate motors
	POPUP_activate_motors();
 800079c:	f002 fbc4 	bl	8002f28 <POPUP_activate_motors>
  //homing
	 //POPUP_
     //POPUP_homing();
  //start loop

	 printf("\nSystem Initialized\n");
 80007a0:	485e      	ldr	r0, [pc, #376]	; (800091c <main+0x294>)
 80007a2:	f00a fde9 	bl	800b378 <puts>


  Cartesian_target[0] = 0.7; //X
 80007a6:	4b5e      	ldr	r3, [pc, #376]	; (8000920 <main+0x298>)
 80007a8:	4a5e      	ldr	r2, [pc, #376]	; (8000924 <main+0x29c>)
 80007aa:	601a      	str	r2, [r3, #0]
  Cartesian_target[1] = -0.7; //Y
 80007ac:	4b5c      	ldr	r3, [pc, #368]	; (8000920 <main+0x298>)
 80007ae:	4a5e      	ldr	r2, [pc, #376]	; (8000928 <main+0x2a0>)
 80007b0:	605a      	str	r2, [r3, #4]
  Cartesian_target[2] = 0.8; //Z
 80007b2:	4b5b      	ldr	r3, [pc, #364]	; (8000920 <main+0x298>)
 80007b4:	4a5d      	ldr	r2, [pc, #372]	; (800092c <main+0x2a4>)
 80007b6:	609a      	str	r2, [r3, #8]

  printf("Target = [ X: %f   Y: %f   Z: %f ]\n",Cartesian_target[0],Cartesian_target[1],Cartesian_target[2]);
 80007b8:	4b59      	ldr	r3, [pc, #356]	; (8000920 <main+0x298>)
 80007ba:	edd3 7a00 	vldr	s15, [r3]
 80007be:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80007c2:	4b57      	ldr	r3, [pc, #348]	; (8000920 <main+0x298>)
 80007c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80007c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007cc:	4b54      	ldr	r3, [pc, #336]	; (8000920 <main+0x298>)
 80007ce:	edd3 6a02 	vldr	s13, [r3, #8]
 80007d2:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80007d6:	ed8d 6b02 	vstr	d6, [sp, #8]
 80007da:	ed8d 7b00 	vstr	d7, [sp]
 80007de:	ec53 2b15 	vmov	r2, r3, d5
 80007e2:	4853      	ldr	r0, [pc, #332]	; (8000930 <main+0x2a8>)
 80007e4:	f00a fd42 	bl	800b26c <iprintf>

  InverseKinematic(Cartesian_target, 1); //Target[3] , Mode (elbow up,down)
 80007e8:	2101      	movs	r1, #1
 80007ea:	484d      	ldr	r0, [pc, #308]	; (8000920 <main+0x298>)
 80007ec:	f000 ffc8 	bl	8001780 <InverseKinematic>

  printf("Joint Target = [ q1: %f   q2: %f   q3: %f ]\n",Joint_target[0],Joint_target[1],Joint_target[2]);
 80007f0:	4b50      	ldr	r3, [pc, #320]	; (8000934 <main+0x2ac>)
 80007f2:	edd3 7a00 	vldr	s15, [r3]
 80007f6:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80007fa:	4b4e      	ldr	r3, [pc, #312]	; (8000934 <main+0x2ac>)
 80007fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8000800:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000804:	4b4b      	ldr	r3, [pc, #300]	; (8000934 <main+0x2ac>)
 8000806:	edd3 6a02 	vldr	s13, [r3, #8]
 800080a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800080e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000812:	ed8d 7b00 	vstr	d7, [sp]
 8000816:	ec53 2b15 	vmov	r2, r3, d5
 800081a:	4847      	ldr	r0, [pc, #284]	; (8000938 <main+0x2b0>)
 800081c:	f00a fd26 	bl	800b26c <iprintf>
  printf("Actual Joint position = [ q1: %f   q2: %f  q3: %f ]\n",actualPos[0],actualPos[1],actualPos[2]);
 8000820:	4b46      	ldr	r3, [pc, #280]	; (800093c <main+0x2b4>)
 8000822:	edd3 7a00 	vldr	s15, [r3]
 8000826:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800082a:	4b44      	ldr	r3, [pc, #272]	; (800093c <main+0x2b4>)
 800082c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000830:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000834:	4b41      	ldr	r3, [pc, #260]	; (800093c <main+0x2b4>)
 8000836:	edd3 6a02 	vldr	s13, [r3, #8]
 800083a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800083e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000842:	ed8d 7b00 	vstr	d7, [sp]
 8000846:	ec53 2b15 	vmov	r2, r3, d5
 800084a:	483d      	ldr	r0, [pc, #244]	; (8000940 <main+0x2b8>)
 800084c:	f00a fd0e 	bl	800b26c <iprintf>
  Joint_target[2] = -Joint_target[2];
 8000850:	4b38      	ldr	r3, [pc, #224]	; (8000934 <main+0x2ac>)
 8000852:	edd3 7a02 	vldr	s15, [r3, #8]
 8000856:	eef1 7a67 	vneg.f32	s15, s15
 800085a:	4b36      	ldr	r3, [pc, #216]	; (8000934 <main+0x2ac>)
 800085c:	edc3 7a02 	vstr	s15, [r3, #8]
  printf("\nStarting trajectory planner...\n");
 8000860:	4838      	ldr	r0, [pc, #224]	; (8000944 <main+0x2bc>)
 8000862:	f00a fd89 	bl	800b378 <puts>

  TrajectorPlanner(actualPos, Joint_target, 10);
 8000866:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800086a:	4932      	ldr	r1, [pc, #200]	; (8000934 <main+0x2ac>)
 800086c:	4833      	ldr	r0, [pc, #204]	; (800093c <main+0x2b4>)
 800086e:	f001 fd57 	bl	8002320 <TrajectorPlanner>

  printf("\nStarting trajectory planning completed.\n");
 8000872:	4835      	ldr	r0, [pc, #212]	; (8000948 <main+0x2c0>)
 8000874:	f00a fd80 	bl	800b378 <puts>
		  printf("\n\n");
	  	  }
  }

  //assign the first planned variable to the position controller input
  for(int m = 0; m<3; m++) {
 8000878:	2300      	movs	r3, #0
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	e00c      	b.n	8000898 <main+0x210>
	  Joint_target_planned[m] = Joint_target_plan[0][m];
 800087e:	4a33      	ldr	r2, [pc, #204]	; (800094c <main+0x2c4>)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	4413      	add	r3, r2
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	4931      	ldr	r1, [pc, #196]	; (8000950 <main+0x2c8>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	440b      	add	r3, r1
 8000890:	601a      	str	r2, [r3, #0]
  for(int m = 0; m<3; m++) {
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	3301      	adds	r3, #1
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2b02      	cmp	r3, #2
 800089c:	ddef      	ble.n	800087e <main+0x1f6>
  }


  //start controllers
  POPUP_start_controllers();
 800089e:	f002 fb67 	bl	8002f70 <POPUP_start_controllers>

  HAL_Delay(1000);
 80008a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008a6:	f003 f983 	bl	8003bb0 <HAL_Delay>

  //start planned movement
  POPUP_start_plan();
 80008aa:	f002 fb6f 	bl	8002f8c <POPUP_start_plan>

  //start printing data from link sensors
  LINK_FB_DEBUG = 1;
 80008ae:	4b29      	ldr	r3, [pc, #164]	; (8000954 <main+0x2cc>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 if(flag_pos_controller  == 1)
 80008b4:	4b28      	ldr	r3, [pc, #160]	; (8000958 <main+0x2d0>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d101      	bne.n	80008c0 <main+0x238>
		 PositionController();
 80008bc:	f002 f8a8 	bl	8002a10 <PositionController>

	if(flag_speed_controller == 1) {
 80008c0:	4b26      	ldr	r3, [pc, #152]	; (800095c <main+0x2d4>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d1f5      	bne.n	80008b4 <main+0x22c>
		SpeedController();
 80008c8:	f002 f998 	bl	8002bfc <SpeedController>
	  	 CAN_TX_vesc_speed(-Joint_speed_target_planned[0]);
 80008cc:	4b24      	ldr	r3, [pc, #144]	; (8000960 <main+0x2d8>)
 80008ce:	edd3 7a00 	vldr	s15, [r3]
 80008d2:	eef1 7a67 	vneg.f32	s15, s15
 80008d6:	eeb0 0a67 	vmov.f32	s0, s15
 80008da:	f000 fe25 	bl	8001528 <CAN_TX_vesc_speed>
	 if(flag_pos_controller  == 1)
 80008de:	e7e9      	b.n	80008b4 <main+0x22c>
 80008e0:	24000390 	.word	0x24000390
 80008e4:	0800e010 	.word	0x0800e010
 80008e8:	0800e034 	.word	0x0800e034
 80008ec:	24000930 	.word	0x24000930
 80008f0:	0800e054 	.word	0x0800e054
 80008f4:	0800e064 	.word	0x0800e064
 80008f8:	0800e084 	.word	0x0800e084
 80008fc:	24000830 	.word	0x24000830
 8000900:	40a00000 	.word	0x40a00000
 8000904:	240009dc 	.word	0x240009dc
 8000908:	24000924 	.word	0x24000924
 800090c:	41400000 	.word	0x41400000
 8000910:	24006924 	.word	0x24006924
 8000914:	240008c4 	.word	0x240008c4
 8000918:	240008dc 	.word	0x240008dc
 800091c:	0800e09c 	.word	0x0800e09c
 8000920:	2400083c 	.word	0x2400083c
 8000924:	3f333333 	.word	0x3f333333
 8000928:	bf333333 	.word	0xbf333333
 800092c:	3f4ccccd 	.word	0x3f4ccccd
 8000930:	0800e0b0 	.word	0x0800e0b0
 8000934:	2400685c 	.word	0x2400685c
 8000938:	0800e0d4 	.word	0x0800e0d4
 800093c:	240067cc 	.word	0x240067cc
 8000940:	0800e104 	.word	0x0800e104
 8000944:	0800e13c 	.word	0x0800e13c
 8000948:	0800e15c 	.word	0x0800e15c
 800094c:	2400693c 	.word	0x2400693c
 8000950:	2400090c 	.word	0x2400090c
 8000954:	240002c0 	.word	0x240002c0
 8000958:	240002c8 	.word	0x240002c8
 800095c:	240002cc 	.word	0x240002cc
 8000960:	240008f4 	.word	0x240008f4

08000964 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b09c      	sub	sp, #112	; 0x70
 8000968:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096e:	224c      	movs	r2, #76	; 0x4c
 8000970:	2100      	movs	r1, #0
 8000972:	4618      	mov	r0, r3
 8000974:	f00a f830 	bl	800a9d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	2220      	movs	r2, #32
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f00a f82a 	bl	800a9d8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000984:	2002      	movs	r0, #2
 8000986:	f005 fb7d 	bl	8006084 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800098a:	2300      	movs	r3, #0
 800098c:	603b      	str	r3, [r7, #0]
 800098e:	4b31      	ldr	r3, [pc, #196]	; (8000a54 <SystemClock_Config+0xf0>)
 8000990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000992:	4a30      	ldr	r2, [pc, #192]	; (8000a54 <SystemClock_Config+0xf0>)
 8000994:	f023 0301 	bic.w	r3, r3, #1
 8000998:	62d3      	str	r3, [r2, #44]	; 0x2c
 800099a:	4b2e      	ldr	r3, [pc, #184]	; (8000a54 <SystemClock_Config+0xf0>)
 800099c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	4b2c      	ldr	r3, [pc, #176]	; (8000a58 <SystemClock_Config+0xf4>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009ac:	4a2a      	ldr	r2, [pc, #168]	; (8000a58 <SystemClock_Config+0xf4>)
 80009ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009b2:	6193      	str	r3, [r2, #24]
 80009b4:	4b28      	ldr	r3, [pc, #160]	; (8000a58 <SystemClock_Config+0xf4>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009c0:	bf00      	nop
 80009c2:	4b25      	ldr	r3, [pc, #148]	; (8000a58 <SystemClock_Config+0xf4>)
 80009c4:	699b      	ldr	r3, [r3, #24]
 80009c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009ce:	d1f8      	bne.n	80009c2 <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009d0:	2301      	movs	r3, #1
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009d4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009da:	2302      	movs	r3, #2
 80009dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009de:	2302      	movs	r3, #2
 80009e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009e2:	2301      	movs	r3, #1
 80009e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80009e6:	233c      	movs	r3, #60	; 0x3c
 80009e8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009ea:	2302      	movs	r3, #2
 80009ec:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80009ee:	2308      	movs	r3, #8
 80009f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009f2:	2302      	movs	r3, #2
 80009f4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009f6:	230c      	movs	r3, #12
 80009f8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009fa:	2300      	movs	r3, #0
 80009fc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a06:	4618      	mov	r0, r3
 8000a08:	f005 fb86 	bl	8006118 <HAL_RCC_OscConfig>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000a12:	f002 fb97 	bl	8003144 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a16:	233f      	movs	r3, #63	; 0x3f
 8000a18:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a22:	2308      	movs	r3, #8
 8000a24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a2a:	2340      	movs	r3, #64	; 0x40
 8000a2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2102      	movs	r1, #2
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f005 ff7c 	bl	8006938 <HAL_RCC_ClockConfig>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000a46:	f002 fb7d 	bl	8003144 <Error_Handler>
  }
}
 8000a4a:	bf00      	nop
 8000a4c:	3770      	adds	r7, #112	; 0x70
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	58000400 	.word	0x58000400
 8000a58:	58024800 	.word	0x58024800

08000a5c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a60:	4b1e      	ldr	r3, [pc, #120]	; (8000adc <MX_ETH_Init+0x80>)
 8000a62:	4a1f      	ldr	r2, [pc, #124]	; (8000ae0 <MX_ETH_Init+0x84>)
 8000a64:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a66:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <MX_ETH_Init+0x88>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <MX_ETH_Init+0x88>)
 8000a6e:	2280      	movs	r2, #128	; 0x80
 8000a70:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a72:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <MX_ETH_Init+0x88>)
 8000a74:	22e1      	movs	r2, #225	; 0xe1
 8000a76:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a78:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MX_ETH_Init+0x88>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a7e:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <MX_ETH_Init+0x88>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a84:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <MX_ETH_Init+0x88>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a8a:	4b14      	ldr	r3, [pc, #80]	; (8000adc <MX_ETH_Init+0x80>)
 8000a8c:	4a15      	ldr	r2, [pc, #84]	; (8000ae4 <MX_ETH_Init+0x88>)
 8000a8e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <MX_ETH_Init+0x80>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <MX_ETH_Init+0x80>)
 8000a98:	4a13      	ldr	r2, [pc, #76]	; (8000ae8 <MX_ETH_Init+0x8c>)
 8000a9a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <MX_ETH_Init+0x80>)
 8000a9e:	4a13      	ldr	r2, [pc, #76]	; (8000aec <MX_ETH_Init+0x90>)
 8000aa0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <MX_ETH_Init+0x80>)
 8000aa4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000aa8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000aaa:	480c      	ldr	r0, [pc, #48]	; (8000adc <MX_ETH_Init+0x80>)
 8000aac:	f003 f9d4 	bl	8003e58 <HAL_ETH_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000ab6:	f002 fb45 	bl	8003144 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000aba:	2234      	movs	r2, #52	; 0x34
 8000abc:	2100      	movs	r1, #0
 8000abe:	480c      	ldr	r0, [pc, #48]	; (8000af0 <MX_ETH_Init+0x94>)
 8000ac0:	f009 ff8a 	bl	800a9d8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <MX_ETH_Init+0x94>)
 8000ac6:	2221      	movs	r2, #33	; 0x21
 8000ac8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000aca:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <MX_ETH_Init+0x94>)
 8000acc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ad0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000ad2:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <MX_ETH_Init+0x94>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	24006868 	.word	0x24006868
 8000ae0:	40028000 	.word	0x40028000
 8000ae4:	240002d8 	.word	0x240002d8
 8000ae8:	24000244 	.word	0x24000244
 8000aec:	240001e4 	.word	0x240001e4
 8000af0:	240068f0 	.word	0x240068f0

08000af4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000af8:	4b2e      	ldr	r3, [pc, #184]	; (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000afa:	4a2f      	ldr	r2, [pc, #188]	; (8000bb8 <MX_FDCAN1_Init+0xc4>)
 8000afc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000afe:	4b2d      	ldr	r3, [pc, #180]	; (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000b04:	4b2b      	ldr	r3, [pc, #172]	; (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000b0a:	4b2a      	ldr	r3, [pc, #168]	; (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000b10:	4b28      	ldr	r3, [pc, #160]	; (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000b16:	4b27      	ldr	r3, [pc, #156]	; (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 8000b1c:	4b25      	ldr	r3, [pc, #148]	; (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b1e:	2204      	movs	r2, #4
 8000b20:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000b22:	4b24      	ldr	r3, [pc, #144]	; (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 12;
 8000b28:	4b22      	ldr	r3, [pc, #136]	; (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000b2e:	4b21      	ldr	r3, [pc, #132]	; (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b30:	2202      	movs	r2, #2
 8000b32:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000b34:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000b3a:	4b1e      	ldr	r3, [pc, #120]	; (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000b40:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000b46:	4b1b      	ldr	r3, [pc, #108]	; (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000b4c:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000b52:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000b58:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000b64:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b66:	2204      	movs	r2, #4
 8000b68:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 1;
 8000b6a:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000b70:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b72:	2204      	movs	r2, #4
 8000b74:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000b7c:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b7e:	2204      	movs	r2, #4
 8000b80:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000b88:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b94:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000b9c:	2204      	movs	r2, #4
 8000b9e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000ba0:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <MX_FDCAN1_Init+0xc0>)
 8000ba2:	f003 fd6f 	bl	8004684 <HAL_FDCAN_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000bac:	f002 faca 	bl	8003144 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	24000930 	.word	0x24000930
 8000bb8:	4000a000 	.word	0x4000a000

08000bbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b088      	sub	sp, #32
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bc2:	f107 0310 	add.w	r3, r7, #16
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bda:	4b1e      	ldr	r3, [pc, #120]	; (8000c54 <MX_TIM2_Init+0x98>)
 8000bdc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000be0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 120;
 8000be2:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <MX_TIM2_Init+0x98>)
 8000be4:	2278      	movs	r2, #120	; 0x78
 8000be6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be8:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <MX_TIM2_Init+0x98>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000bee:	4b19      	ldr	r3, [pc, #100]	; (8000c54 <MX_TIM2_Init+0x98>)
 8000bf0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bf4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf6:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <MX_TIM2_Init+0x98>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfc:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <MX_TIM2_Init+0x98>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c02:	4814      	ldr	r0, [pc, #80]	; (8000c54 <MX_TIM2_Init+0x98>)
 8000c04:	f007 fd86 	bl	8008714 <HAL_TIM_Base_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c0e:	f002 fa99 	bl	8003144 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c18:	f107 0310 	add.w	r3, r7, #16
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	480d      	ldr	r0, [pc, #52]	; (8000c54 <MX_TIM2_Init+0x98>)
 8000c20:	f007 ff60 	bl	8008ae4 <HAL_TIM_ConfigClockSource>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000c2a:	f002 fa8b 	bl	8003144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4806      	ldr	r0, [pc, #24]	; (8000c54 <MX_TIM2_Init+0x98>)
 8000c3c:	f008 f9a6 	bl	8008f8c <HAL_TIMEx_MasterConfigSynchronization>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c46:	f002 fa7d 	bl	8003144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c4a:	bf00      	nop
 8000c4c:	3720      	adds	r7, #32
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	240067d8 	.word	0x240067d8

08000c58 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c5e:	f107 0310 	add.w	r3, r7, #16
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c76:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <MX_TIM3_Init+0x94>)
 8000c78:	4a1d      	ldr	r2, [pc, #116]	; (8000cf0 <MX_TIM3_Init+0x98>)
 8000c7a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 120;
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <MX_TIM3_Init+0x94>)
 8000c7e:	2278      	movs	r2, #120	; 0x78
 8000c80:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c82:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <MX_TIM3_Init+0x94>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8000c88:	4b18      	ldr	r3, [pc, #96]	; (8000cec <MX_TIM3_Init+0x94>)
 8000c8a:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c8e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c90:	4b16      	ldr	r3, [pc, #88]	; (8000cec <MX_TIM3_Init+0x94>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c96:	4b15      	ldr	r3, [pc, #84]	; (8000cec <MX_TIM3_Init+0x94>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c9c:	4813      	ldr	r0, [pc, #76]	; (8000cec <MX_TIM3_Init+0x94>)
 8000c9e:	f007 fd39 	bl	8008714 <HAL_TIM_Base_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000ca8:	f002 fa4c 	bl	8003144 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cb2:	f107 0310 	add.w	r3, r7, #16
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	480c      	ldr	r0, [pc, #48]	; (8000cec <MX_TIM3_Init+0x94>)
 8000cba:	f007 ff13 	bl	8008ae4 <HAL_TIM_ConfigClockSource>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000cc4:	f002 fa3e 	bl	8003144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_TIM3_Init+0x94>)
 8000cd6:	f008 f959 	bl	8008f8c <HAL_TIMEx_MasterConfigSynchronization>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000ce0:	f002 fa30 	bl	8003144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	3720      	adds	r7, #32
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	24000878 	.word	0x24000878
 8000cf0:	40000400 	.word	0x40000400

08000cf4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cfa:	f107 0310 	add.w	r3, r7, #16
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d12:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <MX_TIM4_Init+0x98>)
 8000d14:	4a1e      	ldr	r2, [pc, #120]	; (8000d90 <MX_TIM4_Init+0x9c>)
 8000d16:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1200 - 1;
 8000d18:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <MX_TIM4_Init+0x98>)
 8000d1a:	f240 42af 	movw	r2, #1199	; 0x4af
 8000d1e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d20:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <MX_TIM4_Init+0x98>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000 - 1;
 8000d26:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <MX_TIM4_Init+0x98>)
 8000d28:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d2c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2e:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <MX_TIM4_Init+0x98>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d34:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <MX_TIM4_Init+0x98>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d3a:	4814      	ldr	r0, [pc, #80]	; (8000d8c <MX_TIM4_Init+0x98>)
 8000d3c:	f007 fcea 	bl	8008714 <HAL_TIM_Base_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000d46:	f002 f9fd 	bl	8003144 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d50:	f107 0310 	add.w	r3, r7, #16
 8000d54:	4619      	mov	r1, r3
 8000d56:	480d      	ldr	r0, [pc, #52]	; (8000d8c <MX_TIM4_Init+0x98>)
 8000d58:	f007 fec4 	bl	8008ae4 <HAL_TIM_ConfigClockSource>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000d62:	f002 f9ef 	bl	8003144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	4619      	mov	r1, r3
 8000d72:	4806      	ldr	r0, [pc, #24]	; (8000d8c <MX_TIM4_Init+0x98>)
 8000d74:	f008 f90a 	bl	8008f8c <HAL_TIMEx_MasterConfigSynchronization>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000d7e:	f002 f9e1 	bl	8003144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d82:	bf00      	nop
 8000d84:	3720      	adds	r7, #32
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	24000338 	.word	0x24000338
 8000d90:	40000800 	.word	0x40000800

08000d94 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d98:	4b22      	ldr	r3, [pc, #136]	; (8000e24 <MX_USART3_UART_Init+0x90>)
 8000d9a:	4a23      	ldr	r2, [pc, #140]	; (8000e28 <MX_USART3_UART_Init+0x94>)
 8000d9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d9e:	4b21      	ldr	r3, [pc, #132]	; (8000e24 <MX_USART3_UART_Init+0x90>)
 8000da0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000da4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000da6:	4b1f      	ldr	r3, [pc, #124]	; (8000e24 <MX_USART3_UART_Init+0x90>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dac:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <MX_USART3_UART_Init+0x90>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000db2:	4b1c      	ldr	r3, [pc, #112]	; (8000e24 <MX_USART3_UART_Init+0x90>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000db8:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <MX_USART3_UART_Init+0x90>)
 8000dba:	220c      	movs	r2, #12
 8000dbc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dbe:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <MX_USART3_UART_Init+0x90>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc4:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <MX_USART3_UART_Init+0x90>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dca:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <MX_USART3_UART_Init+0x90>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dd0:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <MX_USART3_UART_Init+0x90>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dd6:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <MX_USART3_UART_Init+0x90>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ddc:	4811      	ldr	r0, [pc, #68]	; (8000e24 <MX_USART3_UART_Init+0x90>)
 8000dde:	f008 f97b 	bl	80090d8 <HAL_UART_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000de8:	f002 f9ac 	bl	8003144 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dec:	2100      	movs	r1, #0
 8000dee:	480d      	ldr	r0, [pc, #52]	; (8000e24 <MX_USART3_UART_Init+0x90>)
 8000df0:	f009 fa32 	bl	800a258 <HAL_UARTEx_SetTxFifoThreshold>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000dfa:	f002 f9a3 	bl	8003144 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4808      	ldr	r0, [pc, #32]	; (8000e24 <MX_USART3_UART_Init+0x90>)
 8000e02:	f009 fa67 	bl	800a2d4 <HAL_UARTEx_SetRxFifoThreshold>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e0c:	f002 f99a 	bl	8003144 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e10:	4804      	ldr	r0, [pc, #16]	; (8000e24 <MX_USART3_UART_Init+0x90>)
 8000e12:	f009 f9e8 	bl	800a1e6 <HAL_UARTEx_DisableFifoMode>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e1c:	f002 f992 	bl	8003144 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	24000390 	.word	0x24000390
 8000e28:	40004800 	.word	0x40004800

08000e2c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e30:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e32:	4a16      	ldr	r2, [pc, #88]	; (8000e8c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000e34:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000e36:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e38:	2209      	movs	r2, #9
 8000e3a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e3e:	2202      	movs	r2, #2
 8000e40:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e74:	f004 ffbd 	bl	8005df2 <HAL_PCD_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000e7e:	f002 f961 	bl	8003144 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	24000428 	.word	0x24000428
 8000e8c:	40080000 	.word	0x40080000

08000e90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08c      	sub	sp, #48	; 0x30
 8000e94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e96:	f107 031c 	add.w	r3, r7, #28
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
 8000ea4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea6:	4b61      	ldr	r3, [pc, #388]	; (800102c <MX_GPIO_Init+0x19c>)
 8000ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eac:	4a5f      	ldr	r2, [pc, #380]	; (800102c <MX_GPIO_Init+0x19c>)
 8000eae:	f043 0304 	orr.w	r3, r3, #4
 8000eb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eb6:	4b5d      	ldr	r3, [pc, #372]	; (800102c <MX_GPIO_Init+0x19c>)
 8000eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ebc:	f003 0304 	and.w	r3, r3, #4
 8000ec0:	61bb      	str	r3, [r7, #24]
 8000ec2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ec4:	4b59      	ldr	r3, [pc, #356]	; (800102c <MX_GPIO_Init+0x19c>)
 8000ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eca:	4a58      	ldr	r2, [pc, #352]	; (800102c <MX_GPIO_Init+0x19c>)
 8000ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ed0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed4:	4b55      	ldr	r3, [pc, #340]	; (800102c <MX_GPIO_Init+0x19c>)
 8000ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ede:	617b      	str	r3, [r7, #20]
 8000ee0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	4b52      	ldr	r3, [pc, #328]	; (800102c <MX_GPIO_Init+0x19c>)
 8000ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee8:	4a50      	ldr	r2, [pc, #320]	; (800102c <MX_GPIO_Init+0x19c>)
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef2:	4b4e      	ldr	r3, [pc, #312]	; (800102c <MX_GPIO_Init+0x19c>)
 8000ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f00:	4b4a      	ldr	r3, [pc, #296]	; (800102c <MX_GPIO_Init+0x19c>)
 8000f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f06:	4a49      	ldr	r2, [pc, #292]	; (800102c <MX_GPIO_Init+0x19c>)
 8000f08:	f043 0302 	orr.w	r3, r3, #2
 8000f0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f10:	4b46      	ldr	r3, [pc, #280]	; (800102c <MX_GPIO_Init+0x19c>)
 8000f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f1e:	4b43      	ldr	r3, [pc, #268]	; (800102c <MX_GPIO_Init+0x19c>)
 8000f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f24:	4a41      	ldr	r2, [pc, #260]	; (800102c <MX_GPIO_Init+0x19c>)
 8000f26:	f043 0308 	orr.w	r3, r3, #8
 8000f2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f2e:	4b3f      	ldr	r3, [pc, #252]	; (800102c <MX_GPIO_Init+0x19c>)
 8000f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f34:	f003 0308 	and.w	r3, r3, #8
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f3c:	4b3b      	ldr	r3, [pc, #236]	; (800102c <MX_GPIO_Init+0x19c>)
 8000f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f42:	4a3a      	ldr	r2, [pc, #232]	; (800102c <MX_GPIO_Init+0x19c>)
 8000f44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f4c:	4b37      	ldr	r3, [pc, #220]	; (800102c <MX_GPIO_Init+0x19c>)
 8000f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f5a:	4b34      	ldr	r3, [pc, #208]	; (800102c <MX_GPIO_Init+0x19c>)
 8000f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f60:	4a32      	ldr	r2, [pc, #200]	; (800102c <MX_GPIO_Init+0x19c>)
 8000f62:	f043 0310 	orr.w	r3, r3, #16
 8000f66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f6a:	4b30      	ldr	r3, [pc, #192]	; (800102c <MX_GPIO_Init+0x19c>)
 8000f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f70:	f003 0310 	and.w	r3, r3, #16
 8000f74:	603b      	str	r3, [r7, #0]
 8000f76:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f244 0101 	movw	r1, #16385	; 0x4001
 8000f7e:	482c      	ldr	r0, [pc, #176]	; (8001030 <MX_GPIO_Init+0x1a0>)
 8000f80:	f004 ff04 	bl	8005d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f8a:	482a      	ldr	r0, [pc, #168]	; (8001034 <MX_GPIO_Init+0x1a4>)
 8000f8c:	f004 fefe 	bl	8005d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2102      	movs	r1, #2
 8000f94:	4828      	ldr	r0, [pc, #160]	; (8001038 <MX_GPIO_Init+0x1a8>)
 8000f96:	f004 fef9 	bl	8005d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fa8:	f107 031c 	add.w	r3, r7, #28
 8000fac:	4619      	mov	r1, r3
 8000fae:	4823      	ldr	r0, [pc, #140]	; (800103c <MX_GPIO_Init+0x1ac>)
 8000fb0:	f004 fd3c 	bl	8005a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000fb4:	f244 0301 	movw	r3, #16385	; 0x4001
 8000fb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc6:	f107 031c 	add.w	r3, r7, #28
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4818      	ldr	r0, [pc, #96]	; (8001030 <MX_GPIO_Init+0x1a0>)
 8000fce:	f004 fd2d 	bl	8005a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000fd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000fe4:	f107 031c 	add.w	r3, r7, #28
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4812      	ldr	r0, [pc, #72]	; (8001034 <MX_GPIO_Init+0x1a4>)
 8000fec:	f004 fd1e 	bl	8005a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000ff0:	2380      	movs	r3, #128	; 0x80
 8000ff2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <MX_GPIO_Init+0x1b0>)
 8000ff6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	4619      	mov	r1, r3
 8001002:	4810      	ldr	r0, [pc, #64]	; (8001044 <MX_GPIO_Init+0x1b4>)
 8001004:	f004 fd12 	bl	8005a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001008:	2302      	movs	r3, #2
 800100a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100c:	2301      	movs	r3, #1
 800100e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	4619      	mov	r1, r3
 800101e:	4806      	ldr	r0, [pc, #24]	; (8001038 <MX_GPIO_Init+0x1a8>)
 8001020:	f004 fd04 	bl	8005a2c <HAL_GPIO_Init>

}
 8001024:	bf00      	nop
 8001026:	3730      	adds	r7, #48	; 0x30
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	58024400 	.word	0x58024400
 8001030:	58020400 	.word	0x58020400
 8001034:	58020c00 	.word	0x58020c00
 8001038:	58021000 	.word	0x58021000
 800103c:	58020800 	.word	0x58020800
 8001040:	11110000 	.word	0x11110000
 8001044:	58021800 	.word	0x58021800

08001048 <CAN_RxFilter_Config>:

/* USER CODE BEGIN 4 */
void CAN_RxFilter_Config(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  sFilterConfig.FilterIndex = 0;
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <CAN_RxFilter_Config+0x38>)
 800104e:	2200      	movs	r2, #0
 8001050:	605a      	str	r2, [r3, #4]
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8001052:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <CAN_RxFilter_Config+0x38>)
 8001054:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001058:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <CAN_RxFilter_Config+0x38>)
 800105c:	2202      	movs	r2, #2
 800105e:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0 ;
 8001060:	4b07      	ldr	r3, [pc, #28]	; (8001080 <CAN_RxFilter_Config+0x38>)
 8001062:	2201      	movs	r2, #1
 8001064:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterID1 = 0x00000000;
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <CAN_RxFilter_Config+0x38>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterID2 = 0x00000000;  // mask => allow id from 0x00000150 to 0x0000015F
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <CAN_RxFilter_Config+0x38>)
 800106e:	2200      	movs	r2, #0
 8001070:	615a      	str	r2, [r3, #20]

  HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
 8001072:	4903      	ldr	r1, [pc, #12]	; (8001080 <CAN_RxFilter_Config+0x38>)
 8001074:	4803      	ldr	r0, [pc, #12]	; (8001084 <CAN_RxFilter_Config+0x3c>)
 8001076:	f003 fce7 	bl	8004a48 <HAL_FDCAN_ConfigFilter>

  //HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);

}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	240002ec 	.word	0x240002ec
 8001084:	24000930 	.word	0x24000930

08001088 <CAN_TxHeader_Config>:

void CAN_TxHeader_Config(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
 pTxHeader.Identifier = 0x00000140;
 800108c:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <CAN_TxHeader_Config+0x4c>)
 800108e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001092:	601a      	str	r2, [r3, #0]
 pTxHeader.IdType = FDCAN_EXTENDED_ID;                // specifies extended id
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <CAN_TxHeader_Config+0x4c>)
 8001096:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800109a:	605a      	str	r2, [r3, #4]
 pTxHeader.TxFrameType = FDCAN_DATA_FRAME ;           // frame type
 800109c:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <CAN_TxHeader_Config+0x4c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
 pTxHeader.DataLength = FDCAN_DLC_BYTES_4;            // specifies frame length
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <CAN_TxHeader_Config+0x4c>)
 80010a4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80010a8:	60da      	str	r2, [r3, #12]
 pTxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80010aa:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <CAN_TxHeader_Config+0x4c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
 pTxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <CAN_TxHeader_Config+0x4c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	615a      	str	r2, [r3, #20]
 pTxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80010b6:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <CAN_TxHeader_Config+0x4c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
 pTxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <CAN_TxHeader_Config+0x4c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	61da      	str	r2, [r3, #28]
 pTxHeader.MessageMarker = 0;
 80010c2:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <CAN_TxHeader_Config+0x4c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	621a      	str	r2, [r3, #32]
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	24000854 	.word	0x24000854

080010d8 <HAL_FDCAN_RxFifo0Callback>:


void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]

	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d02d      	beq.n	8001148 <HAL_FDCAN_RxFifo0Callback+0x70>
	{
		if (HAL_FDCAN_GetRxMessage(&hfdcan1,FDCAN_RX_FIFO0, &pRxHeader, CAN_rx_buffer) == HAL_OK) {
 80010ec:	4b18      	ldr	r3, [pc, #96]	; (8001150 <HAL_FDCAN_RxFifo0Callback+0x78>)
 80010ee:	4a19      	ldr	r2, [pc, #100]	; (8001154 <HAL_FDCAN_RxFifo0Callback+0x7c>)
 80010f0:	2140      	movs	r1, #64	; 0x40
 80010f2:	4819      	ldr	r0, [pc, #100]	; (8001158 <HAL_FDCAN_RxFifo0Callback+0x80>)
 80010f4:	f003 fda4 	bl	8004c40 <HAL_FDCAN_GetRxMessage>
		}

	if((pRxHeader.Identifier == 0)) //feedback from motor (position, speed)
 80010f8:	4b16      	ldr	r3, [pc, #88]	; (8001154 <HAL_FDCAN_RxFifo0Callback+0x7c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d105      	bne.n	800110c <HAL_FDCAN_RxFifo0Callback+0x34>
		      {
		unpack_motor_FB();
 8001100:	f000 f866 	bl	80011d0 <unpack_motor_FB>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // yellow led
 8001104:	2102      	movs	r1, #2
 8001106:	4815      	ldr	r0, [pc, #84]	; (800115c <HAL_FDCAN_RxFifo0Callback+0x84>)
 8001108:	f004 fe59 	bl	8005dbe <HAL_GPIO_TogglePin>

		      }

	if((pRxHeader.Identifier == LINK_BOARD_FB_MSG_ID)) //feedback from link data board (bending estimate)
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <HAL_FDCAN_RxFifo0Callback+0x7c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b06      	cmp	r3, #6
 8001112:	d105      	bne.n	8001120 <HAL_FDCAN_RxFifo0Callback+0x48>
		      {
		unpack_link_FB();
 8001114:	f000 f8de 	bl	80012d4 <unpack_link_FB>
		HAL_GPIO_TogglePin(GPIOB, LD1_Pin); // green led
 8001118:	2101      	movs	r1, #1
 800111a:	4811      	ldr	r0, [pc, #68]	; (8001160 <HAL_FDCAN_RxFifo0Callback+0x88>)
 800111c:	f004 fe4f 	bl	8005dbe <HAL_GPIO_TogglePin>

		      }
	if((pRxHeader.Identifier == LINK_BOARD_STATUS_MSG_ID)) //status message with id 20 (DEC)
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <HAL_FDCAN_RxFifo0Callback+0x7c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b14      	cmp	r3, #20
 8001126:	d101      	bne.n	800112c <HAL_FDCAN_RxFifo0Callback+0x54>
		      {
		unpack_link_STATUS();
 8001128:	f000 f936 	bl	8001398 <unpack_link_STATUS>
		      }
	if((pRxHeader.Identifier == LINK_BOARD_CALIBRATION_CHECK_MSG_ID)) //status message with id 20 (DEC)
 800112c:	4b09      	ldr	r3, [pc, #36]	; (8001154 <HAL_FDCAN_RxFifo0Callback+0x7c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b28      	cmp	r3, #40	; 0x28
 8001132:	d101      	bne.n	8001138 <HAL_FDCAN_RxFifo0Callback+0x60>
		      {
		unpack_link_CAL_CHECK();
 8001134:	f000 f97c 	bl	8001430 <unpack_link_CAL_CHECK>
		      }
	if((pRxHeader.Identifier == 2305)) //status message from vesc
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_FDCAN_RxFifo0Callback+0x7c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f640 1201 	movw	r2, #2305	; 0x901
 8001140:	4293      	cmp	r3, r2
 8001142:	d101      	bne.n	8001148 <HAL_FDCAN_RxFifo0Callback+0x70>
		      {
		unpack_vesc_FB();
 8001144:	f000 f810 	bl	8001168 <unpack_vesc_FB>
		      }
	//    for(int i = 0; i < pRxHeader.DataLength; i++)
	//  printf("CAN_BUFF_RX[%d]: %d\n",i,CAN_rx_buffer[i]);

	}
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	24000330 	.word	0x24000330
 8001154:	2400682c 	.word	0x2400682c
 8001158:	24000930 	.word	0x24000930
 800115c:	58021000 	.word	0x58021000
 8001160:	58020400 	.word	0x58020400
 8001164:	00000000 	.word	0x00000000

08001168 <unpack_vesc_FB>:

void unpack_vesc_FB() {
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0

	  uint32_t rpm = ((CAN_rx_buffer[0] << 24) +(CAN_rx_buffer[1] << 16) + (CAN_rx_buffer[2] << 8) + CAN_rx_buffer[3])/14;
 800116e:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <unpack_vesc_FB+0x60>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	061a      	lsls	r2, r3, #24
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <unpack_vesc_FB+0x60>)
 8001176:	785b      	ldrb	r3, [r3, #1]
 8001178:	041b      	lsls	r3, r3, #16
 800117a:	441a      	add	r2, r3
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <unpack_vesc_FB+0x60>)
 800117e:	789b      	ldrb	r3, [r3, #2]
 8001180:	021b      	lsls	r3, r3, #8
 8001182:	4413      	add	r3, r2
 8001184:	4a10      	ldr	r2, [pc, #64]	; (80011c8 <unpack_vesc_FB+0x60>)
 8001186:	78d2      	ldrb	r2, [r2, #3]
 8001188:	4413      	add	r3, r2
 800118a:	4a10      	ldr	r2, [pc, #64]	; (80011cc <unpack_vesc_FB+0x64>)
 800118c:	fb82 1203 	smull	r1, r2, r2, r3
 8001190:	441a      	add	r2, r3
 8001192:	10d2      	asrs	r2, r2, #3
 8001194:	17db      	asrs	r3, r3, #31
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	607b      	str	r3, [r7, #4]

	  float mot1_speed = (float)(rpm/1120.0); //1120 = 14(pole-pair motor)*80 (gearbox reduction)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	ee07 3a90 	vmov	s15, r3
 80011a0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80011a4:	ed9f 5b06 	vldr	d5, [pc, #24]	; 80011c0 <unpack_vesc_FB+0x58>
 80011a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011ac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011b0:	edc7 7a00 	vstr	s15, [r7]

	  //printf("Speed : %f rad/s \n",mot1_speed*0.10472 );

	  //printf("rpm : %d \n",rpm);

}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	00000000 	.word	0x00000000
 80011c4:	40918000 	.word	0x40918000
 80011c8:	24000330 	.word	0x24000330
 80011cc:	92492493 	.word	0x92492493

080011d0 <unpack_motor_FB>:

void unpack_motor_FB() {
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
  //if it is the first time execution for each motor i must set the status flag

  int motor_id = CAN_rx_buffer[0];
 80011d6:	4b38      	ldr	r3, [pc, #224]	; (80012b8 <unpack_motor_FB+0xe8>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	60fb      	str	r3, [r7, #12]

  int pos_int = CAN_rx_buffer[1] << 8 | CAN_rx_buffer[2];
 80011dc:	4b36      	ldr	r3, [pc, #216]	; (80012b8 <unpack_motor_FB+0xe8>)
 80011de:	785b      	ldrb	r3, [r3, #1]
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	4a35      	ldr	r2, [pc, #212]	; (80012b8 <unpack_motor_FB+0xe8>)
 80011e4:	7892      	ldrb	r2, [r2, #2]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	60bb      	str	r3, [r7, #8]

  int vel_int = CAN_rx_buffer[3] << 4 | CAN_rx_buffer[4] >> 4;
 80011ea:	4b33      	ldr	r3, [pc, #204]	; (80012b8 <unpack_motor_FB+0xe8>)
 80011ec:	78db      	ldrb	r3, [r3, #3]
 80011ee:	011b      	lsls	r3, r3, #4
 80011f0:	4a31      	ldr	r2, [pc, #196]	; (80012b8 <unpack_motor_FB+0xe8>)
 80011f2:	7912      	ldrb	r2, [r2, #4]
 80011f4:	0912      	lsrs	r2, r2, #4
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	4313      	orrs	r3, r2
 80011fa:	607b      	str	r3, [r7, #4]

  int current_int = (CAN_rx_buffer[4] & 0xF) << 8 | CAN_rx_buffer[5];
 80011fc:	4b2e      	ldr	r3, [pc, #184]	; (80012b8 <unpack_motor_FB+0xe8>)
 80011fe:	791b      	ldrb	r3, [r3, #4]
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001206:	4a2c      	ldr	r2, [pc, #176]	; (80012b8 <unpack_motor_FB+0xe8>)
 8001208:	7952      	ldrb	r2, [r2, #5]
 800120a:	4313      	orrs	r3, r2
 800120c:	603b      	str	r3, [r7, #0]


  actualPos[motor_id -1] = uint_to_float(pos_int, -P_MAX, P_MAX, 16);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	1e5c      	subs	r4, r3, #1
 8001212:	2110      	movs	r1, #16
 8001214:	eef2 0a09 	vmov.f32	s1, #41	; 0x41480000  12.5
 8001218:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 800121c:	68b8      	ldr	r0, [r7, #8]
 800121e:	f001 ff17 	bl	8003050 <uint_to_float>
 8001222:	eef0 7a40 	vmov.f32	s15, s0
 8001226:	4a25      	ldr	r2, [pc, #148]	; (80012bc <unpack_motor_FB+0xec>)
 8001228:	00a3      	lsls	r3, r4, #2
 800122a:	4413      	add	r3, r2
 800122c:	edc3 7a00 	vstr	s15, [r3]

  actualSpeed[motor_id -1] = uint_to_float(vel_int, -V_MAX, V_MAX, 12);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	1e5c      	subs	r4, r3, #1
 8001234:	210c      	movs	r1, #12
 8001236:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800123a:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f001 ff06 	bl	8003050 <uint_to_float>
 8001244:	eef0 7a40 	vmov.f32	s15, s0
 8001248:	4a1d      	ldr	r2, [pc, #116]	; (80012c0 <unpack_motor_FB+0xf0>)
 800124a:	00a3      	lsls	r3, r4, #2
 800124c:	4413      	add	r3, r2
 800124e:	edc3 7a00 	vstr	s15, [r3]

  actualCurr[motor_id -1] = uint_to_float(current_int, -T_MAX , T_MAX, 12);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	1e5c      	subs	r4, r3, #1
 8001256:	210c      	movs	r1, #12
 8001258:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80012c4 <unpack_motor_FB+0xf4>
 800125c:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 80012c8 <unpack_motor_FB+0xf8>
 8001260:	6838      	ldr	r0, [r7, #0]
 8001262:	f001 fef5 	bl	8003050 <uint_to_float>
 8001266:	eef0 7a40 	vmov.f32	s15, s0
 800126a:	4a18      	ldr	r2, [pc, #96]	; (80012cc <unpack_motor_FB+0xfc>)
 800126c:	00a3      	lsls	r3, r4, #2
 800126e:	4413      	add	r3, r2
 8001270:	edc3 7a00 	vstr	s15, [r3]


  if(motor_id == MOTOR1 && motor_status_flag[0] == 0)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d106      	bne.n	8001288 <unpack_motor_FB+0xb8>
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <unpack_motor_FB+0x100>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d102      	bne.n	8001288 <unpack_motor_FB+0xb8>
	  motor_status_flag[0] = 1;
 8001282:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <unpack_motor_FB+0x100>)
 8001284:	2201      	movs	r2, #1
 8001286:	601a      	str	r2, [r3, #0]

  if(motor_id == MOTOR2 && motor_status_flag[1] == 0)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2b02      	cmp	r3, #2
 800128c:	d106      	bne.n	800129c <unpack_motor_FB+0xcc>
 800128e:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <unpack_motor_FB+0x100>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d102      	bne.n	800129c <unpack_motor_FB+0xcc>
	  motor_status_flag[1] = 1;
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <unpack_motor_FB+0x100>)
 8001298:	2201      	movs	r2, #1
 800129a:	605a      	str	r2, [r3, #4]

  if(motor_id == MOTOR3 && motor_status_flag[2] == 0)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2b03      	cmp	r3, #3
 80012a0:	d106      	bne.n	80012b0 <unpack_motor_FB+0xe0>
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <unpack_motor_FB+0x100>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d102      	bne.n	80012b0 <unpack_motor_FB+0xe0>
	  motor_status_flag[2] = 1;
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <unpack_motor_FB+0x100>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	609a      	str	r2, [r3, #8]


  if (MOTOR_FB_DEBUG) {
    printf("CAN_ID: %2d - Pos[rad]: %8f - Vel[rad/s]: %10f - Torque[Nm]: %8f \n",motor_id,actualPos[motor_id],actualSpeed[motor_id],actualCurr[motor_id]);
  	  }
}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd90      	pop	{r4, r7, pc}
 80012b8:	24000330 	.word	0x24000330
 80012bc:	240067cc 	.word	0x240067cc
 80012c0:	240067b4 	.word	0x240067b4
 80012c4:	42400000 	.word	0x42400000
 80012c8:	c2400000 	.word	0xc2400000
 80012cc:	240009d0 	.word	0x240009d0
 80012d0:	24000318 	.word	0x24000318

080012d4 <unpack_link_FB>:

void unpack_link_FB() {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af02      	add	r7, sp, #8

  int link_id = CAN_rx_buffer[0];
 80012da:	4b27      	ldr	r3, [pc, #156]	; (8001378 <unpack_link_FB+0xa4>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	60fb      	str	r3, [r7, #12]

  int bend_horiz_int = CAN_rx_buffer[1] << 8 | CAN_rx_buffer[2]; //16 bit
 80012e0:	4b25      	ldr	r3, [pc, #148]	; (8001378 <unpack_link_FB+0xa4>)
 80012e2:	785b      	ldrb	r3, [r3, #1]
 80012e4:	021b      	lsls	r3, r3, #8
 80012e6:	4a24      	ldr	r2, [pc, #144]	; (8001378 <unpack_link_FB+0xa4>)
 80012e8:	7892      	ldrb	r2, [r2, #2]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	60bb      	str	r3, [r7, #8]

  int bend_vert_int = CAN_rx_buffer[3] << 8 | CAN_rx_buffer[4];
 80012ee:	4b22      	ldr	r3, [pc, #136]	; (8001378 <unpack_link_FB+0xa4>)
 80012f0:	78db      	ldrb	r3, [r3, #3]
 80012f2:	021b      	lsls	r3, r3, #8
 80012f4:	4a20      	ldr	r2, [pc, #128]	; (8001378 <unpack_link_FB+0xa4>)
 80012f6:	7912      	ldrb	r2, [r2, #4]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	607b      	str	r3, [r7, #4]

actual_horiz_bend = uint_to_float(bend_horiz_int, -90, 90, 16);
 80012fc:	2110      	movs	r1, #16
 80012fe:	eddf 0a1f 	vldr	s1, [pc, #124]	; 800137c <unpack_link_FB+0xa8>
 8001302:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8001380 <unpack_link_FB+0xac>
 8001306:	68b8      	ldr	r0, [r7, #8]
 8001308:	f001 fea2 	bl	8003050 <uint_to_float>
 800130c:	eef0 7a40 	vmov.f32	s15, s0
 8001310:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <unpack_link_FB+0xb0>)
 8001312:	edc3 7a00 	vstr	s15, [r3]

actual_vert_bend =  uint_to_float(bend_vert_int, -90, 90, 16);
 8001316:	2110      	movs	r1, #16
 8001318:	eddf 0a18 	vldr	s1, [pc, #96]	; 800137c <unpack_link_FB+0xa8>
 800131c:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8001380 <unpack_link_FB+0xac>
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f001 fe95 	bl	8003050 <uint_to_float>
 8001326:	eef0 7a40 	vmov.f32	s15, s0
 800132a:	4b17      	ldr	r3, [pc, #92]	; (8001388 <unpack_link_FB+0xb4>)
 800132c:	edc3 7a00 	vstr	s15, [r3]

link_status_flag[link_id - 10] = CAN_rx_buffer[5]; //
 8001330:	4b11      	ldr	r3, [pc, #68]	; (8001378 <unpack_link_FB+0xa4>)
 8001332:	795a      	ldrb	r2, [r3, #5]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	3b0a      	subs	r3, #10
 8001338:	4611      	mov	r1, r2
 800133a:	4a14      	ldr	r2, [pc, #80]	; (800138c <unpack_link_FB+0xb8>)
 800133c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

  if (LINK_FB_DEBUG) {
 8001340:	4b13      	ldr	r3, [pc, #76]	; (8001390 <unpack_link_FB+0xbc>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d013      	beq.n	8001370 <unpack_link_FB+0x9c>
    printf("%2.1f\n",link_id - 9,actual_horiz_bend,actual_vert_bend);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f1a3 0109 	sub.w	r1, r3, #9
 800134e:	4b0d      	ldr	r3, [pc, #52]	; (8001384 <unpack_link_FB+0xb0>)
 8001350:	edd3 7a00 	vldr	s15, [r3]
 8001354:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001358:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <unpack_link_FB+0xb4>)
 800135a:	edd3 7a00 	vldr	s15, [r3]
 800135e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001362:	ed8d 7b00 	vstr	d7, [sp]
 8001366:	ec53 2b16 	vmov	r2, r3, d6
 800136a:	480a      	ldr	r0, [pc, #40]	; (8001394 <unpack_link_FB+0xc0>)
 800136c:	f009 ff7e 	bl	800b26c <iprintf>

  }
}
 8001370:	bf00      	nop
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	24000330 	.word	0x24000330
 800137c:	42b40000 	.word	0x42b40000
 8001380:	c2b40000 	.word	0xc2b40000
 8001384:	240002d0 	.word	0x240002d0
 8001388:	240002d4 	.word	0x240002d4
 800138c:	24006854 	.word	0x24006854
 8001390:	240002c0 	.word	0x240002c0
 8001394:	0800e188 	.word	0x0800e188

08001398 <unpack_link_STATUS>:

void unpack_link_STATUS() {
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	; 0x28
 800139c:	af04      	add	r7, sp, #16

	  int link_id = CAN_rx_buffer[0];
 800139e:	4b1f      	ldr	r3, [pc, #124]	; (800141c <unpack_link_STATUS+0x84>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	617b      	str	r3, [r7, #20]

	  int imu_status = CAN_rx_buffer[1];
 80013a4:	4b1d      	ldr	r3, [pc, #116]	; (800141c <unpack_link_STATUS+0x84>)
 80013a6:	785b      	ldrb	r3, [r3, #1]
 80013a8:	613b      	str	r3, [r7, #16]

	  int adc_status = CAN_rx_buffer[2];
 80013aa:	4b1c      	ldr	r3, [pc, #112]	; (800141c <unpack_link_STATUS+0x84>)
 80013ac:	789b      	ldrb	r3, [r3, #2]
 80013ae:	60fb      	str	r3, [r7, #12]

	  int pressure_int = CAN_rx_buffer[3] << 8 | CAN_rx_buffer[4];
 80013b0:	4b1a      	ldr	r3, [pc, #104]	; (800141c <unpack_link_STATUS+0x84>)
 80013b2:	78db      	ldrb	r3, [r3, #3]
 80013b4:	021b      	lsls	r3, r3, #8
 80013b6:	4a19      	ldr	r2, [pc, #100]	; (800141c <unpack_link_STATUS+0x84>)
 80013b8:	7912      	ldrb	r2, [r2, #4]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	60bb      	str	r3, [r7, #8]

	  float pressure =  uint_to_float(pressure_int, 0, 2, 16);
 80013be:	2110      	movs	r1, #16
 80013c0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80013c4:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8001420 <unpack_link_STATUS+0x88>
 80013c8:	68b8      	ldr	r0, [r7, #8]
 80013ca:	f001 fe41 	bl	8003050 <uint_to_float>
 80013ce:	ed87 0a01 	vstr	s0, [r7, #4]

	link_status_flag[link_id - 10] = imu_status*adc_status; //
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	3b0a      	subs	r3, #10
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	68f9      	ldr	r1, [r7, #12]
 80013da:	fb01 f202 	mul.w	r2, r1, r2
 80013de:	4911      	ldr	r1, [pc, #68]	; (8001424 <unpack_link_STATUS+0x8c>)
 80013e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	  if (LINK_FB_DEBUG) {
 80013e4:	4b10      	ldr	r3, [pc, #64]	; (8001428 <unpack_link_STATUS+0x90>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d013      	beq.n	8001414 <unpack_link_STATUS+0x7c>
	    printf("LINK_ID: %d - Link Pressure: %1.2f - IMU_Status: %d - ADC_Status: %d - System Status: &d \n",link_id,pressure,imu_status,adc_status,link_status_flag[link_id - 10]);
 80013ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80013f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	3b0a      	subs	r3, #10
 80013f8:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <unpack_link_STATUS+0x8c>)
 80013fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fe:	9302      	str	r3, [sp, #8]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	9301      	str	r3, [sp, #4]
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	ec53 2b17 	vmov	r2, r3, d7
 800140c:	6979      	ldr	r1, [r7, #20]
 800140e:	4807      	ldr	r0, [pc, #28]	; (800142c <unpack_link_STATUS+0x94>)
 8001410:	f009 ff2c 	bl	800b26c <iprintf>
	  }

}
 8001414:	bf00      	nop
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	24000330 	.word	0x24000330
 8001420:	00000000 	.word	0x00000000
 8001424:	24006854 	.word	0x24006854
 8001428:	240002c0 	.word	0x240002c0
 800142c:	0800e190 	.word	0x0800e190

08001430 <unpack_link_CAL_CHECK>:

void unpack_link_CAL_CHECK() {
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0


	  int link_id = CAN_rx_buffer[0];
 8001436:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <unpack_link_CAL_CHECK+0x44>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	607b      	str	r3, [r7, #4]

	  int cal_check = CAN_rx_buffer[1];
 800143c:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <unpack_link_CAL_CHECK+0x44>)
 800143e:	785b      	ldrb	r3, [r3, #1]
 8001440:	603b      	str	r3, [r7, #0]

	link_cal_check[link_id - 10] = cal_check; //
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	3b0a      	subs	r3, #10
 8001446:	490c      	ldr	r1, [pc, #48]	; (8001478 <unpack_link_CAL_CHECK+0x48>)
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	  if (LINK_FB_DEBUG) {
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <unpack_link_CAL_CHECK+0x4c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d009      	beq.n	800146a <unpack_link_CAL_CHECK+0x3a>
	    printf("LINK_ID: %d - Calibration Status: &d \n",link_id,link_cal_check[link_id - 10]);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	3b0a      	subs	r3, #10
 800145a:	4a07      	ldr	r2, [pc, #28]	; (8001478 <unpack_link_CAL_CHECK+0x48>)
 800145c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001460:	461a      	mov	r2, r3
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	4806      	ldr	r0, [pc, #24]	; (8001480 <unpack_link_CAL_CHECK+0x50>)
 8001466:	f009 ff01 	bl	800b26c <iprintf>
	  }

}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	24000330 	.word	0x24000330
 8001478:	24006824 	.word	0x24006824
 800147c:	240002c0 	.word	0x240002c0
 8001480:	0800e1ec 	.word	0x0800e1ec

08001484 <CAN_TX_link_board_status_check>:

void CAN_TX_link_board_status_check(int id) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	     pTxHeader.Identifier = 0x30;							  //status check message id
 800148c:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <CAN_TX_link_board_status_check+0x44>)
 800148e:	2230      	movs	r2, #48	; 0x30
 8001490:	601a      	str	r2, [r3, #0]
		 pTxHeader.IdType = FDCAN_STANDARD_ID;                // specifies extended id
 8001492:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <CAN_TX_link_board_status_check+0x44>)
 8001494:	2200      	movs	r2, #0
 8001496:	605a      	str	r2, [r3, #4]
		 pTxHeader.TxFrameType = FDCAN_DATA_FRAME ;           // frame type
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <CAN_TX_link_board_status_check+0x44>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
		 pTxHeader.DataLength = FDCAN_DLC_BYTES_2;
 800149e:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <CAN_TX_link_board_status_check+0x44>)
 80014a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014a4:	60da      	str	r2, [r3, #12]

		 CAN_tx_buffer[0] = id;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <CAN_TX_link_board_status_check+0x48>)
 80014ac:	701a      	strb	r2, [r3, #0]
		 CAN_tx_buffer[1] = 1;
 80014ae:	4b07      	ldr	r3, [pc, #28]	; (80014cc <CAN_TX_link_board_status_check+0x48>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	705a      	strb	r2, [r3, #1]

 		  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &pTxHeader, CAN_tx_buffer) == HAL_OK) {
 80014b4:	4a05      	ldr	r2, [pc, #20]	; (80014cc <CAN_TX_link_board_status_check+0x48>)
 80014b6:	4904      	ldr	r1, [pc, #16]	; (80014c8 <CAN_TX_link_board_status_check+0x44>)
 80014b8:	4805      	ldr	r0, [pc, #20]	; (80014d0 <CAN_TX_link_board_status_check+0x4c>)
 80014ba:	f003 fb66 	bl	8004b8a <HAL_FDCAN_AddMessageToTxFifoQ>
 			  //HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 		  }

}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	24000854 	.word	0x24000854
 80014cc:	24000420 	.word	0x24000420
 80014d0:	24000930 	.word	0x24000930

080014d4 <CAN_TX_link_board_calibration>:

void CAN_TX_link_board_calibration(int id) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	     pTxHeader.Identifier = 0x32;							  //status check message id
 80014dc:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <CAN_TX_link_board_calibration+0x44>)
 80014de:	2232      	movs	r2, #50	; 0x32
 80014e0:	601a      	str	r2, [r3, #0]
		 pTxHeader.IdType = FDCAN_STANDARD_ID;                // specifies extended id
 80014e2:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <CAN_TX_link_board_calibration+0x44>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	605a      	str	r2, [r3, #4]
		 pTxHeader.TxFrameType = FDCAN_DATA_FRAME ;           // frame type
 80014e8:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <CAN_TX_link_board_calibration+0x44>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
		 pTxHeader.DataLength = FDCAN_DLC_BYTES_2;
 80014ee:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <CAN_TX_link_board_calibration+0x44>)
 80014f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014f4:	60da      	str	r2, [r3, #12]

		 CAN_tx_buffer[0] = id;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <CAN_TX_link_board_calibration+0x48>)
 80014fc:	701a      	strb	r2, [r3, #0]
		 CAN_tx_buffer[1] = 1;
 80014fe:	4b07      	ldr	r3, [pc, #28]	; (800151c <CAN_TX_link_board_calibration+0x48>)
 8001500:	2201      	movs	r2, #1
 8001502:	705a      	strb	r2, [r3, #1]

 		  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &pTxHeader, CAN_tx_buffer) == HAL_OK) {
 8001504:	4a05      	ldr	r2, [pc, #20]	; (800151c <CAN_TX_link_board_calibration+0x48>)
 8001506:	4904      	ldr	r1, [pc, #16]	; (8001518 <CAN_TX_link_board_calibration+0x44>)
 8001508:	4805      	ldr	r0, [pc, #20]	; (8001520 <CAN_TX_link_board_calibration+0x4c>)
 800150a:	f003 fb3e 	bl	8004b8a <HAL_FDCAN_AddMessageToTxFifoQ>
 			  //HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 		  }

}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	24000854 	.word	0x24000854
 800151c:	24000420 	.word	0x24000420
 8001520:	24000930 	.word	0x24000930
 8001524:	00000000 	.word	0x00000000

08001528 <CAN_TX_vesc_speed>:

void CAN_TX_vesc_speed(float speed) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	ed87 0a01 	vstr	s0, [r7, #4]
	//vesc id is 1

	float s = speed;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	60fb      	str	r3, [r7, #12]

	 pTxHeader.IdType = FDCAN_EXTENDED_ID;                // specifies extended id
 8001536:	4b24      	ldr	r3, [pc, #144]	; (80015c8 <CAN_TX_vesc_speed+0xa0>)
 8001538:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800153c:	605a      	str	r2, [r3, #4]

    pTxHeader.Identifier = 0x00000301;
 800153e:	4b22      	ldr	r3, [pc, #136]	; (80015c8 <CAN_TX_vesc_speed+0xa0>)
 8001540:	f240 3201 	movw	r2, #769	; 0x301
 8001544:	601a      	str	r2, [r3, #0]
    //status check message id
	 pTxHeader.TxFrameType = FDCAN_DATA_FRAME ;           // frame type
 8001546:	4b20      	ldr	r3, [pc, #128]	; (80015c8 <CAN_TX_vesc_speed+0xa0>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
	 pTxHeader.DataLength = FDCAN_DLC_BYTES_4;
 800154c:	4b1e      	ldr	r3, [pc, #120]	; (80015c8 <CAN_TX_vesc_speed+0xa0>)
 800154e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001552:	60da      	str	r2, [r3, #12]

	 //take speed argument (rad/s)
	 //convert to ERPM
	 int erpm =(int)((s*9.5463*21.0*80.0)); //(rad/s)*(RPM_con)*(pole-pair)*(reduction);
 8001554:	edd7 7a03 	vldr	s15, [r7, #12]
 8001558:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800155c:	ed9f 6b16 	vldr	d6, [pc, #88]	; 80015b8 <CAN_TX_vesc_speed+0x90>
 8001560:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001564:	eeb3 6b05 	vmov.f64	d6, #53	; 0x41a80000  21.0
 8001568:	ee27 7b06 	vmul.f64	d7, d7, d6
 800156c:	ed9f 6b14 	vldr	d6, [pc, #80]	; 80015c0 <CAN_TX_vesc_speed+0x98>
 8001570:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001574:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001578:	ee17 3a90 	vmov	r3, s15
 800157c:	60bb      	str	r3, [r7, #8]


		 CAN_tx_buffer[0] = erpm >> 24;
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	161b      	asrs	r3, r3, #24
 8001582:	b2da      	uxtb	r2, r3
 8001584:	4b11      	ldr	r3, [pc, #68]	; (80015cc <CAN_TX_vesc_speed+0xa4>)
 8001586:	701a      	strb	r2, [r3, #0]
		 CAN_tx_buffer[1] = erpm >> 16;
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	141b      	asrs	r3, r3, #16
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <CAN_TX_vesc_speed+0xa4>)
 8001590:	705a      	strb	r2, [r3, #1]
		 CAN_tx_buffer[2] = erpm >> 8;
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	121b      	asrs	r3, r3, #8
 8001596:	b2da      	uxtb	r2, r3
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <CAN_TX_vesc_speed+0xa4>)
 800159a:	709a      	strb	r2, [r3, #2]
		 CAN_tx_buffer[3] = erpm;
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <CAN_TX_vesc_speed+0xa4>)
 80015a2:	70da      	strb	r2, [r3, #3]


	 if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &pTxHeader, CAN_tx_buffer) == HAL_OK) {
 80015a4:	4a09      	ldr	r2, [pc, #36]	; (80015cc <CAN_TX_vesc_speed+0xa4>)
 80015a6:	4908      	ldr	r1, [pc, #32]	; (80015c8 <CAN_TX_vesc_speed+0xa0>)
 80015a8:	4809      	ldr	r0, [pc, #36]	; (80015d0 <CAN_TX_vesc_speed+0xa8>)
 80015aa:	f003 faee 	bl	8004b8a <HAL_FDCAN_AddMessageToTxFifoQ>
		  //HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
	  }
}
 80015ae:	bf00      	nop
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	a2339c0f 	.word	0xa2339c0f
 80015bc:	402317b4 	.word	0x402317b4
 80015c0:	00000000 	.word	0x00000000
 80015c4:	40540000 	.word	0x40540000
 80015c8:	24000854 	.word	0x24000854
 80015cc:	24000420 	.word	0x24000420
 80015d0:	24000930 	.word	0x24000930

080015d4 <ActivateMotor>:

void ActivateMotor(int id) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]

	pTxHeader.Identifier = id;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a16      	ldr	r2, [pc, #88]	; (8001638 <ActivateMotor+0x64>)
 80015e0:	6013      	str	r3, [r2, #0]
	pTxHeader.IdType = FDCAN_STANDARD_ID;                // specifies extended id
 80015e2:	4b15      	ldr	r3, [pc, #84]	; (8001638 <ActivateMotor+0x64>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	605a      	str	r2, [r3, #4]
	 pTxHeader.TxFrameType = FDCAN_DATA_FRAME ;           // frame type
 80015e8:	4b13      	ldr	r3, [pc, #76]	; (8001638 <ActivateMotor+0x64>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
	 pTxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80015ee:	4b12      	ldr	r3, [pc, #72]	; (8001638 <ActivateMotor+0x64>)
 80015f0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80015f4:	60da      	str	r2, [r3, #12]

		  		CAN_tx_buffer[0] = 0XFF;
 80015f6:	4b11      	ldr	r3, [pc, #68]	; (800163c <ActivateMotor+0x68>)
 80015f8:	22ff      	movs	r2, #255	; 0xff
 80015fa:	701a      	strb	r2, [r3, #0]
		  		CAN_tx_buffer[1] = 0XFF;
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <ActivateMotor+0x68>)
 80015fe:	22ff      	movs	r2, #255	; 0xff
 8001600:	705a      	strb	r2, [r3, #1]
		  		CAN_tx_buffer[2] = 0XFF;
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <ActivateMotor+0x68>)
 8001604:	22ff      	movs	r2, #255	; 0xff
 8001606:	709a      	strb	r2, [r3, #2]
		  		CAN_tx_buffer[3] = 0XFF;
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <ActivateMotor+0x68>)
 800160a:	22ff      	movs	r2, #255	; 0xff
 800160c:	70da      	strb	r2, [r3, #3]
		  		CAN_tx_buffer[4] = 0XFF;
 800160e:	4b0b      	ldr	r3, [pc, #44]	; (800163c <ActivateMotor+0x68>)
 8001610:	22ff      	movs	r2, #255	; 0xff
 8001612:	711a      	strb	r2, [r3, #4]
		  		CAN_tx_buffer[5] = 0XFF;
 8001614:	4b09      	ldr	r3, [pc, #36]	; (800163c <ActivateMotor+0x68>)
 8001616:	22ff      	movs	r2, #255	; 0xff
 8001618:	715a      	strb	r2, [r3, #5]
		  		CAN_tx_buffer[6] = 0XFF;
 800161a:	4b08      	ldr	r3, [pc, #32]	; (800163c <ActivateMotor+0x68>)
 800161c:	22ff      	movs	r2, #255	; 0xff
 800161e:	719a      	strb	r2, [r3, #6]
		  		CAN_tx_buffer[7] = 0XFC;
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <ActivateMotor+0x68>)
 8001622:	22fc      	movs	r2, #252	; 0xfc
 8001624:	71da      	strb	r2, [r3, #7]

		  		  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &pTxHeader, CAN_tx_buffer) == HAL_OK) {
 8001626:	4a05      	ldr	r2, [pc, #20]	; (800163c <ActivateMotor+0x68>)
 8001628:	4903      	ldr	r1, [pc, #12]	; (8001638 <ActivateMotor+0x64>)
 800162a:	4805      	ldr	r0, [pc, #20]	; (8001640 <ActivateMotor+0x6c>)
 800162c:	f003 faad 	bl	8004b8a <HAL_FDCAN_AddMessageToTxFifoQ>
		  			  //HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
		  			 // printf("Motor %lu Activated \n",pTxHeader.Identifier);
		  		  }
}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	24000854 	.word	0x24000854
 800163c:	24000420 	.word	0x24000420
 8001640:	24000930 	.word	0x24000930

08001644 <SendTorque>:
		  			  //printf("Motor %lu Activated \n",pTxHeader.Identifier);
		  		  }
}


void SendTorque(int id, float u) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b08c      	sub	sp, #48	; 0x30
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	ed87 0a00 	vstr	s0, [r7]

	  float p_des = 0;
 8001650:	f04f 0300 	mov.w	r3, #0
 8001654:	62fb      	str	r3, [r7, #44]	; 0x2c
	  float v_des = 0;
 8001656:	f04f 0300 	mov.w	r3, #0
 800165a:	62bb      	str	r3, [r7, #40]	; 0x28
	  float t_ff = u; //Consigliato copiare la variabile in una variabile locale
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	627b      	str	r3, [r7, #36]	; 0x24

	  float KP = 0;
 8001660:	f04f 0300 	mov.w	r3, #0
 8001664:	623b      	str	r3, [r7, #32]
	  float KD = 0;
 8001666:	f04f 0300 	mov.w	r3, #0
 800166a:	61fb      	str	r3, [r7, #28]

	  // Il motore vuole la posizione in 16 bit e la velocità in 12 bit
	  int p_int = float_to_uint(p_des, -P_MAX, P_MAX, 16);
 800166c:	2010      	movs	r0, #16
 800166e:	eeb2 1a09 	vmov.f32	s2, #41	; 0x41480000  12.5
 8001672:	eefa 0a09 	vmov.f32	s1, #169	; 0xc1480000 -12.5
 8001676:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 800167a:	f001 fd1b 	bl	80030b4 <float_to_uint>
 800167e:	61b8      	str	r0, [r7, #24]
	  int v_int = float_to_uint(v_des, -V_MAX, V_MAX, 12);
 8001680:	200c      	movs	r0, #12
 8001682:	eeb1 1a08 	vmov.f32	s2, #24	; 0x40c00000  6.0
 8001686:	eef9 0a08 	vmov.f32	s1, #152	; 0xc0c00000 -6.0
 800168a:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 800168e:	f001 fd11 	bl	80030b4 <float_to_uint>
 8001692:	6178      	str	r0, [r7, #20]

	  int kp_int = float_to_uint(KP, 0, Kp_MAX, 12);
 8001694:	200c      	movs	r0, #12
 8001696:	ed9f 1a32 	vldr	s2, [pc, #200]	; 8001760 <SendTorque+0x11c>
 800169a:	eddf 0a32 	vldr	s1, [pc, #200]	; 8001764 <SendTorque+0x120>
 800169e:	ed97 0a08 	vldr	s0, [r7, #32]
 80016a2:	f001 fd07 	bl	80030b4 <float_to_uint>
 80016a6:	6138      	str	r0, [r7, #16]
	  int kd_int = float_to_uint(KD, 0, Kd_MAX, 12);
 80016a8:	200c      	movs	r0, #12
 80016aa:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 8001768 <SendTorque+0x124>
 80016ae:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8001764 <SendTorque+0x120>
 80016b2:	ed97 0a07 	vldr	s0, [r7, #28]
 80016b6:	f001 fcfd 	bl	80030b4 <float_to_uint>
 80016ba:	60f8      	str	r0, [r7, #12]

	  int t_int = float_to_uint(t_ff, -T_MAX, T_MAX, 12);
 80016bc:	200c      	movs	r0, #12
 80016be:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 800176c <SendTorque+0x128>
 80016c2:	eddf 0a2b 	vldr	s1, [pc, #172]	; 8001770 <SendTorque+0x12c>
 80016c6:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80016ca:	f001 fcf3 	bl	80030b4 <float_to_uint>
 80016ce:	60b8      	str	r0, [r7, #8]

	  pTxHeader.Identifier = id;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a28      	ldr	r2, [pc, #160]	; (8001774 <SendTorque+0x130>)
 80016d4:	6013      	str	r3, [r2, #0]
	  // Usa il tasto declaration per controllare le varie possibilità
	  pTxHeader.IdType = FDCAN_STANDARD_ID;                // specifies id, usiamo un ID standard
 80016d6:	4b27      	ldr	r3, [pc, #156]	; (8001774 <SendTorque+0x130>)
 80016d8:	2200      	movs	r2, #0
 80016da:	605a      	str	r2, [r3, #4]
	  pTxHeader.TxFrameType = FDCAN_DATA_FRAME ;           // frame type
 80016dc:	4b25      	ldr	r3, [pc, #148]	; (8001774 <SendTorque+0x130>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
	  pTxHeader.DataLength = FDCAN_DLC_BYTES_8;            // 8 byte
 80016e2:	4b24      	ldr	r3, [pc, #144]	; (8001774 <SendTorque+0x130>)
 80016e4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80016e8:	60da      	str	r2, [r3, #12]

	  CAN_tx_buffer[0] = p_int >> 8; //pos 8H
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	121b      	asrs	r3, r3, #8
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	4b21      	ldr	r3, [pc, #132]	; (8001778 <SendTorque+0x134>)
 80016f2:	701a      	strb	r2, [r3, #0]
	  CAN_tx_buffer[1] = p_int & 0xFF; //pos 8L FF sono tutti elementi pari a 1
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <SendTorque+0x134>)
 80016fa:	705a      	strb	r2, [r3, #1]
// Maschera
// Vedi datasheet motore
	  CAN_tx_buffer[2] = v_int >> 4; // speed 8H
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	111b      	asrs	r3, r3, #4
 8001700:	b2da      	uxtb	r2, r3
 8001702:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <SendTorque+0x134>)
 8001704:	709a      	strb	r2, [r3, #2]
	  CAN_tx_buffer[3] = ((v_int & 0xF) << 4) | (kp_int >> 8) ; //speed 4L KP 8H
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	011b      	lsls	r3, r3, #4
 800170a:	b25a      	sxtb	r2, r3
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	121b      	asrs	r3, r3, #8
 8001710:	b25b      	sxtb	r3, r3
 8001712:	4313      	orrs	r3, r2
 8001714:	b25b      	sxtb	r3, r3
 8001716:	b2da      	uxtb	r2, r3
 8001718:	4b17      	ldr	r3, [pc, #92]	; (8001778 <SendTorque+0x134>)
 800171a:	70da      	strb	r2, [r3, #3]

	  CAN_tx_buffer[4] = kp_int & 0xFF; // KP 8L
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	b2da      	uxtb	r2, r3
 8001720:	4b15      	ldr	r3, [pc, #84]	; (8001778 <SendTorque+0x134>)
 8001722:	711a      	strb	r2, [r3, #4]

	  CAN_tx_buffer[5] = kd_int >> 4; // kd 8H
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	111b      	asrs	r3, r3, #4
 8001728:	b2da      	uxtb	r2, r3
 800172a:	4b13      	ldr	r3, [pc, #76]	; (8001778 <SendTorque+0x134>)
 800172c:	715a      	strb	r2, [r3, #5]

	  CAN_tx_buffer[6] = ((kd_int & 0xF) << 4) | (t_int >> 8) ;   // KP 4L  Torque $H
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	011b      	lsls	r3, r3, #4
 8001732:	b25a      	sxtb	r2, r3
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	121b      	asrs	r3, r3, #8
 8001738:	b25b      	sxtb	r3, r3
 800173a:	4313      	orrs	r3, r2
 800173c:	b25b      	sxtb	r3, r3
 800173e:	b2da      	uxtb	r2, r3
 8001740:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <SendTorque+0x134>)
 8001742:	719a      	strb	r2, [r3, #6]

	  CAN_tx_buffer[7] = t_int & 0xFF; // torque 8L
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	b2da      	uxtb	r2, r3
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <SendTorque+0x134>)
 800174a:	71da      	strb	r2, [r3, #7]


	  // La & mi serve per puntare all'indirizzo di memoria
	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &pTxHeader, CAN_tx_buffer) == HAL_OK) {
 800174c:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <SendTorque+0x134>)
 800174e:	4909      	ldr	r1, [pc, #36]	; (8001774 <SendTorque+0x130>)
 8001750:	480a      	ldr	r0, [pc, #40]	; (800177c <SendTorque+0x138>)
 8001752:	f003 fa1a 	bl	8004b8a <HAL_FDCAN_AddMessageToTxFifoQ>

		  }
	  //else
	  //printf("Error sending command to Motor %d\n",id);
}
 8001756:	bf00      	nop
 8001758:	3730      	adds	r7, #48	; 0x30
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	43fa0000 	.word	0x43fa0000
 8001764:	00000000 	.word	0x00000000
 8001768:	447a0000 	.word	0x447a0000
 800176c:	42400000 	.word	0x42400000
 8001770:	c2400000 	.word	0xc2400000
 8001774:	24000854 	.word	0x24000854
 8001778:	24000420 	.word	0x24000420
 800177c:	24000930 	.word	0x24000930

08001780 <InverseKinematic>:

void InverseKinematic(float EE_target[3], int Mode)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b090      	sub	sp, #64	; 0x40
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]

  //LOCAL VARIABLE
  float X = EE_target[0];
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	63fb      	str	r3, [r7, #60]	; 0x3c
  float Y = EE_target[1];
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	63bb      	str	r3, [r7, #56]	; 0x38
  float Z = EE_target[2];
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	637b      	str	r3, [r7, #52]	; 0x34

  float Xsquare = pow(X, 2);
 800179c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80017a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017a4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80017a8:	eeb0 0b47 	vmov.f64	d0, d7
 80017ac:	f00b fed8 	bl	800d560 <pow>
 80017b0:	eeb0 7b40 	vmov.f64	d7, d0
 80017b4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80017b8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  float Ysquare = pow(Y, 2);
 80017bc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80017c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017c4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80017c8:	eeb0 0b47 	vmov.f64	d0, d7
 80017cc:	f00b fec8 	bl	800d560 <pow>
 80017d0:	eeb0 7b40 	vmov.f64	d7, d0
 80017d4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80017d8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  float Zsquare = pow(Z, 2);
 80017dc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80017e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017e4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80017e8:	eeb0 0b47 	vmov.f64	d0, d7
 80017ec:	f00b feb8 	bl	800d560 <pow>
 80017f0:	eeb0 7b40 	vmov.f64	d7, d0
 80017f4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80017f8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

  float K = sqrt(Xsquare + Ysquare - OFFsquare);
 80017fc:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001800:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001804:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001808:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800180c:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8001860 <InverseKinematic+0xe0>
 8001810:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001814:	eeb0 0b47 	vmov.f64	d0, d7
 8001818:	f00c f966 	bl	800dae8 <sqrt>
 800181c:	eeb0 7b40 	vmov.f64	d7, d0
 8001820:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001824:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  float Ksquare = pow(K, 2);
 8001828:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800182c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001830:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001834:	eeb0 0b47 	vmov.f64	d0, d7
 8001838:	f00b fe92 	bl	800d560 <pow>
 800183c:	eeb0 7b40 	vmov.f64	d7, d0
 8001840:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001844:	edc7 7a08 	vstr	s15, [r7, #32]
  float c3, s3_p, c1, s1,s3_m;

  if (Z < 0)
 8001848:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800184c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001854:	d50a      	bpl.n	800186c <InverseKinematic+0xec>
  {
    printf("Z must be > 0\n");
 8001856:	4804      	ldr	r0, [pc, #16]	; (8001868 <InverseKinematic+0xe8>)
 8001858:	f009 fd8e 	bl	800b378 <puts>
        return;
 800185c:	f000 bd44 	b.w	80022e8 <InverseKinematic+0xb68>
 8001860:	bc01a36e 	.word	0xbc01a36e
 8001864:	3f741205 	.word	0x3f741205
 8001868:	0800e214 	.word	0x0800e214
  }

  //compute cosine of joint 3
  c3 = (Xsquare + Ysquare + Zsquare - L1square - L2square - OFFsquare) / (2 * L1 * L2);
 800186c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001870:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001874:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001878:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800187c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001880:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001884:	ed9f 6bfa 	vldr	d6, [pc, #1000]	; 8001c70 <InverseKinematic+0x4f0>
 8001888:	ee37 7b46 	vsub.f64	d7, d7, d6
 800188c:	ed9f 6bfa 	vldr	d6, [pc, #1000]	; 8001c78 <InverseKinematic+0x4f8>
 8001890:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001894:	ed9f 6bfa 	vldr	d6, [pc, #1000]	; 8001c80 <InverseKinematic+0x500>
 8001898:	ee37 6b46 	vsub.f64	d6, d7, d6
 800189c:	ed9f 5bfa 	vldr	d5, [pc, #1000]	; 8001c88 <InverseKinematic+0x508>
 80018a0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018a4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80018a8:	edc7 7a07 	vstr	s15, [r7, #28]

  if (c3 < 1 && c3 > -1)
 80018ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80018b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80018b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018bc:	f140 850f 	bpl.w	80022de <InverseKinematic+0xb5e>
 80018c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80018c4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80018c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d0:	f340 8505 	ble.w	80022de <InverseKinematic+0xb5e>
  	  { // if requested point is part of WS

	  if (X >= 0 && Y >= 0 && Mode == 1)
 80018d4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80018d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e0:	f2c0 80eb 	blt.w	8001aba <InverseKinematic+0x33a>
 80018e4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80018e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f0:	f2c0 80e3 	blt.w	8001aba <InverseKinematic+0x33a>
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	f040 80df 	bne.w	8001aba <InverseKinematic+0x33a>
	  	  {
      s3_p = sqrt(1 - pow(c3, 2));
 80018fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001900:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001904:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001908:	eeb0 0b47 	vmov.f64	d0, d7
 800190c:	f00b fe28 	bl	800d560 <pow>
 8001910:	eeb0 7b40 	vmov.f64	d7, d0
 8001914:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001918:	ee36 7b47 	vsub.f64	d7, d6, d7
 800191c:	eeb0 0b47 	vmov.f64	d0, d7
 8001920:	f00c f8e2 	bl	800dae8 <sqrt>
 8001924:	eeb0 7b40 	vmov.f64	d7, d0
 8001928:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800192c:	edc7 7a06 	vstr	s15, [r7, #24]

      Joint_target[2] = atan2(s3_p, c3);; //joint 3
 8001930:	edd7 7a06 	vldr	s15, [r7, #24]
 8001934:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001938:	edd7 6a07 	vldr	s13, [r7, #28]
 800193c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001940:	eeb0 1b46 	vmov.f64	d1, d6
 8001944:	eeb0 0b47 	vmov.f64	d0, d7
 8001948:	f00c f8cc 	bl	800dae4 <atan2>
 800194c:	eeb0 7b40 	vmov.f64	d7, d0
 8001950:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001954:	4bd4      	ldr	r3, [pc, #848]	; (8001ca8 <InverseKinematic+0x528>)
 8001956:	edc3 7a02 	vstr	s15, [r3, #8]
      Joint_target[1] = atan2((L1 + L2 * c3) * Z + L2 * s3_p * K, -(L1 + L2 * c3) * K + L2 * s3_p * Z);
 800195a:	edd7 7a07 	vldr	s15, [r7, #28]
 800195e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001962:	ed9f 6bcb 	vldr	d6, [pc, #812]	; 8001c90 <InverseKinematic+0x510>
 8001966:	ee27 7b06 	vmul.f64	d7, d7, d6
 800196a:	ed9f 6bcb 	vldr	d6, [pc, #812]	; 8001c98 <InverseKinematic+0x518>
 800196e:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001972:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001976:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800197a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800197e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001982:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001986:	ed9f 5bc2 	vldr	d5, [pc, #776]	; 8001c90 <InverseKinematic+0x510>
 800198a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800198e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001992:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001996:	ee25 7b07 	vmul.f64	d7, d5, d7
 800199a:	ee36 4b07 	vadd.f64	d4, d6, d7
 800199e:	edd7 7a07 	vldr	s15, [r7, #28]
 80019a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019a6:	ed9f 6bba 	vldr	d6, [pc, #744]	; 8001c90 <InverseKinematic+0x510>
 80019aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80019ae:	ed9f 6bba 	vldr	d6, [pc, #744]	; 8001c98 <InverseKinematic+0x518>
 80019b2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80019b6:	eeb1 6b47 	vneg.f64	d6, d7
 80019ba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80019be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019c2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80019c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80019ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019ce:	ed9f 5bb0 	vldr	d5, [pc, #704]	; 8001c90 <InverseKinematic+0x510>
 80019d2:	ee27 5b05 	vmul.f64	d5, d7, d5
 80019d6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80019da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019de:	ee25 7b07 	vmul.f64	d7, d5, d7
 80019e2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80019e6:	eeb0 1b47 	vmov.f64	d1, d7
 80019ea:	eeb0 0b44 	vmov.f64	d0, d4
 80019ee:	f00c f879 	bl	800dae4 <atan2>
 80019f2:	eeb0 7b40 	vmov.f64	d7, d0
 80019f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019fa:	4bab      	ldr	r3, [pc, #684]	; (8001ca8 <InverseKinematic+0x528>)
 80019fc:	edc3 7a01 	vstr	s15, [r3, #4]

      c1 = (X / K + (Y * OFF) / Ksquare) / (1 + (OFFsquare) / Ksquare);
 8001a00:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8001a04:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001a08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a0c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001a10:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001a14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a18:	ed9f 5ba1 	vldr	d5, [pc, #644]	; 8001ca0 <InverseKinematic+0x520>
 8001a1c:	ee27 4b05 	vmul.f64	d4, d7, d5
 8001a20:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a24:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001a28:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001a2c:	ee36 5b07 	vadd.f64	d5, d6, d7
 8001a30:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a34:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001a38:	ed9f 4b91 	vldr	d4, [pc, #580]	; 8001c80 <InverseKinematic+0x500>
 8001a3c:	ee84 7b06 	vdiv.f64	d7, d4, d6
 8001a40:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001a44:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001a48:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001a4c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a50:	edc7 7a05 	vstr	s15, [r7, #20]
      s1 = sqrt(1 - pow(c1, 2));
 8001a54:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a5c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001a60:	eeb0 0b47 	vmov.f64	d0, d7
 8001a64:	f00b fd7c 	bl	800d560 <pow>
 8001a68:	eeb0 7b40 	vmov.f64	d7, d0
 8001a6c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001a70:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001a74:	eeb0 0b47 	vmov.f64	d0, d7
 8001a78:	f00c f836 	bl	800dae8 <sqrt>
 8001a7c:	eeb0 7b40 	vmov.f64	d7, d0
 8001a80:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a84:	edc7 7a04 	vstr	s15, [r7, #16]
      Joint_target[0] = atan2(-s1, -c1);
 8001a88:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a8c:	eef1 7a67 	vneg.f32	s15, s15
 8001a90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a94:	edd7 6a05 	vldr	s13, [r7, #20]
 8001a98:	eef1 6a66 	vneg.f32	s13, s13
 8001a9c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001aa0:	eeb0 1b46 	vmov.f64	d1, d6
 8001aa4:	eeb0 0b47 	vmov.f64	d0, d7
 8001aa8:	f00c f81c 	bl	800dae4 <atan2>
 8001aac:	eeb0 7b40 	vmov.f64	d7, d0
 8001ab0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ab4:	4b7c      	ldr	r3, [pc, #496]	; (8001ca8 <InverseKinematic+0x528>)
 8001ab6:	edc3 7a00 	vstr	s15, [r3]
	  	  }

	  if (X >= 0 && Y >= 0 && Mode == 0)
 8001aba:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001abe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac6:	f2c0 8112 	blt.w	8001cee <InverseKinematic+0x56e>
 8001aca:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001ace:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad6:	f2c0 810a 	blt.w	8001cee <InverseKinematic+0x56e>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f040 8106 	bne.w	8001cee <InverseKinematic+0x56e>
	  	  {
      s3_p = sqrt(1 - pow(c3, 2));
 8001ae2:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ae6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001aea:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001aee:	eeb0 0b47 	vmov.f64	d0, d7
 8001af2:	f00b fd35 	bl	800d560 <pow>
 8001af6:	eeb0 7b40 	vmov.f64	d7, d0
 8001afa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001afe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001b02:	eeb0 0b47 	vmov.f64	d0, d7
 8001b06:	f00b ffef 	bl	800dae8 <sqrt>
 8001b0a:	eeb0 7b40 	vmov.f64	d7, d0
 8001b0e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b12:	edc7 7a06 	vstr	s15, [r7, #24]

      Joint_target[2] = atan2(-s3_p, c3); //joint 3
 8001b16:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b1a:	eef1 7a67 	vneg.f32	s15, s15
 8001b1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b22:	edd7 6a07 	vldr	s13, [r7, #28]
 8001b26:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001b2a:	eeb0 1b46 	vmov.f64	d1, d6
 8001b2e:	eeb0 0b47 	vmov.f64	d0, d7
 8001b32:	f00b ffd7 	bl	800dae4 <atan2>
 8001b36:	eeb0 7b40 	vmov.f64	d7, d0
 8001b3a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b3e:	4b5a      	ldr	r3, [pc, #360]	; (8001ca8 <InverseKinematic+0x528>)
 8001b40:	edc3 7a02 	vstr	s15, [r3, #8]
      Joint_target[1] = atan2((L1 + L2 * c3) * Z + L2 * -s3_p * K, -(L1 + L2 * c3) * K + L2 * -s3_p * Z);
 8001b44:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b48:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b4c:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8001c90 <InverseKinematic+0x510>
 8001b50:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b54:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8001c98 <InverseKinematic+0x518>
 8001b58:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001b5c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001b60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b64:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001b68:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b6c:	eef1 7a67 	vneg.f32	s15, s15
 8001b70:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b74:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8001c90 <InverseKinematic+0x510>
 8001b78:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001b7c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b84:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001b88:	ee36 4b07 	vadd.f64	d4, d6, d7
 8001b8c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b94:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8001c90 <InverseKinematic+0x510>
 8001b98:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b9c:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8001c98 <InverseKinematic+0x518>
 8001ba0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001ba4:	eeb1 6b47 	vneg.f64	d6, d7
 8001ba8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001bac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001bb0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001bb4:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bb8:	eef1 7a67 	vneg.f32	s15, s15
 8001bbc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001bc0:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8001c90 <InverseKinematic+0x510>
 8001bc4:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001bc8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001bcc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001bd0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001bd4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001bd8:	eeb0 1b47 	vmov.f64	d1, d7
 8001bdc:	eeb0 0b44 	vmov.f64	d0, d4
 8001be0:	f00b ff80 	bl	800dae4 <atan2>
 8001be4:	eeb0 7b40 	vmov.f64	d7, d0
 8001be8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001bec:	4b2e      	ldr	r3, [pc, #184]	; (8001ca8 <InverseKinematic+0x528>)
 8001bee:	edc3 7a01 	vstr	s15, [r3, #4]

      c1 = (X / K + (Y * OFF) / Ksquare) / (1 + (OFFsquare) / Ksquare);
 8001bf2:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8001bf6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001bfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bfe:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001c02:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001c06:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c0a:	ed9f 5b25 	vldr	d5, [pc, #148]	; 8001ca0 <InverseKinematic+0x520>
 8001c0e:	ee27 4b05 	vmul.f64	d4, d7, d5
 8001c12:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c16:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001c1a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001c1e:	ee36 5b07 	vadd.f64	d5, d6, d7
 8001c22:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c26:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001c2a:	ed9f 4b15 	vldr	d4, [pc, #84]	; 8001c80 <InverseKinematic+0x500>
 8001c2e:	ee84 7b06 	vdiv.f64	d7, d4, d6
 8001c32:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001c36:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001c3a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001c3e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c42:	edc7 7a05 	vstr	s15, [r7, #20]
      s1 = sqrt(1 - pow(c1, 2));
 8001c46:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c4a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c4e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001c52:	eeb0 0b47 	vmov.f64	d0, d7
 8001c56:	f00b fc83 	bl	800d560 <pow>
 8001c5a:	eeb0 7b40 	vmov.f64	d7, d0
 8001c5e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001c62:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001c66:	eeb0 0b47 	vmov.f64	d0, d7
 8001c6a:	e01f      	b.n	8001cac <InverseKinematic+0x52c>
 8001c6c:	f3af 8000 	nop.w
 8001c70:	c9eecbfb 	.word	0xc9eecbfb
 8001c74:	3fe1c2c3 	.word	0x3fe1c2c3
 8001c78:	4b5dcc64 	.word	0x4b5dcc64
 8001c7c:	3fde07c8 	.word	0x3fde07c8
 8001c80:	bc01a36e 	.word	0xbc01a36e
 8001c84:	3f741205 	.word	0x3f741205
 8001c88:	182a9931 	.word	0x182a9931
 8001c8c:	3ff05495 	.word	0x3ff05495
 8001c90:	1eb851ec 	.word	0x1eb851ec
 8001c94:	3fe5eb85 	.word	0x3fe5eb85
 8001c98:	3d70a3d7 	.word	0x3d70a3d7
 8001c9c:	3fe7d70a 	.word	0x3fe7d70a
 8001ca0:	1eb851ec 	.word	0x1eb851ec
 8001ca4:	3fb1eb85 	.word	0x3fb1eb85
 8001ca8:	2400685c 	.word	0x2400685c
 8001cac:	f00b ff1c 	bl	800dae8 <sqrt>
 8001cb0:	eeb0 7b40 	vmov.f64	d7, d0
 8001cb4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cb8:	edc7 7a04 	vstr	s15, [r7, #16]
      Joint_target[0] = atan2(-s1, -c1);
 8001cbc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cc0:	eef1 7a67 	vneg.f32	s15, s15
 8001cc4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cc8:	edd7 6a05 	vldr	s13, [r7, #20]
 8001ccc:	eef1 6a66 	vneg.f32	s13, s13
 8001cd0:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001cd4:	eeb0 1b46 	vmov.f64	d1, d6
 8001cd8:	eeb0 0b47 	vmov.f64	d0, d7
 8001cdc:	f00b ff02 	bl	800dae4 <atan2>
 8001ce0:	eeb0 7b40 	vmov.f64	d7, d0
 8001ce4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ce8:	4bf9      	ldr	r3, [pc, #996]	; (80020d0 <InverseKinematic+0x950>)
 8001cea:	edc3 7a00 	vstr	s15, [r3]
	  	  }

	  if (X <= 0 && Y >= 0 && Mode == 1)
 8001cee:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001cf2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfa:	f200 80eb 	bhi.w	8001ed4 <InverseKinematic+0x754>
 8001cfe:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001d02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0a:	f2c0 80e3 	blt.w	8001ed4 <InverseKinematic+0x754>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	f040 80df 	bne.w	8001ed4 <InverseKinematic+0x754>
	  	  {
    

      s3_p = sqrt(1 - pow(c3, 2));
 8001d16:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d1a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d1e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001d22:	eeb0 0b47 	vmov.f64	d0, d7
 8001d26:	f00b fc1b 	bl	800d560 <pow>
 8001d2a:	eeb0 7b40 	vmov.f64	d7, d0
 8001d2e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001d32:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001d36:	eeb0 0b47 	vmov.f64	d0, d7
 8001d3a:	f00b fed5 	bl	800dae8 <sqrt>
 8001d3e:	eeb0 7b40 	vmov.f64	d7, d0
 8001d42:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d46:	edc7 7a06 	vstr	s15, [r7, #24]

      Joint_target[2] = atan2(s3_p, c3); //joint 3
 8001d4a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d4e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d52:	edd7 6a07 	vldr	s13, [r7, #28]
 8001d56:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001d5a:	eeb0 1b46 	vmov.f64	d1, d6
 8001d5e:	eeb0 0b47 	vmov.f64	d0, d7
 8001d62:	f00b febf 	bl	800dae4 <atan2>
 8001d66:	eeb0 7b40 	vmov.f64	d7, d0
 8001d6a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d6e:	4bd8      	ldr	r3, [pc, #864]	; (80020d0 <InverseKinematic+0x950>)
 8001d70:	edc3 7a02 	vstr	s15, [r3, #8]

      Joint_target[1] = atan2((L1 + L2 * c3) * Z + L2 * s3_p * K, -(L1 + L2 * c3) * K + L2 * s3_p * Z);
 8001d74:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d78:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d7c:	ed9f 6bcc 	vldr	d6, [pc, #816]	; 80020b0 <InverseKinematic+0x930>
 8001d80:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d84:	ed9f 6bcc 	vldr	d6, [pc, #816]	; 80020b8 <InverseKinematic+0x938>
 8001d88:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001d8c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001d90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d94:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001d98:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d9c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001da0:	ed9f 5bc3 	vldr	d5, [pc, #780]	; 80020b0 <InverseKinematic+0x930>
 8001da4:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001da8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001dac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001db0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001db4:	ee36 4b07 	vadd.f64	d4, d6, d7
 8001db8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001dbc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001dc0:	ed9f 6bbb 	vldr	d6, [pc, #748]	; 80020b0 <InverseKinematic+0x930>
 8001dc4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001dc8:	ed9f 6bbb 	vldr	d6, [pc, #748]	; 80020b8 <InverseKinematic+0x938>
 8001dcc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001dd0:	eeb1 6b47 	vneg.f64	d6, d7
 8001dd4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001dd8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ddc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001de0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001de4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001de8:	ed9f 5bb1 	vldr	d5, [pc, #708]	; 80020b0 <InverseKinematic+0x930>
 8001dec:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001df0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001df4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001df8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001dfc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001e00:	eeb0 1b47 	vmov.f64	d1, d7
 8001e04:	eeb0 0b44 	vmov.f64	d0, d4
 8001e08:	f00b fe6c 	bl	800dae4 <atan2>
 8001e0c:	eeb0 7b40 	vmov.f64	d7, d0
 8001e10:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e14:	4bae      	ldr	r3, [pc, #696]	; (80020d0 <InverseKinematic+0x950>)
 8001e16:	edc3 7a01 	vstr	s15, [r3, #4]

      c1 = (X / K + (Y * OFF) / Ksquare) / (1 + (OFFsquare) / Ksquare);
 8001e1a:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8001e1e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001e22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e26:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001e2a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001e2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e32:	ed9f 5ba3 	vldr	d5, [pc, #652]	; 80020c0 <InverseKinematic+0x940>
 8001e36:	ee27 4b05 	vmul.f64	d4, d7, d5
 8001e3a:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e3e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001e42:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001e46:	ee36 5b07 	vadd.f64	d5, d6, d7
 8001e4a:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e4e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001e52:	ed9f 4b9d 	vldr	d4, [pc, #628]	; 80020c8 <InverseKinematic+0x948>
 8001e56:	ee84 7b06 	vdiv.f64	d7, d4, d6
 8001e5a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001e5e:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001e62:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001e66:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e6a:	edc7 7a05 	vstr	s15, [r7, #20]
      s1 = sqrt(1 - pow(c1, 2));
 8001e6e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e76:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001e7a:	eeb0 0b47 	vmov.f64	d0, d7
 8001e7e:	f00b fb6f 	bl	800d560 <pow>
 8001e82:	eeb0 7b40 	vmov.f64	d7, d0
 8001e86:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001e8a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001e8e:	eeb0 0b47 	vmov.f64	d0, d7
 8001e92:	f00b fe29 	bl	800dae8 <sqrt>
 8001e96:	eeb0 7b40 	vmov.f64	d7, d0
 8001e9a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e9e:	edc7 7a04 	vstr	s15, [r7, #16]

      Joint_target[0] = atan2(-s1, -c1);
 8001ea2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ea6:	eef1 7a67 	vneg.f32	s15, s15
 8001eaa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001eae:	edd7 6a05 	vldr	s13, [r7, #20]
 8001eb2:	eef1 6a66 	vneg.f32	s13, s13
 8001eb6:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001eba:	eeb0 1b46 	vmov.f64	d1, d6
 8001ebe:	eeb0 0b47 	vmov.f64	d0, d7
 8001ec2:	f00b fe0f 	bl	800dae4 <atan2>
 8001ec6:	eeb0 7b40 	vmov.f64	d7, d0
 8001eca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ece:	4b80      	ldr	r3, [pc, #512]	; (80020d0 <InverseKinematic+0x950>)
 8001ed0:	edc3 7a00 	vstr	s15, [r3]
	  	  }

	  if(X <= 0 && Y >= 0 && Mode == 0) {
 8001ed4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001ed8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee0:	f200 8105 	bhi.w	80020ee <InverseKinematic+0x96e>
 8001ee4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001ee8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef0:	f2c0 80fd 	blt.w	80020ee <InverseKinematic+0x96e>
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f040 80f9 	bne.w	80020ee <InverseKinematic+0x96e>
    
      s3_p = sqrt(1 - pow(c3, 2));
 8001efc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f04:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001f08:	eeb0 0b47 	vmov.f64	d0, d7
 8001f0c:	f00b fb28 	bl	800d560 <pow>
 8001f10:	eeb0 7b40 	vmov.f64	d7, d0
 8001f14:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001f18:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001f1c:	eeb0 0b47 	vmov.f64	d0, d7
 8001f20:	f00b fde2 	bl	800dae8 <sqrt>
 8001f24:	eeb0 7b40 	vmov.f64	d7, d0
 8001f28:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001f2c:	edc7 7a06 	vstr	s15, [r7, #24]

      Joint_target[2] = atan2(-s3_p, c3);
 8001f30:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f34:	eef1 7a67 	vneg.f32	s15, s15
 8001f38:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8001f40:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001f44:	eeb0 1b46 	vmov.f64	d1, d6
 8001f48:	eeb0 0b47 	vmov.f64	d0, d7
 8001f4c:	f00b fdca 	bl	800dae4 <atan2>
 8001f50:	eeb0 7b40 	vmov.f64	d7, d0
 8001f54:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001f58:	4b5d      	ldr	r3, [pc, #372]	; (80020d0 <InverseKinematic+0x950>)
 8001f5a:	edc3 7a02 	vstr	s15, [r3, #8]

      Joint_target[1] = atan2((L1 + L2 * c3) * Z + L2 * -s3_p * K, -(L1 + L2 * c3) * K + L2 * -s3_p * Z);
 8001f5e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f62:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f66:	ed9f 6b52 	vldr	d6, [pc, #328]	; 80020b0 <InverseKinematic+0x930>
 8001f6a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f6e:	ed9f 6b52 	vldr	d6, [pc, #328]	; 80020b8 <InverseKinematic+0x938>
 8001f72:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001f76:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f7a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f7e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001f82:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f86:	eef1 7a67 	vneg.f32	s15, s15
 8001f8a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f8e:	ed9f 5b48 	vldr	d5, [pc, #288]	; 80020b0 <InverseKinematic+0x930>
 8001f92:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001f96:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001f9a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f9e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001fa2:	ee36 4b07 	vadd.f64	d4, d6, d7
 8001fa6:	edd7 7a07 	vldr	s15, [r7, #28]
 8001faa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001fae:	ed9f 6b40 	vldr	d6, [pc, #256]	; 80020b0 <InverseKinematic+0x930>
 8001fb2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001fb6:	ed9f 6b40 	vldr	d6, [pc, #256]	; 80020b8 <InverseKinematic+0x938>
 8001fba:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001fbe:	eeb1 6b47 	vneg.f64	d6, d7
 8001fc2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001fc6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001fca:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001fce:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fd2:	eef1 7a67 	vneg.f32	s15, s15
 8001fd6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001fda:	ed9f 5b35 	vldr	d5, [pc, #212]	; 80020b0 <InverseKinematic+0x930>
 8001fde:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001fe2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001fe6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001fea:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001fee:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001ff2:	eeb0 1b47 	vmov.f64	d1, d7
 8001ff6:	eeb0 0b44 	vmov.f64	d0, d4
 8001ffa:	f00b fd73 	bl	800dae4 <atan2>
 8001ffe:	eeb0 7b40 	vmov.f64	d7, d0
 8002002:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002006:	4b32      	ldr	r3, [pc, #200]	; (80020d0 <InverseKinematic+0x950>)
 8002008:	edc3 7a01 	vstr	s15, [r3, #4]

      c1 = (X / K + (Y * OFF) / Ksquare) / (1 + (OFFsquare) / Ksquare);
 800200c:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8002010:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002014:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002018:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800201c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002020:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002024:	ed9f 5b26 	vldr	d5, [pc, #152]	; 80020c0 <InverseKinematic+0x940>
 8002028:	ee27 4b05 	vmul.f64	d4, d7, d5
 800202c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002030:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002034:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8002038:	ee36 5b07 	vadd.f64	d5, d6, d7
 800203c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002040:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002044:	ed9f 4b20 	vldr	d4, [pc, #128]	; 80020c8 <InverseKinematic+0x948>
 8002048:	ee84 7b06 	vdiv.f64	d7, d4, d6
 800204c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002050:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002054:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002058:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800205c:	edc7 7a05 	vstr	s15, [r7, #20]
      s1 = sqrt(1 - pow(c1, 2));
 8002060:	edd7 7a05 	vldr	s15, [r7, #20]
 8002064:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002068:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800206c:	eeb0 0b47 	vmov.f64	d0, d7
 8002070:	f00b fa76 	bl	800d560 <pow>
 8002074:	eeb0 7b40 	vmov.f64	d7, d0
 8002078:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800207c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002080:	eeb0 0b47 	vmov.f64	d0, d7
 8002084:	f00b fd30 	bl	800dae8 <sqrt>
 8002088:	eeb0 7b40 	vmov.f64	d7, d0
 800208c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002090:	edc7 7a04 	vstr	s15, [r7, #16]

      Joint_target[0] = atan2(-s1, -c1);
 8002094:	edd7 7a04 	vldr	s15, [r7, #16]
 8002098:	eef1 7a67 	vneg.f32	s15, s15
 800209c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80020a0:	edd7 6a05 	vldr	s13, [r7, #20]
 80020a4:	eef1 6a66 	vneg.f32	s13, s13
 80020a8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80020ac:	e012      	b.n	80020d4 <InverseKinematic+0x954>
 80020ae:	bf00      	nop
 80020b0:	1eb851ec 	.word	0x1eb851ec
 80020b4:	3fe5eb85 	.word	0x3fe5eb85
 80020b8:	3d70a3d7 	.word	0x3d70a3d7
 80020bc:	3fe7d70a 	.word	0x3fe7d70a
 80020c0:	1eb851ec 	.word	0x1eb851ec
 80020c4:	3fb1eb85 	.word	0x3fb1eb85
 80020c8:	bc01a36e 	.word	0xbc01a36e
 80020cc:	3f741205 	.word	0x3f741205
 80020d0:	2400685c 	.word	0x2400685c
 80020d4:	eeb0 1b46 	vmov.f64	d1, d6
 80020d8:	eeb0 0b47 	vmov.f64	d0, d7
 80020dc:	f00b fd02 	bl	800dae4 <atan2>
 80020e0:	eeb0 7b40 	vmov.f64	d7, d0
 80020e4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80020e8:	4b8b      	ldr	r3, [pc, #556]	; (8002318 <InverseKinematic+0xb98>)
 80020ea:	edc3 7a00 	vstr	s15, [r3]
    }

	  if(X >= 0 && Y <= 0 && Mode == 1)
 80020ee:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80020f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020fa:	f2c0 80f4 	blt.w	80022e6 <InverseKinematic+0xb66>
 80020fe:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002102:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800210a:	d900      	bls.n	800210e <InverseKinematic+0x98e>
 800210c:	e0eb      	b.n	80022e6 <InverseKinematic+0xb66>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	2b01      	cmp	r3, #1
 8002112:	f040 80e8 	bne.w	80022e6 <InverseKinematic+0xb66>
	  {
		  s3_m = -sqrt(1-(c3*c3));
 8002116:	edd7 7a07 	vldr	s15, [r7, #28]
 800211a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800211e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002122:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002126:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800212a:	eeb0 0b47 	vmov.f64	d0, d7
 800212e:	f00b fcdb 	bl	800dae8 <sqrt>
 8002132:	eeb0 7b40 	vmov.f64	d7, d0
 8002136:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800213a:	eef1 7a67 	vneg.f32	s15, s15
 800213e:	edc7 7a03 	vstr	s15, [r7, #12]

	  Joint_target[2]= atan2(s3_m,c3);
 8002142:	edd7 7a03 	vldr	s15, [r7, #12]
 8002146:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800214a:	edd7 6a07 	vldr	s13, [r7, #28]
 800214e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002152:	eeb0 1b46 	vmov.f64	d1, d6
 8002156:	eeb0 0b47 	vmov.f64	d0, d7
 800215a:	f00b fcc3 	bl	800dae4 <atan2>
 800215e:	eeb0 7b40 	vmov.f64	d7, d0
 8002162:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002166:	4b6c      	ldr	r3, [pc, #432]	; (8002318 <InverseKinematic+0xb98>)
 8002168:	edc3 7a02 	vstr	s15, [r3, #8]

	  Joint_target[1] = atan2((L1 + L2*c3)*Z - L2*s3_m*K , (L1 + L2*c3)*K + L2*s3_m*Z);
 800216c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002170:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002174:	ed9f 6b5e 	vldr	d6, [pc, #376]	; 80022f0 <InverseKinematic+0xb70>
 8002178:	ee27 7b06 	vmul.f64	d7, d7, d6
 800217c:	ed9f 6b5e 	vldr	d6, [pc, #376]	; 80022f8 <InverseKinematic+0xb78>
 8002180:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002184:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002188:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800218c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002190:	edd7 7a03 	vldr	s15, [r7, #12]
 8002194:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002198:	ed9f 5b55 	vldr	d5, [pc, #340]	; 80022f0 <InverseKinematic+0xb70>
 800219c:	ee27 5b05 	vmul.f64	d5, d7, d5
 80021a0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80021a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021a8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80021ac:	ee36 4b47 	vsub.f64	d4, d6, d7
 80021b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80021b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021b8:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 80022f0 <InverseKinematic+0xb70>
 80021bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80021c0:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 80022f8 <InverseKinematic+0xb78>
 80021c4:	ee37 6b06 	vadd.f64	d6, d7, d6
 80021c8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80021cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021d0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80021d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80021d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021dc:	ed9f 5b44 	vldr	d5, [pc, #272]	; 80022f0 <InverseKinematic+0xb70>
 80021e0:	ee27 5b05 	vmul.f64	d5, d7, d5
 80021e4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80021e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021ec:	ee25 7b07 	vmul.f64	d7, d5, d7
 80021f0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80021f4:	eeb0 1b47 	vmov.f64	d1, d7
 80021f8:	eeb0 0b44 	vmov.f64	d0, d4
 80021fc:	f00b fc72 	bl	800dae4 <atan2>
 8002200:	eeb0 7b40 	vmov.f64	d7, d0
 8002204:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002208:	4b43      	ldr	r3, [pc, #268]	; (8002318 <InverseKinematic+0xb98>)
 800220a:	edc3 7a01 	vstr	s15, [r3, #4]

	            float K_m = -Ksquare;
 800220e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002212:	eef1 7a67 	vneg.f32	s15, s15
 8002216:	edc7 7a02 	vstr	s15, [r7, #8]

	           c1 = (X/K_m + (Y*OFF)/(K_m*K_m))/(1+(OFFsquare)/(K_m*K_m));
 800221a:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800221e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002222:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002226:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800222a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800222e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002232:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8002300 <InverseKinematic+0xb80>
 8002236:	ee27 4b05 	vmul.f64	d4, d7, d5
 800223a:	edd7 7a02 	vldr	s15, [r7, #8]
 800223e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002242:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002246:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800224a:	ee36 5b07 	vadd.f64	d5, d6, d7
 800224e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002252:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002256:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800225a:	ed9f 4b2b 	vldr	d4, [pc, #172]	; 8002308 <InverseKinematic+0xb88>
 800225e:	ee84 7b06 	vdiv.f64	d7, d4, d6
 8002262:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002266:	ee37 6b06 	vadd.f64	d6, d7, d6
 800226a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800226e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002272:	edc7 7a05 	vstr	s15, [r7, #20]

	            s1= sqrt(1-pow(c1,2));
 8002276:	edd7 7a05 	vldr	s15, [r7, #20]
 800227a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800227e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002282:	eeb0 0b47 	vmov.f64	d0, d7
 8002286:	f00b f96b 	bl	800d560 <pow>
 800228a:	eeb0 7b40 	vmov.f64	d7, d0
 800228e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002292:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002296:	eeb0 0b47 	vmov.f64	d0, d7
 800229a:	f00b fc25 	bl	800dae8 <sqrt>
 800229e:	eeb0 7b40 	vmov.f64	d7, d0
 80022a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80022a6:	edc7 7a04 	vstr	s15, [r7, #16]

	  Joint_target[0] = atan2(s1,c1) - 3.1415;
 80022aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80022ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022b2:	edd7 6a05 	vldr	s13, [r7, #20]
 80022b6:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80022ba:	eeb0 1b46 	vmov.f64	d1, d6
 80022be:	eeb0 0b47 	vmov.f64	d0, d7
 80022c2:	f00b fc0f 	bl	800dae4 <atan2>
 80022c6:	eeb0 7b40 	vmov.f64	d7, d0
 80022ca:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8002310 <InverseKinematic+0xb90>
 80022ce:	ee37 7b46 	vsub.f64	d7, d7, d6
 80022d2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80022d6:	4b10      	ldr	r3, [pc, #64]	; (8002318 <InverseKinematic+0xb98>)
 80022d8:	edc3 7a00 	vstr	s15, [r3]
	  if(X >= 0 && Y <= 0 && Mode == 1)
 80022dc:	e003      	b.n	80022e6 <InverseKinematic+0xb66>
	  }
  }
  else
  {
	  printf("Requested target is not part of reachable workspace\n");
 80022de:	480f      	ldr	r0, [pc, #60]	; (800231c <InverseKinematic+0xb9c>)
 80022e0:	f009 f84a 	bl	800b378 <puts>
 80022e4:	e000      	b.n	80022e8 <InverseKinematic+0xb68>
	  if(X >= 0 && Y <= 0 && Mode == 1)
 80022e6:	bf00      	nop

  }
}
 80022e8:	3740      	adds	r7, #64	; 0x40
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	1eb851ec 	.word	0x1eb851ec
 80022f4:	3fe5eb85 	.word	0x3fe5eb85
 80022f8:	3d70a3d7 	.word	0x3d70a3d7
 80022fc:	3fe7d70a 	.word	0x3fe7d70a
 8002300:	1eb851ec 	.word	0x1eb851ec
 8002304:	3fb1eb85 	.word	0x3fb1eb85
 8002308:	bc01a36e 	.word	0xbc01a36e
 800230c:	3f741205 	.word	0x3f741205
 8002310:	c083126f 	.word	0xc083126f
 8002314:	400921ca 	.word	0x400921ca
 8002318:	2400685c 	.word	0x2400685c
 800231c:	0800e224 	.word	0x0800e224

08002320 <TrajectorPlanner>:
// joint space trjector planener
void TrajectorPlanner(float q0[3], float qf[3], float t)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	ed2d 8b04 	vpush	{d8-d9}
 8002326:	b0a8      	sub	sp, #160	; 0xa0
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	ed87 0a01 	vstr	s0, [r7, #4]
  // q0 initial pose
  // qf final pose
  // t trajector time (steps)
  float Ts = 0.1; //time division step
 8002332:	4bf2      	ldr	r3, [pc, #968]	; (80026fc <TrajectorPlanner+0x3dc>)
 8002334:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

  float t_step = 0; //used as counter
 8002338:	f04f 0300 	mov.w	r3, #0
 800233c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  int counter = 0;
 8002340:	2300      	movs	r3, #0
 8002342:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  float Ns = t/Ts; //Number of step;
 8002346:	edd7 6a01 	vldr	s13, [r7, #4]
 800234a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800234e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002352:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c

  if(Ns > 2000) //max 20s planning at 0.1 Ts
 8002356:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800235a:	ed9f 7ae9 	vldr	s14, [pc, #932]	; 8002700 <TrajectorPlanner+0x3e0>
 800235e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002366:	dd03      	ble.n	8002370 <TrajectorPlanner+0x50>
	  {
	  printf("Ns cannot be higher than 2000");
 8002368:	48e6      	ldr	r0, [pc, #920]	; (8002704 <TrajectorPlanner+0x3e4>)
 800236a:	f008 ff7f 	bl	800b26c <iprintf>
 800236e:	e305      	b.n	800297c <TrajectorPlanner+0x65c>
  float a5[3];

  //from t i must create an array with n elements

  // fifth order polynomial interpolation function
  for (int i = 0; i < 3; i++) // execute for all the joint
 8002370:	2300      	movs	r3, #0
 8002372:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002376:	e2fc      	b.n	8002972 <TrajectorPlanner+0x652>
  {
    qd0[i] = 0;
 8002378:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002382:	4413      	add	r3, r2
 8002384:	3b20      	subs	r3, #32
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
    qdd0[i] = 0;
 800238c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002396:	4413      	add	r3, r2
 8002398:	3b38      	subs	r3, #56	; 0x38
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	601a      	str	r2, [r3, #0]

    qdf[i] = 0;
 80023a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80023aa:	4413      	add	r3, r2
 80023ac:	3b2c      	subs	r3, #44	; 0x2c
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
    qddf[i] = 0;
 80023b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80023be:	4413      	add	r3, r2
 80023c0:	3b44      	subs	r3, #68	; 0x44
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
  
    a0[i] = q0[i];
 80023c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	4413      	add	r3, r2
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80023de:	440b      	add	r3, r1
 80023e0:	3b50      	subs	r3, #80	; 0x50
 80023e2:	601a      	str	r2, [r3, #0]
    a1[i] = qd0[i];
 80023e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80023ee:	4413      	add	r3, r2
 80023f0:	3b20      	subs	r3, #32
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80023fe:	440b      	add	r3, r1
 8002400:	3b5c      	subs	r3, #92	; 0x5c
 8002402:	601a      	str	r2, [r3, #0]
    a2[i] = 0.5 * qdd0[i];
 8002404:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800240e:	4413      	add	r3, r2
 8002410:	3b38      	subs	r3, #56	; 0x38
 8002412:	edd3 7a00 	vldr	s15, [r3]
 8002416:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800241a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800241e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002428:	4413      	add	r3, r2
 800242a:	3b68      	subs	r3, #104	; 0x68
 800242c:	edc3 7a00 	vstr	s15, [r3]

    //execute FOR to compute time value of joint
    a3[i] = (1 / (2 * pow(t, 3))) * (20 * (qf[i] - q0[i]) - (8 * qdf[i] + 12 * qd0[i]) * t - (3 * qddf[i] - qdd0[i]) * (t * t));
 8002430:	edd7 7a01 	vldr	s15, [r7, #4]
 8002434:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002438:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 800243c:	eeb0 0b47 	vmov.f64	d0, d7
 8002440:	f00b f88e 	bl	800d560 <pow>
 8002444:	eeb0 7b40 	vmov.f64	d7, d0
 8002448:	ee37 7b07 	vadd.f64	d7, d7, d7
 800244c:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002450:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002454:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	4413      	add	r3, r2
 800245e:	ed93 7a00 	vldr	s14, [r3]
 8002462:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	4413      	add	r3, r2
 800246c:	edd3 7a00 	vldr	s15, [r3]
 8002470:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002474:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002478:	ee27 7a87 	vmul.f32	s14, s15, s14
 800247c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002486:	4413      	add	r3, r2
 8002488:	3b2c      	subs	r3, #44	; 0x2c
 800248a:	edd3 7a00 	vldr	s15, [r3]
 800248e:	eef2 5a00 	vmov.f32	s11, #32	; 0x41000000  8.0
 8002492:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8002496:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80024a0:	4413      	add	r3, r2
 80024a2:	3b20      	subs	r3, #32
 80024a4:	edd3 7a00 	vldr	s15, [r3]
 80024a8:	eeb2 5a08 	vmov.f32	s10, #40	; 0x41400000  12.0
 80024ac:	ee67 7a85 	vmul.f32	s15, s15, s10
 80024b0:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80024b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80024b8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80024bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80024ca:	4413      	add	r3, r2
 80024cc:	3b44      	subs	r3, #68	; 0x44
 80024ce:	edd3 7a00 	vldr	s15, [r3]
 80024d2:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 80024d6:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80024da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80024e4:	4413      	add	r3, r2
 80024e6:	3b38      	subs	r3, #56	; 0x38
 80024e8:	edd3 7a00 	vldr	s15, [r3]
 80024ec:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80024f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80024f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80024f8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80024fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002500:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002504:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002508:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800250c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002516:	4413      	add	r3, r2
 8002518:	3b74      	subs	r3, #116	; 0x74
 800251a:	edc3 7a00 	vstr	s15, [r3]

    a4[i] = (1 / (2 * pow(t, 4))) * (30 * (q0[i] - qf[i]) + (14 * qdf[i] + 16 * qd0[i]) * t + (3 * qddf[i] - 2 * qdd0[i]) * t * t);
 800251e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002522:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002526:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 800252a:	eeb0 0b47 	vmov.f64	d0, d7
 800252e:	f00b f817 	bl	800d560 <pow>
 8002532:	eeb0 7b40 	vmov.f64	d7, d0
 8002536:	ee37 7b07 	vadd.f64	d7, d7, d7
 800253a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800253e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002542:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	4413      	add	r3, r2
 800254c:	ed93 7a00 	vldr	s14, [r3]
 8002550:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	4413      	add	r3, r2
 800255a:	edd3 7a00 	vldr	s15, [r3]
 800255e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002562:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002566:	ee27 7a87 	vmul.f32	s14, s15, s14
 800256a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002574:	4413      	add	r3, r2
 8002576:	3b2c      	subs	r3, #44	; 0x2c
 8002578:	edd3 7a00 	vldr	s15, [r3]
 800257c:	eef2 5a0c 	vmov.f32	s11, #44	; 0x41600000  14.0
 8002580:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8002584:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800258e:	4413      	add	r3, r2
 8002590:	3b20      	subs	r3, #32
 8002592:	edd3 7a00 	vldr	s15, [r3]
 8002596:	eeb3 5a00 	vmov.f32	s10, #48	; 0x41800000  16.0
 800259a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800259e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80025a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80025a6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80025aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80025b8:	4413      	add	r3, r2
 80025ba:	3b44      	subs	r3, #68	; 0x44
 80025bc:	edd3 7a00 	vldr	s15, [r3]
 80025c0:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 80025c4:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80025c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80025d2:	4413      	add	r3, r2
 80025d4:	3b38      	subs	r3, #56	; 0x38
 80025d6:	edd3 7a00 	vldr	s15, [r3]
 80025da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80025de:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80025e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80025e6:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80025ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80025ee:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80025f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025fa:	ee26 7b07 	vmul.f64	d7, d6, d7
 80025fe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002602:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800260c:	4413      	add	r3, r2
 800260e:	3b80      	subs	r3, #128	; 0x80
 8002610:	edc3 7a00 	vstr	s15, [r3]

    a5[i] = (1 / (2 * pow(t, 5))) * (12 * (qf[i] - q0[i]) - 6 * (qdf[i] + qd0[i]) * t - (qddf[i] - qdd0[i]) * (t * t));
 8002614:	edd7 7a01 	vldr	s15, [r7, #4]
 8002618:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800261c:	eeb1 1b04 	vmov.f64	d1, #20	; 0x40a00000  5.0
 8002620:	eeb0 0b47 	vmov.f64	d0, d7
 8002624:	f00a ff9c 	bl	800d560 <pow>
 8002628:	eeb0 7b40 	vmov.f64	d7, d0
 800262c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002630:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002634:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002638:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	4413      	add	r3, r2
 8002642:	ed93 7a00 	vldr	s14, [r3]
 8002646:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	4413      	add	r3, r2
 8002650:	edd3 7a00 	vldr	s15, [r3]
 8002654:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002658:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 800265c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002660:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800266a:	4413      	add	r3, r2
 800266c:	3b2c      	subs	r3, #44	; 0x2c
 800266e:	edd3 5a00 	vldr	s11, [r3]
 8002672:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800267c:	4413      	add	r3, r2
 800267e:	3b20      	subs	r3, #32
 8002680:	edd3 7a00 	vldr	s15, [r3]
 8002684:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8002688:	eef1 5a08 	vmov.f32	s11, #24	; 0x40c00000  6.0
 800268c:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8002690:	edd7 7a01 	vldr	s15, [r7, #4]
 8002694:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002698:	ee37 7a67 	vsub.f32	s14, s14, s15
 800269c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80026a6:	4413      	add	r3, r2
 80026a8:	3b44      	subs	r3, #68	; 0x44
 80026aa:	edd3 5a00 	vldr	s11, [r3]
 80026ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80026b8:	4413      	add	r3, r2
 80026ba:	3b38      	subs	r3, #56	; 0x38
 80026bc:	edd3 7a00 	vldr	s15, [r3]
 80026c0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80026c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80026c8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80026cc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80026d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026d8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80026dc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80026e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80026ea:	4413      	add	r3, r2
 80026ec:	3b8c      	subs	r3, #140	; 0x8c
 80026ee:	edc3 7a00 	vstr	s15, [r3]

    for(counter = 0; counter < Ns+1; counter++ ) {
 80026f2:	2300      	movs	r3, #0
 80026f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80026f8:	e124      	b.n	8002944 <TrajectorPlanner+0x624>
 80026fa:	bf00      	nop
 80026fc:	3dcccccd 	.word	0x3dcccccd
 8002700:	44fa0000 	.word	0x44fa0000
 8002704:	0800e258 	.word	0x0800e258
    t_step = counter*Ts;
 8002708:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800270c:	ee07 3a90 	vmov	s15, r3
 8002710:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002714:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800271c:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90

    Joint_target_plan[counter][i] = a0[i] + a1[i] * t_step + a2[i] * t_step * t_step + a3[i] * pow(t_step, 3) + a4[i] * pow(t_step, 4) + a5[i] * pow(t_step, 5);
 8002720:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800272a:	4413      	add	r3, r2
 800272c:	3b50      	subs	r3, #80	; 0x50
 800272e:	ed93 7a00 	vldr	s14, [r3]
 8002732:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800273c:	4413      	add	r3, r2
 800273e:	3b5c      	subs	r3, #92	; 0x5c
 8002740:	edd3 6a00 	vldr	s13, [r3]
 8002744:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002748:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800274c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002750:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800275a:	4413      	add	r3, r2
 800275c:	3b68      	subs	r3, #104	; 0x68
 800275e:	edd3 6a00 	vldr	s13, [r3]
 8002762:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002766:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800276a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800276e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002772:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002776:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800277a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002784:	4413      	add	r3, r2
 8002786:	3b74      	subs	r3, #116	; 0x74
 8002788:	edd3 7a00 	vldr	s15, [r3]
 800278c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002790:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002794:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002798:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 800279c:	eeb0 0b47 	vmov.f64	d0, d7
 80027a0:	f00a fede 	bl	800d560 <pow>
 80027a4:	eeb0 7b40 	vmov.f64	d7, d0
 80027a8:	ee29 7b07 	vmul.f64	d7, d9, d7
 80027ac:	ee38 8b07 	vadd.f64	d8, d8, d7
 80027b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80027ba:	4413      	add	r3, r2
 80027bc:	3b80      	subs	r3, #128	; 0x80
 80027be:	edd3 7a00 	vldr	s15, [r3]
 80027c2:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80027c6:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80027ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80027ce:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 80027d2:	eeb0 0b47 	vmov.f64	d0, d7
 80027d6:	f00a fec3 	bl	800d560 <pow>
 80027da:	eeb0 7b40 	vmov.f64	d7, d0
 80027de:	ee29 7b07 	vmul.f64	d7, d9, d7
 80027e2:	ee38 8b07 	vadd.f64	d8, d8, d7
 80027e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80027f0:	4413      	add	r3, r2
 80027f2:	3b8c      	subs	r3, #140	; 0x8c
 80027f4:	edd3 7a00 	vldr	s15, [r3]
 80027f8:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80027fc:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002800:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002804:	eeb1 1b04 	vmov.f64	d1, #20	; 0x40a00000  5.0
 8002808:	eeb0 0b47 	vmov.f64	d0, d7
 800280c:	f00a fea8 	bl	800d560 <pow>
 8002810:	eeb0 7b40 	vmov.f64	d7, d0
 8002814:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002818:	ee38 7b07 	vadd.f64	d7, d8, d7
 800281c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002820:	4959      	ldr	r1, [pc, #356]	; (8002988 <TrajectorPlanner+0x668>)
 8002822:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8002826:	4613      	mov	r3, r2
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	4413      	add	r3, r2
 800282c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002830:	4413      	add	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	edc3 7a00 	vstr	s15, [r3]

    Joint_speed_target_plan[counter][i] = a1[i] + 2 * a2[i] * t_step + 3 * a3[i] * t_step * t_step + 4 * a4[i] * pow(t_step, 3) + 5 * a5[i] * pow(t_step, 4);
 800283a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002844:	4413      	add	r3, r2
 8002846:	3b5c      	subs	r3, #92	; 0x5c
 8002848:	ed93 7a00 	vldr	s14, [r3]
 800284c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002856:	4413      	add	r3, r2
 8002858:	3b68      	subs	r3, #104	; 0x68
 800285a:	edd3 7a00 	vldr	s15, [r3]
 800285e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002862:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002866:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800286a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800286e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002878:	4413      	add	r3, r2
 800287a:	3b74      	subs	r3, #116	; 0x74
 800287c:	edd3 7a00 	vldr	s15, [r3]
 8002880:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002884:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002888:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800288c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002890:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002894:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002898:	ee77 7a27 	vadd.f32	s15, s14, s15
 800289c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80028a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80028aa:	4413      	add	r3, r2
 80028ac:	3b80      	subs	r3, #128	; 0x80
 80028ae:	edd3 7a00 	vldr	s15, [r3]
 80028b2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80028b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028ba:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80028be:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80028c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80028c6:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 80028ca:	eeb0 0b47 	vmov.f64	d0, d7
 80028ce:	f00a fe47 	bl	800d560 <pow>
 80028d2:	eeb0 7b40 	vmov.f64	d7, d0
 80028d6:	ee29 7b07 	vmul.f64	d7, d9, d7
 80028da:	ee38 8b07 	vadd.f64	d8, d8, d7
 80028de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80028e8:	4413      	add	r3, r2
 80028ea:	3b8c      	subs	r3, #140	; 0x8c
 80028ec:	edd3 7a00 	vldr	s15, [r3]
 80028f0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80028f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028f8:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80028fc:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002900:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002904:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 8002908:	eeb0 0b47 	vmov.f64	d0, d7
 800290c:	f00a fe28 	bl	800d560 <pow>
 8002910:	eeb0 7b40 	vmov.f64	d7, d0
 8002914:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002918:	ee38 7b07 	vadd.f64	d7, d8, d7
 800291c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002920:	491a      	ldr	r1, [pc, #104]	; (800298c <TrajectorPlanner+0x66c>)
 8002922:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8002926:	4613      	mov	r3, r2
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	4413      	add	r3, r2
 800292c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002930:	4413      	add	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	440b      	add	r3, r1
 8002936:	edc3 7a00 	vstr	s15, [r3]
    for(counter = 0; counter < Ns+1; counter++ ) {
 800293a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800293e:	3301      	adds	r3, #1
 8002940:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002944:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002948:	ee07 3a90 	vmov	s15, r3
 800294c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002950:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002954:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002958:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800295c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002964:	f53f aed0 	bmi.w	8002708 <TrajectorPlanner+0x3e8>
  for (int i = 0; i < 3; i++) // execute for all the joint
 8002968:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800296c:	3301      	adds	r3, #1
 800296e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002972:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002976:	2b02      	cmp	r3, #2
 8002978:	f77f acfe 	ble.w	8002378 <TrajectorPlanner+0x58>
    //float qdd_quintic = 2 * a2[i] + 6 * a3[i] * t + 12 * a4[i] * t * t + 20 * a5[i] * pow(t, 3);


    
  }
}
 800297c:	37a0      	adds	r7, #160	; 0xa0
 800297e:	46bd      	mov	sp, r7
 8002980:	ecbd 8b04 	vpop	{d8-d9}
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	2400693c 	.word	0x2400693c
 800298c:	240009f4 	.word	0x240009f4

08002990 <plan_step>:

void plan_step() {
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
	//every time is called, increment
	plan_counter++;
 8002996:	4b19      	ldr	r3, [pc, #100]	; (80029fc <plan_step+0x6c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	3301      	adds	r3, #1
 800299c:	4a17      	ldr	r2, [pc, #92]	; (80029fc <plan_step+0x6c>)
 800299e:	6013      	str	r3, [r2, #0]
	if(plan_counter < 101) {
 80029a0:	4b16      	ldr	r3, [pc, #88]	; (80029fc <plan_step+0x6c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b64      	cmp	r3, #100	; 0x64
 80029a6:	dc23      	bgt.n	80029f0 <plan_step+0x60>
	  for(int m = 0; m<3; m++) {
 80029a8:	2300      	movs	r3, #0
 80029aa:	607b      	str	r3, [r7, #4]
 80029ac:	e01d      	b.n	80029ea <plan_step+0x5a>
		  Joint_target_planned[m] = Joint_target_plan[plan_counter][m];
 80029ae:	4b13      	ldr	r3, [pc, #76]	; (80029fc <plan_step+0x6c>)
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	4913      	ldr	r1, [pc, #76]	; (8002a00 <plan_step+0x70>)
 80029b4:	4613      	mov	r3, r2
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	4413      	add	r3, r2
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	4413      	add	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	490f      	ldr	r1, [pc, #60]	; (8002a04 <plan_step+0x74>)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	601a      	str	r2, [r3, #0]
		  //printf("%d -- %f\n",m,Joint_target_planned[m]);
		  Joint_speed_target_planned[0] =  Joint_speed_target_plan[plan_counter][0];
 80029ce:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <plan_step+0x6c>)
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	490d      	ldr	r1, [pc, #52]	; (8002a08 <plan_step+0x78>)
 80029d4:	4613      	mov	r3, r2
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	4413      	add	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a0a      	ldr	r2, [pc, #40]	; (8002a0c <plan_step+0x7c>)
 80029e2:	6013      	str	r3, [r2, #0]
	  for(int m = 0; m<3; m++) {
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3301      	adds	r3, #1
 80029e8:	607b      	str	r3, [r7, #4]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	ddde      	ble.n	80029ae <plan_step+0x1e>
	  	  }
	}
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	240002c4 	.word	0x240002c4
 8002a00:	2400693c 	.word	0x2400693c
 8002a04:	2400090c 	.word	0x2400090c
 8002a08:	240009f4 	.word	0x240009f4
 8002a0c:	240008f4 	.word	0x240008f4

08002a10 <PositionController>:

void PositionController() {
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
//executed at 100 Hz
	for(int i = 1; i< 3; i++) {
 8002a16:	2301      	movs	r3, #1
 8002a18:	607b      	str	r3, [r7, #4]
 8002a1a:	e0c3      	b.n	8002ba4 <PositionController+0x194>

	  pos_previous_error[i] = pos_error[i];
 8002a1c:	4a68      	ldr	r2, [pc, #416]	; (8002bc0 <PositionController+0x1b0>)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	4967      	ldr	r1, [pc, #412]	; (8002bc4 <PositionController+0x1b4>)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	601a      	str	r2, [r3, #0]

	  pos_error[i] = Joint_target_planned[i] - actualPos[i];
 8002a30:	4a65      	ldr	r2, [pc, #404]	; (8002bc8 <PositionController+0x1b8>)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	ed93 7a00 	vldr	s14, [r3]
 8002a3c:	4a63      	ldr	r2, [pc, #396]	; (8002bcc <PositionController+0x1bc>)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	edd3 7a00 	vldr	s15, [r3]
 8002a48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a4c:	4a5c      	ldr	r2, [pc, #368]	; (8002bc0 <PositionController+0x1b0>)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	edc3 7a00 	vstr	s15, [r3]

	  pos_integral[i] = pos_integral[i] + pos_error[i];
 8002a58:	4a5d      	ldr	r2, [pc, #372]	; (8002bd0 <PositionController+0x1c0>)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	ed93 7a00 	vldr	s14, [r3]
 8002a64:	4a56      	ldr	r2, [pc, #344]	; (8002bc0 <PositionController+0x1b0>)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	edd3 7a00 	vldr	s15, [r3]
 8002a70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a74:	4a56      	ldr	r2, [pc, #344]	; (8002bd0 <PositionController+0x1c0>)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	edc3 7a00 	vstr	s15, [r3]

	  pos_derivative[i] = pos_error[i] - pos_previous_error[i];
 8002a80:	4a4f      	ldr	r2, [pc, #316]	; (8002bc0 <PositionController+0x1b0>)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	ed93 7a00 	vldr	s14, [r3]
 8002a8c:	4a4d      	ldr	r2, [pc, #308]	; (8002bc4 <PositionController+0x1b4>)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	edd3 7a00 	vldr	s15, [r3]
 8002a98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a9c:	4a4d      	ldr	r2, [pc, #308]	; (8002bd4 <PositionController+0x1c4>)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	edc3 7a00 	vstr	s15, [r3]

	  //anti windup
	  if (pos_integral[i] > MAX_INTEGRAL_ERROR || pos_integral[i] < -MAX_INTEGRAL_ERROR) pos_integral[i] = 0;
 8002aa8:	4a49      	ldr	r2, [pc, #292]	; (8002bd0 <PositionController+0x1c0>)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	edd3 7a00 	vldr	s15, [r3]
 8002ab4:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002bd8 <PositionController+0x1c8>
 8002ab8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac0:	dc0c      	bgt.n	8002adc <PositionController+0xcc>
 8002ac2:	4a43      	ldr	r2, [pc, #268]	; (8002bd0 <PositionController+0x1c0>)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	edd3 7a00 	vldr	s15, [r3]
 8002ace:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002bdc <PositionController+0x1cc>
 8002ad2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ada:	d506      	bpl.n	8002aea <PositionController+0xda>
 8002adc:	4a3c      	ldr	r2, [pc, #240]	; (8002bd0 <PositionController+0x1c0>)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f04f 0200 	mov.w	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]

	  pos_command[i] = pos_KP[i] * pos_error[i] + pos_KI[i] * pos_integral[i] + pos_KD[i] * pos_derivative[i];
 8002aea:	4a3d      	ldr	r2, [pc, #244]	; (8002be0 <PositionController+0x1d0>)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	ed93 7a00 	vldr	s14, [r3]
 8002af6:	4a32      	ldr	r2, [pc, #200]	; (8002bc0 <PositionController+0x1b0>)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	edd3 7a00 	vldr	s15, [r3]
 8002b02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b06:	4a37      	ldr	r2, [pc, #220]	; (8002be4 <PositionController+0x1d4>)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4413      	add	r3, r2
 8002b0e:	edd3 6a00 	vldr	s13, [r3]
 8002b12:	4a2f      	ldr	r2, [pc, #188]	; (8002bd0 <PositionController+0x1c0>)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	edd3 7a00 	vldr	s15, [r3]
 8002b1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b26:	4a30      	ldr	r2, [pc, #192]	; (8002be8 <PositionController+0x1d8>)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	edd3 6a00 	vldr	s13, [r3]
 8002b32:	4a28      	ldr	r2, [pc, #160]	; (8002bd4 <PositionController+0x1c4>)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	edd3 7a00 	vldr	s15, [r3]
 8002b3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b46:	4a29      	ldr	r2, [pc, #164]	; (8002bec <PositionController+0x1dc>)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	edc3 7a00 	vstr	s15, [r3]
	  //apply limit
	  if (pos_command[i] < - V_MAX) pos_command[i] = -V_MAX;
 8002b52:	4a26      	ldr	r2, [pc, #152]	; (8002bec <PositionController+0x1dc>)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	edd3 7a00 	vldr	s15, [r3]
 8002b5e:	eeb9 7a08 	vmov.f32	s14, #152	; 0xc0c00000 -6.0
 8002b62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b6a:	d505      	bpl.n	8002b78 <PositionController+0x168>
 8002b6c:	4a1f      	ldr	r2, [pc, #124]	; (8002bec <PositionController+0x1dc>)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	4a1e      	ldr	r2, [pc, #120]	; (8002bf0 <PositionController+0x1e0>)
 8002b76:	601a      	str	r2, [r3, #0]

	  if (pos_command[i] > V_MAX)   pos_command[i] = V_MAX;
 8002b78:	4a1c      	ldr	r2, [pc, #112]	; (8002bec <PositionController+0x1dc>)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	edd3 7a00 	vldr	s15, [r3]
 8002b84:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002b88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b90:	dd05      	ble.n	8002b9e <PositionController+0x18e>
 8002b92:	4a16      	ldr	r2, [pc, #88]	; (8002bec <PositionController+0x1dc>)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	4a16      	ldr	r2, [pc, #88]	; (8002bf4 <PositionController+0x1e4>)
 8002b9c:	601a      	str	r2, [r3, #0]
	for(int i = 1; i< 3; i++) {
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	607b      	str	r3, [r7, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	f77f af38 	ble.w	8002a1c <PositionController+0xc>

	  }

	}

	flag_pos_controller = 0;
 8002bac:	4b12      	ldr	r3, [pc, #72]	; (8002bf8 <PositionController+0x1e8>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	24000900 	.word	0x24000900
 8002bc4:	24000918 	.word	0x24000918
 8002bc8:	2400090c 	.word	0x2400090c
 8002bcc:	240067cc 	.word	0x240067cc
 8002bd0:	240009e8 	.word	0x240009e8
 8002bd4:	240008e8 	.word	0x240008e8
 8002bd8:	447a0000 	.word	0x447a0000
 8002bdc:	c47a0000 	.word	0xc47a0000
 8002be0:	24000830 	.word	0x24000830
 8002be4:	240009dc 	.word	0x240009dc
 8002be8:	24000924 	.word	0x24000924
 8002bec:	24000384 	.word	0x24000384
 8002bf0:	c0c00000 	.word	0xc0c00000
 8002bf4:	40c00000 	.word	0x40c00000
 8002bf8:	240002c8 	.word	0x240002c8

08002bfc <SpeedController>:

void SpeedController() {
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
//executed at 1000 Hz
	for(int i = 1; i< 3; i++) {
 8002c02:	2301      	movs	r3, #1
 8002c04:	607b      	str	r3, [r7, #4]
 8002c06:	e0dd      	b.n	8002dc4 <SpeedController+0x1c8>
		Joint_speed_target[i] = pos_command[i];
 8002c08:	4a74      	ldr	r2, [pc, #464]	; (8002ddc <SpeedController+0x1e0>)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	4973      	ldr	r1, [pc, #460]	; (8002de0 <SpeedController+0x1e4>)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	601a      	str	r2, [r3, #0]

	  speed_previous_error[i] = speed_error[i];
 8002c1c:	4a71      	ldr	r2, [pc, #452]	; (8002de4 <SpeedController+0x1e8>)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	4970      	ldr	r1, [pc, #448]	; (8002de8 <SpeedController+0x1ec>)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	601a      	str	r2, [r3, #0]

	  speed_error[i] = Joint_speed_target[i] - actualSpeed[i];
 8002c30:	4a6b      	ldr	r2, [pc, #428]	; (8002de0 <SpeedController+0x1e4>)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	ed93 7a00 	vldr	s14, [r3]
 8002c3c:	4a6b      	ldr	r2, [pc, #428]	; (8002dec <SpeedController+0x1f0>)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	edd3 7a00 	vldr	s15, [r3]
 8002c48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c4c:	4a65      	ldr	r2, [pc, #404]	; (8002de4 <SpeedController+0x1e8>)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4413      	add	r3, r2
 8002c54:	edc3 7a00 	vstr	s15, [r3]

	  speed_integral[i] = speed_integral[i] + speed_error[i];
 8002c58:	4a65      	ldr	r2, [pc, #404]	; (8002df0 <SpeedController+0x1f4>)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	ed93 7a00 	vldr	s14, [r3]
 8002c64:	4a5f      	ldr	r2, [pc, #380]	; (8002de4 <SpeedController+0x1e8>)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	edd3 7a00 	vldr	s15, [r3]
 8002c70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c74:	4a5e      	ldr	r2, [pc, #376]	; (8002df0 <SpeedController+0x1f4>)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	edc3 7a00 	vstr	s15, [r3]

	  speed_derivative[i] = speed_error[i] - speed_previous_error[i];
 8002c80:	4a58      	ldr	r2, [pc, #352]	; (8002de4 <SpeedController+0x1e8>)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	ed93 7a00 	vldr	s14, [r3]
 8002c8c:	4a56      	ldr	r2, [pc, #344]	; (8002de8 <SpeedController+0x1ec>)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	edd3 7a00 	vldr	s15, [r3]
 8002c98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c9c:	4a55      	ldr	r2, [pc, #340]	; (8002df4 <SpeedController+0x1f8>)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	edc3 7a00 	vstr	s15, [r3]

	  //anti windup
	  if (speed_integral[i] > MAX_INTEGRAL_ERROR || speed_integral[i] < -MAX_INTEGRAL_ERROR) speed_integral[i] = 0;
 8002ca8:	4a51      	ldr	r2, [pc, #324]	; (8002df0 <SpeedController+0x1f4>)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	edd3 7a00 	vldr	s15, [r3]
 8002cb4:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8002df8 <SpeedController+0x1fc>
 8002cb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc0:	dc0c      	bgt.n	8002cdc <SpeedController+0xe0>
 8002cc2:	4a4b      	ldr	r2, [pc, #300]	; (8002df0 <SpeedController+0x1f4>)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	edd3 7a00 	vldr	s15, [r3]
 8002cce:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8002dfc <SpeedController+0x200>
 8002cd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cda:	d506      	bpl.n	8002cea <SpeedController+0xee>
 8002cdc:	4a44      	ldr	r2, [pc, #272]	; (8002df0 <SpeedController+0x1f4>)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f04f 0200 	mov.w	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]

	  speed_command[i] = speed_KP[i] * speed_error[i] + speed_KI[i] * speed_integral[i] + speed_KD[i] * speed_derivative[i];
 8002cea:	4a45      	ldr	r2, [pc, #276]	; (8002e00 <SpeedController+0x204>)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	ed93 7a00 	vldr	s14, [r3]
 8002cf6:	4a3b      	ldr	r2, [pc, #236]	; (8002de4 <SpeedController+0x1e8>)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	edd3 7a00 	vldr	s15, [r3]
 8002d02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d06:	4a3f      	ldr	r2, [pc, #252]	; (8002e04 <SpeedController+0x208>)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	edd3 6a00 	vldr	s13, [r3]
 8002d12:	4a37      	ldr	r2, [pc, #220]	; (8002df0 <SpeedController+0x1f4>)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	edd3 7a00 	vldr	s15, [r3]
 8002d1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d26:	4a38      	ldr	r2, [pc, #224]	; (8002e08 <SpeedController+0x20c>)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	edd3 6a00 	vldr	s13, [r3]
 8002d32:	4a30      	ldr	r2, [pc, #192]	; (8002df4 <SpeedController+0x1f8>)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	edd3 7a00 	vldr	s15, [r3]
 8002d3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d46:	4a31      	ldr	r2, [pc, #196]	; (8002e0c <SpeedController+0x210>)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	edc3 7a00 	vstr	s15, [r3]
	  //apply limit
	  if (speed_command[i] < - T_MAX) speed_command[i] = -T_MAX;
 8002d52:	4a2e      	ldr	r2, [pc, #184]	; (8002e0c <SpeedController+0x210>)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	edd3 7a00 	vldr	s15, [r3]
 8002d5e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002e10 <SpeedController+0x214>
 8002d62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d6a:	d505      	bpl.n	8002d78 <SpeedController+0x17c>
 8002d6c:	4a27      	ldr	r2, [pc, #156]	; (8002e0c <SpeedController+0x210>)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	4a27      	ldr	r2, [pc, #156]	; (8002e14 <SpeedController+0x218>)
 8002d76:	601a      	str	r2, [r3, #0]

	  if (speed_command[i] > T_MAX)   speed_command[i] = T_MAX;
 8002d78:	4a24      	ldr	r2, [pc, #144]	; (8002e0c <SpeedController+0x210>)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	edd3 7a00 	vldr	s15, [r3]
 8002d84:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002e18 <SpeedController+0x21c>
 8002d88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d90:	dd05      	ble.n	8002d9e <SpeedController+0x1a2>
 8002d92:	4a1e      	ldr	r2, [pc, #120]	; (8002e0c <SpeedController+0x210>)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	4a20      	ldr	r2, [pc, #128]	; (8002e1c <SpeedController+0x220>)
 8002d9c:	601a      	str	r2, [r3, #0]
	  if(SPEED_CONTROLLER_DEBUG) {
		//printf("SPEED\\ MOT_ID: %d - Target: %f - Actual: %f - Error: %f - Command: %f\n",i+1,Joint_speed_target[i],actualSpeed[i],speed_error[i],speed_command[i]);

	  }

	  SendTorque(i+1, speed_command[i]); //i+1 perche i motori sono 1,2,3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	491a      	ldr	r1, [pc, #104]	; (8002e0c <SpeedController+0x210>)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	edd3 7a00 	vldr	s15, [r3]
 8002dae:	eeb0 0a67 	vmov.f32	s0, s15
 8002db2:	4610      	mov	r0, r2
 8002db4:	f7fe fc46 	bl	8001644 <SendTorque>

	  HAL_Delay(1);
 8002db8:	2001      	movs	r0, #1
 8002dba:	f000 fef9 	bl	8003bb0 <HAL_Delay>
	for(int i = 1; i< 3; i++) {
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	607b      	str	r3, [r7, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	f77f af1e 	ble.w	8002c08 <SpeedController+0xc>
	}
	flag_speed_controller = 0;
 8002dcc:	4b14      	ldr	r3, [pc, #80]	; (8002e20 <SpeedController+0x224>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]

}
 8002dd2:	bf00      	nop
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	24000384 	.word	0x24000384
 8002de0:	24000324 	.word	0x24000324
 8002de4:	24000848 	.word	0x24000848
 8002de8:	240008d0 	.word	0x240008d0
 8002dec:	240067b4 	.word	0x240067b4
 8002df0:	24006930 	.word	0x24006930
 8002df4:	240067c0 	.word	0x240067c0
 8002df8:	447a0000 	.word	0x447a0000
 8002dfc:	c47a0000 	.word	0xc47a0000
 8002e00:	24006924 	.word	0x24006924
 8002e04:	240008c4 	.word	0x240008c4
 8002e08:	240008dc 	.word	0x240008dc
 8002e0c:	2400030c 	.word	0x2400030c
 8002e10:	c2400000 	.word	0xc2400000
 8002e14:	c2400000 	.word	0xc2400000
 8002e18:	42400000 	.word	0x42400000
 8002e1c:	42400000 	.word	0x42400000
 8002e20:	240002cc 	.word	0x240002cc

08002e24 <POPUP_system_check>:
 * 2 - send system_status request to link board (x2)
 * -- link board answer with its id in frame 0 and the status of sensors in other frame
 *
 *
 */
void POPUP_system_check() {
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
	//start procedure
	//moto
	printf("System check started..\n");
 8002e2a:	4835      	ldr	r0, [pc, #212]	; (8002f00 <POPUP_system_check+0xdc>)
 8002e2c:	f008 faa4 	bl	800b378 <puts>


	HAL_GPIO_WritePin(GPIOB,LD3_Pin, SET); // red led on
 8002e30:	2201      	movs	r2, #1
 8002e32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e36:	4833      	ldr	r0, [pc, #204]	; (8002f04 <POPUP_system_check+0xe0>)
 8002e38:	f002 ffa8 	bl	8005d8c <HAL_GPIO_WritePin>

	int i = 0;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	607b      	str	r3, [r7, #4]


	//link board status check
	// 2 link board should be found

	for(i = 1; i < 2; i++) {
 8002e40:	2301      	movs	r3, #1
 8002e42:	607b      	str	r3, [r7, #4]
 8002e44:	e03e      	b.n	8002ec4 <POPUP_system_check+0xa0>
	while(link_status_flag[i] == 0) {
		printf("Link Board %d not found\n",i+1);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	482e      	ldr	r0, [pc, #184]	; (8002f08 <POPUP_system_check+0xe4>)
 8002e4e:	f008 fa0d 	bl	800b26c <iprintf>
		HAL_Delay(1000);
 8002e52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e56:	f000 feab 	bl	8003bb0 <HAL_Delay>
	while(link_status_flag[i] == 0) {
 8002e5a:	4a2c      	ldr	r2, [pc, #176]	; (8002f0c <POPUP_system_check+0xe8>)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0ef      	beq.n	8002e46 <POPUP_system_check+0x22>
	}
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, RESET);
 8002e66:	2200      	movs	r2, #0
 8002e68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e6c:	4825      	ldr	r0, [pc, #148]	; (8002f04 <POPUP_system_check+0xe0>)
 8002e6e:	f002 ff8d 	bl	8005d8c <HAL_GPIO_WritePin>

	if (link_status_flag[i] == 1) printf("Link %d Sensor OK\n",i+1);
 8002e72:	4a26      	ldr	r2, [pc, #152]	; (8002f0c <POPUP_system_check+0xe8>)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d106      	bne.n	8002e8c <POPUP_system_check+0x68>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	3301      	adds	r3, #1
 8002e82:	4619      	mov	r1, r3
 8002e84:	4822      	ldr	r0, [pc, #136]	; (8002f10 <POPUP_system_check+0xec>)
 8002e86:	f008 f9f1 	bl	800b26c <iprintf>
 8002e8a:	e018      	b.n	8002ebe <POPUP_system_check+0x9a>
    else if (link_status_flag[i] == 4) printf("Link Board %d IMUs error\n",i+1);
 8002e8c:	4a1f      	ldr	r2, [pc, #124]	; (8002f0c <POPUP_system_check+0xe8>)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e94:	2b04      	cmp	r3, #4
 8002e96:	d106      	bne.n	8002ea6 <POPUP_system_check+0x82>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	481d      	ldr	r0, [pc, #116]	; (8002f14 <POPUP_system_check+0xf0>)
 8002ea0:	f008 f9e4 	bl	800b26c <iprintf>
 8002ea4:	e00b      	b.n	8002ebe <POPUP_system_check+0x9a>
    else if (link_status_flag[i] == 2) printf("Link Board %d RBS_ADC error\n",i+1);
 8002ea6:	4a19      	ldr	r2, [pc, #100]	; (8002f0c <POPUP_system_check+0xe8>)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d105      	bne.n	8002ebe <POPUP_system_check+0x9a>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4817      	ldr	r0, [pc, #92]	; (8002f18 <POPUP_system_check+0xf4>)
 8002eba:	f008 f9d7 	bl	800b26c <iprintf>
	for(i = 1; i < 2; i++) {
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	607b      	str	r3, [r7, #4]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	ddc7      	ble.n	8002e5a <POPUP_system_check+0x36>
	}
	//sent status check command
	if(link_status_flag[0] == 1) {
 8002eca:	4b10      	ldr	r3, [pc, #64]	; (8002f0c <POPUP_system_check+0xe8>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d105      	bne.n	8002ede <POPUP_system_check+0xba>
	CAN_TX_link_board_status_check(10); //send status check to link board 1
 8002ed2:	200a      	movs	r0, #10
 8002ed4:	f7fe fad6 	bl	8001484 <CAN_TX_link_board_status_check>
	printf("sent status check to link board 1\n");
 8002ed8:	4810      	ldr	r0, [pc, #64]	; (8002f1c <POPUP_system_check+0xf8>)
 8002eda:	f008 fa4d 	bl	800b378 <puts>
	}

	if(link_status_flag[1] == 1) {
 8002ede:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <POPUP_system_check+0xe8>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d105      	bne.n	8002ef2 <POPUP_system_check+0xce>
	CAN_TX_link_board_status_check(11); //send status check to link board 1
 8002ee6:	200b      	movs	r0, #11
 8002ee8:	f7fe facc 	bl	8001484 <CAN_TX_link_board_status_check>
	printf("sent status check to link board 2\n");
 8002eec:	480c      	ldr	r0, [pc, #48]	; (8002f20 <POPUP_system_check+0xfc>)
 8002eee:	f008 fa43 	bl	800b378 <puts>
	}

	printf("\nSystem check completed\n\n\n");
 8002ef2:	480c      	ldr	r0, [pc, #48]	; (8002f24 <POPUP_system_check+0x100>)
 8002ef4:	f008 fa40 	bl	800b378 <puts>

}
 8002ef8:	bf00      	nop
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	0800e278 	.word	0x0800e278
 8002f04:	58020400 	.word	0x58020400
 8002f08:	0800e290 	.word	0x0800e290
 8002f0c:	24006854 	.word	0x24006854
 8002f10:	0800e2ac 	.word	0x0800e2ac
 8002f14:	0800e2c0 	.word	0x0800e2c0
 8002f18:	0800e2dc 	.word	0x0800e2dc
 8002f1c:	0800e2fc 	.word	0x0800e2fc
 8002f20:	0800e320 	.word	0x0800e320
 8002f24:	0800e344 	.word	0x0800e344

08002f28 <POPUP_activate_motors>:

void POPUP_activate_motors() {
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
	int i = 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	607b      	str	r3, [r7, #4]
		for(i = 0; i<3; i++) {
 8002f32:	2300      	movs	r3, #0
 8002f34:	607b      	str	r3, [r7, #4]
 8002f36:	e010      	b.n	8002f5a <POPUP_activate_motors+0x32>
		ActivateMotor(i+1);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fe fb49 	bl	80015d4 <ActivateMotor>
		printf("Motor %d activated\n",i+1);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	3301      	adds	r3, #1
 8002f46:	4619      	mov	r1, r3
 8002f48:	4808      	ldr	r0, [pc, #32]	; (8002f6c <POPUP_activate_motors+0x44>)
 8002f4a:	f008 f98f 	bl	800b26c <iprintf>
		HAL_Delay(100);
 8002f4e:	2064      	movs	r0, #100	; 0x64
 8002f50:	f000 fe2e 	bl	8003bb0 <HAL_Delay>
		for(i = 0; i<3; i++) {
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3301      	adds	r3, #1
 8002f58:	607b      	str	r3, [r7, #4]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	ddeb      	ble.n	8002f38 <POPUP_activate_motors+0x10>

	}
}
 8002f60:	bf00      	nop
 8002f62:	bf00      	nop
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	0800e360 	.word	0x0800e360

08002f70 <POPUP_start_controllers>:

void POPUP_start_controllers() {
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
	//start timers base
	HAL_TIM_Base_Start_IT(&htim2);
 8002f74:	4803      	ldr	r0, [pc, #12]	; (8002f84 <POPUP_start_controllers+0x14>)
 8002f76:	f005 fc25 	bl	80087c4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8002f7a:	4803      	ldr	r0, [pc, #12]	; (8002f88 <POPUP_start_controllers+0x18>)
 8002f7c:	f005 fc22 	bl	80087c4 <HAL_TIM_Base_Start_IT>

}
 8002f80:	bf00      	nop
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	240067d8 	.word	0x240067d8
 8002f88:	24000878 	.word	0x24000878

08002f8c <POPUP_start_plan>:

void POPUP_start_plan() {
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
	//start timers base
	HAL_TIM_Base_Start_IT(&htim4);
 8002f90:	4802      	ldr	r0, [pc, #8]	; (8002f9c <POPUP_start_plan+0x10>)
 8002f92:	f005 fc17 	bl	80087c4 <HAL_TIM_Base_Start_IT>

}
 8002f96:	bf00      	nop
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	24000338 	.word	0x24000338

08002fa0 <POPUP_calibrate_link_sensors>:

void POPUP_homing() {

}

void POPUP_calibrate_link_sensors(int id) {
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
	HAL_Delay(1000);
 8002fa8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002fac:	f000 fe00 	bl	8003bb0 <HAL_Delay>
	CAN_TX_link_board_calibration(id); //send status check to link board 1
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f7fe fa8f 	bl	80014d4 <CAN_TX_link_board_calibration>
	printf("sent calibration command to link board %d\n",(id - 9));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	3b09      	subs	r3, #9
 8002fba:	4619      	mov	r1, r3
 8002fbc:	480d      	ldr	r0, [pc, #52]	; (8002ff4 <POPUP_calibrate_link_sensors+0x54>)
 8002fbe:	f008 f955 	bl	800b26c <iprintf>
	//wait calibration check from link board
    while(link_cal_check[id - 10] == 0) {
 8002fc2:	e006      	b.n	8002fd2 <POPUP_calibrate_link_sensors+0x32>
    	printf("Waiting calibration check from link board\n");
 8002fc4:	480c      	ldr	r0, [pc, #48]	; (8002ff8 <POPUP_calibrate_link_sensors+0x58>)
 8002fc6:	f008 f9d7 	bl	800b378 <puts>
    	HAL_Delay(1000);
 8002fca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002fce:	f000 fdef 	bl	8003bb0 <HAL_Delay>
    while(link_cal_check[id - 10] == 0) {
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	3b0a      	subs	r3, #10
 8002fd6:	4a09      	ldr	r2, [pc, #36]	; (8002ffc <POPUP_calibrate_link_sensors+0x5c>)
 8002fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d0f1      	beq.n	8002fc4 <POPUP_calibrate_link_sensors+0x24>
    }
    printf("Calibration check received from link board %d\n",(id - 9));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3b09      	subs	r3, #9
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4806      	ldr	r0, [pc, #24]	; (8003000 <POPUP_calibrate_link_sensors+0x60>)
 8002fe8:	f008 f940 	bl	800b26c <iprintf>
}
 8002fec:	bf00      	nop
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	0800e374 	.word	0x0800e374
 8002ff8:	0800e3a0 	.word	0x0800e3a0
 8002ffc:	24006824 	.word	0x24006824
 8003000:	0800e3cc 	.word	0x0800e3cc

08003004 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this callback and toggle LED
	if (htim == &htim2) {
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a0b      	ldr	r2, [pc, #44]	; (800303c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d102      	bne.n	800301a <HAL_TIM_PeriodElapsedCallback+0x16>
		flag_speed_controller = 1;
 8003014:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003016:	2201      	movs	r2, #1
 8003018:	601a      	str	r2, [r3, #0]
	}
	if (htim == &htim3) {
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a09      	ldr	r2, [pc, #36]	; (8003044 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d102      	bne.n	8003028 <HAL_TIM_PeriodElapsedCallback+0x24>
		flag_pos_controller = 1;
 8003022:	4b09      	ldr	r3, [pc, #36]	; (8003048 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003024:	2201      	movs	r2, #1
 8003026:	601a      	str	r2, [r3, #0]
	}

	if (htim == &htim4) {
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a08      	ldr	r2, [pc, #32]	; (800304c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d101      	bne.n	8003034 <HAL_TIM_PeriodElapsedCallback+0x30>
		plan_step();
 8003030:	f7ff fcae 	bl	8002990 <plan_step>
	}

}
 8003034:	bf00      	nop
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	240067d8 	.word	0x240067d8
 8003040:	240002cc 	.word	0x240002cc
 8003044:	24000878 	.word	0x24000878
 8003048:	240002c8 	.word	0x240002c8
 800304c:	24000338 	.word	0x24000338

08003050 <uint_to_float>:

float uint_to_float( int x_int , float x_min , float x_max , int bits) {
 8003050:	b480      	push	{r7}
 8003052:	b087      	sub	sp, #28
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	ed87 0a02 	vstr	s0, [r7, #8]
 800305c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]

  float span = x_max - x_min;
 8003062:	ed97 7a01 	vldr	s14, [r7, #4]
 8003066:	edd7 7a02 	vldr	s15, [r7, #8]
 800306a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800306e:	edc7 7a05 	vstr	s15, [r7, #20]
  float offset = x_min;
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	613b      	str	r3, [r7, #16]

  return ((float)x_int) * span / ((float)((1 << bits) - 1)) + offset;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	ee07 3a90 	vmov	s15, r3
 800307c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003080:	edd7 7a05 	vldr	s15, [r7, #20]
 8003084:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003088:	2201      	movs	r2, #1
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	3b01      	subs	r3, #1
 8003092:	ee07 3a90 	vmov	s15, r3
 8003096:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800309a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800309e:	edd7 7a04 	vldr	s15, [r7, #16]
 80030a2:	ee77 7a27 	vadd.f32	s15, s14, s15

}
 80030a6:	eeb0 0a67 	vmov.f32	s0, s15
 80030aa:	371c      	adds	r7, #28
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <float_to_uint>:

int float_to_uint(float x, float x_min , float x_max, unsigned int bits) {
 80030b4:	b480      	push	{r7}
 80030b6:	b087      	sub	sp, #28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	ed87 0a03 	vstr	s0, [r7, #12]
 80030be:	edc7 0a02 	vstr	s1, [r7, #8]
 80030c2:	ed87 1a01 	vstr	s2, [r7, #4]
 80030c6:	6038      	str	r0, [r7, #0]

  float span = x_max - x_min;
 80030c8:	ed97 7a01 	vldr	s14, [r7, #4]
 80030cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80030d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030d4:	edc7 7a05 	vstr	s15, [r7, #20]
  if (x < x_min) x = x_min;
 80030d8:	ed97 7a03 	vldr	s14, [r7, #12]
 80030dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80030e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030e8:	d502      	bpl.n	80030f0 <float_to_uint+0x3c>
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	e00a      	b.n	8003106 <float_to_uint+0x52>
  else if (x > x_max ) x = x_max;
 80030f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80030f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80030f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003100:	dd01      	ble.n	8003106 <float_to_uint+0x52>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	60fb      	str	r3, [r7, #12]

  return (int)((x - x_min) * ((float)((1 << bits) - 1) / span));
 8003106:	ed97 7a03 	vldr	s14, [r7, #12]
 800310a:	edd7 7a02 	vldr	s15, [r7, #8]
 800310e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003112:	2201      	movs	r2, #1
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	3b01      	subs	r3, #1
 800311c:	ee07 3a90 	vmov	s15, r3
 8003120:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003124:	edd7 6a05 	vldr	s13, [r7, #20]
 8003128:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800312c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003130:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003134:	ee17 3a90 	vmov	r3, s15

}
 8003138:	4618      	mov	r0, r3
 800313a:	371c      	adds	r7, #28
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003148:	b672      	cpsid	i
}
 800314a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800314c:	e7fe      	b.n	800314c <Error_Handler+0x8>
	...

08003150 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8003158:	4a07      	ldr	r2, [pc, #28]	; (8003178 <RetargetInit+0x28>)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800315e:	4b07      	ldr	r3, [pc, #28]	; (800317c <RetargetInit+0x2c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6898      	ldr	r0, [r3, #8]
 8003164:	2300      	movs	r3, #0
 8003166:	2202      	movs	r2, #2
 8003168:	2100      	movs	r1, #0
 800316a:	f008 f90d 	bl	800b388 <setvbuf>
}
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	2400c6fc 	.word	0x2400c6fc
 800317c:	24000010 	.word	0x24000010

08003180 <_isatty>:

int _isatty(int fd) {
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	db04      	blt.n	8003198 <_isatty+0x18>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b02      	cmp	r3, #2
 8003192:	dc01      	bgt.n	8003198 <_isatty+0x18>
    return 1;
 8003194:	2301      	movs	r3, #1
 8003196:	e005      	b.n	80031a4 <_isatty+0x24>

  errno = EBADF;
 8003198:	f007 fbe6 	bl	800a968 <__errno>
 800319c:	4603      	mov	r3, r0
 800319e:	2209      	movs	r2, #9
 80031a0:	601a      	str	r2, [r3, #0]
  return 0;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <_write>:

int _write(int fd, char* ptr, int len) {
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d002      	beq.n	80031c4 <_write+0x18>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d111      	bne.n	80031e8 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80031c4:	4b0e      	ldr	r3, [pc, #56]	; (8003200 <_write+0x54>)
 80031c6:	6818      	ldr	r0, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	f04f 33ff 	mov.w	r3, #4294967295
 80031d0:	68b9      	ldr	r1, [r7, #8]
 80031d2:	f005 ffd1 	bl	8009178 <HAL_UART_Transmit>
 80031d6:	4603      	mov	r3, r0
 80031d8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80031da:	7dfb      	ldrb	r3, [r7, #23]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <_write+0x38>
      return len;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	e008      	b.n	80031f6 <_write+0x4a>
    else
      return EIO;
 80031e4:	2305      	movs	r3, #5
 80031e6:	e006      	b.n	80031f6 <_write+0x4a>
  }
  errno = EBADF;
 80031e8:	f007 fbbe 	bl	800a968 <__errno>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2209      	movs	r2, #9
 80031f0:	601a      	str	r2, [r3, #0]
  return -1;
 80031f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3718      	adds	r7, #24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	2400c6fc 	.word	0x2400c6fc

08003204 <_close>:

int _close(int fd) {
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	db04      	blt.n	800321c <_close+0x18>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b02      	cmp	r3, #2
 8003216:	dc01      	bgt.n	800321c <_close+0x18>
    return 0;
 8003218:	2300      	movs	r3, #0
 800321a:	e006      	b.n	800322a <_close+0x26>

  errno = EBADF;
 800321c:	f007 fba4 	bl	800a968 <__errno>
 8003220:	4603      	mov	r3, r0
 8003222:	2209      	movs	r2, #9
 8003224:	601a      	str	r2, [r3, #0]
  return -1;
 8003226:	f04f 33ff 	mov.w	r3, #4294967295
}
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8003232:	b580      	push	{r7, lr}
 8003234:	b084      	sub	sp, #16
 8003236:	af00      	add	r7, sp, #0
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800323e:	f007 fb93 	bl	800a968 <__errno>
 8003242:	4603      	mov	r3, r0
 8003244:	2209      	movs	r2, #9
 8003246:	601a      	str	r2, [r3, #0]
  return -1;
 8003248:	f04f 33ff 	mov.w	r3, #4294967295
}
 800324c:	4618      	mov	r0, r3
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <_read>:

int _read(int fd, char* ptr, int len) {
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d110      	bne.n	8003288 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8003266:	4b0e      	ldr	r3, [pc, #56]	; (80032a0 <_read+0x4c>)
 8003268:	6818      	ldr	r0, [r3, #0]
 800326a:	f04f 33ff 	mov.w	r3, #4294967295
 800326e:	2201      	movs	r2, #1
 8003270:	68b9      	ldr	r1, [r7, #8]
 8003272:	f006 f817 	bl	80092a4 <HAL_UART_Receive>
 8003276:	4603      	mov	r3, r0
 8003278:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800327a:	7dfb      	ldrb	r3, [r7, #23]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <_read+0x30>
      return 1;
 8003280:	2301      	movs	r3, #1
 8003282:	e008      	b.n	8003296 <_read+0x42>
    else
      return EIO;
 8003284:	2305      	movs	r3, #5
 8003286:	e006      	b.n	8003296 <_read+0x42>
  }
  errno = EBADF;
 8003288:	f007 fb6e 	bl	800a968 <__errno>
 800328c:	4603      	mov	r3, r0
 800328e:	2209      	movs	r2, #9
 8003290:	601a      	str	r2, [r3, #0]
  return -1;
 8003292:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003296:	4618      	mov	r0, r3
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	2400c6fc 	.word	0x2400c6fc

080032a4 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	db08      	blt.n	80032c6 <_fstat+0x22>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	dc05      	bgt.n	80032c6 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032c0:	605a      	str	r2, [r3, #4]
    return 0;
 80032c2:	2300      	movs	r3, #0
 80032c4:	e005      	b.n	80032d2 <_fstat+0x2e>
  }

  errno = EBADF;
 80032c6:	f007 fb4f 	bl	800a968 <__errno>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2209      	movs	r2, #9
 80032ce:	601a      	str	r2, [r3, #0]
  return 0;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
	...

080032dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032e2:	4b0a      	ldr	r3, [pc, #40]	; (800330c <HAL_MspInit+0x30>)
 80032e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80032e8:	4a08      	ldr	r2, [pc, #32]	; (800330c <HAL_MspInit+0x30>)
 80032ea:	f043 0302 	orr.w	r3, r3, #2
 80032ee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80032f2:	4b06      	ldr	r3, [pc, #24]	; (800330c <HAL_MspInit+0x30>)
 80032f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	607b      	str	r3, [r7, #4]
 80032fe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	58024400 	.word	0x58024400

08003310 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08e      	sub	sp, #56	; 0x38
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	605a      	str	r2, [r3, #4]
 8003322:	609a      	str	r2, [r3, #8]
 8003324:	60da      	str	r2, [r3, #12]
 8003326:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a59      	ldr	r2, [pc, #356]	; (8003494 <HAL_ETH_MspInit+0x184>)
 800332e:	4293      	cmp	r3, r2
 8003330:	f040 80ab 	bne.w	800348a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8003334:	4b58      	ldr	r3, [pc, #352]	; (8003498 <HAL_ETH_MspInit+0x188>)
 8003336:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800333a:	4a57      	ldr	r2, [pc, #348]	; (8003498 <HAL_ETH_MspInit+0x188>)
 800333c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003340:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003344:	4b54      	ldr	r3, [pc, #336]	; (8003498 <HAL_ETH_MspInit+0x188>)
 8003346:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800334a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800334e:	623b      	str	r3, [r7, #32]
 8003350:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8003352:	4b51      	ldr	r3, [pc, #324]	; (8003498 <HAL_ETH_MspInit+0x188>)
 8003354:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003358:	4a4f      	ldr	r2, [pc, #316]	; (8003498 <HAL_ETH_MspInit+0x188>)
 800335a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800335e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003362:	4b4d      	ldr	r3, [pc, #308]	; (8003498 <HAL_ETH_MspInit+0x188>)
 8003364:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800336c:	61fb      	str	r3, [r7, #28]
 800336e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8003370:	4b49      	ldr	r3, [pc, #292]	; (8003498 <HAL_ETH_MspInit+0x188>)
 8003372:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003376:	4a48      	ldr	r2, [pc, #288]	; (8003498 <HAL_ETH_MspInit+0x188>)
 8003378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800337c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003380:	4b45      	ldr	r3, [pc, #276]	; (8003498 <HAL_ETH_MspInit+0x188>)
 8003382:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338a:	61bb      	str	r3, [r7, #24]
 800338c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800338e:	4b42      	ldr	r3, [pc, #264]	; (8003498 <HAL_ETH_MspInit+0x188>)
 8003390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003394:	4a40      	ldr	r2, [pc, #256]	; (8003498 <HAL_ETH_MspInit+0x188>)
 8003396:	f043 0304 	orr.w	r3, r3, #4
 800339a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800339e:	4b3e      	ldr	r3, [pc, #248]	; (8003498 <HAL_ETH_MspInit+0x188>)
 80033a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	617b      	str	r3, [r7, #20]
 80033aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ac:	4b3a      	ldr	r3, [pc, #232]	; (8003498 <HAL_ETH_MspInit+0x188>)
 80033ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033b2:	4a39      	ldr	r2, [pc, #228]	; (8003498 <HAL_ETH_MspInit+0x188>)
 80033b4:	f043 0301 	orr.w	r3, r3, #1
 80033b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033bc:	4b36      	ldr	r3, [pc, #216]	; (8003498 <HAL_ETH_MspInit+0x188>)
 80033be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	613b      	str	r3, [r7, #16]
 80033c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ca:	4b33      	ldr	r3, [pc, #204]	; (8003498 <HAL_ETH_MspInit+0x188>)
 80033cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033d0:	4a31      	ldr	r2, [pc, #196]	; (8003498 <HAL_ETH_MspInit+0x188>)
 80033d2:	f043 0302 	orr.w	r3, r3, #2
 80033d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033da:	4b2f      	ldr	r3, [pc, #188]	; (8003498 <HAL_ETH_MspInit+0x188>)
 80033dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80033e8:	4b2b      	ldr	r3, [pc, #172]	; (8003498 <HAL_ETH_MspInit+0x188>)
 80033ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033ee:	4a2a      	ldr	r2, [pc, #168]	; (8003498 <HAL_ETH_MspInit+0x188>)
 80033f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033f8:	4b27      	ldr	r3, [pc, #156]	; (8003498 <HAL_ETH_MspInit+0x188>)
 80033fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003402:	60bb      	str	r3, [r7, #8]
 8003404:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003406:	2332      	movs	r3, #50	; 0x32
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340a:	2302      	movs	r3, #2
 800340c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340e:	2300      	movs	r3, #0
 8003410:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003412:	2300      	movs	r3, #0
 8003414:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003416:	230b      	movs	r3, #11
 8003418:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800341a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800341e:	4619      	mov	r1, r3
 8003420:	481e      	ldr	r0, [pc, #120]	; (800349c <HAL_ETH_MspInit+0x18c>)
 8003422:	f002 fb03 	bl	8005a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003426:	2386      	movs	r3, #134	; 0x86
 8003428:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342a:	2302      	movs	r3, #2
 800342c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342e:	2300      	movs	r3, #0
 8003430:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003432:	2300      	movs	r3, #0
 8003434:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003436:	230b      	movs	r3, #11
 8003438:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800343a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800343e:	4619      	mov	r1, r3
 8003440:	4817      	ldr	r0, [pc, #92]	; (80034a0 <HAL_ETH_MspInit+0x190>)
 8003442:	f002 faf3 	bl	8005a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003446:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800344a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344c:	2302      	movs	r3, #2
 800344e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003450:	2300      	movs	r3, #0
 8003452:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003454:	2300      	movs	r3, #0
 8003456:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003458:	230b      	movs	r3, #11
 800345a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800345c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003460:	4619      	mov	r1, r3
 8003462:	4810      	ldr	r0, [pc, #64]	; (80034a4 <HAL_ETH_MspInit+0x194>)
 8003464:	f002 fae2 	bl	8005a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8003468:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800346c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346e:	2302      	movs	r3, #2
 8003470:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003472:	2300      	movs	r3, #0
 8003474:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003476:	2300      	movs	r3, #0
 8003478:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800347a:	230b      	movs	r3, #11
 800347c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800347e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003482:	4619      	mov	r1, r3
 8003484:	4808      	ldr	r0, [pc, #32]	; (80034a8 <HAL_ETH_MspInit+0x198>)
 8003486:	f002 fad1 	bl	8005a2c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800348a:	bf00      	nop
 800348c:	3738      	adds	r7, #56	; 0x38
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	40028000 	.word	0x40028000
 8003498:	58024400 	.word	0x58024400
 800349c:	58020800 	.word	0x58020800
 80034a0:	58020000 	.word	0x58020000
 80034a4:	58020400 	.word	0x58020400
 80034a8:	58021800 	.word	0x58021800

080034ac <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b0b8      	sub	sp, #224	; 0xe0
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	605a      	str	r2, [r3, #4]
 80034be:	609a      	str	r2, [r3, #8]
 80034c0:	60da      	str	r2, [r3, #12]
 80034c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034c4:	f107 0310 	add.w	r3, r7, #16
 80034c8:	22bc      	movs	r2, #188	; 0xbc
 80034ca:	2100      	movs	r1, #0
 80034cc:	4618      	mov	r0, r3
 80034ce:	f007 fa83 	bl	800a9d8 <memset>
  if(hfdcan->Instance==FDCAN1)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a29      	ldr	r2, [pc, #164]	; (800357c <HAL_FDCAN_MspInit+0xd0>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d14a      	bne.n	8003572 <HAL_FDCAN_MspInit+0xc6>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80034dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034e0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80034e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80034e6:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034e8:	f107 0310 	add.w	r3, r7, #16
 80034ec:	4618      	mov	r0, r3
 80034ee:	f003 fdaf 	bl	8007050 <HAL_RCCEx_PeriphCLKConfig>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80034f8:	f7ff fe24 	bl	8003144 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80034fc:	4b20      	ldr	r3, [pc, #128]	; (8003580 <HAL_FDCAN_MspInit+0xd4>)
 80034fe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003502:	4a1f      	ldr	r2, [pc, #124]	; (8003580 <HAL_FDCAN_MspInit+0xd4>)
 8003504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003508:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800350c:	4b1c      	ldr	r3, [pc, #112]	; (8003580 <HAL_FDCAN_MspInit+0xd4>)
 800350e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800351a:	4b19      	ldr	r3, [pc, #100]	; (8003580 <HAL_FDCAN_MspInit+0xd4>)
 800351c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003520:	4a17      	ldr	r2, [pc, #92]	; (8003580 <HAL_FDCAN_MspInit+0xd4>)
 8003522:	f043 0308 	orr.w	r3, r3, #8
 8003526:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800352a:	4b15      	ldr	r3, [pc, #84]	; (8003580 <HAL_FDCAN_MspInit+0xd4>)
 800352c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003530:	f003 0308 	and.w	r3, r3, #8
 8003534:	60bb      	str	r3, [r7, #8]
 8003536:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003538:	2303      	movs	r3, #3
 800353a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800353e:	2302      	movs	r3, #2
 8003540:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003544:	2300      	movs	r3, #0
 8003546:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800354a:	2300      	movs	r3, #0
 800354c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003550:	2309      	movs	r3, #9
 8003552:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003556:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800355a:	4619      	mov	r1, r3
 800355c:	4809      	ldr	r0, [pc, #36]	; (8003584 <HAL_FDCAN_MspInit+0xd8>)
 800355e:	f002 fa65 	bl	8005a2c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8003562:	2200      	movs	r2, #0
 8003564:	2100      	movs	r1, #0
 8003566:	2013      	movs	r0, #19
 8003568:	f000 fc41 	bl	8003dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800356c:	2013      	movs	r0, #19
 800356e:	f000 fc58 	bl	8003e22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8003572:	bf00      	nop
 8003574:	37e0      	adds	r7, #224	; 0xe0
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	4000a000 	.word	0x4000a000
 8003580:	58024400 	.word	0x58024400
 8003584:	58020c00 	.word	0x58020c00

08003588 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003598:	d117      	bne.n	80035ca <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800359a:	4b2a      	ldr	r3, [pc, #168]	; (8003644 <HAL_TIM_Base_MspInit+0xbc>)
 800359c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035a0:	4a28      	ldr	r2, [pc, #160]	; (8003644 <HAL_TIM_Base_MspInit+0xbc>)
 80035a2:	f043 0301 	orr.w	r3, r3, #1
 80035a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80035aa:	4b26      	ldr	r3, [pc, #152]	; (8003644 <HAL_TIM_Base_MspInit+0xbc>)
 80035ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	617b      	str	r3, [r7, #20]
 80035b6:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80035b8:	2200      	movs	r2, #0
 80035ba:	2100      	movs	r1, #0
 80035bc:	201c      	movs	r0, #28
 80035be:	f000 fc16 	bl	8003dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80035c2:	201c      	movs	r0, #28
 80035c4:	f000 fc2d 	bl	8003e22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80035c8:	e038      	b.n	800363c <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM3)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a1e      	ldr	r2, [pc, #120]	; (8003648 <HAL_TIM_Base_MspInit+0xc0>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d117      	bne.n	8003604 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035d4:	4b1b      	ldr	r3, [pc, #108]	; (8003644 <HAL_TIM_Base_MspInit+0xbc>)
 80035d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035da:	4a1a      	ldr	r2, [pc, #104]	; (8003644 <HAL_TIM_Base_MspInit+0xbc>)
 80035dc:	f043 0302 	orr.w	r3, r3, #2
 80035e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80035e4:	4b17      	ldr	r3, [pc, #92]	; (8003644 <HAL_TIM_Base_MspInit+0xbc>)
 80035e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	613b      	str	r3, [r7, #16]
 80035f0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80035f2:	2200      	movs	r2, #0
 80035f4:	2100      	movs	r1, #0
 80035f6:	201d      	movs	r0, #29
 80035f8:	f000 fbf9 	bl	8003dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80035fc:	201d      	movs	r0, #29
 80035fe:	f000 fc10 	bl	8003e22 <HAL_NVIC_EnableIRQ>
}
 8003602:	e01b      	b.n	800363c <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM4)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a10      	ldr	r2, [pc, #64]	; (800364c <HAL_TIM_Base_MspInit+0xc4>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d116      	bne.n	800363c <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800360e:	4b0d      	ldr	r3, [pc, #52]	; (8003644 <HAL_TIM_Base_MspInit+0xbc>)
 8003610:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003614:	4a0b      	ldr	r2, [pc, #44]	; (8003644 <HAL_TIM_Base_MspInit+0xbc>)
 8003616:	f043 0304 	orr.w	r3, r3, #4
 800361a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800361e:	4b09      	ldr	r3, [pc, #36]	; (8003644 <HAL_TIM_Base_MspInit+0xbc>)
 8003620:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800362c:	2200      	movs	r2, #0
 800362e:	2100      	movs	r1, #0
 8003630:	201e      	movs	r0, #30
 8003632:	f000 fbdc 	bl	8003dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003636:	201e      	movs	r0, #30
 8003638:	f000 fbf3 	bl	8003e22 <HAL_NVIC_EnableIRQ>
}
 800363c:	bf00      	nop
 800363e:	3718      	adds	r7, #24
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	58024400 	.word	0x58024400
 8003648:	40000400 	.word	0x40000400
 800364c:	40000800 	.word	0x40000800

08003650 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b0b8      	sub	sp, #224	; 0xe0
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003658:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800365c:	2200      	movs	r2, #0
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	605a      	str	r2, [r3, #4]
 8003662:	609a      	str	r2, [r3, #8]
 8003664:	60da      	str	r2, [r3, #12]
 8003666:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003668:	f107 0310 	add.w	r3, r7, #16
 800366c:	22bc      	movs	r2, #188	; 0xbc
 800366e:	2100      	movs	r1, #0
 8003670:	4618      	mov	r0, r3
 8003672:	f007 f9b1 	bl	800a9d8 <memset>
  if(huart->Instance==USART3)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a25      	ldr	r2, [pc, #148]	; (8003710 <HAL_UART_MspInit+0xc0>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d142      	bne.n	8003706 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003680:	2302      	movs	r3, #2
 8003682:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003684:	2300      	movs	r3, #0
 8003686:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800368a:	f107 0310 	add.w	r3, r7, #16
 800368e:	4618      	mov	r0, r3
 8003690:	f003 fcde 	bl	8007050 <HAL_RCCEx_PeriphCLKConfig>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800369a:	f7ff fd53 	bl	8003144 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800369e:	4b1d      	ldr	r3, [pc, #116]	; (8003714 <HAL_UART_MspInit+0xc4>)
 80036a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036a4:	4a1b      	ldr	r2, [pc, #108]	; (8003714 <HAL_UART_MspInit+0xc4>)
 80036a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80036ae:	4b19      	ldr	r3, [pc, #100]	; (8003714 <HAL_UART_MspInit+0xc4>)
 80036b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036b8:	60fb      	str	r3, [r7, #12]
 80036ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036bc:	4b15      	ldr	r3, [pc, #84]	; (8003714 <HAL_UART_MspInit+0xc4>)
 80036be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036c2:	4a14      	ldr	r2, [pc, #80]	; (8003714 <HAL_UART_MspInit+0xc4>)
 80036c4:	f043 0308 	orr.w	r3, r3, #8
 80036c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036cc:	4b11      	ldr	r3, [pc, #68]	; (8003714 <HAL_UART_MspInit+0xc4>)
 80036ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	60bb      	str	r3, [r7, #8]
 80036d8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80036da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80036de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e2:	2302      	movs	r3, #2
 80036e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e8:	2300      	movs	r3, #0
 80036ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ee:	2300      	movs	r3, #0
 80036f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80036f4:	2307      	movs	r3, #7
 80036f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036fa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80036fe:	4619      	mov	r1, r3
 8003700:	4805      	ldr	r0, [pc, #20]	; (8003718 <HAL_UART_MspInit+0xc8>)
 8003702:	f002 f993 	bl	8005a2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003706:	bf00      	nop
 8003708:	37e0      	adds	r7, #224	; 0xe0
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40004800 	.word	0x40004800
 8003714:	58024400 	.word	0x58024400
 8003718:	58020c00 	.word	0x58020c00

0800371c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b0b8      	sub	sp, #224	; 0xe0
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003724:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	605a      	str	r2, [r3, #4]
 800372e:	609a      	str	r2, [r3, #8]
 8003730:	60da      	str	r2, [r3, #12]
 8003732:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003734:	f107 0310 	add.w	r3, r7, #16
 8003738:	22bc      	movs	r2, #188	; 0xbc
 800373a:	2100      	movs	r1, #0
 800373c:	4618      	mov	r0, r3
 800373e:	f007 f94b 	bl	800a9d8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a2f      	ldr	r2, [pc, #188]	; (8003804 <HAL_PCD_MspInit+0xe8>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d156      	bne.n	80037fa <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800374c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003750:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8003752:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003756:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800375a:	f107 0310 	add.w	r3, r7, #16
 800375e:	4618      	mov	r0, r3
 8003760:	f003 fc76 	bl	8007050 <HAL_RCCEx_PeriphCLKConfig>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 800376a:	f7ff fceb 	bl	8003144 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800376e:	f002 fcc3 	bl	80060f8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003772:	4b25      	ldr	r3, [pc, #148]	; (8003808 <HAL_PCD_MspInit+0xec>)
 8003774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003778:	4a23      	ldr	r2, [pc, #140]	; (8003808 <HAL_PCD_MspInit+0xec>)
 800377a:	f043 0301 	orr.w	r3, r3, #1
 800377e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003782:	4b21      	ldr	r3, [pc, #132]	; (8003808 <HAL_PCD_MspInit+0xec>)
 8003784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8003790:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8003794:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003798:	2302      	movs	r3, #2
 800379a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379e:	2300      	movs	r3, #0
 80037a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a4:	2300      	movs	r3, #0
 80037a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80037aa:	230a      	movs	r3, #10
 80037ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80037b4:	4619      	mov	r1, r3
 80037b6:	4815      	ldr	r0, [pc, #84]	; (800380c <HAL_PCD_MspInit+0xf0>)
 80037b8:	f002 f938 	bl	8005a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80037bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037c4:	2300      	movs	r3, #0
 80037c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ca:	2300      	movs	r3, #0
 80037cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80037d4:	4619      	mov	r1, r3
 80037d6:	480d      	ldr	r0, [pc, #52]	; (800380c <HAL_PCD_MspInit+0xf0>)
 80037d8:	f002 f928 	bl	8005a2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80037dc:	4b0a      	ldr	r3, [pc, #40]	; (8003808 <HAL_PCD_MspInit+0xec>)
 80037de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80037e2:	4a09      	ldr	r2, [pc, #36]	; (8003808 <HAL_PCD_MspInit+0xec>)
 80037e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80037e8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80037ec:	4b06      	ldr	r3, [pc, #24]	; (8003808 <HAL_PCD_MspInit+0xec>)
 80037ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80037f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037f6:	60bb      	str	r3, [r7, #8]
 80037f8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80037fa:	bf00      	nop
 80037fc:	37e0      	adds	r7, #224	; 0xe0
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40080000 	.word	0x40080000
 8003808:	58024400 	.word	0x58024400
 800380c:	58020000 	.word	0x58020000

08003810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003814:	e7fe      	b.n	8003814 <NMI_Handler+0x4>

08003816 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003816:	b480      	push	{r7}
 8003818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800381a:	e7fe      	b.n	800381a <HardFault_Handler+0x4>

0800381c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003820:	e7fe      	b.n	8003820 <MemManage_Handler+0x4>

08003822 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003822:	b480      	push	{r7}
 8003824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003826:	e7fe      	b.n	8003826 <BusFault_Handler+0x4>

08003828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800382c:	e7fe      	b.n	800382c <UsageFault_Handler+0x4>

0800382e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800382e:	b480      	push	{r7}
 8003830:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003832:	bf00      	nop
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003840:	bf00      	nop
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800384a:	b480      	push	{r7}
 800384c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800384e:	bf00      	nop
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800385c:	f000 f988 	bl	8003b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003860:	bf00      	nop
 8003862:	bd80      	pop	{r7, pc}

08003864 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8003868:	4802      	ldr	r0, [pc, #8]	; (8003874 <FDCAN1_IT0_IRQHandler+0x10>)
 800386a:	f001 fbd1 	bl	8005010 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800386e:	bf00      	nop
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	24000930 	.word	0x24000930

08003878 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800387c:	4802      	ldr	r0, [pc, #8]	; (8003888 <TIM2_IRQHandler+0x10>)
 800387e:	f005 f811 	bl	80088a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003882:	bf00      	nop
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	240067d8 	.word	0x240067d8

0800388c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003890:	4802      	ldr	r0, [pc, #8]	; (800389c <TIM3_IRQHandler+0x10>)
 8003892:	f005 f807 	bl	80088a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003896:	bf00      	nop
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	24000878 	.word	0x24000878

080038a0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80038a4:	4802      	ldr	r0, [pc, #8]	; (80038b0 <TIM4_IRQHandler+0x10>)
 80038a6:	f004 fffd 	bl	80088a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80038aa:	bf00      	nop
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	24000338 	.word	0x24000338

080038b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038bc:	4a14      	ldr	r2, [pc, #80]	; (8003910 <_sbrk+0x5c>)
 80038be:	4b15      	ldr	r3, [pc, #84]	; (8003914 <_sbrk+0x60>)
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038c8:	4b13      	ldr	r3, [pc, #76]	; (8003918 <_sbrk+0x64>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d102      	bne.n	80038d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038d0:	4b11      	ldr	r3, [pc, #68]	; (8003918 <_sbrk+0x64>)
 80038d2:	4a12      	ldr	r2, [pc, #72]	; (800391c <_sbrk+0x68>)
 80038d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038d6:	4b10      	ldr	r3, [pc, #64]	; (8003918 <_sbrk+0x64>)
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4413      	add	r3, r2
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d207      	bcs.n	80038f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038e4:	f007 f840 	bl	800a968 <__errno>
 80038e8:	4603      	mov	r3, r0
 80038ea:	220c      	movs	r2, #12
 80038ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038ee:	f04f 33ff 	mov.w	r3, #4294967295
 80038f2:	e009      	b.n	8003908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038f4:	4b08      	ldr	r3, [pc, #32]	; (8003918 <_sbrk+0x64>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038fa:	4b07      	ldr	r3, [pc, #28]	; (8003918 <_sbrk+0x64>)
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4413      	add	r3, r2
 8003902:	4a05      	ldr	r2, [pc, #20]	; (8003918 <_sbrk+0x64>)
 8003904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003906:	68fb      	ldr	r3, [r7, #12]
}
 8003908:	4618      	mov	r0, r3
 800390a:	3718      	adds	r7, #24
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	24080000 	.word	0x24080000
 8003914:	00000400 	.word	0x00000400
 8003918:	240002e0 	.word	0x240002e0
 800391c:	2400c718 	.word	0x2400c718

08003920 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003924:	4b39      	ldr	r3, [pc, #228]	; (8003a0c <SystemInit+0xec>)
 8003926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392a:	4a38      	ldr	r2, [pc, #224]	; (8003a0c <SystemInit+0xec>)
 800392c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003934:	4b36      	ldr	r3, [pc, #216]	; (8003a10 <SystemInit+0xf0>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 030f 	and.w	r3, r3, #15
 800393c:	2b06      	cmp	r3, #6
 800393e:	d807      	bhi.n	8003950 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003940:	4b33      	ldr	r3, [pc, #204]	; (8003a10 <SystemInit+0xf0>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f023 030f 	bic.w	r3, r3, #15
 8003948:	4a31      	ldr	r2, [pc, #196]	; (8003a10 <SystemInit+0xf0>)
 800394a:	f043 0307 	orr.w	r3, r3, #7
 800394e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003950:	4b30      	ldr	r3, [pc, #192]	; (8003a14 <SystemInit+0xf4>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a2f      	ldr	r2, [pc, #188]	; (8003a14 <SystemInit+0xf4>)
 8003956:	f043 0301 	orr.w	r3, r3, #1
 800395a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800395c:	4b2d      	ldr	r3, [pc, #180]	; (8003a14 <SystemInit+0xf4>)
 800395e:	2200      	movs	r2, #0
 8003960:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003962:	4b2c      	ldr	r3, [pc, #176]	; (8003a14 <SystemInit+0xf4>)
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	492b      	ldr	r1, [pc, #172]	; (8003a14 <SystemInit+0xf4>)
 8003968:	4b2b      	ldr	r3, [pc, #172]	; (8003a18 <SystemInit+0xf8>)
 800396a:	4013      	ands	r3, r2
 800396c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800396e:	4b28      	ldr	r3, [pc, #160]	; (8003a10 <SystemInit+0xf0>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b00      	cmp	r3, #0
 8003978:	d007      	beq.n	800398a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800397a:	4b25      	ldr	r3, [pc, #148]	; (8003a10 <SystemInit+0xf0>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f023 030f 	bic.w	r3, r3, #15
 8003982:	4a23      	ldr	r2, [pc, #140]	; (8003a10 <SystemInit+0xf0>)
 8003984:	f043 0307 	orr.w	r3, r3, #7
 8003988:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800398a:	4b22      	ldr	r3, [pc, #136]	; (8003a14 <SystemInit+0xf4>)
 800398c:	2200      	movs	r2, #0
 800398e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003990:	4b20      	ldr	r3, [pc, #128]	; (8003a14 <SystemInit+0xf4>)
 8003992:	2200      	movs	r2, #0
 8003994:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003996:	4b1f      	ldr	r3, [pc, #124]	; (8003a14 <SystemInit+0xf4>)
 8003998:	2200      	movs	r2, #0
 800399a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800399c:	4b1d      	ldr	r3, [pc, #116]	; (8003a14 <SystemInit+0xf4>)
 800399e:	4a1f      	ldr	r2, [pc, #124]	; (8003a1c <SystemInit+0xfc>)
 80039a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80039a2:	4b1c      	ldr	r3, [pc, #112]	; (8003a14 <SystemInit+0xf4>)
 80039a4:	4a1e      	ldr	r2, [pc, #120]	; (8003a20 <SystemInit+0x100>)
 80039a6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80039a8:	4b1a      	ldr	r3, [pc, #104]	; (8003a14 <SystemInit+0xf4>)
 80039aa:	4a1e      	ldr	r2, [pc, #120]	; (8003a24 <SystemInit+0x104>)
 80039ac:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80039ae:	4b19      	ldr	r3, [pc, #100]	; (8003a14 <SystemInit+0xf4>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80039b4:	4b17      	ldr	r3, [pc, #92]	; (8003a14 <SystemInit+0xf4>)
 80039b6:	4a1b      	ldr	r2, [pc, #108]	; (8003a24 <SystemInit+0x104>)
 80039b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80039ba:	4b16      	ldr	r3, [pc, #88]	; (8003a14 <SystemInit+0xf4>)
 80039bc:	2200      	movs	r2, #0
 80039be:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80039c0:	4b14      	ldr	r3, [pc, #80]	; (8003a14 <SystemInit+0xf4>)
 80039c2:	4a18      	ldr	r2, [pc, #96]	; (8003a24 <SystemInit+0x104>)
 80039c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80039c6:	4b13      	ldr	r3, [pc, #76]	; (8003a14 <SystemInit+0xf4>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80039cc:	4b11      	ldr	r3, [pc, #68]	; (8003a14 <SystemInit+0xf4>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a10      	ldr	r2, [pc, #64]	; (8003a14 <SystemInit+0xf4>)
 80039d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80039d8:	4b0e      	ldr	r3, [pc, #56]	; (8003a14 <SystemInit+0xf4>)
 80039da:	2200      	movs	r2, #0
 80039dc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80039de:	4b12      	ldr	r3, [pc, #72]	; (8003a28 <SystemInit+0x108>)
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	4b12      	ldr	r3, [pc, #72]	; (8003a2c <SystemInit+0x10c>)
 80039e4:	4013      	ands	r3, r2
 80039e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039ea:	d202      	bcs.n	80039f2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80039ec:	4b10      	ldr	r3, [pc, #64]	; (8003a30 <SystemInit+0x110>)
 80039ee:	2201      	movs	r2, #1
 80039f0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80039f2:	4b10      	ldr	r3, [pc, #64]	; (8003a34 <SystemInit+0x114>)
 80039f4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80039f8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80039fa:	4b04      	ldr	r3, [pc, #16]	; (8003a0c <SystemInit+0xec>)
 80039fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a00:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003a02:	bf00      	nop
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr
 8003a0c:	e000ed00 	.word	0xe000ed00
 8003a10:	52002000 	.word	0x52002000
 8003a14:	58024400 	.word	0x58024400
 8003a18:	eaf6ed7f 	.word	0xeaf6ed7f
 8003a1c:	02020200 	.word	0x02020200
 8003a20:	01ff0000 	.word	0x01ff0000
 8003a24:	01010280 	.word	0x01010280
 8003a28:	5c001000 	.word	0x5c001000
 8003a2c:	ffff0000 	.word	0xffff0000
 8003a30:	51008108 	.word	0x51008108
 8003a34:	52004000 	.word	0x52004000

08003a38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003a38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003a3c:	f7ff ff70 	bl	8003920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a40:	480c      	ldr	r0, [pc, #48]	; (8003a74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a42:	490d      	ldr	r1, [pc, #52]	; (8003a78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a44:	4a0d      	ldr	r2, [pc, #52]	; (8003a7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a48:	e002      	b.n	8003a50 <LoopCopyDataInit>

08003a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a4e:	3304      	adds	r3, #4

08003a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a54:	d3f9      	bcc.n	8003a4a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a56:	4a0a      	ldr	r2, [pc, #40]	; (8003a80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003a58:	4c0a      	ldr	r4, [pc, #40]	; (8003a84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a5c:	e001      	b.n	8003a62 <LoopFillZerobss>

08003a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a60:	3204      	adds	r2, #4

08003a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a64:	d3fb      	bcc.n	8003a5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a66:	f006 ff85 	bl	800a974 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a6a:	f7fc fe0d 	bl	8000688 <main>
  bx  lr
 8003a6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a70:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003a74:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003a78:	240001e4 	.word	0x240001e4
  ldr r2, =_sidata
 8003a7c:	080101b0 	.word	0x080101b0
  ldr r2, =_sbss
 8003a80:	240002a4 	.word	0x240002a4
  ldr r4, =_ebss
 8003a84:	2400c714 	.word	0x2400c714

08003a88 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a88:	e7fe      	b.n	8003a88 <ADC3_IRQHandler>
	...

08003a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a92:	2003      	movs	r0, #3
 8003a94:	f000 f9a0 	bl	8003dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003a98:	f003 f904 	bl	8006ca4 <HAL_RCC_GetSysClockFreq>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	4b15      	ldr	r3, [pc, #84]	; (8003af4 <HAL_Init+0x68>)
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	0a1b      	lsrs	r3, r3, #8
 8003aa4:	f003 030f 	and.w	r3, r3, #15
 8003aa8:	4913      	ldr	r1, [pc, #76]	; (8003af8 <HAL_Init+0x6c>)
 8003aaa:	5ccb      	ldrb	r3, [r1, r3]
 8003aac:	f003 031f 	and.w	r3, r3, #31
 8003ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ab6:	4b0f      	ldr	r3, [pc, #60]	; (8003af4 <HAL_Init+0x68>)
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	4a0e      	ldr	r2, [pc, #56]	; (8003af8 <HAL_Init+0x6c>)
 8003ac0:	5cd3      	ldrb	r3, [r2, r3]
 8003ac2:	f003 031f 	and.w	r3, r3, #31
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8003acc:	4a0b      	ldr	r2, [pc, #44]	; (8003afc <HAL_Init+0x70>)
 8003ace:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ad0:	4a0b      	ldr	r2, [pc, #44]	; (8003b00 <HAL_Init+0x74>)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ad6:	2000      	movs	r0, #0
 8003ad8:	f000 f814 	bl	8003b04 <HAL_InitTick>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e002      	b.n	8003aec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003ae6:	f7ff fbf9 	bl	80032dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3708      	adds	r7, #8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	58024400 	.word	0x58024400
 8003af8:	0800e448 	.word	0x0800e448
 8003afc:	24000004 	.word	0x24000004
 8003b00:	24000000 	.word	0x24000000

08003b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003b0c:	4b15      	ldr	r3, [pc, #84]	; (8003b64 <HAL_InitTick+0x60>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e021      	b.n	8003b5c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003b18:	4b13      	ldr	r3, [pc, #76]	; (8003b68 <HAL_InitTick+0x64>)
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	4b11      	ldr	r3, [pc, #68]	; (8003b64 <HAL_InitTick+0x60>)
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	4619      	mov	r1, r3
 8003b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 f985 	bl	8003e3e <HAL_SYSTICK_Config>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e00e      	b.n	8003b5c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b0f      	cmp	r3, #15
 8003b42:	d80a      	bhi.n	8003b5a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b44:	2200      	movs	r2, #0
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	f04f 30ff 	mov.w	r0, #4294967295
 8003b4c:	f000 f94f 	bl	8003dee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b50:	4a06      	ldr	r2, [pc, #24]	; (8003b6c <HAL_InitTick+0x68>)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
 8003b58:	e000      	b.n	8003b5c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3708      	adds	r7, #8
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	2400000c 	.word	0x2400000c
 8003b68:	24000000 	.word	0x24000000
 8003b6c:	24000008 	.word	0x24000008

08003b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b74:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <HAL_IncTick+0x20>)
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	461a      	mov	r2, r3
 8003b7a:	4b06      	ldr	r3, [pc, #24]	; (8003b94 <HAL_IncTick+0x24>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4413      	add	r3, r2
 8003b80:	4a04      	ldr	r2, [pc, #16]	; (8003b94 <HAL_IncTick+0x24>)
 8003b82:	6013      	str	r3, [r2, #0]
}
 8003b84:	bf00      	nop
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	2400000c 	.word	0x2400000c
 8003b94:	2400c700 	.word	0x2400c700

08003b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b9c:	4b03      	ldr	r3, [pc, #12]	; (8003bac <HAL_GetTick+0x14>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	2400c700 	.word	0x2400c700

08003bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bb8:	f7ff ffee 	bl	8003b98 <HAL_GetTick>
 8003bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc8:	d005      	beq.n	8003bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bca:	4b0a      	ldr	r3, [pc, #40]	; (8003bf4 <HAL_Delay+0x44>)
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003bd6:	bf00      	nop
 8003bd8:	f7ff ffde 	bl	8003b98 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d8f7      	bhi.n	8003bd8 <HAL_Delay+0x28>
  {
  }
}
 8003be8:	bf00      	nop
 8003bea:	bf00      	nop
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	2400000c 	.word	0x2400000c

08003bf8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003bfc:	4b03      	ldr	r3, [pc, #12]	; (8003c0c <HAL_GetREVID+0x14>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	0c1b      	lsrs	r3, r3, #16
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	5c001000 	.word	0x5c001000

08003c10 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003c18:	4b06      	ldr	r3, [pc, #24]	; (8003c34 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003c20:	4904      	ldr	r1, [pc, #16]	; (8003c34 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	604b      	str	r3, [r1, #4]
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	58000400 	.word	0x58000400

08003c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f003 0307 	and.w	r3, r3, #7
 8003c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c48:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <__NVIC_SetPriorityGrouping+0x40>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c54:	4013      	ands	r3, r2
 8003c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003c60:	4b06      	ldr	r3, [pc, #24]	; (8003c7c <__NVIC_SetPriorityGrouping+0x44>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c66:	4a04      	ldr	r2, [pc, #16]	; (8003c78 <__NVIC_SetPriorityGrouping+0x40>)
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	60d3      	str	r3, [r2, #12]
}
 8003c6c:	bf00      	nop
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	e000ed00 	.word	0xe000ed00
 8003c7c:	05fa0000 	.word	0x05fa0000

08003c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c84:	4b04      	ldr	r3, [pc, #16]	; (8003c98 <__NVIC_GetPriorityGrouping+0x18>)
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	0a1b      	lsrs	r3, r3, #8
 8003c8a:	f003 0307 	and.w	r3, r3, #7
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	e000ed00 	.word	0xe000ed00

08003c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003ca6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	db0b      	blt.n	8003cc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cae:	88fb      	ldrh	r3, [r7, #6]
 8003cb0:	f003 021f 	and.w	r2, r3, #31
 8003cb4:	4907      	ldr	r1, [pc, #28]	; (8003cd4 <__NVIC_EnableIRQ+0x38>)
 8003cb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cba:	095b      	lsrs	r3, r3, #5
 8003cbc:	2001      	movs	r0, #1
 8003cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8003cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	e000e100 	.word	0xe000e100

08003cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	4603      	mov	r3, r0
 8003ce0:	6039      	str	r1, [r7, #0]
 8003ce2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003ce4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	db0a      	blt.n	8003d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	490c      	ldr	r1, [pc, #48]	; (8003d24 <__NVIC_SetPriority+0x4c>)
 8003cf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cf6:	0112      	lsls	r2, r2, #4
 8003cf8:	b2d2      	uxtb	r2, r2
 8003cfa:	440b      	add	r3, r1
 8003cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d00:	e00a      	b.n	8003d18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	4908      	ldr	r1, [pc, #32]	; (8003d28 <__NVIC_SetPriority+0x50>)
 8003d08:	88fb      	ldrh	r3, [r7, #6]
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	3b04      	subs	r3, #4
 8003d10:	0112      	lsls	r2, r2, #4
 8003d12:	b2d2      	uxtb	r2, r2
 8003d14:	440b      	add	r3, r1
 8003d16:	761a      	strb	r2, [r3, #24]
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	e000e100 	.word	0xe000e100
 8003d28:	e000ed00 	.word	0xe000ed00

08003d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b089      	sub	sp, #36	; 0x24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f003 0307 	and.w	r3, r3, #7
 8003d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f1c3 0307 	rsb	r3, r3, #7
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	bf28      	it	cs
 8003d4a:	2304      	movcs	r3, #4
 8003d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	3304      	adds	r3, #4
 8003d52:	2b06      	cmp	r3, #6
 8003d54:	d902      	bls.n	8003d5c <NVIC_EncodePriority+0x30>
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	3b03      	subs	r3, #3
 8003d5a:	e000      	b.n	8003d5e <NVIC_EncodePriority+0x32>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d60:	f04f 32ff 	mov.w	r2, #4294967295
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6a:	43da      	mvns	r2, r3
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	401a      	ands	r2, r3
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d74:	f04f 31ff 	mov.w	r1, #4294967295
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7e:	43d9      	mvns	r1, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d84:	4313      	orrs	r3, r2
         );
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3724      	adds	r7, #36	; 0x24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
	...

08003d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003da4:	d301      	bcc.n	8003daa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003da6:	2301      	movs	r3, #1
 8003da8:	e00f      	b.n	8003dca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003daa:	4a0a      	ldr	r2, [pc, #40]	; (8003dd4 <SysTick_Config+0x40>)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3b01      	subs	r3, #1
 8003db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003db2:	210f      	movs	r1, #15
 8003db4:	f04f 30ff 	mov.w	r0, #4294967295
 8003db8:	f7ff ff8e 	bl	8003cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dbc:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <SysTick_Config+0x40>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dc2:	4b04      	ldr	r3, [pc, #16]	; (8003dd4 <SysTick_Config+0x40>)
 8003dc4:	2207      	movs	r2, #7
 8003dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	e000e010 	.word	0xe000e010

08003dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f7ff ff29 	bl	8003c38 <__NVIC_SetPriorityGrouping>
}
 8003de6:	bf00      	nop
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b086      	sub	sp, #24
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	4603      	mov	r3, r0
 8003df6:	60b9      	str	r1, [r7, #8]
 8003df8:	607a      	str	r2, [r7, #4]
 8003dfa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003dfc:	f7ff ff40 	bl	8003c80 <__NVIC_GetPriorityGrouping>
 8003e00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	68b9      	ldr	r1, [r7, #8]
 8003e06:	6978      	ldr	r0, [r7, #20]
 8003e08:	f7ff ff90 	bl	8003d2c <NVIC_EncodePriority>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e12:	4611      	mov	r1, r2
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff ff5f 	bl	8003cd8 <__NVIC_SetPriority>
}
 8003e1a:	bf00      	nop
 8003e1c:	3718      	adds	r7, #24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b082      	sub	sp, #8
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	4603      	mov	r3, r0
 8003e2a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff ff33 	bl	8003c9c <__NVIC_EnableIRQ>
}
 8003e36:	bf00      	nop
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b082      	sub	sp, #8
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7ff ffa4 	bl	8003d94 <SysTick_Config>
 8003e4c:	4603      	mov	r3, r0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
	...

08003e58 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e0c6      	b.n	8003ff8 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d102      	bne.n	8003e78 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7ff fa4c 	bl	8003310 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2223      	movs	r2, #35	; 0x23
 8003e7c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e7e:	4b60      	ldr	r3, [pc, #384]	; (8004000 <HAL_ETH_Init+0x1a8>)
 8003e80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e84:	4a5e      	ldr	r2, [pc, #376]	; (8004000 <HAL_ETH_Init+0x1a8>)
 8003e86:	f043 0302 	orr.w	r3, r3, #2
 8003e8a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003e8e:	4b5c      	ldr	r3, [pc, #368]	; (8004000 <HAL_ETH_Init+0x1a8>)
 8003e90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	60bb      	str	r3, [r7, #8]
 8003e9a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	7a1b      	ldrb	r3, [r3, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d103      	bne.n	8003eac <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003ea4:	2000      	movs	r0, #0
 8003ea6:	f7ff feb3 	bl	8003c10 <HAL_SYSCFG_ETHInterfaceSelect>
 8003eaa:	e003      	b.n	8003eb4 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003eac:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003eb0:	f7ff feae 	bl	8003c10 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f042 0201 	orr.w	r2, r2, #1
 8003ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ecc:	f7ff fe64 	bl	8003b98 <HAL_GetTick>
 8003ed0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003ed2:	e00f      	b.n	8003ef4 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8003ed4:	f7ff fe60 	bl	8003b98 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003ee2:	d907      	bls.n	8003ef4 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2204      	movs	r2, #4
 8003ee8:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	22e0      	movs	r2, #224	; 0xe0
 8003eee:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e081      	b.n	8003ff8 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1e6      	bne.n	8003ed4 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 fac0 	bl	800448c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003f0c:	f003 f844 	bl	8006f98 <HAL_RCC_GetHCLKFreq>
 8003f10:	4603      	mov	r3, r0
 8003f12:	4a3c      	ldr	r2, [pc, #240]	; (8004004 <HAL_ETH_Init+0x1ac>)
 8003f14:	fba2 2303 	umull	r2, r3, r2, r3
 8003f18:	0c9a      	lsrs	r2, r3, #18
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3a01      	subs	r2, #1
 8003f20:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 fa13 	bl	8004350 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003f40:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003f44:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	f003 0303 	and.w	r3, r3, #3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d007      	beq.n	8003f62 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	22e0      	movs	r2, #224	; 0xe0
 8003f5c:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e04a      	b.n	8003ff8 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	f241 1308 	movw	r3, #4360	; 0x1108
 8003f6a:	4413      	add	r3, r2
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	4b26      	ldr	r3, [pc, #152]	; (8004008 <HAL_ETH_Init+0x1b0>)
 8003f70:	4013      	ands	r3, r2
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	6952      	ldr	r2, [r2, #20]
 8003f76:	0052      	lsls	r2, r2, #1
 8003f78:	6879      	ldr	r1, [r7, #4]
 8003f7a:	6809      	ldr	r1, [r1, #0]
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	f241 1308 	movw	r3, #4360	; 0x1108
 8003f82:	440b      	add	r3, r1
 8003f84:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 fad8 	bl	800453c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 fb1c 	bl	80045ca <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	3305      	adds	r3, #5
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	021a      	lsls	r2, r3, #8
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	3304      	adds	r3, #4
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	3303      	adds	r3, #3
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	061a      	lsls	r2, r3, #24
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	3302      	adds	r3, #2
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	041b      	lsls	r3, r3, #16
 8003fc4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003fd0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003fde:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003fe0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2210      	movs	r2, #16
 8003fee:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2210      	movs	r2, #16
 8003ff4:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	58024400 	.word	0x58024400
 8004004:	431bde83 	.word	0x431bde83
 8004008:	ffff8001 	.word	0xffff8001

0800400c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800401e:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	791b      	ldrb	r3, [r3, #4]
 8004024:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8004026:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	7b1b      	ldrb	r3, [r3, #12]
 800402c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800402e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	7b5b      	ldrb	r3, [r3, #13]
 8004034:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004036:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	7b9b      	ldrb	r3, [r3, #14]
 800403c:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800403e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	7bdb      	ldrb	r3, [r3, #15]
 8004044:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004046:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	7c12      	ldrb	r2, [r2, #16]
 800404c:	2a00      	cmp	r2, #0
 800404e:	d102      	bne.n	8004056 <ETH_SetMACConfig+0x4a>
 8004050:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004054:	e000      	b.n	8004058 <ETH_SetMACConfig+0x4c>
 8004056:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004058:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	7c52      	ldrb	r2, [r2, #17]
 800405e:	2a00      	cmp	r2, #0
 8004060:	d102      	bne.n	8004068 <ETH_SetMACConfig+0x5c>
 8004062:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004066:	e000      	b.n	800406a <ETH_SetMACConfig+0x5e>
 8004068:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800406a:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	7c9b      	ldrb	r3, [r3, #18]
 8004070:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004072:	431a      	orrs	r2, r3
                                macconf->Speed |
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004078:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800407e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	7f1b      	ldrb	r3, [r3, #28]
 8004084:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8004086:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	7f5b      	ldrb	r3, [r3, #29]
 800408c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800408e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	7f92      	ldrb	r2, [r2, #30]
 8004094:	2a00      	cmp	r2, #0
 8004096:	d102      	bne.n	800409e <ETH_SetMACConfig+0x92>
 8004098:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800409c:	e000      	b.n	80040a0 <ETH_SetMACConfig+0x94>
 800409e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80040a0:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	7fdb      	ldrb	r3, [r3, #31]
 80040a6:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80040a8:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	f892 2020 	ldrb.w	r2, [r2, #32]
 80040b0:	2a00      	cmp	r2, #0
 80040b2:	d102      	bne.n	80040ba <ETH_SetMACConfig+0xae>
 80040b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040b8:	e000      	b.n	80040bc <ETH_SetMACConfig+0xb0>
 80040ba:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80040bc:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80040c2:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040ca:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80040cc:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80040d2:	4313      	orrs	r3, r2
 80040d4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	4b56      	ldr	r3, [pc, #344]	; (8004238 <ETH_SetMACConfig+0x22c>)
 80040de:	4013      	ands	r3, r2
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6812      	ldr	r2, [r2, #0]
 80040e4:	68f9      	ldr	r1, [r7, #12]
 80040e6:	430b      	orrs	r3, r1
 80040e8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ee:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040f6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80040f8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004100:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004102:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800410a:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800410c:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004114:	2a00      	cmp	r2, #0
 8004116:	d102      	bne.n	800411e <ETH_SetMACConfig+0x112>
 8004118:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800411c:	e000      	b.n	8004120 <ETH_SetMACConfig+0x114>
 800411e:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004120:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004126:	4313      	orrs	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	4b42      	ldr	r3, [pc, #264]	; (800423c <ETH_SetMACConfig+0x230>)
 8004132:	4013      	ands	r3, r2
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	6812      	ldr	r2, [r2, #0]
 8004138:	68f9      	ldr	r1, [r7, #12]
 800413a:	430b      	orrs	r3, r1
 800413c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004144:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800414a:	4313      	orrs	r3, r2
 800414c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68da      	ldr	r2, [r3, #12]
 8004154:	4b3a      	ldr	r3, [pc, #232]	; (8004240 <ETH_SetMACConfig+0x234>)
 8004156:	4013      	ands	r3, r2
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	6812      	ldr	r2, [r2, #0]
 800415c:	68f9      	ldr	r1, [r7, #12]
 800415e:	430b      	orrs	r3, r1
 8004160:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004168:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800416e:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004176:	2a00      	cmp	r2, #0
 8004178:	d101      	bne.n	800417e <ETH_SetMACConfig+0x172>
 800417a:	2280      	movs	r2, #128	; 0x80
 800417c:	e000      	b.n	8004180 <ETH_SetMACConfig+0x174>
 800417e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004180:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004186:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004188:	4313      	orrs	r3, r2
 800418a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004192:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004196:	4013      	ands	r3, r2
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	6812      	ldr	r2, [r2, #0]
 800419c:	68f9      	ldr	r1, [r7, #12]
 800419e:	430b      	orrs	r3, r1
 80041a0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80041a8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80041b0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041be:	f023 0103 	bic.w	r1, r3, #3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80041d6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80041f2:	2a00      	cmp	r2, #0
 80041f4:	d101      	bne.n	80041fa <ETH_SetMACConfig+0x1ee>
 80041f6:	2240      	movs	r2, #64	; 0x40
 80041f8:	e000      	b.n	80041fc <ETH_SetMACConfig+0x1f0>
 80041fa:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80041fc:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004204:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004206:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800420e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004210:	4313      	orrs	r3, r2
 8004212:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800421c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	430a      	orrs	r2, r1
 8004228:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800422c:	bf00      	nop
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	00048083 	.word	0x00048083
 800423c:	c0f88000 	.word	0xc0f88000
 8004240:	fffffef0 	.word	0xfffffef0

08004244 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	4b38      	ldr	r3, [pc, #224]	; (800433c <ETH_SetDMAConfig+0xf8>)
 800425a:	4013      	ands	r3, r2
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	6812      	ldr	r2, [r2, #0]
 8004260:	6879      	ldr	r1, [r7, #4]
 8004262:	6809      	ldr	r1, [r1, #0]
 8004264:	431a      	orrs	r2, r3
 8004266:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800426a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	791b      	ldrb	r3, [r3, #4]
 8004270:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004276:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	7b1b      	ldrb	r3, [r3, #12]
 800427c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800427e:	4313      	orrs	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	f241 0304 	movw	r3, #4100	; 0x1004
 800428a:	4413      	add	r3, r2
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	4b2c      	ldr	r3, [pc, #176]	; (8004340 <ETH_SetDMAConfig+0xfc>)
 8004290:	4013      	ands	r3, r2
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6811      	ldr	r1, [r2, #0]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	431a      	orrs	r2, r3
 800429a:	f241 0304 	movw	r3, #4100	; 0x1004
 800429e:	440b      	add	r3, r1
 80042a0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	7b5b      	ldrb	r3, [r3, #13]
 80042a6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	4b22      	ldr	r3, [pc, #136]	; (8004344 <ETH_SetDMAConfig+0x100>)
 80042bc:	4013      	ands	r3, r2
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6811      	ldr	r1, [r2, #0]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	431a      	orrs	r2, r3
 80042c6:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80042ca:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	7d1b      	ldrb	r3, [r3, #20]
 80042d4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80042d6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	7f5b      	ldrb	r3, [r3, #29]
 80042dc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80042de:	4313      	orrs	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	f241 1304 	movw	r3, #4356	; 0x1104
 80042ea:	4413      	add	r3, r2
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	4b16      	ldr	r3, [pc, #88]	; (8004348 <ETH_SetDMAConfig+0x104>)
 80042f0:	4013      	ands	r3, r2
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	6811      	ldr	r1, [r2, #0]
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	431a      	orrs	r2, r3
 80042fa:	f241 1304 	movw	r3, #4356	; 0x1104
 80042fe:	440b      	add	r3, r1
 8004300:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	7f1b      	ldrb	r3, [r3, #28]
 8004306:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800430c:	4313      	orrs	r3, r2
 800430e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	f241 1308 	movw	r3, #4360	; 0x1108
 8004318:	4413      	add	r3, r2
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	4b0b      	ldr	r3, [pc, #44]	; (800434c <ETH_SetDMAConfig+0x108>)
 800431e:	4013      	ands	r3, r2
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	6811      	ldr	r1, [r2, #0]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	431a      	orrs	r2, r3
 8004328:	f241 1308 	movw	r3, #4360	; 0x1108
 800432c:	440b      	add	r3, r1
 800432e:	601a      	str	r2, [r3, #0]
}
 8004330:	bf00      	nop
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	ffff87fd 	.word	0xffff87fd
 8004340:	ffff2ffe 	.word	0xffff2ffe
 8004344:	fffec000 	.word	0xfffec000
 8004348:	ffc0efef 	.word	0xffc0efef
 800434c:	7fc0ffff 	.word	0x7fc0ffff

08004350 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b0a4      	sub	sp, #144	; 0x90
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004358:	2301      	movs	r3, #1
 800435a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800435e:	2300      	movs	r3, #0
 8004360:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004362:	2300      	movs	r3, #0
 8004364:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004368:	2300      	movs	r3, #0
 800436a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800436e:	2301      	movs	r3, #1
 8004370:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004374:	2301      	movs	r3, #1
 8004376:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800437a:	2301      	movs	r3, #1
 800437c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004380:	2300      	movs	r3, #0
 8004382:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004386:	2301      	movs	r3, #1
 8004388:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800438c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004390:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004392:	2300      	movs	r3, #0
 8004394:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004398:	2300      	movs	r3, #0
 800439a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800439c:	2300      	movs	r3, #0
 800439e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80043a2:	2300      	movs	r3, #0
 80043a4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80043a8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80043ac:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80043ae:	2300      	movs	r3, #0
 80043b0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80043b4:	2300      	movs	r3, #0
 80043b6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80043b8:	2301      	movs	r3, #1
 80043ba:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80043be:	2300      	movs	r3, #0
 80043c0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80043c4:	2300      	movs	r3, #0
 80043c6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80043ca:	2300      	movs	r3, #0
 80043cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80043ce:	2300      	movs	r3, #0
 80043d0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80043d2:	2300      	movs	r3, #0
 80043d4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80043d6:	2300      	movs	r3, #0
 80043d8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80043dc:	2300      	movs	r3, #0
 80043de:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80043e2:	2301      	movs	r3, #1
 80043e4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80043e8:	2320      	movs	r3, #32
 80043ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80043ee:	2301      	movs	r3, #1
 80043f0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80043f4:	2300      	movs	r3, #0
 80043f6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80043fa:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80043fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004400:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004404:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004406:	2300      	movs	r3, #0
 8004408:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800440c:	2302      	movs	r3, #2
 800440e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004412:	2300      	movs	r3, #0
 8004414:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004418:	2300      	movs	r3, #0
 800441a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800441e:	2300      	movs	r3, #0
 8004420:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004424:	2301      	movs	r3, #1
 8004426:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800442a:	2300      	movs	r3, #0
 800442c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800442e:	2301      	movs	r3, #1
 8004430:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004434:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004438:	4619      	mov	r1, r3
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7ff fde6 	bl	800400c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004440:	2301      	movs	r3, #1
 8004442:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004444:	2301      	movs	r3, #1
 8004446:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004448:	2300      	movs	r3, #0
 800444a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800444c:	2300      	movs	r3, #0
 800444e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004452:	2300      	movs	r3, #0
 8004454:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004456:	2300      	movs	r3, #0
 8004458:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800445a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800445e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004460:	2300      	movs	r3, #0
 8004462:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004464:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004468:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800446a:	2300      	movs	r3, #0
 800446c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8004470:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004474:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004476:	f107 0308 	add.w	r3, r7, #8
 800447a:	4619      	mov	r1, r3
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7ff fee1 	bl	8004244 <ETH_SetDMAConfig>
}
 8004482:	bf00      	nop
 8004484:	3790      	adds	r7, #144	; 0x90
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
	...

0800448c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800449c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80044a4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80044a6:	f002 fd77 	bl	8006f98 <HAL_RCC_GetHCLKFreq>
 80044aa:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	4a1e      	ldr	r2, [pc, #120]	; (8004528 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d908      	bls.n	80044c6 <ETH_MAC_MDIO_ClkConfig+0x3a>
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	4a1d      	ldr	r2, [pc, #116]	; (800452c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d804      	bhi.n	80044c6 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044c2:	60fb      	str	r3, [r7, #12]
 80044c4:	e027      	b.n	8004516 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	4a18      	ldr	r2, [pc, #96]	; (800452c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d908      	bls.n	80044e0 <ETH_MAC_MDIO_ClkConfig+0x54>
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	4a17      	ldr	r2, [pc, #92]	; (8004530 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d204      	bcs.n	80044e0 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80044dc:	60fb      	str	r3, [r7, #12]
 80044de:	e01a      	b.n	8004516 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	4a13      	ldr	r2, [pc, #76]	; (8004530 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d303      	bcc.n	80044f0 <ETH_MAC_MDIO_ClkConfig+0x64>
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	4a12      	ldr	r2, [pc, #72]	; (8004534 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d911      	bls.n	8004514 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	4a10      	ldr	r2, [pc, #64]	; (8004534 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d908      	bls.n	800450a <ETH_MAC_MDIO_ClkConfig+0x7e>
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	4a0f      	ldr	r2, [pc, #60]	; (8004538 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d804      	bhi.n	800450a <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	e005      	b.n	8004516 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	e000      	b.n	8004516 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004514:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004520:	bf00      	nop
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	01312cff 	.word	0x01312cff
 800452c:	02160ebf 	.word	0x02160ebf
 8004530:	03938700 	.word	0x03938700
 8004534:	05f5e0ff 	.word	0x05f5e0ff
 8004538:	08f0d17f 	.word	0x08f0d17f

0800453c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004544:	2300      	movs	r3, #0
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	e01d      	b.n	8004586 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68d9      	ldr	r1, [r3, #12]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	4613      	mov	r3, r2
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	4413      	add	r3, r2
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	440b      	add	r3, r1
 800455a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	2200      	movs	r2, #0
 8004560:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2200      	movs	r2, #0
 8004566:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2200      	movs	r2, #0
 800456c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	2200      	movs	r2, #0
 8004572:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004574:	68b9      	ldr	r1, [r7, #8]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	3206      	adds	r2, #6
 800457c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	3301      	adds	r3, #1
 8004584:	60fb      	str	r3, [r7, #12]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2b03      	cmp	r3, #3
 800458a:	d9de      	bls.n	800454a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	f241 132c 	movw	r3, #4396	; 0x112c
 800459a:	4413      	add	r3, r2
 800459c:	2203      	movs	r2, #3
 800459e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68d9      	ldr	r1, [r3, #12]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	f241 1314 	movw	r3, #4372	; 0x1114
 80045ac:	4413      	add	r3, r2
 80045ae:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68da      	ldr	r2, [r3, #12]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80045bc:	601a      	str	r2, [r3, #0]
}
 80045be:	bf00      	nop
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b085      	sub	sp, #20
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80045d2:	2300      	movs	r3, #0
 80045d4:	60fb      	str	r3, [r7, #12]
 80045d6:	e024      	b.n	8004622 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6919      	ldr	r1, [r3, #16]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	4613      	mov	r3, r2
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	4413      	add	r3, r2
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	440b      	add	r3, r1
 80045e8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	2200      	movs	r2, #0
 80045f4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2200      	movs	r2, #0
 80045fa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	2200      	movs	r2, #0
 8004600:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	2200      	movs	r2, #0
 8004606:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	2200      	movs	r2, #0
 800460c:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	6879      	ldr	r1, [r7, #4]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	3310      	adds	r3, #16
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	440b      	add	r3, r1
 800461a:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	3301      	adds	r3, #1
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2b03      	cmp	r3, #3
 8004626:	d9d7      	bls.n	80045d8 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	f241 1330 	movw	r3, #4400	; 0x1130
 800464e:	4413      	add	r3, r2
 8004650:	2203      	movs	r2, #3
 8004652:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6919      	ldr	r1, [r3, #16]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	f241 131c 	movw	r3, #4380	; 0x111c
 8004660:	4413      	add	r3, r2
 8004662:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	f241 1328 	movw	r3, #4392	; 0x1128
 8004674:	4413      	add	r3, r2
 8004676:	6019      	str	r1, [r3, #0]
}
 8004678:	bf00      	nop
 800467a:	3714      	adds	r7, #20
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b098      	sub	sp, #96	; 0x60
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800468c:	4a84      	ldr	r2, [pc, #528]	; (80048a0 <HAL_FDCAN_Init+0x21c>)
 800468e:	f107 030c 	add.w	r3, r7, #12
 8004692:	4611      	mov	r1, r2
 8004694:	224c      	movs	r2, #76	; 0x4c
 8004696:	4618      	mov	r0, r3
 8004698:	f006 f990 	bl	800a9bc <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e1ca      	b.n	8004a3c <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a7e      	ldr	r2, [pc, #504]	; (80048a4 <HAL_FDCAN_Init+0x220>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d106      	bne.n	80046be <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80046b8:	461a      	mov	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d106      	bne.n	80046d8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7fe feea 	bl	80034ac <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699a      	ldr	r2, [r3, #24]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 0210 	bic.w	r2, r2, #16
 80046e6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046e8:	f7ff fa56 	bl	8003b98 <HAL_GetTick>
 80046ec:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80046ee:	e014      	b.n	800471a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80046f0:	f7ff fa52 	bl	8003b98 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b0a      	cmp	r3, #10
 80046fc:	d90d      	bls.n	800471a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004704:	f043 0201 	orr.w	r2, r3, #1
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2203      	movs	r2, #3
 8004712:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e190      	b.n	8004a3c <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	f003 0308 	and.w	r3, r3, #8
 8004724:	2b08      	cmp	r3, #8
 8004726:	d0e3      	beq.n	80046f0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	699a      	ldr	r2, [r3, #24]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f042 0201 	orr.w	r2, r2, #1
 8004736:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004738:	f7ff fa2e 	bl	8003b98 <HAL_GetTick>
 800473c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800473e:	e014      	b.n	800476a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004740:	f7ff fa2a 	bl	8003b98 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b0a      	cmp	r3, #10
 800474c:	d90d      	bls.n	800476a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004754:	f043 0201 	orr.w	r2, r3, #1
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2203      	movs	r2, #3
 8004762:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e168      	b.n	8004a3c <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0e3      	beq.n	8004740 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699a      	ldr	r2, [r3, #24]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f042 0202 	orr.w	r2, r2, #2
 8004786:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	7c1b      	ldrb	r3, [r3, #16]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d108      	bne.n	80047a2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699a      	ldr	r2, [r3, #24]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800479e:	619a      	str	r2, [r3, #24]
 80047a0:	e007      	b.n	80047b2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	699a      	ldr	r2, [r3, #24]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047b0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	7c5b      	ldrb	r3, [r3, #17]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d108      	bne.n	80047cc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	699a      	ldr	r2, [r3, #24]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047c8:	619a      	str	r2, [r3, #24]
 80047ca:	e007      	b.n	80047dc <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	699a      	ldr	r2, [r3, #24]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80047da:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	7c9b      	ldrb	r3, [r3, #18]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d108      	bne.n	80047f6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	699a      	ldr	r2, [r3, #24]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047f2:	619a      	str	r2, [r3, #24]
 80047f4:	e007      	b.n	8004806 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	699a      	ldr	r2, [r3, #24]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004804:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689a      	ldr	r2, [r3, #8]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	699a      	ldr	r2, [r3, #24]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800482a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	691a      	ldr	r2, [r3, #16]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 0210 	bic.w	r2, r2, #16
 800483a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d108      	bne.n	8004856 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	699a      	ldr	r2, [r3, #24]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f042 0204 	orr.w	r2, r2, #4
 8004852:	619a      	str	r2, [r3, #24]
 8004854:	e030      	b.n	80048b8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d02c      	beq.n	80048b8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	2b02      	cmp	r3, #2
 8004864:	d020      	beq.n	80048a8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	699a      	ldr	r2, [r3, #24]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004874:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	691a      	ldr	r2, [r3, #16]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f042 0210 	orr.w	r2, r2, #16
 8004884:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	2b03      	cmp	r3, #3
 800488c:	d114      	bne.n	80048b8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	699a      	ldr	r2, [r3, #24]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f042 0220 	orr.w	r2, r2, #32
 800489c:	619a      	str	r2, [r3, #24]
 800489e:	e00b      	b.n	80048b8 <HAL_FDCAN_Init+0x234>
 80048a0:	0800e3fc 	.word	0x0800e3fc
 80048a4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	699a      	ldr	r2, [r3, #24]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0220 	orr.w	r2, r2, #32
 80048b6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	3b01      	subs	r3, #1
 80048be:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	69db      	ldr	r3, [r3, #28]
 80048c4:	3b01      	subs	r3, #1
 80048c6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80048c8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80048d0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	3b01      	subs	r3, #1
 80048da:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80048e0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80048e2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048ec:	d115      	bne.n	800491a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f8:	3b01      	subs	r3, #1
 80048fa:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80048fc:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004902:	3b01      	subs	r3, #1
 8004904:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004906:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	3b01      	subs	r3, #1
 8004910:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004916:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004918:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00a      	beq.n	8004938 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004940:	4413      	add	r3, r2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d012      	beq.n	800496c <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800494e:	f023 0107 	bic.w	r1, r3, #7
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800495c:	4413      	add	r3, r2
 800495e:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004970:	2b00      	cmp	r3, #0
 8004972:	d012      	beq.n	800499a <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800497c:	f023 0107 	bic.w	r1, r3, #7
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800498a:	4413      	add	r3, r2
 800498c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d013      	beq.n	80049ca <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80049aa:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80049b8:	4413      	add	r3, r2
 80049ba:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80049be:	011a      	lsls	r2, r3, #4
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	430a      	orrs	r2, r1
 80049c6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d013      	beq.n	80049fa <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80049da:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80049e8:	4413      	add	r3, r2
 80049ea:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80049ee:	021a      	lsls	r2, r3, #8
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a11      	ldr	r2, [pc, #68]	; (8004a44 <HAL_FDCAN_Init+0x3c0>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d107      	bne.n	8004a14 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	689a      	ldr	r2, [r3, #8]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f022 0203 	bic.w	r2, r2, #3
 8004a12:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 fdf9 	bl	8005624 <FDCAN_CalcultateRamBlockAddresses>
 8004a32:	4603      	mov	r3, r0
 8004a34:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004a38:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3760      	adds	r7, #96	; 0x60
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	4000a000 	.word	0x4000a000

08004a48 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004a58:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004a5a:	7bfb      	ldrb	r3, [r7, #15]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d002      	beq.n	8004a66 <HAL_FDCAN_ConfigFilter+0x1e>
 8004a60:	7bfb      	ldrb	r3, [r7, #15]
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d157      	bne.n	8004b16 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d12b      	bne.n	8004ac6 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	2b07      	cmp	r3, #7
 8004a74:	d10d      	bne.n	8004a92 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8004a82:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004a88:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8004a8a:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8004a8e:	617b      	str	r3, [r7, #20]
 8004a90:	e00e      	b.n	8004ab0 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004a9e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8004aa6:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004aac:	4313      	orrs	r3, r2
 8004aae:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4413      	add	r3, r2
 8004abc:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	601a      	str	r2, [r3, #0]
 8004ac4:	e025      	b.n	8004b12 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	075a      	lsls	r2, r3, #29
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	2b07      	cmp	r3, #7
 8004ada:	d103      	bne.n	8004ae4 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	613b      	str	r3, [r7, #16]
 8004ae2:	e006      	b.n	8004af2 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	079a      	lsls	r2, r3, #30
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	00db      	lsls	r3, r3, #3
 8004afc:	4413      	add	r3, r2
 8004afe:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	3304      	adds	r3, #4
 8004b0a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	e008      	b.n	8004b28 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b1c:	f043 0202 	orr.w	r2, r3, #2
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
  }
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	371c      	adds	r7, #28
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d111      	bne.n	8004b6c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	699a      	ldr	r2, [r3, #24]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0201 	bic.w	r2, r2, #1
 8004b5e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	e008      	b.n	8004b7e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b72:	f043 0204 	orr.w	r2, r3, #4
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
  }
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b086      	sub	sp, #24
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	60f8      	str	r0, [r7, #12]
 8004b92:	60b9      	str	r1, [r7, #8]
 8004b94:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d141      	bne.n	8004c26 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004baa:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d109      	bne.n	8004bc6 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bb8:	f043 0220 	orr.w	r2, r3, #32
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e038      	b.n	8004c38 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004bce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d009      	beq.n	8004bea <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bdc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e026      	b.n	8004c38 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004bf2:	0c1b      	lsrs	r3, r3, #16
 8004bf4:	f003 031f 	and.w	r3, r3, #31
 8004bf8:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	68b9      	ldr	r1, [r7, #8]
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f000 fe95 	bl	8005930 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8004c12:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004c16:	2201      	movs	r2, #1
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	409a      	lsls	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8004c22:	2300      	movs	r3, #0
 8004c24:	e008      	b.n	8004c38 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c2c:	f043 0208 	orr.w	r2, r3, #8
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
  }
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b08b      	sub	sp, #44	; 0x2c
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
 8004c4c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004c58:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8004c5a:	7efb      	ldrb	r3, [r7, #27]
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	f040 814b 	bne.w	8004ef8 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	2b40      	cmp	r3, #64	; 0x40
 8004c66:	d14d      	bne.n	8004d04 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004c70:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d109      	bne.n	8004c8c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c7e:	f043 0220 	orr.w	r2, r3, #32
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e13e      	b.n	8004f0a <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004c94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d109      	bne.n	8004cb0 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ca2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e12c      	b.n	8004f0a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004cb8:	0e1b      	lsrs	r3, r3, #24
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d10b      	bne.n	8004cda <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004cca:	0fdb      	lsrs	r3, r3, #31
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cd4:	d101      	bne.n	8004cda <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004ce2:	0a1b      	lsrs	r3, r3, #8
 8004ce4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ce8:	69fa      	ldr	r2, [r7, #28]
 8004cea:	4413      	add	r3, r2
 8004cec:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf6:	69f9      	ldr	r1, [r7, #28]
 8004cf8:	fb01 f303 	mul.w	r3, r1, r3
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	627b      	str	r3, [r7, #36]	; 0x24
 8004d02:	e069      	b.n	8004dd8 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	2b41      	cmp	r3, #65	; 0x41
 8004d08:	d14d      	bne.n	8004da6 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d109      	bne.n	8004d2e <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d20:	f043 0220 	orr.w	r2, r3, #32
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e0ed      	b.n	8004f0a <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004d36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d109      	bne.n	8004d52 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d44:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e0db      	b.n	8004f0a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004d5a:	0e1b      	lsrs	r3, r3, #24
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d10b      	bne.n	8004d7c <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d6c:	0fdb      	lsrs	r3, r3, #31
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d76:	d101      	bne.n	8004d7c <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004d84:	0a1b      	lsrs	r3, r3, #8
 8004d86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d8a:	69fa      	ldr	r2, [r7, #28]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d98:	69f9      	ldr	r1, [r7, #28]
 8004d9a:	fb01 f303 	mul.w	r3, r1, r3
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4413      	add	r3, r2
 8004da2:	627b      	str	r3, [r7, #36]	; 0x24
 8004da4:	e018      	b.n	8004dd8 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004daa:	68ba      	ldr	r2, [r7, #8]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d309      	bcc.n	8004dc4 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004db6:	f043 0220 	orr.w	r2, r3, #32
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e0a2      	b.n	8004f0a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dcc:	68b9      	ldr	r1, [r7, #8]
 8004dce:	fb01 f303 	mul.w	r3, r1, r3
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d107      	bne.n	8004dfc <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	0c9b      	lsrs	r3, r3, #18
 8004df2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	601a      	str	r2, [r3, #0]
 8004dfa:	e005      	b.n	8004e08 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8004e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	3304      	adds	r3, #4
 8004e24:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8004e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	0e1b      	lsrs	r3, r3, #24
 8004e5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	0fda      	lsrs	r2, r3, #31
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6e:	3304      	adds	r3, #4
 8004e70:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e74:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8004e76:	2300      	movs	r3, #0
 8004e78:	623b      	str	r3, [r7, #32]
 8004e7a:	e00a      	b.n	8004e92 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	6a3b      	ldr	r3, [r7, #32]
 8004e80:	441a      	add	r2, r3
 8004e82:	6839      	ldr	r1, [r7, #0]
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	440b      	add	r3, r1
 8004e88:	7812      	ldrb	r2, [r2, #0]
 8004e8a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	623b      	str	r3, [r7, #32]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	0c1b      	lsrs	r3, r3, #16
 8004e98:	4a1f      	ldr	r2, [pc, #124]	; (8004f18 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8004e9a:	5cd3      	ldrb	r3, [r2, r3]
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d3eb      	bcc.n	8004e7c <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	2b40      	cmp	r3, #64	; 0x40
 8004ea8:	d105      	bne.n	8004eb6 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	69fa      	ldr	r2, [r7, #28]
 8004eb0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8004eb4:	e01e      	b.n	8004ef4 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	2b41      	cmp	r3, #65	; 0x41
 8004eba:	d105      	bne.n	8004ec8 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	69fa      	ldr	r2, [r7, #28]
 8004ec2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8004ec6:	e015      	b.n	8004ef4 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2b1f      	cmp	r3, #31
 8004ecc:	d808      	bhi.n	8004ee0 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8004eda:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8004ede:	e009      	b.n	8004ef4 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	f003 021f 	and.w	r2, r3, #31
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2101      	movs	r1, #1
 8004eec:	fa01 f202 	lsl.w	r2, r1, r2
 8004ef0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	e008      	b.n	8004f0a <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004efe:	f043 0208 	orr.w	r2, r3, #8
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
  }
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	372c      	adds	r7, #44	; 0x2c
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	0800e458 	.word	0x0800e458

08004f1c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004f2e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004f30:	7dfb      	ldrb	r3, [r7, #23]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d002      	beq.n	8004f3c <HAL_FDCAN_ActivateNotification+0x20>
 8004f36:	7dfb      	ldrb	r3, [r7, #23]
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d155      	bne.n	8004fe8 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	4013      	ands	r3, r2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d108      	bne.n	8004f5c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f042 0201 	orr.w	r2, r2, #1
 8004f58:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f5a:	e014      	b.n	8004f86 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	4013      	ands	r3, r2
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d108      	bne.n	8004f7e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 0202 	orr.w	r2, r2, #2
 8004f7a:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f7c:	e003      	b.n	8004f86 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2203      	movs	r2, #3
 8004f84:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d009      	beq.n	8004fa4 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d009      	beq.n	8004fc2 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	4b0f      	ldr	r3, [pc, #60]	; (8005008 <HAL_FDCAN_ActivateNotification+0xec>)
 8004fcc:	4013      	ands	r3, r2
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	6812      	ldr	r2, [r2, #0]
 8004fd2:	430b      	orrs	r3, r1
 8004fd4:	6553      	str	r3, [r2, #84]	; 0x54
 8004fd6:	4b0d      	ldr	r3, [pc, #52]	; (800500c <HAL_FDCAN_ActivateNotification+0xf0>)
 8004fd8:	695a      	ldr	r2, [r3, #20]
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	0f9b      	lsrs	r3, r3, #30
 8004fde:	490b      	ldr	r1, [pc, #44]	; (800500c <HAL_FDCAN_ActivateNotification+0xf0>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	e008      	b.n	8004ffa <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fee:	f043 0202 	orr.w	r2, r3, #2
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
  }
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	371c      	adds	r7, #28
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	3fcfffff 	.word	0x3fcfffff
 800500c:	4000a800 	.word	0x4000a800

08005010 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b092      	sub	sp, #72	; 0x48
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005018:	4b90      	ldr	r3, [pc, #576]	; (800525c <HAL_FDCAN_IRQHandler+0x24c>)
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	079b      	lsls	r3, r3, #30
 800501e:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005020:	4b8e      	ldr	r3, [pc, #568]	; (800525c <HAL_FDCAN_IRQHandler+0x24c>)
 8005022:	695b      	ldr	r3, [r3, #20]
 8005024:	079b      	lsls	r3, r3, #30
 8005026:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005028:	4013      	ands	r3, r2
 800502a:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005032:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005036:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800503e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005040:	4013      	ands	r3, r2
 8005042:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800504a:	f003 030f 	and.w	r3, r3, #15
 800504e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005056:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005058:	4013      	ands	r3, r2
 800505a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005062:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005066:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800506e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005070:	4013      	ands	r3, r2
 8005072:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800507a:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 800507e:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005086:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005088:	4013      	ands	r3, r2
 800508a:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005092:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8005096:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050a0:	4013      	ands	r3, r2
 80050a2:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d011      	beq.n	80050d6 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00a      	beq.n	80050d6 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050c8:	651a      	str	r2, [r3, #80]	; 0x50
 80050ca:	4b64      	ldr	r3, [pc, #400]	; (800525c <HAL_FDCAN_IRQHandler+0x24c>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 fa5a 	bl	800558a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d01e      	beq.n	8005122 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d017      	beq.n	8005122 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80050fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005104:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005106:	4013      	ands	r3, r2
 8005108:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005112:	651a      	str	r2, [r3, #80]	; 0x50
 8005114:	4b51      	ldr	r3, [pc, #324]	; (800525c <HAL_FDCAN_IRQHandler+0x24c>)
 8005116:	2200      	movs	r2, #0
 8005118:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800511a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 fa0b 	bl	8005538 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8005122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00d      	beq.n	8005144 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800512e:	4b4c      	ldr	r3, [pc, #304]	; (8005260 <HAL_FDCAN_IRQHandler+0x250>)
 8005130:	400b      	ands	r3, r1
 8005132:	6513      	str	r3, [r2, #80]	; 0x50
 8005134:	4a49      	ldr	r2, [pc, #292]	; (800525c <HAL_FDCAN_IRQHandler+0x24c>)
 8005136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005138:	0f9b      	lsrs	r3, r3, #30
 800513a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 800513c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f9c4 	bl	80054cc <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00d      	beq.n	8005166 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005150:	4b43      	ldr	r3, [pc, #268]	; (8005260 <HAL_FDCAN_IRQHandler+0x250>)
 8005152:	400b      	ands	r3, r1
 8005154:	6513      	str	r3, [r2, #80]	; 0x50
 8005156:	4a41      	ldr	r2, [pc, #260]	; (800525c <HAL_FDCAN_IRQHandler+0x24c>)
 8005158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800515a:	0f9b      	lsrs	r3, r3, #30
 800515c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800515e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f9be 	bl	80054e2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00d      	beq.n	8005188 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005172:	4b3b      	ldr	r3, [pc, #236]	; (8005260 <HAL_FDCAN_IRQHandler+0x250>)
 8005174:	400b      	ands	r3, r1
 8005176:	6513      	str	r3, [r2, #80]	; 0x50
 8005178:	4a38      	ldr	r2, [pc, #224]	; (800525c <HAL_FDCAN_IRQHandler+0x24c>)
 800517a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800517c:	0f9b      	lsrs	r3, r3, #30
 800517e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005180:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7fb ffa8 	bl	80010d8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00d      	beq.n	80051aa <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005194:	4b32      	ldr	r3, [pc, #200]	; (8005260 <HAL_FDCAN_IRQHandler+0x250>)
 8005196:	400b      	ands	r3, r1
 8005198:	6513      	str	r3, [r2, #80]	; 0x50
 800519a:	4a30      	ldr	r2, [pc, #192]	; (800525c <HAL_FDCAN_IRQHandler+0x24c>)
 800519c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800519e:	0f9b      	lsrs	r3, r3, #30
 80051a0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80051a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 f9a7 	bl	80054f8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d011      	beq.n	80051dc <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00a      	beq.n	80051dc <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051ce:	651a      	str	r2, [r3, #80]	; 0x50
 80051d0:	4b22      	ldr	r3, [pc, #136]	; (800525c <HAL_FDCAN_IRQHandler+0x24c>)
 80051d2:	2200      	movs	r2, #0
 80051d4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f999 	bl	800550e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d01e      	beq.n	8005228 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d017      	beq.n	8005228 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005200:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800520a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800520c:	4013      	ands	r3, r2
 800520e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005218:	651a      	str	r2, [r3, #80]	; 0x50
 800521a:	4b10      	ldr	r3, [pc, #64]	; (800525c <HAL_FDCAN_IRQHandler+0x24c>)
 800521c:	2200      	movs	r2, #0
 800521e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005220:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f97d 	bl	8005522 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800522e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d016      	beq.n	8005264 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800523c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00f      	beq.n	8005264 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800524c:	651a      	str	r2, [r3, #80]	; 0x50
 800524e:	4b03      	ldr	r3, [pc, #12]	; (800525c <HAL_FDCAN_IRQHandler+0x24c>)
 8005250:	2200      	movs	r2, #0
 8005252:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 f97a 	bl	800554e <HAL_FDCAN_RxBufferNewMessageCallback>
 800525a:	e003      	b.n	8005264 <HAL_FDCAN_IRQHandler+0x254>
 800525c:	4000a800 	.word	0x4000a800
 8005260:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d011      	beq.n	8005296 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00a      	beq.n	8005296 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005288:	651a      	str	r2, [r3, #80]	; 0x50
 800528a:	4b8d      	ldr	r3, [pc, #564]	; (80054c0 <HAL_FDCAN_IRQHandler+0x4b0>)
 800528c:	2200      	movs	r2, #0
 800528e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 f966 	bl	8005562 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800529c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d011      	beq.n	80052c8 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00a      	beq.n	80052c8 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80052ba:	651a      	str	r2, [r3, #80]	; 0x50
 80052bc:	4b80      	ldr	r3, [pc, #512]	; (80054c0 <HAL_FDCAN_IRQHandler+0x4b0>)
 80052be:	2200      	movs	r2, #0
 80052c0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f957 	bl	8005576 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d016      	beq.n	8005304 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00f      	beq.n	8005304 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80052ec:	651a      	str	r2, [r3, #80]	; 0x50
 80052ee:	4b74      	ldr	r3, [pc, #464]	; (80054c0 <HAL_FDCAN_IRQHandler+0x4b0>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052fa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00d      	beq.n	8005326 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005310:	4b6c      	ldr	r3, [pc, #432]	; (80054c4 <HAL_FDCAN_IRQHandler+0x4b4>)
 8005312:	400b      	ands	r3, r1
 8005314:	6513      	str	r3, [r2, #80]	; 0x50
 8005316:	4a6a      	ldr	r2, [pc, #424]	; (80054c0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531a:	0f9b      	lsrs	r3, r3, #30
 800531c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800531e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 f946 	bl	80055b2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005328:	2b00      	cmp	r3, #0
 800532a:	d011      	beq.n	8005350 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005332:	4b64      	ldr	r3, [pc, #400]	; (80054c4 <HAL_FDCAN_IRQHandler+0x4b4>)
 8005334:	400b      	ands	r3, r1
 8005336:	6513      	str	r3, [r2, #80]	; 0x50
 8005338:	4a61      	ldr	r2, [pc, #388]	; (80054c0 <HAL_FDCAN_IRQHandler+0x4b0>)
 800533a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800533c:	0f9b      	lsrs	r3, r3, #30
 800533e:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005348:	431a      	orrs	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a5c      	ldr	r2, [pc, #368]	; (80054c8 <HAL_FDCAN_IRQHandler+0x4b8>)
 8005356:	4293      	cmp	r3, r2
 8005358:	f040 80a6 	bne.w	80054a8 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f003 0303 	and.w	r3, r3, #3
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 809e 	beq.w	80054a8 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	f003 030f 	and.w	r3, r3, #15
 8005376:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005380:	4013      	ands	r3, r2
 8005382:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800538e:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005396:	6a3a      	ldr	r2, [r7, #32]
 8005398:	4013      	ands	r3, r2
 800539a:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80053a6:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ae:	69fa      	ldr	r2, [r7, #28]
 80053b0:	4013      	ands	r3, r2
 80053b2:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 80053be:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c6:	69ba      	ldr	r2, [r7, #24]
 80053c8:	4013      	ands	r3, r2
 80053ca:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 80053d6:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	4013      	ands	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d007      	beq.n	80053fa <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80053f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 f8e7 	bl	80055c8 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d007      	beq.n	8005410 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	6a3a      	ldr	r2, [r7, #32]
 8005406:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8005408:	6a39      	ldr	r1, [r7, #32]
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f8e7 	bl	80055de <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541a:	2b00      	cmp	r3, #0
 800541c:	d01b      	beq.n	8005456 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	6a1b      	ldr	r3, [r3, #32]
 8005424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005428:	2b00      	cmp	r3, #0
 800542a:	d014      	beq.n	8005456 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005432:	0c1b      	lsrs	r3, r3, #16
 8005434:	b29b      	uxth	r3, r3
 8005436:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800543e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005442:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	2240      	movs	r2, #64	; 0x40
 800544a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	6939      	ldr	r1, [r7, #16]
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 f8cf 	bl	80055f4 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d007      	beq.n	800546c <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	69fa      	ldr	r2, [r7, #28]
 8005462:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005464:	69f9      	ldr	r1, [r7, #28]
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f8d0 	bl	800560c <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00b      	beq.n	800548a <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	69ba      	ldr	r2, [r7, #24]
 8005478:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	431a      	orrs	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00b      	beq.n	80054a8 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	431a      	orrs	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d002      	beq.n	80054b8 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f873 	bl	800559e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80054b8:	bf00      	nop
 80054ba:	3748      	adds	r7, #72	; 0x48
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	4000a800 	.word	0x4000a800
 80054c4:	3fcfffff 	.word	0x3fcfffff
 80054c8:	4000a000 	.word	0x4000a000

080054cc <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80054d6:	bf00      	nop
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b083      	sub	sp, #12
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
 80054ea:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005502:	bf00      	nop
 8005504:	370c      	adds	r7, #12
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800550e:	b480      	push	{r7}
 8005510:	b083      	sub	sp, #12
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005516:	bf00      	nop
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005522:	b480      	push	{r7}
 8005524:	b083      	sub	sp, #12
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
 800552a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005542:	bf00      	nop
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800554e:	b480      	push	{r7}
 8005550:	b083      	sub	sp, #12
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8005556:	bf00      	nop
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr

08005562 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005562:	b480      	push	{r7}
 8005564:	b083      	sub	sp, #12
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800556a:	bf00      	nop
 800556c:	370c      	adds	r7, #12
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr

08005576 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005576:	b480      	push	{r7}
 8005578:	b083      	sub	sp, #12
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800557e:	bf00      	nop
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800558a:	b480      	push	{r7}
 800558c:	b083      	sub	sp, #12
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005592:	bf00      	nop
 8005594:	370c      	adds	r7, #12
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr

0800559e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800559e:	b480      	push	{r7}
 80055a0:	b083      	sub	sp, #12
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80055a6:	bf00      	nop
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr

080055b2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80055b2:	b480      	push	{r7}
 80055b4:	b083      	sub	sp, #12
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
 80055ba:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80055d2:	bf00      	nop
 80055d4:	370c      	adds	r7, #12
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr

080055de <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80055de:	b480      	push	{r7}
 80055e0:	b083      	sub	sp, #12
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
 80055e6:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8005600:	bf00      	nop
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8005616:	bf00      	nop
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
	...

08005624 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005630:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800563a:	4ba7      	ldr	r3, [pc, #668]	; (80058d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800563c:	4013      	ands	r3, r2
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	0091      	lsls	r1, r2, #2
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	6812      	ldr	r2, [r2, #0]
 8005646:	430b      	orrs	r3, r1
 8005648:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005654:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565c:	041a      	lsls	r2, r3, #16
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	4413      	add	r3, r2
 8005670:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800567a:	4b97      	ldr	r3, [pc, #604]	; (80058d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800567c:	4013      	ands	r3, r2
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	0091      	lsls	r1, r2, #2
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	6812      	ldr	r2, [r2, #0]
 8005686:	430b      	orrs	r3, r1
 8005688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005694:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800569c:	041a      	lsls	r2, r3, #16
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ac:	005b      	lsls	r3, r3, #1
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	4413      	add	r3, r2
 80056b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80056bc:	4b86      	ldr	r3, [pc, #536]	; (80058d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80056be:	4013      	ands	r3, r2
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	0091      	lsls	r1, r2, #2
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	6812      	ldr	r2, [r2, #0]
 80056c8:	430b      	orrs	r3, r1
 80056ca:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80056d6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056de:	041a      	lsls	r2, r3, #16
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80056f2:	fb02 f303 	mul.w	r3, r2, r3
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	4413      	add	r3, r2
 80056fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005704:	4b74      	ldr	r3, [pc, #464]	; (80058d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005706:	4013      	ands	r3, r2
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	0091      	lsls	r1, r2, #2
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	6812      	ldr	r2, [r2, #0]
 8005710:	430b      	orrs	r3, r1
 8005712:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800571e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005726:	041a      	lsls	r2, r3, #16
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	430a      	orrs	r2, r1
 800572e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800573a:	fb02 f303 	mul.w	r3, r2, r3
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	4413      	add	r3, r2
 8005742:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800574c:	4b62      	ldr	r3, [pc, #392]	; (80058d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800574e:	4013      	ands	r3, r2
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	0091      	lsls	r1, r2, #2
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	6812      	ldr	r2, [r2, #0]
 8005758:	430b      	orrs	r3, r1
 800575a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005766:	fb02 f303 	mul.w	r3, r2, r3
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	4413      	add	r3, r2
 800576e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005778:	4b57      	ldr	r3, [pc, #348]	; (80058d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800577a:	4013      	ands	r3, r2
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	0091      	lsls	r1, r2, #2
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	6812      	ldr	r2, [r2, #0]
 8005784:	430b      	orrs	r3, r1
 8005786:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005792:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800579a:	041a      	lsls	r2, r3, #16
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	430a      	orrs	r2, r1
 80057a2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057aa:	005b      	lsls	r3, r3, #1
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	4413      	add	r3, r2
 80057b0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80057ba:	4b47      	ldr	r3, [pc, #284]	; (80058d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80057bc:	4013      	ands	r3, r2
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	0091      	lsls	r1, r2, #2
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	6812      	ldr	r2, [r2, #0]
 80057c6:	430b      	orrs	r3, r1
 80057c8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80057d4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057dc:	041a      	lsls	r2, r3, #16
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80057f0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057f8:	061a      	lsls	r2, r3, #24
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	430a      	orrs	r2, r1
 8005800:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005808:	4b34      	ldr	r3, [pc, #208]	; (80058dc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800580a:	4413      	add	r3, r2
 800580c:	009a      	lsls	r2, r3, #2
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	441a      	add	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	441a      	add	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583a:	6879      	ldr	r1, [r7, #4]
 800583c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800583e:	fb01 f303 	mul.w	r3, r1, r3
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	441a      	add	r2, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005852:	6879      	ldr	r1, [r7, #4]
 8005854:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8005856:	fb01 f303 	mul.w	r3, r1, r3
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	441a      	add	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800586a:	6879      	ldr	r1, [r7, #4]
 800586c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800586e:	fb01 f303 	mul.w	r3, r1, r3
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	441a      	add	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005886:	00db      	lsls	r3, r3, #3
 8005888:	441a      	add	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800589a:	6879      	ldr	r1, [r7, #4]
 800589c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800589e:	fb01 f303 	mul.w	r3, r1, r3
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	441a      	add	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058b6:	6879      	ldr	r1, [r7, #4]
 80058b8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80058ba:	fb01 f303 	mul.w	r3, r1, r3
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	441a      	add	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ce:	4a04      	ldr	r2, [pc, #16]	; (80058e0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d915      	bls.n	8005900 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80058d4:	e006      	b.n	80058e4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80058d6:	bf00      	nop
 80058d8:	ffff0003 	.word	0xffff0003
 80058dc:	10002b00 	.word	0x10002b00
 80058e0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058ea:	f043 0220 	orr.w	r2, r3, #32
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2203      	movs	r2, #3
 80058f8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e010      	b.n	8005922 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005904:	60fb      	str	r3, [r7, #12]
 8005906:	e005      	b.n	8005914 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	3304      	adds	r3, #4
 8005912:	60fb      	str	r3, [r7, #12]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	429a      	cmp	r2, r3
 800591e:	d3f3      	bcc.n	8005908 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3714      	adds	r7, #20
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop

08005930 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8005930:	b480      	push	{r7}
 8005932:	b089      	sub	sp, #36	; 0x24
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
 800593c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10a      	bne.n	800595c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800594e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005956:	4313      	orrs	r3, r2
 8005958:	61fb      	str	r3, [r7, #28]
 800595a:	e00a      	b.n	8005972 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005964:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800596a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800596c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005970:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800597c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8005982:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8005988:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800598e:	4313      	orrs	r3, r2
 8005990:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800599c:	6839      	ldr	r1, [r7, #0]
 800599e:	fb01 f303 	mul.w	r3, r1, r3
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4413      	add	r3, r2
 80059a6:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	69fa      	ldr	r2, [r7, #28]
 80059ac:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	3304      	adds	r3, #4
 80059b2:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	3304      	adds	r3, #4
 80059be:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80059c0:	2300      	movs	r3, #0
 80059c2:	617b      	str	r3, [r7, #20]
 80059c4:	e020      	b.n	8005a08 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	3303      	adds	r3, #3
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	4413      	add	r3, r2
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	3302      	adds	r3, #2
 80059d6:	6879      	ldr	r1, [r7, #4]
 80059d8:	440b      	add	r3, r1
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80059de:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	3301      	adds	r3, #1
 80059e4:	6879      	ldr	r1, [r7, #4]
 80059e6:	440b      	add	r3, r1
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80059ec:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80059ee:	6879      	ldr	r1, [r7, #4]
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	440a      	add	r2, r1
 80059f4:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80059f6:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	3304      	adds	r3, #4
 8005a00:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	3304      	adds	r3, #4
 8005a06:	617b      	str	r3, [r7, #20]
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	0c1b      	lsrs	r3, r3, #16
 8005a0e:	4a06      	ldr	r2, [pc, #24]	; (8005a28 <FDCAN_CopyMessageToRAM+0xf8>)
 8005a10:	5cd3      	ldrb	r3, [r2, r3]
 8005a12:	461a      	mov	r2, r3
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d3d5      	bcc.n	80059c6 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8005a1a:	bf00      	nop
 8005a1c:	bf00      	nop
 8005a1e:	3724      	adds	r7, #36	; 0x24
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr
 8005a28:	0800e458 	.word	0x0800e458

08005a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b089      	sub	sp, #36	; 0x24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005a36:	2300      	movs	r3, #0
 8005a38:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005a3a:	4b89      	ldr	r3, [pc, #548]	; (8005c60 <HAL_GPIO_Init+0x234>)
 8005a3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a3e:	e194      	b.n	8005d6a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	2101      	movs	r1, #1
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	fa01 f303 	lsl.w	r3, r1, r3
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f000 8186 	beq.w	8005d64 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d00b      	beq.n	8005a78 <HAL_GPIO_Init+0x4c>
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d007      	beq.n	8005a78 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005a6c:	2b11      	cmp	r3, #17
 8005a6e:	d003      	beq.n	8005a78 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	2b12      	cmp	r3, #18
 8005a76:	d130      	bne.n	8005ada <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	005b      	lsls	r3, r3, #1
 8005a82:	2203      	movs	r2, #3
 8005a84:	fa02 f303 	lsl.w	r3, r2, r3
 8005a88:	43db      	mvns	r3, r3
 8005a8a:	69ba      	ldr	r2, [r7, #24]
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	68da      	ldr	r2, [r3, #12]
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	005b      	lsls	r3, r3, #1
 8005a98:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005aae:	2201      	movs	r2, #1
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab6:	43db      	mvns	r3, r3
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	4013      	ands	r3, r2
 8005abc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	091b      	lsrs	r3, r3, #4
 8005ac4:	f003 0201 	and.w	r2, r3, #1
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	69ba      	ldr	r2, [r7, #24]
 8005ad8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	005b      	lsls	r3, r3, #1
 8005ae4:	2203      	movs	r2, #3
 8005ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aea:	43db      	mvns	r3, r3
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	4013      	ands	r3, r2
 8005af0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	689a      	ldr	r2, [r3, #8]
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	005b      	lsls	r3, r3, #1
 8005afa:	fa02 f303 	lsl.w	r3, r2, r3
 8005afe:	69ba      	ldr	r2, [r7, #24]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d003      	beq.n	8005b1a <HAL_GPIO_Init+0xee>
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	2b12      	cmp	r3, #18
 8005b18:	d123      	bne.n	8005b62 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	08da      	lsrs	r2, r3, #3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	3208      	adds	r2, #8
 8005b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	f003 0307 	and.w	r3, r3, #7
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	220f      	movs	r2, #15
 8005b32:	fa02 f303 	lsl.w	r3, r2, r3
 8005b36:	43db      	mvns	r3, r3
 8005b38:	69ba      	ldr	r2, [r7, #24]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	691a      	ldr	r2, [r3, #16]
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	f003 0307 	and.w	r3, r3, #7
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4e:	69ba      	ldr	r2, [r7, #24]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	08da      	lsrs	r2, r3, #3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	3208      	adds	r2, #8
 8005b5c:	69b9      	ldr	r1, [r7, #24]
 8005b5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	005b      	lsls	r3, r3, #1
 8005b6c:	2203      	movs	r2, #3
 8005b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b72:	43db      	mvns	r3, r3
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	4013      	ands	r3, r2
 8005b78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f003 0203 	and.w	r2, r3, #3
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	005b      	lsls	r3, r3, #1
 8005b86:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8a:	69ba      	ldr	r2, [r7, #24]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	69ba      	ldr	r2, [r7, #24]
 8005b94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	f000 80e0 	beq.w	8005d64 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ba4:	4b2f      	ldr	r3, [pc, #188]	; (8005c64 <HAL_GPIO_Init+0x238>)
 8005ba6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005baa:	4a2e      	ldr	r2, [pc, #184]	; (8005c64 <HAL_GPIO_Init+0x238>)
 8005bac:	f043 0302 	orr.w	r3, r3, #2
 8005bb0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005bb4:	4b2b      	ldr	r3, [pc, #172]	; (8005c64 <HAL_GPIO_Init+0x238>)
 8005bb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	60fb      	str	r3, [r7, #12]
 8005bc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005bc2:	4a29      	ldr	r2, [pc, #164]	; (8005c68 <HAL_GPIO_Init+0x23c>)
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	089b      	lsrs	r3, r3, #2
 8005bc8:	3302      	adds	r3, #2
 8005bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	f003 0303 	and.w	r3, r3, #3
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	220f      	movs	r2, #15
 8005bda:	fa02 f303 	lsl.w	r3, r2, r3
 8005bde:	43db      	mvns	r3, r3
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	4013      	ands	r3, r2
 8005be4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a20      	ldr	r2, [pc, #128]	; (8005c6c <HAL_GPIO_Init+0x240>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d052      	beq.n	8005c94 <HAL_GPIO_Init+0x268>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a1f      	ldr	r2, [pc, #124]	; (8005c70 <HAL_GPIO_Init+0x244>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d031      	beq.n	8005c5a <HAL_GPIO_Init+0x22e>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a1e      	ldr	r2, [pc, #120]	; (8005c74 <HAL_GPIO_Init+0x248>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d02b      	beq.n	8005c56 <HAL_GPIO_Init+0x22a>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a1d      	ldr	r2, [pc, #116]	; (8005c78 <HAL_GPIO_Init+0x24c>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d025      	beq.n	8005c52 <HAL_GPIO_Init+0x226>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a1c      	ldr	r2, [pc, #112]	; (8005c7c <HAL_GPIO_Init+0x250>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d01f      	beq.n	8005c4e <HAL_GPIO_Init+0x222>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a1b      	ldr	r2, [pc, #108]	; (8005c80 <HAL_GPIO_Init+0x254>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d019      	beq.n	8005c4a <HAL_GPIO_Init+0x21e>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a1a      	ldr	r2, [pc, #104]	; (8005c84 <HAL_GPIO_Init+0x258>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d013      	beq.n	8005c46 <HAL_GPIO_Init+0x21a>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a19      	ldr	r2, [pc, #100]	; (8005c88 <HAL_GPIO_Init+0x25c>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d00d      	beq.n	8005c42 <HAL_GPIO_Init+0x216>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a18      	ldr	r2, [pc, #96]	; (8005c8c <HAL_GPIO_Init+0x260>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d007      	beq.n	8005c3e <HAL_GPIO_Init+0x212>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a17      	ldr	r2, [pc, #92]	; (8005c90 <HAL_GPIO_Init+0x264>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d101      	bne.n	8005c3a <HAL_GPIO_Init+0x20e>
 8005c36:	2309      	movs	r3, #9
 8005c38:	e02d      	b.n	8005c96 <HAL_GPIO_Init+0x26a>
 8005c3a:	230a      	movs	r3, #10
 8005c3c:	e02b      	b.n	8005c96 <HAL_GPIO_Init+0x26a>
 8005c3e:	2308      	movs	r3, #8
 8005c40:	e029      	b.n	8005c96 <HAL_GPIO_Init+0x26a>
 8005c42:	2307      	movs	r3, #7
 8005c44:	e027      	b.n	8005c96 <HAL_GPIO_Init+0x26a>
 8005c46:	2306      	movs	r3, #6
 8005c48:	e025      	b.n	8005c96 <HAL_GPIO_Init+0x26a>
 8005c4a:	2305      	movs	r3, #5
 8005c4c:	e023      	b.n	8005c96 <HAL_GPIO_Init+0x26a>
 8005c4e:	2304      	movs	r3, #4
 8005c50:	e021      	b.n	8005c96 <HAL_GPIO_Init+0x26a>
 8005c52:	2303      	movs	r3, #3
 8005c54:	e01f      	b.n	8005c96 <HAL_GPIO_Init+0x26a>
 8005c56:	2302      	movs	r3, #2
 8005c58:	e01d      	b.n	8005c96 <HAL_GPIO_Init+0x26a>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e01b      	b.n	8005c96 <HAL_GPIO_Init+0x26a>
 8005c5e:	bf00      	nop
 8005c60:	58000080 	.word	0x58000080
 8005c64:	58024400 	.word	0x58024400
 8005c68:	58000400 	.word	0x58000400
 8005c6c:	58020000 	.word	0x58020000
 8005c70:	58020400 	.word	0x58020400
 8005c74:	58020800 	.word	0x58020800
 8005c78:	58020c00 	.word	0x58020c00
 8005c7c:	58021000 	.word	0x58021000
 8005c80:	58021400 	.word	0x58021400
 8005c84:	58021800 	.word	0x58021800
 8005c88:	58021c00 	.word	0x58021c00
 8005c8c:	58022000 	.word	0x58022000
 8005c90:	58022400 	.word	0x58022400
 8005c94:	2300      	movs	r3, #0
 8005c96:	69fa      	ldr	r2, [r7, #28]
 8005c98:	f002 0203 	and.w	r2, r2, #3
 8005c9c:	0092      	lsls	r2, r2, #2
 8005c9e:	4093      	lsls	r3, r2
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ca6:	4938      	ldr	r1, [pc, #224]	; (8005d88 <HAL_GPIO_Init+0x35c>)
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	089b      	lsrs	r3, r3, #2
 8005cac:	3302      	adds	r3, #2
 8005cae:	69ba      	ldr	r2, [r7, #24]
 8005cb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	43db      	mvns	r3, r3
 8005cbe:	69ba      	ldr	r2, [r7, #24]
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d003      	beq.n	8005cd8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005cd0:	69ba      	ldr	r2, [r7, #24]
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	43db      	mvns	r3, r3
 8005ce8:	69ba      	ldr	r2, [r7, #24]
 8005cea:	4013      	ands	r3, r2
 8005cec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d003      	beq.n	8005d02 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005cfa:	69ba      	ldr	r2, [r7, #24]
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	43db      	mvns	r3, r3
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	4013      	ands	r3, r2
 8005d18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d003      	beq.n	8005d2e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005d26:	69ba      	ldr	r2, [r7, #24]
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005d2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	43db      	mvns	r3, r3
 8005d42:	69ba      	ldr	r2, [r7, #24]
 8005d44:	4013      	ands	r3, r2
 8005d46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d003      	beq.n	8005d5c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005d54:	69ba      	ldr	r2, [r7, #24]
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005d5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	3301      	adds	r3, #1
 8005d68:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	fa22 f303 	lsr.w	r3, r2, r3
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	f47f ae63 	bne.w	8005a40 <HAL_GPIO_Init+0x14>
  }
}
 8005d7a:	bf00      	nop
 8005d7c:	bf00      	nop
 8005d7e:	3724      	adds	r7, #36	; 0x24
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr
 8005d88:	58000400 	.word	0x58000400

08005d8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	460b      	mov	r3, r1
 8005d96:	807b      	strh	r3, [r7, #2]
 8005d98:	4613      	mov	r3, r2
 8005d9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d9c:	787b      	ldrb	r3, [r7, #1]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d003      	beq.n	8005daa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005da2:	887a      	ldrh	r2, [r7, #2]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005da8:	e003      	b.n	8005db2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005daa:	887b      	ldrh	r3, [r7, #2]
 8005dac:	041a      	lsls	r2, r3, #16
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	619a      	str	r2, [r3, #24]
}
 8005db2:	bf00      	nop
 8005db4:	370c      	adds	r7, #12
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr

08005dbe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	b085      	sub	sp, #20
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005dd0:	887a      	ldrh	r2, [r7, #2]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	041a      	lsls	r2, r3, #16
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	43d9      	mvns	r1, r3
 8005ddc:	887b      	ldrh	r3, [r7, #2]
 8005dde:	400b      	ands	r3, r1
 8005de0:	431a      	orrs	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	619a      	str	r2, [r3, #24]
}
 8005de6:	bf00      	nop
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005df2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005df4:	b08f      	sub	sp, #60	; 0x3c
 8005df6:	af0a      	add	r7, sp, #40	; 0x28
 8005df8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d101      	bne.n	8005e04 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e116      	b.n	8006032 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d106      	bne.n	8005e24 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7fd fc7c 	bl	800371c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2203      	movs	r2, #3
 8005e28:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d102      	bne.n	8005e3e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4618      	mov	r0, r3
 8005e44:	f004 fb40 	bl	800a4c8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	603b      	str	r3, [r7, #0]
 8005e4e:	687e      	ldr	r6, [r7, #4]
 8005e50:	466d      	mov	r5, sp
 8005e52:	f106 0410 	add.w	r4, r6, #16
 8005e56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005e62:	e885 0003 	stmia.w	r5, {r0, r1}
 8005e66:	1d33      	adds	r3, r6, #4
 8005e68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e6a:	6838      	ldr	r0, [r7, #0]
 8005e6c:	f004 fabe 	bl	800a3ec <USB_CoreInit>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d005      	beq.n	8005e82 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2202      	movs	r2, #2
 8005e7a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e0d7      	b.n	8006032 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2100      	movs	r1, #0
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f004 fb2e 	bl	800a4ea <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e8e:	2300      	movs	r3, #0
 8005e90:	73fb      	strb	r3, [r7, #15]
 8005e92:	e04a      	b.n	8005f2a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005e94:	7bfa      	ldrb	r2, [r7, #15]
 8005e96:	6879      	ldr	r1, [r7, #4]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	00db      	lsls	r3, r3, #3
 8005e9c:	1a9b      	subs	r3, r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	440b      	add	r3, r1
 8005ea2:	333d      	adds	r3, #61	; 0x3d
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005ea8:	7bfa      	ldrb	r2, [r7, #15]
 8005eaa:	6879      	ldr	r1, [r7, #4]
 8005eac:	4613      	mov	r3, r2
 8005eae:	00db      	lsls	r3, r3, #3
 8005eb0:	1a9b      	subs	r3, r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	440b      	add	r3, r1
 8005eb6:	333c      	adds	r3, #60	; 0x3c
 8005eb8:	7bfa      	ldrb	r2, [r7, #15]
 8005eba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005ebc:	7bfa      	ldrb	r2, [r7, #15]
 8005ebe:	7bfb      	ldrb	r3, [r7, #15]
 8005ec0:	b298      	uxth	r0, r3
 8005ec2:	6879      	ldr	r1, [r7, #4]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	1a9b      	subs	r3, r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	440b      	add	r3, r1
 8005ece:	3342      	adds	r3, #66	; 0x42
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005ed4:	7bfa      	ldrb	r2, [r7, #15]
 8005ed6:	6879      	ldr	r1, [r7, #4]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	00db      	lsls	r3, r3, #3
 8005edc:	1a9b      	subs	r3, r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	440b      	add	r3, r1
 8005ee2:	333f      	adds	r3, #63	; 0x3f
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005ee8:	7bfa      	ldrb	r2, [r7, #15]
 8005eea:	6879      	ldr	r1, [r7, #4]
 8005eec:	4613      	mov	r3, r2
 8005eee:	00db      	lsls	r3, r3, #3
 8005ef0:	1a9b      	subs	r3, r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	440b      	add	r3, r1
 8005ef6:	3344      	adds	r3, #68	; 0x44
 8005ef8:	2200      	movs	r2, #0
 8005efa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005efc:	7bfa      	ldrb	r2, [r7, #15]
 8005efe:	6879      	ldr	r1, [r7, #4]
 8005f00:	4613      	mov	r3, r2
 8005f02:	00db      	lsls	r3, r3, #3
 8005f04:	1a9b      	subs	r3, r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	440b      	add	r3, r1
 8005f0a:	3348      	adds	r3, #72	; 0x48
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005f10:	7bfa      	ldrb	r2, [r7, #15]
 8005f12:	6879      	ldr	r1, [r7, #4]
 8005f14:	4613      	mov	r3, r2
 8005f16:	00db      	lsls	r3, r3, #3
 8005f18:	1a9b      	subs	r3, r3, r2
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	440b      	add	r3, r1
 8005f1e:	3350      	adds	r3, #80	; 0x50
 8005f20:	2200      	movs	r2, #0
 8005f22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
 8005f26:	3301      	adds	r3, #1
 8005f28:	73fb      	strb	r3, [r7, #15]
 8005f2a:	7bfa      	ldrb	r2, [r7, #15]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d3af      	bcc.n	8005e94 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f34:	2300      	movs	r3, #0
 8005f36:	73fb      	strb	r3, [r7, #15]
 8005f38:	e044      	b.n	8005fc4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005f3a:	7bfa      	ldrb	r2, [r7, #15]
 8005f3c:	6879      	ldr	r1, [r7, #4]
 8005f3e:	4613      	mov	r3, r2
 8005f40:	00db      	lsls	r3, r3, #3
 8005f42:	1a9b      	subs	r3, r3, r2
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	440b      	add	r3, r1
 8005f48:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005f50:	7bfa      	ldrb	r2, [r7, #15]
 8005f52:	6879      	ldr	r1, [r7, #4]
 8005f54:	4613      	mov	r3, r2
 8005f56:	00db      	lsls	r3, r3, #3
 8005f58:	1a9b      	subs	r3, r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	440b      	add	r3, r1
 8005f5e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005f62:	7bfa      	ldrb	r2, [r7, #15]
 8005f64:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005f66:	7bfa      	ldrb	r2, [r7, #15]
 8005f68:	6879      	ldr	r1, [r7, #4]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	00db      	lsls	r3, r3, #3
 8005f6e:	1a9b      	subs	r3, r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	440b      	add	r3, r1
 8005f74:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005f78:	2200      	movs	r2, #0
 8005f7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005f7c:	7bfa      	ldrb	r2, [r7, #15]
 8005f7e:	6879      	ldr	r1, [r7, #4]
 8005f80:	4613      	mov	r3, r2
 8005f82:	00db      	lsls	r3, r3, #3
 8005f84:	1a9b      	subs	r3, r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	440b      	add	r3, r1
 8005f8a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005f8e:	2200      	movs	r2, #0
 8005f90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005f92:	7bfa      	ldrb	r2, [r7, #15]
 8005f94:	6879      	ldr	r1, [r7, #4]
 8005f96:	4613      	mov	r3, r2
 8005f98:	00db      	lsls	r3, r3, #3
 8005f9a:	1a9b      	subs	r3, r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	440b      	add	r3, r1
 8005fa0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005fa8:	7bfa      	ldrb	r2, [r7, #15]
 8005faa:	6879      	ldr	r1, [r7, #4]
 8005fac:	4613      	mov	r3, r2
 8005fae:	00db      	lsls	r3, r3, #3
 8005fb0:	1a9b      	subs	r3, r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	440b      	add	r3, r1
 8005fb6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005fba:	2200      	movs	r2, #0
 8005fbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fbe:	7bfb      	ldrb	r3, [r7, #15]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	73fb      	strb	r3, [r7, #15]
 8005fc4:	7bfa      	ldrb	r2, [r7, #15]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d3b5      	bcc.n	8005f3a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	603b      	str	r3, [r7, #0]
 8005fd4:	687e      	ldr	r6, [r7, #4]
 8005fd6:	466d      	mov	r5, sp
 8005fd8:	f106 0410 	add.w	r4, r6, #16
 8005fdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fe0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fe2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fe4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005fe8:	e885 0003 	stmia.w	r5, {r0, r1}
 8005fec:	1d33      	adds	r3, r6, #4
 8005fee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ff0:	6838      	ldr	r0, [r7, #0]
 8005ff2:	f004 faa5 	bl	800a540 <USB_DevInit>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d005      	beq.n	8006008 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2202      	movs	r2, #2
 8006000:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e014      	b.n	8006032 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601c:	2b01      	cmp	r3, #1
 800601e:	d102      	bne.n	8006026 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 f80b 	bl	800603c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4618      	mov	r0, r3
 800602c:	f004 fc47 	bl	800a8be <USB_DevDisconnect>

  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3714      	adds	r7, #20
 8006036:	46bd      	mov	sp, r7
 8006038:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800603c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800606a:	4b05      	ldr	r3, [pc, #20]	; (8006080 <HAL_PCDEx_ActivateLPM+0x44>)
 800606c:	4313      	orrs	r3, r2
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3714      	adds	r7, #20
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr
 8006080:	10000003 	.word	0x10000003

08006084 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800608c:	4b19      	ldr	r3, [pc, #100]	; (80060f4 <HAL_PWREx_ConfigSupply+0x70>)
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	f003 0304 	and.w	r3, r3, #4
 8006094:	2b04      	cmp	r3, #4
 8006096:	d00a      	beq.n	80060ae <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006098:	4b16      	ldr	r3, [pc, #88]	; (80060f4 <HAL_PWREx_ConfigSupply+0x70>)
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	f003 0307 	and.w	r3, r3, #7
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d001      	beq.n	80060aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e01f      	b.n	80060ea <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80060aa:	2300      	movs	r3, #0
 80060ac:	e01d      	b.n	80060ea <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80060ae:	4b11      	ldr	r3, [pc, #68]	; (80060f4 <HAL_PWREx_ConfigSupply+0x70>)
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	f023 0207 	bic.w	r2, r3, #7
 80060b6:	490f      	ldr	r1, [pc, #60]	; (80060f4 <HAL_PWREx_ConfigSupply+0x70>)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80060be:	f7fd fd6b 	bl	8003b98 <HAL_GetTick>
 80060c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80060c4:	e009      	b.n	80060da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80060c6:	f7fd fd67 	bl	8003b98 <HAL_GetTick>
 80060ca:	4602      	mov	r2, r0
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060d4:	d901      	bls.n	80060da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e007      	b.n	80060ea <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80060da:	4b06      	ldr	r3, [pc, #24]	; (80060f4 <HAL_PWREx_ConfigSupply+0x70>)
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060e6:	d1ee      	bne.n	80060c6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	58024800 	.word	0x58024800

080060f8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80060f8:	b480      	push	{r7}
 80060fa:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80060fc:	4b05      	ldr	r3, [pc, #20]	; (8006114 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	4a04      	ldr	r2, [pc, #16]	; (8006114 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006102:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006106:	60d3      	str	r3, [r2, #12]
}
 8006108:	bf00      	nop
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	58024800 	.word	0x58024800

08006118 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b08c      	sub	sp, #48	; 0x30
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d101      	bne.n	800612a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e3ff      	b.n	800692a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 0301 	and.w	r3, r3, #1
 8006132:	2b00      	cmp	r3, #0
 8006134:	f000 8087 	beq.w	8006246 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006138:	4b99      	ldr	r3, [pc, #612]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006140:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006142:	4b97      	ldr	r3, [pc, #604]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 8006144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006146:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614a:	2b10      	cmp	r3, #16
 800614c:	d007      	beq.n	800615e <HAL_RCC_OscConfig+0x46>
 800614e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006150:	2b18      	cmp	r3, #24
 8006152:	d110      	bne.n	8006176 <HAL_RCC_OscConfig+0x5e>
 8006154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006156:	f003 0303 	and.w	r3, r3, #3
 800615a:	2b02      	cmp	r3, #2
 800615c:	d10b      	bne.n	8006176 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800615e:	4b90      	ldr	r3, [pc, #576]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d06c      	beq.n	8006244 <HAL_RCC_OscConfig+0x12c>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d168      	bne.n	8006244 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e3d9      	b.n	800692a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800617e:	d106      	bne.n	800618e <HAL_RCC_OscConfig+0x76>
 8006180:	4b87      	ldr	r3, [pc, #540]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a86      	ldr	r2, [pc, #536]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 8006186:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800618a:	6013      	str	r3, [r2, #0]
 800618c:	e02e      	b.n	80061ec <HAL_RCC_OscConfig+0xd4>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d10c      	bne.n	80061b0 <HAL_RCC_OscConfig+0x98>
 8006196:	4b82      	ldr	r3, [pc, #520]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a81      	ldr	r2, [pc, #516]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 800619c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061a0:	6013      	str	r3, [r2, #0]
 80061a2:	4b7f      	ldr	r3, [pc, #508]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a7e      	ldr	r2, [pc, #504]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 80061a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061ac:	6013      	str	r3, [r2, #0]
 80061ae:	e01d      	b.n	80061ec <HAL_RCC_OscConfig+0xd4>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061b8:	d10c      	bne.n	80061d4 <HAL_RCC_OscConfig+0xbc>
 80061ba:	4b79      	ldr	r3, [pc, #484]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a78      	ldr	r2, [pc, #480]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 80061c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061c4:	6013      	str	r3, [r2, #0]
 80061c6:	4b76      	ldr	r3, [pc, #472]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a75      	ldr	r2, [pc, #468]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 80061cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061d0:	6013      	str	r3, [r2, #0]
 80061d2:	e00b      	b.n	80061ec <HAL_RCC_OscConfig+0xd4>
 80061d4:	4b72      	ldr	r3, [pc, #456]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a71      	ldr	r2, [pc, #452]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 80061da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061de:	6013      	str	r3, [r2, #0]
 80061e0:	4b6f      	ldr	r3, [pc, #444]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a6e      	ldr	r2, [pc, #440]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 80061e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d013      	beq.n	800621c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061f4:	f7fd fcd0 	bl	8003b98 <HAL_GetTick>
 80061f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80061fa:	e008      	b.n	800620e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061fc:	f7fd fccc 	bl	8003b98 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	2b64      	cmp	r3, #100	; 0x64
 8006208:	d901      	bls.n	800620e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e38d      	b.n	800692a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800620e:	4b64      	ldr	r3, [pc, #400]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d0f0      	beq.n	80061fc <HAL_RCC_OscConfig+0xe4>
 800621a:	e014      	b.n	8006246 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800621c:	f7fd fcbc 	bl	8003b98 <HAL_GetTick>
 8006220:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006222:	e008      	b.n	8006236 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006224:	f7fd fcb8 	bl	8003b98 <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	2b64      	cmp	r3, #100	; 0x64
 8006230:	d901      	bls.n	8006236 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e379      	b.n	800692a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006236:	4b5a      	ldr	r3, [pc, #360]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1f0      	bne.n	8006224 <HAL_RCC_OscConfig+0x10c>
 8006242:	e000      	b.n	8006246 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 0302 	and.w	r3, r3, #2
 800624e:	2b00      	cmp	r3, #0
 8006250:	f000 80ae 	beq.w	80063b0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006254:	4b52      	ldr	r3, [pc, #328]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800625c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800625e:	4b50      	ldr	r3, [pc, #320]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 8006260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006262:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006264:	6a3b      	ldr	r3, [r7, #32]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d007      	beq.n	800627a <HAL_RCC_OscConfig+0x162>
 800626a:	6a3b      	ldr	r3, [r7, #32]
 800626c:	2b18      	cmp	r3, #24
 800626e:	d13a      	bne.n	80062e6 <HAL_RCC_OscConfig+0x1ce>
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	f003 0303 	and.w	r3, r3, #3
 8006276:	2b00      	cmp	r3, #0
 8006278:	d135      	bne.n	80062e6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800627a:	4b49      	ldr	r3, [pc, #292]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0304 	and.w	r3, r3, #4
 8006282:	2b00      	cmp	r3, #0
 8006284:	d005      	beq.n	8006292 <HAL_RCC_OscConfig+0x17a>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e34b      	b.n	800692a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006292:	f7fd fcb1 	bl	8003bf8 <HAL_GetREVID>
 8006296:	4603      	mov	r3, r0
 8006298:	f241 0203 	movw	r2, #4099	; 0x1003
 800629c:	4293      	cmp	r3, r2
 800629e:	d817      	bhi.n	80062d0 <HAL_RCC_OscConfig+0x1b8>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	2b40      	cmp	r3, #64	; 0x40
 80062a6:	d108      	bne.n	80062ba <HAL_RCC_OscConfig+0x1a2>
 80062a8:	4b3d      	ldr	r3, [pc, #244]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80062b0:	4a3b      	ldr	r2, [pc, #236]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 80062b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062b6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062b8:	e07a      	b.n	80063b0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062ba:	4b39      	ldr	r3, [pc, #228]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	031b      	lsls	r3, r3, #12
 80062c8:	4935      	ldr	r1, [pc, #212]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 80062ca:	4313      	orrs	r3, r2
 80062cc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062ce:	e06f      	b.n	80063b0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062d0:	4b33      	ldr	r3, [pc, #204]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	061b      	lsls	r3, r3, #24
 80062de:	4930      	ldr	r1, [pc, #192]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 80062e0:	4313      	orrs	r3, r2
 80062e2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062e4:	e064      	b.n	80063b0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d045      	beq.n	800637a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80062ee:	4b2c      	ldr	r3, [pc, #176]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f023 0219 	bic.w	r2, r3, #25
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	4929      	ldr	r1, [pc, #164]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 80062fc:	4313      	orrs	r3, r2
 80062fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006300:	f7fd fc4a 	bl	8003b98 <HAL_GetTick>
 8006304:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006306:	e008      	b.n	800631a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006308:	f7fd fc46 	bl	8003b98 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	2b02      	cmp	r3, #2
 8006314:	d901      	bls.n	800631a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e307      	b.n	800692a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800631a:	4b21      	ldr	r3, [pc, #132]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 0304 	and.w	r3, r3, #4
 8006322:	2b00      	cmp	r3, #0
 8006324:	d0f0      	beq.n	8006308 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006326:	f7fd fc67 	bl	8003bf8 <HAL_GetREVID>
 800632a:	4603      	mov	r3, r0
 800632c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006330:	4293      	cmp	r3, r2
 8006332:	d817      	bhi.n	8006364 <HAL_RCC_OscConfig+0x24c>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	2b40      	cmp	r3, #64	; 0x40
 800633a:	d108      	bne.n	800634e <HAL_RCC_OscConfig+0x236>
 800633c:	4b18      	ldr	r3, [pc, #96]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006344:	4a16      	ldr	r2, [pc, #88]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 8006346:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800634a:	6053      	str	r3, [r2, #4]
 800634c:	e030      	b.n	80063b0 <HAL_RCC_OscConfig+0x298>
 800634e:	4b14      	ldr	r3, [pc, #80]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	031b      	lsls	r3, r3, #12
 800635c:	4910      	ldr	r1, [pc, #64]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 800635e:	4313      	orrs	r3, r2
 8006360:	604b      	str	r3, [r1, #4]
 8006362:	e025      	b.n	80063b0 <HAL_RCC_OscConfig+0x298>
 8006364:	4b0e      	ldr	r3, [pc, #56]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	061b      	lsls	r3, r3, #24
 8006372:	490b      	ldr	r1, [pc, #44]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 8006374:	4313      	orrs	r3, r2
 8006376:	604b      	str	r3, [r1, #4]
 8006378:	e01a      	b.n	80063b0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800637a:	4b09      	ldr	r3, [pc, #36]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a08      	ldr	r2, [pc, #32]	; (80063a0 <HAL_RCC_OscConfig+0x288>)
 8006380:	f023 0301 	bic.w	r3, r3, #1
 8006384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006386:	f7fd fc07 	bl	8003b98 <HAL_GetTick>
 800638a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800638c:	e00a      	b.n	80063a4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800638e:	f7fd fc03 	bl	8003b98 <HAL_GetTick>
 8006392:	4602      	mov	r2, r0
 8006394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	2b02      	cmp	r3, #2
 800639a:	d903      	bls.n	80063a4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	e2c4      	b.n	800692a <HAL_RCC_OscConfig+0x812>
 80063a0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80063a4:	4ba4      	ldr	r3, [pc, #656]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0304 	and.w	r3, r3, #4
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1ee      	bne.n	800638e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0310 	and.w	r3, r3, #16
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 80a9 	beq.w	8006510 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063be:	4b9e      	ldr	r3, [pc, #632]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063c6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80063c8:	4b9b      	ldr	r3, [pc, #620]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 80063ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063cc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	2b08      	cmp	r3, #8
 80063d2:	d007      	beq.n	80063e4 <HAL_RCC_OscConfig+0x2cc>
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	2b18      	cmp	r3, #24
 80063d8:	d13a      	bne.n	8006450 <HAL_RCC_OscConfig+0x338>
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	f003 0303 	and.w	r3, r3, #3
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d135      	bne.n	8006450 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80063e4:	4b94      	ldr	r3, [pc, #592]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d005      	beq.n	80063fc <HAL_RCC_OscConfig+0x2e4>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	69db      	ldr	r3, [r3, #28]
 80063f4:	2b80      	cmp	r3, #128	; 0x80
 80063f6:	d001      	beq.n	80063fc <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e296      	b.n	800692a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80063fc:	f7fd fbfc 	bl	8003bf8 <HAL_GetREVID>
 8006400:	4603      	mov	r3, r0
 8006402:	f241 0203 	movw	r2, #4099	; 0x1003
 8006406:	4293      	cmp	r3, r2
 8006408:	d817      	bhi.n	800643a <HAL_RCC_OscConfig+0x322>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	2b20      	cmp	r3, #32
 8006410:	d108      	bne.n	8006424 <HAL_RCC_OscConfig+0x30c>
 8006412:	4b89      	ldr	r3, [pc, #548]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800641a:	4a87      	ldr	r2, [pc, #540]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 800641c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006420:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006422:	e075      	b.n	8006510 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006424:	4b84      	ldr	r3, [pc, #528]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a1b      	ldr	r3, [r3, #32]
 8006430:	069b      	lsls	r3, r3, #26
 8006432:	4981      	ldr	r1, [pc, #516]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 8006434:	4313      	orrs	r3, r2
 8006436:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006438:	e06a      	b.n	8006510 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800643a:	4b7f      	ldr	r3, [pc, #508]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	061b      	lsls	r3, r3, #24
 8006448:	497b      	ldr	r1, [pc, #492]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 800644a:	4313      	orrs	r3, r2
 800644c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800644e:	e05f      	b.n	8006510 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	69db      	ldr	r3, [r3, #28]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d042      	beq.n	80064de <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006458:	4b77      	ldr	r3, [pc, #476]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a76      	ldr	r2, [pc, #472]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 800645e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006462:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006464:	f7fd fb98 	bl	8003b98 <HAL_GetTick>
 8006468:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800646a:	e008      	b.n	800647e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800646c:	f7fd fb94 	bl	8003b98 <HAL_GetTick>
 8006470:	4602      	mov	r2, r0
 8006472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	2b02      	cmp	r3, #2
 8006478:	d901      	bls.n	800647e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e255      	b.n	800692a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800647e:	4b6e      	ldr	r3, [pc, #440]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006486:	2b00      	cmp	r3, #0
 8006488:	d0f0      	beq.n	800646c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800648a:	f7fd fbb5 	bl	8003bf8 <HAL_GetREVID>
 800648e:	4603      	mov	r3, r0
 8006490:	f241 0203 	movw	r2, #4099	; 0x1003
 8006494:	4293      	cmp	r3, r2
 8006496:	d817      	bhi.n	80064c8 <HAL_RCC_OscConfig+0x3b0>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a1b      	ldr	r3, [r3, #32]
 800649c:	2b20      	cmp	r3, #32
 800649e:	d108      	bne.n	80064b2 <HAL_RCC_OscConfig+0x39a>
 80064a0:	4b65      	ldr	r3, [pc, #404]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80064a8:	4a63      	ldr	r2, [pc, #396]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 80064aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064ae:	6053      	str	r3, [r2, #4]
 80064b0:	e02e      	b.n	8006510 <HAL_RCC_OscConfig+0x3f8>
 80064b2:	4b61      	ldr	r3, [pc, #388]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	069b      	lsls	r3, r3, #26
 80064c0:	495d      	ldr	r1, [pc, #372]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 80064c2:	4313      	orrs	r3, r2
 80064c4:	604b      	str	r3, [r1, #4]
 80064c6:	e023      	b.n	8006510 <HAL_RCC_OscConfig+0x3f8>
 80064c8:	4b5b      	ldr	r3, [pc, #364]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a1b      	ldr	r3, [r3, #32]
 80064d4:	061b      	lsls	r3, r3, #24
 80064d6:	4958      	ldr	r1, [pc, #352]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	60cb      	str	r3, [r1, #12]
 80064dc:	e018      	b.n	8006510 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80064de:	4b56      	ldr	r3, [pc, #344]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a55      	ldr	r2, [pc, #340]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 80064e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ea:	f7fd fb55 	bl	8003b98 <HAL_GetTick>
 80064ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80064f0:	e008      	b.n	8006504 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80064f2:	f7fd fb51 	bl	8003b98 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d901      	bls.n	8006504 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e212      	b.n	800692a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006504:	4b4c      	ldr	r3, [pc, #304]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1f0      	bne.n	80064f2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0308 	and.w	r3, r3, #8
 8006518:	2b00      	cmp	r3, #0
 800651a:	d036      	beq.n	800658a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	695b      	ldr	r3, [r3, #20]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d019      	beq.n	8006558 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006524:	4b44      	ldr	r3, [pc, #272]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 8006526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006528:	4a43      	ldr	r2, [pc, #268]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 800652a:	f043 0301 	orr.w	r3, r3, #1
 800652e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006530:	f7fd fb32 	bl	8003b98 <HAL_GetTick>
 8006534:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006536:	e008      	b.n	800654a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006538:	f7fd fb2e 	bl	8003b98 <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	2b02      	cmp	r3, #2
 8006544:	d901      	bls.n	800654a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e1ef      	b.n	800692a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800654a:	4b3b      	ldr	r3, [pc, #236]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 800654c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b00      	cmp	r3, #0
 8006554:	d0f0      	beq.n	8006538 <HAL_RCC_OscConfig+0x420>
 8006556:	e018      	b.n	800658a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006558:	4b37      	ldr	r3, [pc, #220]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 800655a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800655c:	4a36      	ldr	r2, [pc, #216]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 800655e:	f023 0301 	bic.w	r3, r3, #1
 8006562:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006564:	f7fd fb18 	bl	8003b98 <HAL_GetTick>
 8006568:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800656a:	e008      	b.n	800657e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800656c:	f7fd fb14 	bl	8003b98 <HAL_GetTick>
 8006570:	4602      	mov	r2, r0
 8006572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	2b02      	cmp	r3, #2
 8006578:	d901      	bls.n	800657e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e1d5      	b.n	800692a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800657e:	4b2e      	ldr	r3, [pc, #184]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 8006580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006582:	f003 0302 	and.w	r3, r3, #2
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1f0      	bne.n	800656c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0320 	and.w	r3, r3, #32
 8006592:	2b00      	cmp	r3, #0
 8006594:	d036      	beq.n	8006604 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d019      	beq.n	80065d2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800659e:	4b26      	ldr	r3, [pc, #152]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a25      	ldr	r2, [pc, #148]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 80065a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80065a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80065aa:	f7fd faf5 	bl	8003b98 <HAL_GetTick>
 80065ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80065b0:	e008      	b.n	80065c4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80065b2:	f7fd faf1 	bl	8003b98 <HAL_GetTick>
 80065b6:	4602      	mov	r2, r0
 80065b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d901      	bls.n	80065c4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e1b2      	b.n	800692a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80065c4:	4b1c      	ldr	r3, [pc, #112]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d0f0      	beq.n	80065b2 <HAL_RCC_OscConfig+0x49a>
 80065d0:	e018      	b.n	8006604 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80065d2:	4b19      	ldr	r3, [pc, #100]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a18      	ldr	r2, [pc, #96]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 80065d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065dc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80065de:	f7fd fadb 	bl	8003b98 <HAL_GetTick>
 80065e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80065e4:	e008      	b.n	80065f8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80065e6:	f7fd fad7 	bl	8003b98 <HAL_GetTick>
 80065ea:	4602      	mov	r2, r0
 80065ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d901      	bls.n	80065f8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e198      	b.n	800692a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80065f8:	4b0f      	ldr	r3, [pc, #60]	; (8006638 <HAL_RCC_OscConfig+0x520>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1f0      	bne.n	80065e6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0304 	and.w	r3, r3, #4
 800660c:	2b00      	cmp	r3, #0
 800660e:	f000 8085 	beq.w	800671c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006612:	4b0a      	ldr	r3, [pc, #40]	; (800663c <HAL_RCC_OscConfig+0x524>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a09      	ldr	r2, [pc, #36]	; (800663c <HAL_RCC_OscConfig+0x524>)
 8006618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800661c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800661e:	f7fd fabb 	bl	8003b98 <HAL_GetTick>
 8006622:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006624:	e00c      	b.n	8006640 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006626:	f7fd fab7 	bl	8003b98 <HAL_GetTick>
 800662a:	4602      	mov	r2, r0
 800662c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	2b64      	cmp	r3, #100	; 0x64
 8006632:	d905      	bls.n	8006640 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e178      	b.n	800692a <HAL_RCC_OscConfig+0x812>
 8006638:	58024400 	.word	0x58024400
 800663c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006640:	4b96      	ldr	r3, [pc, #600]	; (800689c <HAL_RCC_OscConfig+0x784>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006648:	2b00      	cmp	r3, #0
 800664a:	d0ec      	beq.n	8006626 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	2b01      	cmp	r3, #1
 8006652:	d106      	bne.n	8006662 <HAL_RCC_OscConfig+0x54a>
 8006654:	4b92      	ldr	r3, [pc, #584]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 8006656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006658:	4a91      	ldr	r2, [pc, #580]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 800665a:	f043 0301 	orr.w	r3, r3, #1
 800665e:	6713      	str	r3, [r2, #112]	; 0x70
 8006660:	e02d      	b.n	80066be <HAL_RCC_OscConfig+0x5a6>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10c      	bne.n	8006684 <HAL_RCC_OscConfig+0x56c>
 800666a:	4b8d      	ldr	r3, [pc, #564]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 800666c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800666e:	4a8c      	ldr	r2, [pc, #560]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 8006670:	f023 0301 	bic.w	r3, r3, #1
 8006674:	6713      	str	r3, [r2, #112]	; 0x70
 8006676:	4b8a      	ldr	r3, [pc, #552]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 8006678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800667a:	4a89      	ldr	r2, [pc, #548]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 800667c:	f023 0304 	bic.w	r3, r3, #4
 8006680:	6713      	str	r3, [r2, #112]	; 0x70
 8006682:	e01c      	b.n	80066be <HAL_RCC_OscConfig+0x5a6>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	2b05      	cmp	r3, #5
 800668a:	d10c      	bne.n	80066a6 <HAL_RCC_OscConfig+0x58e>
 800668c:	4b84      	ldr	r3, [pc, #528]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 800668e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006690:	4a83      	ldr	r2, [pc, #524]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 8006692:	f043 0304 	orr.w	r3, r3, #4
 8006696:	6713      	str	r3, [r2, #112]	; 0x70
 8006698:	4b81      	ldr	r3, [pc, #516]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 800669a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800669c:	4a80      	ldr	r2, [pc, #512]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 800669e:	f043 0301 	orr.w	r3, r3, #1
 80066a2:	6713      	str	r3, [r2, #112]	; 0x70
 80066a4:	e00b      	b.n	80066be <HAL_RCC_OscConfig+0x5a6>
 80066a6:	4b7e      	ldr	r3, [pc, #504]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 80066a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066aa:	4a7d      	ldr	r2, [pc, #500]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 80066ac:	f023 0301 	bic.w	r3, r3, #1
 80066b0:	6713      	str	r3, [r2, #112]	; 0x70
 80066b2:	4b7b      	ldr	r3, [pc, #492]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 80066b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b6:	4a7a      	ldr	r2, [pc, #488]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 80066b8:	f023 0304 	bic.w	r3, r3, #4
 80066bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d015      	beq.n	80066f2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066c6:	f7fd fa67 	bl	8003b98 <HAL_GetTick>
 80066ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066cc:	e00a      	b.n	80066e4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066ce:	f7fd fa63 	bl	8003b98 <HAL_GetTick>
 80066d2:	4602      	mov	r2, r0
 80066d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80066dc:	4293      	cmp	r3, r2
 80066de:	d901      	bls.n	80066e4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e122      	b.n	800692a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066e4:	4b6e      	ldr	r3, [pc, #440]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 80066e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066e8:	f003 0302 	and.w	r3, r3, #2
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d0ee      	beq.n	80066ce <HAL_RCC_OscConfig+0x5b6>
 80066f0:	e014      	b.n	800671c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066f2:	f7fd fa51 	bl	8003b98 <HAL_GetTick>
 80066f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80066f8:	e00a      	b.n	8006710 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066fa:	f7fd fa4d 	bl	8003b98 <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	f241 3288 	movw	r2, #5000	; 0x1388
 8006708:	4293      	cmp	r3, r2
 800670a:	d901      	bls.n	8006710 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e10c      	b.n	800692a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006710:	4b63      	ldr	r3, [pc, #396]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 8006712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006714:	f003 0302 	and.w	r3, r3, #2
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1ee      	bne.n	80066fa <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 8101 	beq.w	8006928 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006726:	4b5e      	ldr	r3, [pc, #376]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800672e:	2b18      	cmp	r3, #24
 8006730:	f000 80bc 	beq.w	80068ac <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006738:	2b02      	cmp	r3, #2
 800673a:	f040 8095 	bne.w	8006868 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800673e:	4b58      	ldr	r3, [pc, #352]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a57      	ldr	r2, [pc, #348]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 8006744:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800674a:	f7fd fa25 	bl	8003b98 <HAL_GetTick>
 800674e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006750:	e008      	b.n	8006764 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006752:	f7fd fa21 	bl	8003b98 <HAL_GetTick>
 8006756:	4602      	mov	r2, r0
 8006758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	2b02      	cmp	r3, #2
 800675e:	d901      	bls.n	8006764 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e0e2      	b.n	800692a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006764:	4b4e      	ldr	r3, [pc, #312]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d1f0      	bne.n	8006752 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006770:	4b4b      	ldr	r3, [pc, #300]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 8006772:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006774:	4b4b      	ldr	r3, [pc, #300]	; (80068a4 <HAL_RCC_OscConfig+0x78c>)
 8006776:	4013      	ands	r3, r2
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006780:	0112      	lsls	r2, r2, #4
 8006782:	430a      	orrs	r2, r1
 8006784:	4946      	ldr	r1, [pc, #280]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 8006786:	4313      	orrs	r3, r2
 8006788:	628b      	str	r3, [r1, #40]	; 0x28
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800678e:	3b01      	subs	r3, #1
 8006790:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006798:	3b01      	subs	r3, #1
 800679a:	025b      	lsls	r3, r3, #9
 800679c:	b29b      	uxth	r3, r3
 800679e:	431a      	orrs	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a4:	3b01      	subs	r3, #1
 80067a6:	041b      	lsls	r3, r3, #16
 80067a8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80067ac:	431a      	orrs	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b2:	3b01      	subs	r3, #1
 80067b4:	061b      	lsls	r3, r3, #24
 80067b6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80067ba:	4939      	ldr	r1, [pc, #228]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 80067bc:	4313      	orrs	r3, r2
 80067be:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80067c0:	4b37      	ldr	r3, [pc, #220]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 80067c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c4:	4a36      	ldr	r2, [pc, #216]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 80067c6:	f023 0301 	bic.w	r3, r3, #1
 80067ca:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80067cc:	4b34      	ldr	r3, [pc, #208]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 80067ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067d0:	4b35      	ldr	r3, [pc, #212]	; (80068a8 <HAL_RCC_OscConfig+0x790>)
 80067d2:	4013      	ands	r3, r2
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80067d8:	00d2      	lsls	r2, r2, #3
 80067da:	4931      	ldr	r1, [pc, #196]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80067e0:	4b2f      	ldr	r3, [pc, #188]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 80067e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e4:	f023 020c 	bic.w	r2, r3, #12
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ec:	492c      	ldr	r1, [pc, #176]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80067f2:	4b2b      	ldr	r3, [pc, #172]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 80067f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f6:	f023 0202 	bic.w	r2, r3, #2
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067fe:	4928      	ldr	r1, [pc, #160]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 8006800:	4313      	orrs	r3, r2
 8006802:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006804:	4b26      	ldr	r3, [pc, #152]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 8006806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006808:	4a25      	ldr	r2, [pc, #148]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 800680a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800680e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006810:	4b23      	ldr	r3, [pc, #140]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 8006812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006814:	4a22      	ldr	r2, [pc, #136]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 8006816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800681a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800681c:	4b20      	ldr	r3, [pc, #128]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 800681e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006820:	4a1f      	ldr	r2, [pc, #124]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 8006822:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006826:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006828:	4b1d      	ldr	r3, [pc, #116]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 800682a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682c:	4a1c      	ldr	r2, [pc, #112]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 800682e:	f043 0301 	orr.w	r3, r3, #1
 8006832:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006834:	4b1a      	ldr	r3, [pc, #104]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a19      	ldr	r2, [pc, #100]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 800683a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800683e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006840:	f7fd f9aa 	bl	8003b98 <HAL_GetTick>
 8006844:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006846:	e008      	b.n	800685a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006848:	f7fd f9a6 	bl	8003b98 <HAL_GetTick>
 800684c:	4602      	mov	r2, r0
 800684e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	2b02      	cmp	r3, #2
 8006854:	d901      	bls.n	800685a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e067      	b.n	800692a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800685a:	4b11      	ldr	r3, [pc, #68]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006862:	2b00      	cmp	r3, #0
 8006864:	d0f0      	beq.n	8006848 <HAL_RCC_OscConfig+0x730>
 8006866:	e05f      	b.n	8006928 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006868:	4b0d      	ldr	r3, [pc, #52]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a0c      	ldr	r2, [pc, #48]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 800686e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006872:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006874:	f7fd f990 	bl	8003b98 <HAL_GetTick>
 8006878:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800687a:	e008      	b.n	800688e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800687c:	f7fd f98c 	bl	8003b98 <HAL_GetTick>
 8006880:	4602      	mov	r2, r0
 8006882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	2b02      	cmp	r3, #2
 8006888:	d901      	bls.n	800688e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	e04d      	b.n	800692a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800688e:	4b04      	ldr	r3, [pc, #16]	; (80068a0 <HAL_RCC_OscConfig+0x788>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1f0      	bne.n	800687c <HAL_RCC_OscConfig+0x764>
 800689a:	e045      	b.n	8006928 <HAL_RCC_OscConfig+0x810>
 800689c:	58024800 	.word	0x58024800
 80068a0:	58024400 	.word	0x58024400
 80068a4:	fffffc0c 	.word	0xfffffc0c
 80068a8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80068ac:	4b21      	ldr	r3, [pc, #132]	; (8006934 <HAL_RCC_OscConfig+0x81c>)
 80068ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80068b2:	4b20      	ldr	r3, [pc, #128]	; (8006934 <HAL_RCC_OscConfig+0x81c>)
 80068b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d031      	beq.n	8006924 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	f003 0203 	and.w	r2, r3, #3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d12a      	bne.n	8006924 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	091b      	lsrs	r3, r3, #4
 80068d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068da:	429a      	cmp	r2, r3
 80068dc:	d122      	bne.n	8006924 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d11a      	bne.n	8006924 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	0a5b      	lsrs	r3, r3, #9
 80068f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068fa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d111      	bne.n	8006924 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	0c1b      	lsrs	r3, r3, #16
 8006904:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800690e:	429a      	cmp	r2, r3
 8006910:	d108      	bne.n	8006924 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	0e1b      	lsrs	r3, r3, #24
 8006916:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800691e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006920:	429a      	cmp	r2, r3
 8006922:	d001      	beq.n	8006928 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e000      	b.n	800692a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3730      	adds	r7, #48	; 0x30
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	58024400 	.word	0x58024400

08006938 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b086      	sub	sp, #24
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d101      	bne.n	800694c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e19c      	b.n	8006c86 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800694c:	4b8a      	ldr	r3, [pc, #552]	; (8006b78 <HAL_RCC_ClockConfig+0x240>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 030f 	and.w	r3, r3, #15
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	429a      	cmp	r2, r3
 8006958:	d910      	bls.n	800697c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800695a:	4b87      	ldr	r3, [pc, #540]	; (8006b78 <HAL_RCC_ClockConfig+0x240>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f023 020f 	bic.w	r2, r3, #15
 8006962:	4985      	ldr	r1, [pc, #532]	; (8006b78 <HAL_RCC_ClockConfig+0x240>)
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	4313      	orrs	r3, r2
 8006968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800696a:	4b83      	ldr	r3, [pc, #524]	; (8006b78 <HAL_RCC_ClockConfig+0x240>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 030f 	and.w	r3, r3, #15
 8006972:	683a      	ldr	r2, [r7, #0]
 8006974:	429a      	cmp	r2, r3
 8006976:	d001      	beq.n	800697c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e184      	b.n	8006c86 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0304 	and.w	r3, r3, #4
 8006984:	2b00      	cmp	r3, #0
 8006986:	d010      	beq.n	80069aa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	691a      	ldr	r2, [r3, #16]
 800698c:	4b7b      	ldr	r3, [pc, #492]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006994:	429a      	cmp	r2, r3
 8006996:	d908      	bls.n	80069aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006998:	4b78      	ldr	r3, [pc, #480]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	4975      	ldr	r1, [pc, #468]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 80069a6:	4313      	orrs	r3, r2
 80069a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0308 	and.w	r3, r3, #8
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d010      	beq.n	80069d8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	695a      	ldr	r2, [r3, #20]
 80069ba:	4b70      	ldr	r3, [pc, #448]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 80069bc:	69db      	ldr	r3, [r3, #28]
 80069be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d908      	bls.n	80069d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80069c6:	4b6d      	ldr	r3, [pc, #436]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 80069c8:	69db      	ldr	r3, [r3, #28]
 80069ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	695b      	ldr	r3, [r3, #20]
 80069d2:	496a      	ldr	r1, [pc, #424]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0310 	and.w	r3, r3, #16
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d010      	beq.n	8006a06 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	699a      	ldr	r2, [r3, #24]
 80069e8:	4b64      	ldr	r3, [pc, #400]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 80069ea:	69db      	ldr	r3, [r3, #28]
 80069ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d908      	bls.n	8006a06 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80069f4:	4b61      	ldr	r3, [pc, #388]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 80069f6:	69db      	ldr	r3, [r3, #28]
 80069f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	495e      	ldr	r1, [pc, #376]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 8006a02:	4313      	orrs	r3, r2
 8006a04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0320 	and.w	r3, r3, #32
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d010      	beq.n	8006a34 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	69da      	ldr	r2, [r3, #28]
 8006a16:	4b59      	ldr	r3, [pc, #356]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d908      	bls.n	8006a34 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006a22:	4b56      	ldr	r3, [pc, #344]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	69db      	ldr	r3, [r3, #28]
 8006a2e:	4953      	ldr	r1, [pc, #332]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 8006a30:	4313      	orrs	r3, r2
 8006a32:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 0302 	and.w	r3, r3, #2
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d010      	beq.n	8006a62 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	68da      	ldr	r2, [r3, #12]
 8006a44:	4b4d      	ldr	r3, [pc, #308]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 8006a46:	699b      	ldr	r3, [r3, #24]
 8006a48:	f003 030f 	and.w	r3, r3, #15
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d908      	bls.n	8006a62 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a50:	4b4a      	ldr	r3, [pc, #296]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	f023 020f 	bic.w	r2, r3, #15
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	4947      	ldr	r1, [pc, #284]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0301 	and.w	r3, r3, #1
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d055      	beq.n	8006b1a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006a6e:	4b43      	ldr	r3, [pc, #268]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	4940      	ldr	r1, [pc, #256]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	d107      	bne.n	8006a98 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a88:	4b3c      	ldr	r3, [pc, #240]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d121      	bne.n	8006ad8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	e0f6      	b.n	8006c86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	2b03      	cmp	r3, #3
 8006a9e:	d107      	bne.n	8006ab0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006aa0:	4b36      	ldr	r3, [pc, #216]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d115      	bne.n	8006ad8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e0ea      	b.n	8006c86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d107      	bne.n	8006ac8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ab8:	4b30      	ldr	r3, [pc, #192]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d109      	bne.n	8006ad8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e0de      	b.n	8006c86 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ac8:	4b2c      	ldr	r3, [pc, #176]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 0304 	and.w	r3, r3, #4
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d101      	bne.n	8006ad8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e0d6      	b.n	8006c86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ad8:	4b28      	ldr	r3, [pc, #160]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	f023 0207 	bic.w	r2, r3, #7
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	4925      	ldr	r1, [pc, #148]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aea:	f7fd f855 	bl	8003b98 <HAL_GetTick>
 8006aee:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006af0:	e00a      	b.n	8006b08 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006af2:	f7fd f851 	bl	8003b98 <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d901      	bls.n	8006b08 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e0be      	b.n	8006c86 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b08:	4b1c      	ldr	r3, [pc, #112]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	00db      	lsls	r3, r3, #3
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d1eb      	bne.n	8006af2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0302 	and.w	r3, r3, #2
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d010      	beq.n	8006b48 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68da      	ldr	r2, [r3, #12]
 8006b2a:	4b14      	ldr	r3, [pc, #80]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	f003 030f 	and.w	r3, r3, #15
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d208      	bcs.n	8006b48 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b36:	4b11      	ldr	r3, [pc, #68]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	f023 020f 	bic.w	r2, r3, #15
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	490e      	ldr	r1, [pc, #56]	; (8006b7c <HAL_RCC_ClockConfig+0x244>)
 8006b44:	4313      	orrs	r3, r2
 8006b46:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b48:	4b0b      	ldr	r3, [pc, #44]	; (8006b78 <HAL_RCC_ClockConfig+0x240>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 030f 	and.w	r3, r3, #15
 8006b50:	683a      	ldr	r2, [r7, #0]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d214      	bcs.n	8006b80 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b56:	4b08      	ldr	r3, [pc, #32]	; (8006b78 <HAL_RCC_ClockConfig+0x240>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f023 020f 	bic.w	r2, r3, #15
 8006b5e:	4906      	ldr	r1, [pc, #24]	; (8006b78 <HAL_RCC_ClockConfig+0x240>)
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b66:	4b04      	ldr	r3, [pc, #16]	; (8006b78 <HAL_RCC_ClockConfig+0x240>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 030f 	and.w	r3, r3, #15
 8006b6e:	683a      	ldr	r2, [r7, #0]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d005      	beq.n	8006b80 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e086      	b.n	8006c86 <HAL_RCC_ClockConfig+0x34e>
 8006b78:	52002000 	.word	0x52002000
 8006b7c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0304 	and.w	r3, r3, #4
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d010      	beq.n	8006bae <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	691a      	ldr	r2, [r3, #16]
 8006b90:	4b3f      	ldr	r3, [pc, #252]	; (8006c90 <HAL_RCC_ClockConfig+0x358>)
 8006b92:	699b      	ldr	r3, [r3, #24]
 8006b94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d208      	bcs.n	8006bae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006b9c:	4b3c      	ldr	r3, [pc, #240]	; (8006c90 <HAL_RCC_ClockConfig+0x358>)
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	4939      	ldr	r1, [pc, #228]	; (8006c90 <HAL_RCC_ClockConfig+0x358>)
 8006baa:	4313      	orrs	r3, r2
 8006bac:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0308 	and.w	r3, r3, #8
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d010      	beq.n	8006bdc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	695a      	ldr	r2, [r3, #20]
 8006bbe:	4b34      	ldr	r3, [pc, #208]	; (8006c90 <HAL_RCC_ClockConfig+0x358>)
 8006bc0:	69db      	ldr	r3, [r3, #28]
 8006bc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d208      	bcs.n	8006bdc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006bca:	4b31      	ldr	r3, [pc, #196]	; (8006c90 <HAL_RCC_ClockConfig+0x358>)
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	492e      	ldr	r1, [pc, #184]	; (8006c90 <HAL_RCC_ClockConfig+0x358>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0310 	and.w	r3, r3, #16
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d010      	beq.n	8006c0a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	699a      	ldr	r2, [r3, #24]
 8006bec:	4b28      	ldr	r3, [pc, #160]	; (8006c90 <HAL_RCC_ClockConfig+0x358>)
 8006bee:	69db      	ldr	r3, [r3, #28]
 8006bf0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d208      	bcs.n	8006c0a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006bf8:	4b25      	ldr	r3, [pc, #148]	; (8006c90 <HAL_RCC_ClockConfig+0x358>)
 8006bfa:	69db      	ldr	r3, [r3, #28]
 8006bfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	699b      	ldr	r3, [r3, #24]
 8006c04:	4922      	ldr	r1, [pc, #136]	; (8006c90 <HAL_RCC_ClockConfig+0x358>)
 8006c06:	4313      	orrs	r3, r2
 8006c08:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0320 	and.w	r3, r3, #32
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d010      	beq.n	8006c38 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	69da      	ldr	r2, [r3, #28]
 8006c1a:	4b1d      	ldr	r3, [pc, #116]	; (8006c90 <HAL_RCC_ClockConfig+0x358>)
 8006c1c:	6a1b      	ldr	r3, [r3, #32]
 8006c1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d208      	bcs.n	8006c38 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006c26:	4b1a      	ldr	r3, [pc, #104]	; (8006c90 <HAL_RCC_ClockConfig+0x358>)
 8006c28:	6a1b      	ldr	r3, [r3, #32]
 8006c2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	69db      	ldr	r3, [r3, #28]
 8006c32:	4917      	ldr	r1, [pc, #92]	; (8006c90 <HAL_RCC_ClockConfig+0x358>)
 8006c34:	4313      	orrs	r3, r2
 8006c36:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006c38:	f000 f834 	bl	8006ca4 <HAL_RCC_GetSysClockFreq>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	4b14      	ldr	r3, [pc, #80]	; (8006c90 <HAL_RCC_ClockConfig+0x358>)
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	0a1b      	lsrs	r3, r3, #8
 8006c44:	f003 030f 	and.w	r3, r3, #15
 8006c48:	4912      	ldr	r1, [pc, #72]	; (8006c94 <HAL_RCC_ClockConfig+0x35c>)
 8006c4a:	5ccb      	ldrb	r3, [r1, r3]
 8006c4c:	f003 031f 	and.w	r3, r3, #31
 8006c50:	fa22 f303 	lsr.w	r3, r2, r3
 8006c54:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c56:	4b0e      	ldr	r3, [pc, #56]	; (8006c90 <HAL_RCC_ClockConfig+0x358>)
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	f003 030f 	and.w	r3, r3, #15
 8006c5e:	4a0d      	ldr	r2, [pc, #52]	; (8006c94 <HAL_RCC_ClockConfig+0x35c>)
 8006c60:	5cd3      	ldrb	r3, [r2, r3]
 8006c62:	f003 031f 	and.w	r3, r3, #31
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	fa22 f303 	lsr.w	r3, r2, r3
 8006c6c:	4a0a      	ldr	r2, [pc, #40]	; (8006c98 <HAL_RCC_ClockConfig+0x360>)
 8006c6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c70:	4a0a      	ldr	r2, [pc, #40]	; (8006c9c <HAL_RCC_ClockConfig+0x364>)
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006c76:	4b0a      	ldr	r3, [pc, #40]	; (8006ca0 <HAL_RCC_ClockConfig+0x368>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7fc ff42 	bl	8003b04 <HAL_InitTick>
 8006c80:	4603      	mov	r3, r0
 8006c82:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3718      	adds	r7, #24
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	58024400 	.word	0x58024400
 8006c94:	0800e448 	.word	0x0800e448
 8006c98:	24000004 	.word	0x24000004
 8006c9c:	24000000 	.word	0x24000000
 8006ca0:	24000008 	.word	0x24000008

08006ca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b089      	sub	sp, #36	; 0x24
 8006ca8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006caa:	4bb3      	ldr	r3, [pc, #716]	; (8006f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cb2:	2b18      	cmp	r3, #24
 8006cb4:	f200 8155 	bhi.w	8006f62 <HAL_RCC_GetSysClockFreq+0x2be>
 8006cb8:	a201      	add	r2, pc, #4	; (adr r2, 8006cc0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cbe:	bf00      	nop
 8006cc0:	08006d25 	.word	0x08006d25
 8006cc4:	08006f63 	.word	0x08006f63
 8006cc8:	08006f63 	.word	0x08006f63
 8006ccc:	08006f63 	.word	0x08006f63
 8006cd0:	08006f63 	.word	0x08006f63
 8006cd4:	08006f63 	.word	0x08006f63
 8006cd8:	08006f63 	.word	0x08006f63
 8006cdc:	08006f63 	.word	0x08006f63
 8006ce0:	08006d4b 	.word	0x08006d4b
 8006ce4:	08006f63 	.word	0x08006f63
 8006ce8:	08006f63 	.word	0x08006f63
 8006cec:	08006f63 	.word	0x08006f63
 8006cf0:	08006f63 	.word	0x08006f63
 8006cf4:	08006f63 	.word	0x08006f63
 8006cf8:	08006f63 	.word	0x08006f63
 8006cfc:	08006f63 	.word	0x08006f63
 8006d00:	08006d51 	.word	0x08006d51
 8006d04:	08006f63 	.word	0x08006f63
 8006d08:	08006f63 	.word	0x08006f63
 8006d0c:	08006f63 	.word	0x08006f63
 8006d10:	08006f63 	.word	0x08006f63
 8006d14:	08006f63 	.word	0x08006f63
 8006d18:	08006f63 	.word	0x08006f63
 8006d1c:	08006f63 	.word	0x08006f63
 8006d20:	08006d57 	.word	0x08006d57
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d24:	4b94      	ldr	r3, [pc, #592]	; (8006f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0320 	and.w	r3, r3, #32
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d009      	beq.n	8006d44 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d30:	4b91      	ldr	r3, [pc, #580]	; (8006f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	08db      	lsrs	r3, r3, #3
 8006d36:	f003 0303 	and.w	r3, r3, #3
 8006d3a:	4a90      	ldr	r2, [pc, #576]	; (8006f7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d40:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006d42:	e111      	b.n	8006f68 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006d44:	4b8d      	ldr	r3, [pc, #564]	; (8006f7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d46:	61bb      	str	r3, [r7, #24]
    break;
 8006d48:	e10e      	b.n	8006f68 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006d4a:	4b8d      	ldr	r3, [pc, #564]	; (8006f80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006d4c:	61bb      	str	r3, [r7, #24]
    break;
 8006d4e:	e10b      	b.n	8006f68 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006d50:	4b8c      	ldr	r3, [pc, #560]	; (8006f84 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006d52:	61bb      	str	r3, [r7, #24]
    break;
 8006d54:	e108      	b.n	8006f68 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d56:	4b88      	ldr	r3, [pc, #544]	; (8006f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d5a:	f003 0303 	and.w	r3, r3, #3
 8006d5e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006d60:	4b85      	ldr	r3, [pc, #532]	; (8006f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d64:	091b      	lsrs	r3, r3, #4
 8006d66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d6a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006d6c:	4b82      	ldr	r3, [pc, #520]	; (8006f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d70:	f003 0301 	and.w	r3, r3, #1
 8006d74:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006d76:	4b80      	ldr	r3, [pc, #512]	; (8006f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d7a:	08db      	lsrs	r3, r3, #3
 8006d7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	fb02 f303 	mul.w	r3, r2, r3
 8006d86:	ee07 3a90 	vmov	s15, r3
 8006d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d8e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f000 80e1 	beq.w	8006f5c <HAL_RCC_GetSysClockFreq+0x2b8>
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	f000 8083 	beq.w	8006ea8 <HAL_RCC_GetSysClockFreq+0x204>
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	f200 80a1 	bhi.w	8006eec <HAL_RCC_GetSysClockFreq+0x248>
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d003      	beq.n	8006db8 <HAL_RCC_GetSysClockFreq+0x114>
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d056      	beq.n	8006e64 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006db6:	e099      	b.n	8006eec <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006db8:	4b6f      	ldr	r3, [pc, #444]	; (8006f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0320 	and.w	r3, r3, #32
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d02d      	beq.n	8006e20 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006dc4:	4b6c      	ldr	r3, [pc, #432]	; (8006f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	08db      	lsrs	r3, r3, #3
 8006dca:	f003 0303 	and.w	r3, r3, #3
 8006dce:	4a6b      	ldr	r2, [pc, #428]	; (8006f7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8006dd4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	ee07 3a90 	vmov	s15, r3
 8006ddc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	ee07 3a90 	vmov	s15, r3
 8006de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dee:	4b62      	ldr	r3, [pc, #392]	; (8006f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006df6:	ee07 3a90 	vmov	s15, r3
 8006dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e02:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006f88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006e1e:	e087      	b.n	8006f30 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	ee07 3a90 	vmov	s15, r3
 8006e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e2a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006f8c <HAL_RCC_GetSysClockFreq+0x2e8>
 8006e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e32:	4b51      	ldr	r3, [pc, #324]	; (8006f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e3a:	ee07 3a90 	vmov	s15, r3
 8006e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e42:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e46:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006f88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e62:	e065      	b.n	8006f30 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	ee07 3a90 	vmov	s15, r3
 8006e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e6e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006f90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e76:	4b40      	ldr	r3, [pc, #256]	; (8006f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e7e:	ee07 3a90 	vmov	s15, r3
 8006e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e86:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e8a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006f88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ea2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ea6:	e043      	b.n	8006f30 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	ee07 3a90 	vmov	s15, r3
 8006eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eb2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006f94 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eba:	4b2f      	ldr	r3, [pc, #188]	; (8006f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ec2:	ee07 3a90 	vmov	s15, r3
 8006ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eca:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ece:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006f88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ee6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006eea:	e021      	b.n	8006f30 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	ee07 3a90 	vmov	s15, r3
 8006ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ef6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006f90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006efe:	4b1e      	ldr	r3, [pc, #120]	; (8006f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f06:	ee07 3a90 	vmov	s15, r3
 8006f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f12:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006f88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f2e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006f30:	4b11      	ldr	r3, [pc, #68]	; (8006f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f34:	0a5b      	lsrs	r3, r3, #9
 8006f36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	ee07 3a90 	vmov	s15, r3
 8006f44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006f48:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f54:	ee17 3a90 	vmov	r3, s15
 8006f58:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006f5a:	e005      	b.n	8006f68 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	61bb      	str	r3, [r7, #24]
    break;
 8006f60:	e002      	b.n	8006f68 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006f62:	4b07      	ldr	r3, [pc, #28]	; (8006f80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006f64:	61bb      	str	r3, [r7, #24]
    break;
 8006f66:	bf00      	nop
  }

  return sysclockfreq;
 8006f68:	69bb      	ldr	r3, [r7, #24]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3724      	adds	r7, #36	; 0x24
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	58024400 	.word	0x58024400
 8006f7c:	03d09000 	.word	0x03d09000
 8006f80:	003d0900 	.word	0x003d0900
 8006f84:	007a1200 	.word	0x007a1200
 8006f88:	46000000 	.word	0x46000000
 8006f8c:	4c742400 	.word	0x4c742400
 8006f90:	4a742400 	.word	0x4a742400
 8006f94:	4af42400 	.word	0x4af42400

08006f98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006f9e:	f7ff fe81 	bl	8006ca4 <HAL_RCC_GetSysClockFreq>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	4b10      	ldr	r3, [pc, #64]	; (8006fe8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006fa6:	699b      	ldr	r3, [r3, #24]
 8006fa8:	0a1b      	lsrs	r3, r3, #8
 8006faa:	f003 030f 	and.w	r3, r3, #15
 8006fae:	490f      	ldr	r1, [pc, #60]	; (8006fec <HAL_RCC_GetHCLKFreq+0x54>)
 8006fb0:	5ccb      	ldrb	r3, [r1, r3]
 8006fb2:	f003 031f 	and.w	r3, r3, #31
 8006fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8006fba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006fbc:	4b0a      	ldr	r3, [pc, #40]	; (8006fe8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006fbe:	699b      	ldr	r3, [r3, #24]
 8006fc0:	f003 030f 	and.w	r3, r3, #15
 8006fc4:	4a09      	ldr	r2, [pc, #36]	; (8006fec <HAL_RCC_GetHCLKFreq+0x54>)
 8006fc6:	5cd3      	ldrb	r3, [r2, r3]
 8006fc8:	f003 031f 	and.w	r3, r3, #31
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	fa22 f303 	lsr.w	r3, r2, r3
 8006fd2:	4a07      	ldr	r2, [pc, #28]	; (8006ff0 <HAL_RCC_GetHCLKFreq+0x58>)
 8006fd4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006fd6:	4a07      	ldr	r2, [pc, #28]	; (8006ff4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006fdc:	4b04      	ldr	r3, [pc, #16]	; (8006ff0 <HAL_RCC_GetHCLKFreq+0x58>)
 8006fde:	681b      	ldr	r3, [r3, #0]
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	58024400 	.word	0x58024400
 8006fec:	0800e448 	.word	0x0800e448
 8006ff0:	24000004 	.word	0x24000004
 8006ff4:	24000000 	.word	0x24000000

08006ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006ffc:	f7ff ffcc 	bl	8006f98 <HAL_RCC_GetHCLKFreq>
 8007000:	4602      	mov	r2, r0
 8007002:	4b06      	ldr	r3, [pc, #24]	; (800701c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007004:	69db      	ldr	r3, [r3, #28]
 8007006:	091b      	lsrs	r3, r3, #4
 8007008:	f003 0307 	and.w	r3, r3, #7
 800700c:	4904      	ldr	r1, [pc, #16]	; (8007020 <HAL_RCC_GetPCLK1Freq+0x28>)
 800700e:	5ccb      	ldrb	r3, [r1, r3]
 8007010:	f003 031f 	and.w	r3, r3, #31
 8007014:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007018:	4618      	mov	r0, r3
 800701a:	bd80      	pop	{r7, pc}
 800701c:	58024400 	.word	0x58024400
 8007020:	0800e448 	.word	0x0800e448

08007024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007028:	f7ff ffb6 	bl	8006f98 <HAL_RCC_GetHCLKFreq>
 800702c:	4602      	mov	r2, r0
 800702e:	4b06      	ldr	r3, [pc, #24]	; (8007048 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007030:	69db      	ldr	r3, [r3, #28]
 8007032:	0a1b      	lsrs	r3, r3, #8
 8007034:	f003 0307 	and.w	r3, r3, #7
 8007038:	4904      	ldr	r1, [pc, #16]	; (800704c <HAL_RCC_GetPCLK2Freq+0x28>)
 800703a:	5ccb      	ldrb	r3, [r1, r3]
 800703c:	f003 031f 	and.w	r3, r3, #31
 8007040:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007044:	4618      	mov	r0, r3
 8007046:	bd80      	pop	{r7, pc}
 8007048:	58024400 	.word	0x58024400
 800704c:	0800e448 	.word	0x0800e448

08007050 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b086      	sub	sp, #24
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007058:	2300      	movs	r3, #0
 800705a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800705c:	2300      	movs	r3, #0
 800705e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d03f      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007070:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007074:	d02a      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007076:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800707a:	d824      	bhi.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800707c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007080:	d018      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007082:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007086:	d81e      	bhi.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007088:	2b00      	cmp	r3, #0
 800708a:	d003      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800708c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007090:	d007      	beq.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007092:	e018      	b.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007094:	4bab      	ldr	r3, [pc, #684]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007098:	4aaa      	ldr	r2, [pc, #680]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800709a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800709e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80070a0:	e015      	b.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	3304      	adds	r3, #4
 80070a6:	2102      	movs	r1, #2
 80070a8:	4618      	mov	r0, r3
 80070aa:	f001 f9cf 	bl	800844c <RCCEx_PLL2_Config>
 80070ae:	4603      	mov	r3, r0
 80070b0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80070b2:	e00c      	b.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	3324      	adds	r3, #36	; 0x24
 80070b8:	2102      	movs	r1, #2
 80070ba:	4618      	mov	r0, r3
 80070bc:	f001 fa78 	bl	80085b0 <RCCEx_PLL3_Config>
 80070c0:	4603      	mov	r3, r0
 80070c2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80070c4:	e003      	b.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	75fb      	strb	r3, [r7, #23]
      break;
 80070ca:	e000      	b.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80070cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070ce:	7dfb      	ldrb	r3, [r7, #23]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d109      	bne.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80070d4:	4b9b      	ldr	r3, [pc, #620]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070e0:	4998      	ldr	r1, [pc, #608]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070e2:	4313      	orrs	r3, r2
 80070e4:	650b      	str	r3, [r1, #80]	; 0x50
 80070e6:	e001      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e8:	7dfb      	ldrb	r3, [r7, #23]
 80070ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d03d      	beq.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070fc:	2b04      	cmp	r3, #4
 80070fe:	d826      	bhi.n	800714e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007100:	a201      	add	r2, pc, #4	; (adr r2, 8007108 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007106:	bf00      	nop
 8007108:	0800711d 	.word	0x0800711d
 800710c:	0800712b 	.word	0x0800712b
 8007110:	0800713d 	.word	0x0800713d
 8007114:	08007155 	.word	0x08007155
 8007118:	08007155 	.word	0x08007155
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800711c:	4b89      	ldr	r3, [pc, #548]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800711e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007120:	4a88      	ldr	r2, [pc, #544]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007122:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007126:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007128:	e015      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	3304      	adds	r3, #4
 800712e:	2100      	movs	r1, #0
 8007130:	4618      	mov	r0, r3
 8007132:	f001 f98b 	bl	800844c <RCCEx_PLL2_Config>
 8007136:	4603      	mov	r3, r0
 8007138:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800713a:	e00c      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	3324      	adds	r3, #36	; 0x24
 8007140:	2100      	movs	r1, #0
 8007142:	4618      	mov	r0, r3
 8007144:	f001 fa34 	bl	80085b0 <RCCEx_PLL3_Config>
 8007148:	4603      	mov	r3, r0
 800714a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800714c:	e003      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	75fb      	strb	r3, [r7, #23]
      break;
 8007152:	e000      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007154:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007156:	7dfb      	ldrb	r3, [r7, #23]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d109      	bne.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800715c:	4b79      	ldr	r3, [pc, #484]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800715e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007160:	f023 0207 	bic.w	r2, r3, #7
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007168:	4976      	ldr	r1, [pc, #472]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800716a:	4313      	orrs	r3, r2
 800716c:	650b      	str	r3, [r1, #80]	; 0x50
 800716e:	e001      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007170:	7dfb      	ldrb	r3, [r7, #23]
 8007172:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800717c:	2b00      	cmp	r3, #0
 800717e:	d042      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007184:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007188:	d02b      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800718a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800718e:	d825      	bhi.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007190:	2bc0      	cmp	r3, #192	; 0xc0
 8007192:	d028      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007194:	2bc0      	cmp	r3, #192	; 0xc0
 8007196:	d821      	bhi.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007198:	2b80      	cmp	r3, #128	; 0x80
 800719a:	d016      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800719c:	2b80      	cmp	r3, #128	; 0x80
 800719e:	d81d      	bhi.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d002      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80071a4:	2b40      	cmp	r3, #64	; 0x40
 80071a6:	d007      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80071a8:	e018      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071aa:	4b66      	ldr	r3, [pc, #408]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ae:	4a65      	ldr	r2, [pc, #404]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80071b6:	e017      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	3304      	adds	r3, #4
 80071bc:	2100      	movs	r1, #0
 80071be:	4618      	mov	r0, r3
 80071c0:	f001 f944 	bl	800844c <RCCEx_PLL2_Config>
 80071c4:	4603      	mov	r3, r0
 80071c6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80071c8:	e00e      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	3324      	adds	r3, #36	; 0x24
 80071ce:	2100      	movs	r1, #0
 80071d0:	4618      	mov	r0, r3
 80071d2:	f001 f9ed 	bl	80085b0 <RCCEx_PLL3_Config>
 80071d6:	4603      	mov	r3, r0
 80071d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80071da:	e005      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	75fb      	strb	r3, [r7, #23]
      break;
 80071e0:	e002      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80071e2:	bf00      	nop
 80071e4:	e000      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80071e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071e8:	7dfb      	ldrb	r3, [r7, #23]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d109      	bne.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80071ee:	4b55      	ldr	r3, [pc, #340]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071f2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071fa:	4952      	ldr	r1, [pc, #328]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071fc:	4313      	orrs	r3, r2
 80071fe:	650b      	str	r3, [r1, #80]	; 0x50
 8007200:	e001      	b.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007202:	7dfb      	ldrb	r3, [r7, #23]
 8007204:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800720e:	2b00      	cmp	r3, #0
 8007210:	d049      	beq.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007218:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800721c:	d030      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800721e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007222:	d82a      	bhi.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007224:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007228:	d02c      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800722a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800722e:	d824      	bhi.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007230:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007234:	d018      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007236:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800723a:	d81e      	bhi.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800723c:	2b00      	cmp	r3, #0
 800723e:	d003      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007240:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007244:	d007      	beq.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007246:	e018      	b.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007248:	4b3e      	ldr	r3, [pc, #248]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800724a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724c:	4a3d      	ldr	r2, [pc, #244]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800724e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007252:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007254:	e017      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	3304      	adds	r3, #4
 800725a:	2100      	movs	r1, #0
 800725c:	4618      	mov	r0, r3
 800725e:	f001 f8f5 	bl	800844c <RCCEx_PLL2_Config>
 8007262:	4603      	mov	r3, r0
 8007264:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007266:	e00e      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	3324      	adds	r3, #36	; 0x24
 800726c:	2100      	movs	r1, #0
 800726e:	4618      	mov	r0, r3
 8007270:	f001 f99e 	bl	80085b0 <RCCEx_PLL3_Config>
 8007274:	4603      	mov	r3, r0
 8007276:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007278:	e005      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	75fb      	strb	r3, [r7, #23]
      break;
 800727e:	e002      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007280:	bf00      	nop
 8007282:	e000      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007284:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007286:	7dfb      	ldrb	r3, [r7, #23]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d10a      	bne.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800728c:	4b2d      	ldr	r3, [pc, #180]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800728e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007290:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800729a:	492a      	ldr	r1, [pc, #168]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800729c:	4313      	orrs	r3, r2
 800729e:	658b      	str	r3, [r1, #88]	; 0x58
 80072a0:	e001      	b.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072a2:	7dfb      	ldrb	r3, [r7, #23]
 80072a4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d04c      	beq.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80072b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80072bc:	d030      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80072be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80072c2:	d82a      	bhi.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80072c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80072c8:	d02c      	beq.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80072ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80072ce:	d824      	bhi.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80072d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072d4:	d018      	beq.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80072d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072da:	d81e      	bhi.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d003      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80072e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80072e4:	d007      	beq.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80072e6:	e018      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072e8:	4b16      	ldr	r3, [pc, #88]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ec:	4a15      	ldr	r2, [pc, #84]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80072f4:	e017      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	3304      	adds	r3, #4
 80072fa:	2100      	movs	r1, #0
 80072fc:	4618      	mov	r0, r3
 80072fe:	f001 f8a5 	bl	800844c <RCCEx_PLL2_Config>
 8007302:	4603      	mov	r3, r0
 8007304:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007306:	e00e      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	3324      	adds	r3, #36	; 0x24
 800730c:	2100      	movs	r1, #0
 800730e:	4618      	mov	r0, r3
 8007310:	f001 f94e 	bl	80085b0 <RCCEx_PLL3_Config>
 8007314:	4603      	mov	r3, r0
 8007316:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007318:	e005      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	75fb      	strb	r3, [r7, #23]
      break;
 800731e:	e002      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007320:	bf00      	nop
 8007322:	e000      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007324:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007326:	7dfb      	ldrb	r3, [r7, #23]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10d      	bne.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800732c:	4b05      	ldr	r3, [pc, #20]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800732e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007330:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800733a:	4902      	ldr	r1, [pc, #8]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800733c:	4313      	orrs	r3, r2
 800733e:	658b      	str	r3, [r1, #88]	; 0x58
 8007340:	e004      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007342:	bf00      	nop
 8007344:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007348:	7dfb      	ldrb	r3, [r7, #23]
 800734a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007354:	2b00      	cmp	r3, #0
 8007356:	d032      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800735c:	2b30      	cmp	r3, #48	; 0x30
 800735e:	d01c      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007360:	2b30      	cmp	r3, #48	; 0x30
 8007362:	d817      	bhi.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007364:	2b20      	cmp	r3, #32
 8007366:	d00c      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007368:	2b20      	cmp	r3, #32
 800736a:	d813      	bhi.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800736c:	2b00      	cmp	r3, #0
 800736e:	d016      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007370:	2b10      	cmp	r3, #16
 8007372:	d10f      	bne.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007374:	4baf      	ldr	r3, [pc, #700]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007378:	4aae      	ldr	r2, [pc, #696]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800737a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800737e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007380:	e00e      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	3304      	adds	r3, #4
 8007386:	2102      	movs	r1, #2
 8007388:	4618      	mov	r0, r3
 800738a:	f001 f85f 	bl	800844c <RCCEx_PLL2_Config>
 800738e:	4603      	mov	r3, r0
 8007390:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007392:	e005      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	75fb      	strb	r3, [r7, #23]
      break;
 8007398:	e002      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800739a:	bf00      	nop
 800739c:	e000      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800739e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073a0:	7dfb      	ldrb	r3, [r7, #23]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d109      	bne.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80073a6:	4ba3      	ldr	r3, [pc, #652]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80073a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073b2:	49a0      	ldr	r1, [pc, #640]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80073b4:	4313      	orrs	r3, r2
 80073b6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80073b8:	e001      	b.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ba:	7dfb      	ldrb	r3, [r7, #23]
 80073bc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d047      	beq.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073d2:	d030      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80073d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073d8:	d82a      	bhi.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80073da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80073de:	d02c      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80073e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80073e4:	d824      	bhi.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80073e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073ea:	d018      	beq.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80073ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073f0:	d81e      	bhi.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d003      	beq.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80073f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073fa:	d007      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80073fc:	e018      	b.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073fe:	4b8d      	ldr	r3, [pc, #564]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007402:	4a8c      	ldr	r2, [pc, #560]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007408:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800740a:	e017      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	3304      	adds	r3, #4
 8007410:	2100      	movs	r1, #0
 8007412:	4618      	mov	r0, r3
 8007414:	f001 f81a 	bl	800844c <RCCEx_PLL2_Config>
 8007418:	4603      	mov	r3, r0
 800741a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800741c:	e00e      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	3324      	adds	r3, #36	; 0x24
 8007422:	2100      	movs	r1, #0
 8007424:	4618      	mov	r0, r3
 8007426:	f001 f8c3 	bl	80085b0 <RCCEx_PLL3_Config>
 800742a:	4603      	mov	r3, r0
 800742c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800742e:	e005      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	75fb      	strb	r3, [r7, #23]
      break;
 8007434:	e002      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007436:	bf00      	nop
 8007438:	e000      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800743a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800743c:	7dfb      	ldrb	r3, [r7, #23]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d109      	bne.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007442:	4b7c      	ldr	r3, [pc, #496]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007446:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800744e:	4979      	ldr	r1, [pc, #484]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007450:	4313      	orrs	r3, r2
 8007452:	650b      	str	r3, [r1, #80]	; 0x50
 8007454:	e001      	b.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007456:	7dfb      	ldrb	r3, [r7, #23]
 8007458:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007462:	2b00      	cmp	r3, #0
 8007464:	d049      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800746a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800746e:	d02e      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007470:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007474:	d828      	bhi.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007476:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800747a:	d02a      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800747c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007480:	d822      	bhi.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007482:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007486:	d026      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007488:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800748c:	d81c      	bhi.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800748e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007492:	d010      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007494:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007498:	d816      	bhi.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800749a:	2b00      	cmp	r3, #0
 800749c:	d01d      	beq.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800749e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074a2:	d111      	bne.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	3304      	adds	r3, #4
 80074a8:	2101      	movs	r1, #1
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 ffce 	bl	800844c <RCCEx_PLL2_Config>
 80074b0:	4603      	mov	r3, r0
 80074b2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80074b4:	e012      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	3324      	adds	r3, #36	; 0x24
 80074ba:	2101      	movs	r1, #1
 80074bc:	4618      	mov	r0, r3
 80074be:	f001 f877 	bl	80085b0 <RCCEx_PLL3_Config>
 80074c2:	4603      	mov	r3, r0
 80074c4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80074c6:	e009      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	75fb      	strb	r3, [r7, #23]
      break;
 80074cc:	e006      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80074ce:	bf00      	nop
 80074d0:	e004      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80074d2:	bf00      	nop
 80074d4:	e002      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80074d6:	bf00      	nop
 80074d8:	e000      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80074da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074dc:	7dfb      	ldrb	r3, [r7, #23]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d109      	bne.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80074e2:	4b54      	ldr	r3, [pc, #336]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80074e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074e6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074ee:	4951      	ldr	r1, [pc, #324]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80074f0:	4313      	orrs	r3, r2
 80074f2:	650b      	str	r3, [r1, #80]	; 0x50
 80074f4:	e001      	b.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074f6:	7dfb      	ldrb	r3, [r7, #23]
 80074f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d04b      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800750c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007510:	d02e      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007512:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007516:	d828      	bhi.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800751c:	d02a      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800751e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007522:	d822      	bhi.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007524:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007528:	d026      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800752a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800752e:	d81c      	bhi.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007530:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007534:	d010      	beq.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007536:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800753a:	d816      	bhi.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800753c:	2b00      	cmp	r3, #0
 800753e:	d01d      	beq.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007540:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007544:	d111      	bne.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	3304      	adds	r3, #4
 800754a:	2101      	movs	r1, #1
 800754c:	4618      	mov	r0, r3
 800754e:	f000 ff7d 	bl	800844c <RCCEx_PLL2_Config>
 8007552:	4603      	mov	r3, r0
 8007554:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007556:	e012      	b.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	3324      	adds	r3, #36	; 0x24
 800755c:	2101      	movs	r1, #1
 800755e:	4618      	mov	r0, r3
 8007560:	f001 f826 	bl	80085b0 <RCCEx_PLL3_Config>
 8007564:	4603      	mov	r3, r0
 8007566:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007568:	e009      	b.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	75fb      	strb	r3, [r7, #23]
      break;
 800756e:	e006      	b.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007570:	bf00      	nop
 8007572:	e004      	b.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007574:	bf00      	nop
 8007576:	e002      	b.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007578:	bf00      	nop
 800757a:	e000      	b.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800757c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800757e:	7dfb      	ldrb	r3, [r7, #23]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d10a      	bne.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007584:	4b2b      	ldr	r3, [pc, #172]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007588:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007592:	4928      	ldr	r1, [pc, #160]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007594:	4313      	orrs	r3, r2
 8007596:	658b      	str	r3, [r1, #88]	; 0x58
 8007598:	e001      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800759a:	7dfb      	ldrb	r3, [r7, #23]
 800759c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d02f      	beq.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075b2:	d00e      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80075b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075b8:	d814      	bhi.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d015      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80075be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075c2:	d10f      	bne.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075c4:	4b1b      	ldr	r3, [pc, #108]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80075c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c8:	4a1a      	ldr	r2, [pc, #104]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80075ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80075d0:	e00c      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	3304      	adds	r3, #4
 80075d6:	2101      	movs	r1, #1
 80075d8:	4618      	mov	r0, r3
 80075da:	f000 ff37 	bl	800844c <RCCEx_PLL2_Config>
 80075de:	4603      	mov	r3, r0
 80075e0:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80075e2:	e003      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	75fb      	strb	r3, [r7, #23]
      break;
 80075e8:	e000      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80075ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075ec:	7dfb      	ldrb	r3, [r7, #23]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d109      	bne.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80075f2:	4b10      	ldr	r3, [pc, #64]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80075f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075fe:	490d      	ldr	r1, [pc, #52]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007600:	4313      	orrs	r3, r2
 8007602:	650b      	str	r3, [r1, #80]	; 0x50
 8007604:	e001      	b.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007606:	7dfb      	ldrb	r3, [r7, #23]
 8007608:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007612:	2b00      	cmp	r3, #0
 8007614:	d033      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800761a:	2b03      	cmp	r3, #3
 800761c:	d81c      	bhi.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800761e:	a201      	add	r2, pc, #4	; (adr r2, 8007624 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007624:	0800765f 	.word	0x0800765f
 8007628:	08007639 	.word	0x08007639
 800762c:	08007647 	.word	0x08007647
 8007630:	0800765f 	.word	0x0800765f
 8007634:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007638:	4bb8      	ldr	r3, [pc, #736]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800763a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763c:	4ab7      	ldr	r2, [pc, #732]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800763e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007642:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007644:	e00c      	b.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	3304      	adds	r3, #4
 800764a:	2102      	movs	r1, #2
 800764c:	4618      	mov	r0, r3
 800764e:	f000 fefd 	bl	800844c <RCCEx_PLL2_Config>
 8007652:	4603      	mov	r3, r0
 8007654:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007656:	e003      	b.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	75fb      	strb	r3, [r7, #23]
      break;
 800765c:	e000      	b.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800765e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007660:	7dfb      	ldrb	r3, [r7, #23]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d109      	bne.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007666:	4bad      	ldr	r3, [pc, #692]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800766a:	f023 0203 	bic.w	r2, r3, #3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007672:	49aa      	ldr	r1, [pc, #680]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007674:	4313      	orrs	r3, r2
 8007676:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007678:	e001      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800767a:	7dfb      	ldrb	r3, [r7, #23]
 800767c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007686:	2b00      	cmp	r3, #0
 8007688:	f000 8086 	beq.w	8007798 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800768c:	4ba4      	ldr	r3, [pc, #656]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4aa3      	ldr	r2, [pc, #652]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007696:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007698:	f7fc fa7e 	bl	8003b98 <HAL_GetTick>
 800769c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800769e:	e009      	b.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076a0:	f7fc fa7a 	bl	8003b98 <HAL_GetTick>
 80076a4:	4602      	mov	r2, r0
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	2b64      	cmp	r3, #100	; 0x64
 80076ac:	d902      	bls.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	75fb      	strb	r3, [r7, #23]
        break;
 80076b2:	e005      	b.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076b4:	4b9a      	ldr	r3, [pc, #616]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d0ef      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80076c0:	7dfb      	ldrb	r3, [r7, #23]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d166      	bne.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80076c6:	4b95      	ldr	r3, [pc, #596]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80076d0:	4053      	eors	r3, r2
 80076d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d013      	beq.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80076da:	4b90      	ldr	r3, [pc, #576]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076e2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80076e4:	4b8d      	ldr	r3, [pc, #564]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076e8:	4a8c      	ldr	r2, [pc, #560]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076ee:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80076f0:	4b8a      	ldr	r3, [pc, #552]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076f4:	4a89      	ldr	r2, [pc, #548]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076fa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80076fc:	4a87      	ldr	r2, [pc, #540]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800770c:	d115      	bne.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800770e:	f7fc fa43 	bl	8003b98 <HAL_GetTick>
 8007712:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007714:	e00b      	b.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007716:	f7fc fa3f 	bl	8003b98 <HAL_GetTick>
 800771a:	4602      	mov	r2, r0
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	f241 3288 	movw	r2, #5000	; 0x1388
 8007724:	4293      	cmp	r3, r2
 8007726:	d902      	bls.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007728:	2303      	movs	r3, #3
 800772a:	75fb      	strb	r3, [r7, #23]
            break;
 800772c:	e005      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800772e:	4b7b      	ldr	r3, [pc, #492]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007732:	f003 0302 	and.w	r3, r3, #2
 8007736:	2b00      	cmp	r3, #0
 8007738:	d0ed      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800773a:	7dfb      	ldrb	r3, [r7, #23]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d126      	bne.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800774a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800774e:	d10d      	bne.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007750:	4b72      	ldr	r3, [pc, #456]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800775e:	0919      	lsrs	r1, r3, #4
 8007760:	4b70      	ldr	r3, [pc, #448]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8007762:	400b      	ands	r3, r1
 8007764:	496d      	ldr	r1, [pc, #436]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007766:	4313      	orrs	r3, r2
 8007768:	610b      	str	r3, [r1, #16]
 800776a:	e005      	b.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800776c:	4b6b      	ldr	r3, [pc, #428]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	4a6a      	ldr	r2, [pc, #424]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007772:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007776:	6113      	str	r3, [r2, #16]
 8007778:	4b68      	ldr	r3, [pc, #416]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800777a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007782:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007786:	4965      	ldr	r1, [pc, #404]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007788:	4313      	orrs	r3, r2
 800778a:	670b      	str	r3, [r1, #112]	; 0x70
 800778c:	e004      	b.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800778e:	7dfb      	ldrb	r3, [r7, #23]
 8007790:	75bb      	strb	r3, [r7, #22]
 8007792:	e001      	b.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007794:	7dfb      	ldrb	r3, [r7, #23]
 8007796:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 0301 	and.w	r3, r3, #1
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d07e      	beq.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077a8:	2b28      	cmp	r3, #40	; 0x28
 80077aa:	d867      	bhi.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80077ac:	a201      	add	r2, pc, #4	; (adr r2, 80077b4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80077ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b2:	bf00      	nop
 80077b4:	08007883 	.word	0x08007883
 80077b8:	0800787d 	.word	0x0800787d
 80077bc:	0800787d 	.word	0x0800787d
 80077c0:	0800787d 	.word	0x0800787d
 80077c4:	0800787d 	.word	0x0800787d
 80077c8:	0800787d 	.word	0x0800787d
 80077cc:	0800787d 	.word	0x0800787d
 80077d0:	0800787d 	.word	0x0800787d
 80077d4:	08007859 	.word	0x08007859
 80077d8:	0800787d 	.word	0x0800787d
 80077dc:	0800787d 	.word	0x0800787d
 80077e0:	0800787d 	.word	0x0800787d
 80077e4:	0800787d 	.word	0x0800787d
 80077e8:	0800787d 	.word	0x0800787d
 80077ec:	0800787d 	.word	0x0800787d
 80077f0:	0800787d 	.word	0x0800787d
 80077f4:	0800786b 	.word	0x0800786b
 80077f8:	0800787d 	.word	0x0800787d
 80077fc:	0800787d 	.word	0x0800787d
 8007800:	0800787d 	.word	0x0800787d
 8007804:	0800787d 	.word	0x0800787d
 8007808:	0800787d 	.word	0x0800787d
 800780c:	0800787d 	.word	0x0800787d
 8007810:	0800787d 	.word	0x0800787d
 8007814:	08007883 	.word	0x08007883
 8007818:	0800787d 	.word	0x0800787d
 800781c:	0800787d 	.word	0x0800787d
 8007820:	0800787d 	.word	0x0800787d
 8007824:	0800787d 	.word	0x0800787d
 8007828:	0800787d 	.word	0x0800787d
 800782c:	0800787d 	.word	0x0800787d
 8007830:	0800787d 	.word	0x0800787d
 8007834:	08007883 	.word	0x08007883
 8007838:	0800787d 	.word	0x0800787d
 800783c:	0800787d 	.word	0x0800787d
 8007840:	0800787d 	.word	0x0800787d
 8007844:	0800787d 	.word	0x0800787d
 8007848:	0800787d 	.word	0x0800787d
 800784c:	0800787d 	.word	0x0800787d
 8007850:	0800787d 	.word	0x0800787d
 8007854:	08007883 	.word	0x08007883
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	3304      	adds	r3, #4
 800785c:	2101      	movs	r1, #1
 800785e:	4618      	mov	r0, r3
 8007860:	f000 fdf4 	bl	800844c <RCCEx_PLL2_Config>
 8007864:	4603      	mov	r3, r0
 8007866:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007868:	e00c      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	3324      	adds	r3, #36	; 0x24
 800786e:	2101      	movs	r1, #1
 8007870:	4618      	mov	r0, r3
 8007872:	f000 fe9d 	bl	80085b0 <RCCEx_PLL3_Config>
 8007876:	4603      	mov	r3, r0
 8007878:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800787a:	e003      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	75fb      	strb	r3, [r7, #23]
      break;
 8007880:	e000      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8007882:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007884:	7dfb      	ldrb	r3, [r7, #23]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d109      	bne.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800788a:	4b24      	ldr	r3, [pc, #144]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800788c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800788e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007896:	4921      	ldr	r1, [pc, #132]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007898:	4313      	orrs	r3, r2
 800789a:	654b      	str	r3, [r1, #84]	; 0x54
 800789c:	e001      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800789e:	7dfb      	ldrb	r3, [r7, #23]
 80078a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 0302 	and.w	r3, r3, #2
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d03e      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078b2:	2b05      	cmp	r3, #5
 80078b4:	d820      	bhi.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80078b6:	a201      	add	r2, pc, #4	; (adr r2, 80078bc <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80078b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078bc:	080078ff 	.word	0x080078ff
 80078c0:	080078d5 	.word	0x080078d5
 80078c4:	080078e7 	.word	0x080078e7
 80078c8:	080078ff 	.word	0x080078ff
 80078cc:	080078ff 	.word	0x080078ff
 80078d0:	080078ff 	.word	0x080078ff
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	3304      	adds	r3, #4
 80078d8:	2101      	movs	r1, #1
 80078da:	4618      	mov	r0, r3
 80078dc:	f000 fdb6 	bl	800844c <RCCEx_PLL2_Config>
 80078e0:	4603      	mov	r3, r0
 80078e2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80078e4:	e00c      	b.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	3324      	adds	r3, #36	; 0x24
 80078ea:	2101      	movs	r1, #1
 80078ec:	4618      	mov	r0, r3
 80078ee:	f000 fe5f 	bl	80085b0 <RCCEx_PLL3_Config>
 80078f2:	4603      	mov	r3, r0
 80078f4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80078f6:	e003      	b.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	75fb      	strb	r3, [r7, #23]
      break;
 80078fc:	e000      	b.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80078fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007900:	7dfb      	ldrb	r3, [r7, #23]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d110      	bne.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007906:	4b05      	ldr	r3, [pc, #20]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800790a:	f023 0207 	bic.w	r2, r3, #7
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007912:	4902      	ldr	r1, [pc, #8]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007914:	4313      	orrs	r3, r2
 8007916:	654b      	str	r3, [r1, #84]	; 0x54
 8007918:	e008      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800791a:	bf00      	nop
 800791c:	58024400 	.word	0x58024400
 8007920:	58024800 	.word	0x58024800
 8007924:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007928:	7dfb      	ldrb	r3, [r7, #23]
 800792a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 0304 	and.w	r3, r3, #4
 8007934:	2b00      	cmp	r3, #0
 8007936:	d039      	beq.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800793e:	2b05      	cmp	r3, #5
 8007940:	d820      	bhi.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8007942:	a201      	add	r2, pc, #4	; (adr r2, 8007948 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8007944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007948:	0800798b 	.word	0x0800798b
 800794c:	08007961 	.word	0x08007961
 8007950:	08007973 	.word	0x08007973
 8007954:	0800798b 	.word	0x0800798b
 8007958:	0800798b 	.word	0x0800798b
 800795c:	0800798b 	.word	0x0800798b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	3304      	adds	r3, #4
 8007964:	2101      	movs	r1, #1
 8007966:	4618      	mov	r0, r3
 8007968:	f000 fd70 	bl	800844c <RCCEx_PLL2_Config>
 800796c:	4603      	mov	r3, r0
 800796e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007970:	e00c      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	3324      	adds	r3, #36	; 0x24
 8007976:	2101      	movs	r1, #1
 8007978:	4618      	mov	r0, r3
 800797a:	f000 fe19 	bl	80085b0 <RCCEx_PLL3_Config>
 800797e:	4603      	mov	r3, r0
 8007980:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007982:	e003      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	75fb      	strb	r3, [r7, #23]
      break;
 8007988:	e000      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800798a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800798c:	7dfb      	ldrb	r3, [r7, #23]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d10a      	bne.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007992:	4bb7      	ldr	r3, [pc, #732]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007996:	f023 0207 	bic.w	r2, r3, #7
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079a0:	49b3      	ldr	r1, [pc, #716]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80079a2:	4313      	orrs	r3, r2
 80079a4:	658b      	str	r3, [r1, #88]	; 0x58
 80079a6:	e001      	b.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079a8:	7dfb      	ldrb	r3, [r7, #23]
 80079aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 0320 	and.w	r3, r3, #32
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d04b      	beq.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079c2:	d02e      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80079c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079c8:	d828      	bhi.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80079ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079ce:	d02a      	beq.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80079d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079d4:	d822      	bhi.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80079d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80079da:	d026      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80079dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80079e0:	d81c      	bhi.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80079e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079e6:	d010      	beq.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80079e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079ec:	d816      	bhi.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d01d      	beq.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80079f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079f6:	d111      	bne.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	3304      	adds	r3, #4
 80079fc:	2100      	movs	r1, #0
 80079fe:	4618      	mov	r0, r3
 8007a00:	f000 fd24 	bl	800844c <RCCEx_PLL2_Config>
 8007a04:	4603      	mov	r3, r0
 8007a06:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007a08:	e012      	b.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	3324      	adds	r3, #36	; 0x24
 8007a0e:	2102      	movs	r1, #2
 8007a10:	4618      	mov	r0, r3
 8007a12:	f000 fdcd 	bl	80085b0 <RCCEx_PLL3_Config>
 8007a16:	4603      	mov	r3, r0
 8007a18:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007a1a:	e009      	b.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8007a20:	e006      	b.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007a22:	bf00      	nop
 8007a24:	e004      	b.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007a26:	bf00      	nop
 8007a28:	e002      	b.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007a2a:	bf00      	nop
 8007a2c:	e000      	b.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007a2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a30:	7dfb      	ldrb	r3, [r7, #23]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d10a      	bne.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a36:	4b8e      	ldr	r3, [pc, #568]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a3a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a44:	498a      	ldr	r1, [pc, #552]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a46:	4313      	orrs	r3, r2
 8007a48:	654b      	str	r3, [r1, #84]	; 0x54
 8007a4a:	e001      	b.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a4c:	7dfb      	ldrb	r3, [r7, #23]
 8007a4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d04b      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007a62:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007a66:	d02e      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8007a68:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007a6c:	d828      	bhi.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a72:	d02a      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a78:	d822      	bhi.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007a7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a7e:	d026      	beq.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007a80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a84:	d81c      	bhi.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007a86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a8a:	d010      	beq.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8007a8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a90:	d816      	bhi.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d01d      	beq.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a9a:	d111      	bne.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	3304      	adds	r3, #4
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f000 fcd2 	bl	800844c <RCCEx_PLL2_Config>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007aac:	e012      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	3324      	adds	r3, #36	; 0x24
 8007ab2:	2102      	movs	r1, #2
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f000 fd7b 	bl	80085b0 <RCCEx_PLL3_Config>
 8007aba:	4603      	mov	r3, r0
 8007abc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007abe:	e009      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ac4:	e006      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007ac6:	bf00      	nop
 8007ac8:	e004      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007aca:	bf00      	nop
 8007acc:	e002      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007ace:	bf00      	nop
 8007ad0:	e000      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007ad2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ad4:	7dfb      	ldrb	r3, [r7, #23]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d10a      	bne.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007ada:	4b65      	ldr	r3, [pc, #404]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ade:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ae8:	4961      	ldr	r1, [pc, #388]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007aea:	4313      	orrs	r3, r2
 8007aec:	658b      	str	r3, [r1, #88]	; 0x58
 8007aee:	e001      	b.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007af0:	7dfb      	ldrb	r3, [r7, #23]
 8007af2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d04b      	beq.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b06:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007b0a:	d02e      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007b0c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007b10:	d828      	bhi.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b16:	d02a      	beq.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8007b18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b1c:	d822      	bhi.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007b1e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007b22:	d026      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007b24:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007b28:	d81c      	bhi.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007b2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b2e:	d010      	beq.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007b30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b34:	d816      	bhi.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d01d      	beq.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007b3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b3e:	d111      	bne.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	3304      	adds	r3, #4
 8007b44:	2100      	movs	r1, #0
 8007b46:	4618      	mov	r0, r3
 8007b48:	f000 fc80 	bl	800844c <RCCEx_PLL2_Config>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007b50:	e012      	b.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	3324      	adds	r3, #36	; 0x24
 8007b56:	2102      	movs	r1, #2
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f000 fd29 	bl	80085b0 <RCCEx_PLL3_Config>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007b62:	e009      	b.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	75fb      	strb	r3, [r7, #23]
      break;
 8007b68:	e006      	b.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007b6a:	bf00      	nop
 8007b6c:	e004      	b.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007b6e:	bf00      	nop
 8007b70:	e002      	b.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007b72:	bf00      	nop
 8007b74:	e000      	b.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007b76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b78:	7dfb      	ldrb	r3, [r7, #23]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d10a      	bne.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007b7e:	4b3c      	ldr	r3, [pc, #240]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b8c:	4938      	ldr	r1, [pc, #224]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	658b      	str	r3, [r1, #88]	; 0x58
 8007b92:	e001      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b94:	7dfb      	ldrb	r3, [r7, #23]
 8007b96:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 0308 	and.w	r3, r3, #8
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d01a      	beq.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bae:	d10a      	bne.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	3324      	adds	r3, #36	; 0x24
 8007bb4:	2102      	movs	r1, #2
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f000 fcfa 	bl	80085b0 <RCCEx_PLL3_Config>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d001      	beq.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007bc6:	4b2a      	ldr	r3, [pc, #168]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bd4:	4926      	ldr	r1, [pc, #152]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 0310 	and.w	r3, r3, #16
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d01a      	beq.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bf0:	d10a      	bne.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	3324      	adds	r3, #36	; 0x24
 8007bf6:	2102      	movs	r1, #2
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f000 fcd9 	bl	80085b0 <RCCEx_PLL3_Config>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d001      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c08:	4b19      	ldr	r3, [pc, #100]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c16:	4916      	ldr	r1, [pc, #88]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d036      	beq.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007c2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c32:	d01f      	beq.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007c34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c38:	d817      	bhi.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d003      	beq.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8007c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c42:	d009      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007c44:	e011      	b.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	3304      	adds	r3, #4
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f000 fbfd 	bl	800844c <RCCEx_PLL2_Config>
 8007c52:	4603      	mov	r3, r0
 8007c54:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007c56:	e00e      	b.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	3324      	adds	r3, #36	; 0x24
 8007c5c:	2102      	movs	r1, #2
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f000 fca6 	bl	80085b0 <RCCEx_PLL3_Config>
 8007c64:	4603      	mov	r3, r0
 8007c66:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007c68:	e005      	b.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	75fb      	strb	r3, [r7, #23]
      break;
 8007c6e:	e002      	b.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007c70:	58024400 	.word	0x58024400
      break;
 8007c74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c76:	7dfb      	ldrb	r3, [r7, #23]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d10a      	bne.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007c7c:	4b93      	ldr	r3, [pc, #588]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007c8a:	4990      	ldr	r1, [pc, #576]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	658b      	str	r3, [r1, #88]	; 0x58
 8007c90:	e001      	b.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c92:	7dfb      	ldrb	r3, [r7, #23]
 8007c94:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d033      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ca8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007cac:	d01c      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8007cae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007cb2:	d816      	bhi.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007cb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cb8:	d003      	beq.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8007cba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007cbe:	d007      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8007cc0:	e00f      	b.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cc2:	4b82      	ldr	r3, [pc, #520]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc6:	4a81      	ldr	r2, [pc, #516]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ccc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007cce:	e00c      	b.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	3324      	adds	r3, #36	; 0x24
 8007cd4:	2101      	movs	r1, #1
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f000 fc6a 	bl	80085b0 <RCCEx_PLL3_Config>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007ce0:	e003      	b.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	75fb      	strb	r3, [r7, #23]
      break;
 8007ce6:	e000      	b.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8007ce8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cea:	7dfb      	ldrb	r3, [r7, #23]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d10a      	bne.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007cf0:	4b76      	ldr	r3, [pc, #472]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cf4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cfe:	4973      	ldr	r1, [pc, #460]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d00:	4313      	orrs	r3, r2
 8007d02:	654b      	str	r3, [r1, #84]	; 0x54
 8007d04:	e001      	b.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d06:	7dfb      	ldrb	r3, [r7, #23]
 8007d08:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d029      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d003      	beq.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8007d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d22:	d007      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007d24:	e00f      	b.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d26:	4b69      	ldr	r3, [pc, #420]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d2a:	4a68      	ldr	r2, [pc, #416]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007d32:	e00b      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	3304      	adds	r3, #4
 8007d38:	2102      	movs	r1, #2
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f000 fb86 	bl	800844c <RCCEx_PLL2_Config>
 8007d40:	4603      	mov	r3, r0
 8007d42:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007d44:	e002      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	75fb      	strb	r3, [r7, #23]
      break;
 8007d4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d4c:	7dfb      	ldrb	r3, [r7, #23]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d109      	bne.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007d52:	4b5e      	ldr	r3, [pc, #376]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d56:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d5e:	495b      	ldr	r1, [pc, #364]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d60:	4313      	orrs	r3, r2
 8007d62:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007d64:	e001      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d66:	7dfb      	ldrb	r3, [r7, #23]
 8007d68:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00a      	beq.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	3324      	adds	r3, #36	; 0x24
 8007d7a:	2102      	movs	r1, #2
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f000 fc17 	bl	80085b0 <RCCEx_PLL3_Config>
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d001      	beq.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d030      	beq.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007da0:	d017      	beq.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007da2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007da6:	d811      	bhi.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dac:	d013      	beq.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007dae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007db2:	d80b      	bhi.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d010      	beq.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dbc:	d106      	bne.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dbe:	4b43      	ldr	r3, [pc, #268]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc2:	4a42      	ldr	r2, [pc, #264]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dc8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007dca:	e007      	b.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	75fb      	strb	r3, [r7, #23]
      break;
 8007dd0:	e004      	b.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007dd2:	bf00      	nop
 8007dd4:	e002      	b.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007dd6:	bf00      	nop
 8007dd8:	e000      	b.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007dda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ddc:	7dfb      	ldrb	r3, [r7, #23]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d109      	bne.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007de2:	4b3a      	ldr	r3, [pc, #232]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007de6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dee:	4937      	ldr	r1, [pc, #220]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007df0:	4313      	orrs	r3, r2
 8007df2:	654b      	str	r3, [r1, #84]	; 0x54
 8007df4:	e001      	b.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007df6:	7dfb      	ldrb	r3, [r7, #23]
 8007df8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d008      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007e06:	4b31      	ldr	r3, [pc, #196]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e0a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e12:	492e      	ldr	r1, [pc, #184]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e14:	4313      	orrs	r3, r2
 8007e16:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d009      	beq.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007e24:	4b29      	ldr	r3, [pc, #164]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007e32:	4926      	ldr	r1, [pc, #152]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e34:	4313      	orrs	r3, r2
 8007e36:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d008      	beq.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007e44:	4b21      	ldr	r3, [pc, #132]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e48:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e50:	491e      	ldr	r1, [pc, #120]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e52:	4313      	orrs	r3, r2
 8007e54:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d00d      	beq.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007e62:	4b1a      	ldr	r3, [pc, #104]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	4a19      	ldr	r2, [pc, #100]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e6c:	6113      	str	r3, [r2, #16]
 8007e6e:	4b17      	ldr	r3, [pc, #92]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e70:	691a      	ldr	r2, [r3, #16]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007e78:	4914      	ldr	r1, [pc, #80]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	da08      	bge.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007e86:	4b11      	ldr	r3, [pc, #68]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e8a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e92:	490e      	ldr	r1, [pc, #56]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e94:	4313      	orrs	r3, r2
 8007e96:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d009      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007ea4:	4b09      	ldr	r3, [pc, #36]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ea8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eb2:	4906      	ldr	r1, [pc, #24]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007eb8:	7dbb      	ldrb	r3, [r7, #22]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d101      	bne.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	e000      	b.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3718      	adds	r7, #24
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	58024400 	.word	0x58024400

08007ed0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007ed4:	f7ff f860 	bl	8006f98 <HAL_RCC_GetHCLKFreq>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	4b06      	ldr	r3, [pc, #24]	; (8007ef4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007edc:	6a1b      	ldr	r3, [r3, #32]
 8007ede:	091b      	lsrs	r3, r3, #4
 8007ee0:	f003 0307 	and.w	r3, r3, #7
 8007ee4:	4904      	ldr	r1, [pc, #16]	; (8007ef8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007ee6:	5ccb      	ldrb	r3, [r1, r3]
 8007ee8:	f003 031f 	and.w	r3, r3, #31
 8007eec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	58024400 	.word	0x58024400
 8007ef8:	0800e448 	.word	0x0800e448

08007efc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b089      	sub	sp, #36	; 0x24
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f04:	4ba1      	ldr	r3, [pc, #644]	; (800818c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f08:	f003 0303 	and.w	r3, r3, #3
 8007f0c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007f0e:	4b9f      	ldr	r3, [pc, #636]	; (800818c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f12:	0b1b      	lsrs	r3, r3, #12
 8007f14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f18:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007f1a:	4b9c      	ldr	r3, [pc, #624]	; (800818c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f1e:	091b      	lsrs	r3, r3, #4
 8007f20:	f003 0301 	and.w	r3, r3, #1
 8007f24:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007f26:	4b99      	ldr	r3, [pc, #612]	; (800818c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f2a:	08db      	lsrs	r3, r3, #3
 8007f2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f30:	693a      	ldr	r2, [r7, #16]
 8007f32:	fb02 f303 	mul.w	r3, r2, r3
 8007f36:	ee07 3a90 	vmov	s15, r3
 8007f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f3e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	f000 8111 	beq.w	800816c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	f000 8083 	beq.w	8008058 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	f200 80a1 	bhi.w	800809c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d003      	beq.n	8007f68 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d056      	beq.n	8008014 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007f66:	e099      	b.n	800809c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f68:	4b88      	ldr	r3, [pc, #544]	; (800818c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 0320 	and.w	r3, r3, #32
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d02d      	beq.n	8007fd0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007f74:	4b85      	ldr	r3, [pc, #532]	; (800818c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	08db      	lsrs	r3, r3, #3
 8007f7a:	f003 0303 	and.w	r3, r3, #3
 8007f7e:	4a84      	ldr	r2, [pc, #528]	; (8008190 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007f80:	fa22 f303 	lsr.w	r3, r2, r3
 8007f84:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	ee07 3a90 	vmov	s15, r3
 8007f8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	ee07 3a90 	vmov	s15, r3
 8007f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f9e:	4b7b      	ldr	r3, [pc, #492]	; (800818c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fa6:	ee07 3a90 	vmov	s15, r3
 8007faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fae:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fb2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008194 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fca:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007fce:	e087      	b.n	80080e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	ee07 3a90 	vmov	s15, r3
 8007fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fda:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008198 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fe2:	4b6a      	ldr	r3, [pc, #424]	; (800818c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fea:	ee07 3a90 	vmov	s15, r3
 8007fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ff2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ff6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008194 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008002:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800800a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800800e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008012:	e065      	b.n	80080e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	ee07 3a90 	vmov	s15, r3
 800801a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800801e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800819c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008026:	4b59      	ldr	r3, [pc, #356]	; (800818c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800802a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800802e:	ee07 3a90 	vmov	s15, r3
 8008032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008036:	ed97 6a03 	vldr	s12, [r7, #12]
 800803a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008194 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800803e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008046:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800804a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800804e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008052:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008056:	e043      	b.n	80080e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	ee07 3a90 	vmov	s15, r3
 800805e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008062:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80081a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800806a:	4b48      	ldr	r3, [pc, #288]	; (800818c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800806c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008072:	ee07 3a90 	vmov	s15, r3
 8008076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800807a:	ed97 6a03 	vldr	s12, [r7, #12]
 800807e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008194 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800808a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800808e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008096:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800809a:	e021      	b.n	80080e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	ee07 3a90 	vmov	s15, r3
 80080a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800819c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80080aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080ae:	4b37      	ldr	r3, [pc, #220]	; (800818c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080b6:	ee07 3a90 	vmov	s15, r3
 80080ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080be:	ed97 6a03 	vldr	s12, [r7, #12]
 80080c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008194 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080de:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80080e0:	4b2a      	ldr	r3, [pc, #168]	; (800818c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e4:	0a5b      	lsrs	r3, r3, #9
 80080e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080ea:	ee07 3a90 	vmov	s15, r3
 80080ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80080fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008102:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008106:	ee17 2a90 	vmov	r2, s15
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800810e:	4b1f      	ldr	r3, [pc, #124]	; (800818c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008112:	0c1b      	lsrs	r3, r3, #16
 8008114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008118:	ee07 3a90 	vmov	s15, r3
 800811c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008120:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008124:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008128:	edd7 6a07 	vldr	s13, [r7, #28]
 800812c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008134:	ee17 2a90 	vmov	r2, s15
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800813c:	4b13      	ldr	r3, [pc, #76]	; (800818c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800813e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008140:	0e1b      	lsrs	r3, r3, #24
 8008142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008146:	ee07 3a90 	vmov	s15, r3
 800814a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800814e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008152:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008156:	edd7 6a07 	vldr	s13, [r7, #28]
 800815a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800815e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008162:	ee17 2a90 	vmov	r2, s15
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800816a:	e008      	b.n	800817e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	609a      	str	r2, [r3, #8]
}
 800817e:	bf00      	nop
 8008180:	3724      	adds	r7, #36	; 0x24
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr
 800818a:	bf00      	nop
 800818c:	58024400 	.word	0x58024400
 8008190:	03d09000 	.word	0x03d09000
 8008194:	46000000 	.word	0x46000000
 8008198:	4c742400 	.word	0x4c742400
 800819c:	4a742400 	.word	0x4a742400
 80081a0:	4af42400 	.word	0x4af42400

080081a4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b089      	sub	sp, #36	; 0x24
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081ac:	4ba1      	ldr	r3, [pc, #644]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b0:	f003 0303 	and.w	r3, r3, #3
 80081b4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80081b6:	4b9f      	ldr	r3, [pc, #636]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ba:	0d1b      	lsrs	r3, r3, #20
 80081bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081c0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80081c2:	4b9c      	ldr	r3, [pc, #624]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c6:	0a1b      	lsrs	r3, r3, #8
 80081c8:	f003 0301 	and.w	r3, r3, #1
 80081cc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80081ce:	4b99      	ldr	r3, [pc, #612]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081d2:	08db      	lsrs	r3, r3, #3
 80081d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80081d8:	693a      	ldr	r2, [r7, #16]
 80081da:	fb02 f303 	mul.w	r3, r2, r3
 80081de:	ee07 3a90 	vmov	s15, r3
 80081e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f000 8111 	beq.w	8008414 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	f000 8083 	beq.w	8008300 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	f200 80a1 	bhi.w	8008344 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d003      	beq.n	8008210 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	2b01      	cmp	r3, #1
 800820c:	d056      	beq.n	80082bc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800820e:	e099      	b.n	8008344 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008210:	4b88      	ldr	r3, [pc, #544]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f003 0320 	and.w	r3, r3, #32
 8008218:	2b00      	cmp	r3, #0
 800821a:	d02d      	beq.n	8008278 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800821c:	4b85      	ldr	r3, [pc, #532]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	08db      	lsrs	r3, r3, #3
 8008222:	f003 0303 	and.w	r3, r3, #3
 8008226:	4a84      	ldr	r2, [pc, #528]	; (8008438 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008228:	fa22 f303 	lsr.w	r3, r2, r3
 800822c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	ee07 3a90 	vmov	s15, r3
 8008234:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	ee07 3a90 	vmov	s15, r3
 800823e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008246:	4b7b      	ldr	r3, [pc, #492]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800824e:	ee07 3a90 	vmov	s15, r3
 8008252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008256:	ed97 6a03 	vldr	s12, [r7, #12]
 800825a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800843c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800825e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800826a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800826e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008272:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008276:	e087      	b.n	8008388 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	ee07 3a90 	vmov	s15, r3
 800827e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008282:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008440 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800828a:	4b6a      	ldr	r3, [pc, #424]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800828c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800828e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008292:	ee07 3a90 	vmov	s15, r3
 8008296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800829a:	ed97 6a03 	vldr	s12, [r7, #12]
 800829e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800843c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082ba:	e065      	b.n	8008388 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	ee07 3a90 	vmov	s15, r3
 80082c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80082ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ce:	4b59      	ldr	r3, [pc, #356]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082d6:	ee07 3a90 	vmov	s15, r3
 80082da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082de:	ed97 6a03 	vldr	s12, [r7, #12]
 80082e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800843c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082fe:	e043      	b.n	8008388 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	ee07 3a90 	vmov	s15, r3
 8008306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800830a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008448 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800830e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008312:	4b48      	ldr	r3, [pc, #288]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800831a:	ee07 3a90 	vmov	s15, r3
 800831e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008322:	ed97 6a03 	vldr	s12, [r7, #12]
 8008326:	eddf 5a45 	vldr	s11, [pc, #276]	; 800843c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800832a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800832e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800833a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800833e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008342:	e021      	b.n	8008388 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	ee07 3a90 	vmov	s15, r3
 800834a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800834e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008356:	4b37      	ldr	r3, [pc, #220]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800835e:	ee07 3a90 	vmov	s15, r3
 8008362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008366:	ed97 6a03 	vldr	s12, [r7, #12]
 800836a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800843c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800836e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800837a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800837e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008382:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008386:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008388:	4b2a      	ldr	r3, [pc, #168]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800838a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838c:	0a5b      	lsrs	r3, r3, #9
 800838e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008392:	ee07 3a90 	vmov	s15, r3
 8008396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800839a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800839e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80083a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083ae:	ee17 2a90 	vmov	r2, s15
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80083b6:	4b1f      	ldr	r3, [pc, #124]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ba:	0c1b      	lsrs	r3, r3, #16
 80083bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083c0:	ee07 3a90 	vmov	s15, r3
 80083c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80083d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083dc:	ee17 2a90 	vmov	r2, s15
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80083e4:	4b13      	ldr	r3, [pc, #76]	; (8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e8:	0e1b      	lsrs	r3, r3, #24
 80083ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083ee:	ee07 3a90 	vmov	s15, r3
 80083f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008402:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008406:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800840a:	ee17 2a90 	vmov	r2, s15
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008412:	e008      	b.n	8008426 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	609a      	str	r2, [r3, #8]
}
 8008426:	bf00      	nop
 8008428:	3724      	adds	r7, #36	; 0x24
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr
 8008432:	bf00      	nop
 8008434:	58024400 	.word	0x58024400
 8008438:	03d09000 	.word	0x03d09000
 800843c:	46000000 	.word	0x46000000
 8008440:	4c742400 	.word	0x4c742400
 8008444:	4a742400 	.word	0x4a742400
 8008448:	4af42400 	.word	0x4af42400

0800844c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008456:	2300      	movs	r3, #0
 8008458:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800845a:	4b53      	ldr	r3, [pc, #332]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 800845c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800845e:	f003 0303 	and.w	r3, r3, #3
 8008462:	2b03      	cmp	r3, #3
 8008464:	d101      	bne.n	800846a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	e099      	b.n	800859e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800846a:	4b4f      	ldr	r3, [pc, #316]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a4e      	ldr	r2, [pc, #312]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 8008470:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008474:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008476:	f7fb fb8f 	bl	8003b98 <HAL_GetTick>
 800847a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800847c:	e008      	b.n	8008490 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800847e:	f7fb fb8b 	bl	8003b98 <HAL_GetTick>
 8008482:	4602      	mov	r2, r0
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	1ad3      	subs	r3, r2, r3
 8008488:	2b02      	cmp	r3, #2
 800848a:	d901      	bls.n	8008490 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800848c:	2303      	movs	r3, #3
 800848e:	e086      	b.n	800859e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008490:	4b45      	ldr	r3, [pc, #276]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008498:	2b00      	cmp	r3, #0
 800849a:	d1f0      	bne.n	800847e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800849c:	4b42      	ldr	r3, [pc, #264]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 800849e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	031b      	lsls	r3, r3, #12
 80084aa:	493f      	ldr	r1, [pc, #252]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 80084ac:	4313      	orrs	r3, r2
 80084ae:	628b      	str	r3, [r1, #40]	; 0x28
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	3b01      	subs	r3, #1
 80084b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	3b01      	subs	r3, #1
 80084c0:	025b      	lsls	r3, r3, #9
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	431a      	orrs	r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	3b01      	subs	r3, #1
 80084cc:	041b      	lsls	r3, r3, #16
 80084ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80084d2:	431a      	orrs	r2, r3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	3b01      	subs	r3, #1
 80084da:	061b      	lsls	r3, r3, #24
 80084dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80084e0:	4931      	ldr	r1, [pc, #196]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 80084e2:	4313      	orrs	r3, r2
 80084e4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80084e6:	4b30      	ldr	r3, [pc, #192]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 80084e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	695b      	ldr	r3, [r3, #20]
 80084f2:	492d      	ldr	r1, [pc, #180]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 80084f4:	4313      	orrs	r3, r2
 80084f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80084f8:	4b2b      	ldr	r3, [pc, #172]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 80084fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084fc:	f023 0220 	bic.w	r2, r3, #32
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	699b      	ldr	r3, [r3, #24]
 8008504:	4928      	ldr	r1, [pc, #160]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 8008506:	4313      	orrs	r3, r2
 8008508:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800850a:	4b27      	ldr	r3, [pc, #156]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 800850c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800850e:	4a26      	ldr	r2, [pc, #152]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 8008510:	f023 0310 	bic.w	r3, r3, #16
 8008514:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008516:	4b24      	ldr	r3, [pc, #144]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 8008518:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800851a:	4b24      	ldr	r3, [pc, #144]	; (80085ac <RCCEx_PLL2_Config+0x160>)
 800851c:	4013      	ands	r3, r2
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	69d2      	ldr	r2, [r2, #28]
 8008522:	00d2      	lsls	r2, r2, #3
 8008524:	4920      	ldr	r1, [pc, #128]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 8008526:	4313      	orrs	r3, r2
 8008528:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800852a:	4b1f      	ldr	r3, [pc, #124]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 800852c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852e:	4a1e      	ldr	r2, [pc, #120]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 8008530:	f043 0310 	orr.w	r3, r3, #16
 8008534:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d106      	bne.n	800854a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800853c:	4b1a      	ldr	r3, [pc, #104]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 800853e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008540:	4a19      	ldr	r2, [pc, #100]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 8008542:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008546:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008548:	e00f      	b.n	800856a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	2b01      	cmp	r3, #1
 800854e:	d106      	bne.n	800855e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008550:	4b15      	ldr	r3, [pc, #84]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 8008552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008554:	4a14      	ldr	r2, [pc, #80]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 8008556:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800855a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800855c:	e005      	b.n	800856a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800855e:	4b12      	ldr	r3, [pc, #72]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 8008560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008562:	4a11      	ldr	r2, [pc, #68]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 8008564:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008568:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800856a:	4b0f      	ldr	r3, [pc, #60]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a0e      	ldr	r2, [pc, #56]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 8008570:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008574:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008576:	f7fb fb0f 	bl	8003b98 <HAL_GetTick>
 800857a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800857c:	e008      	b.n	8008590 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800857e:	f7fb fb0b 	bl	8003b98 <HAL_GetTick>
 8008582:	4602      	mov	r2, r0
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	1ad3      	subs	r3, r2, r3
 8008588:	2b02      	cmp	r3, #2
 800858a:	d901      	bls.n	8008590 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800858c:	2303      	movs	r3, #3
 800858e:	e006      	b.n	800859e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008590:	4b05      	ldr	r3, [pc, #20]	; (80085a8 <RCCEx_PLL2_Config+0x15c>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008598:	2b00      	cmp	r3, #0
 800859a:	d0f0      	beq.n	800857e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800859c:	7bfb      	ldrb	r3, [r7, #15]
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3710      	adds	r7, #16
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	58024400 	.word	0x58024400
 80085ac:	ffff0007 	.word	0xffff0007

080085b0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80085ba:	2300      	movs	r3, #0
 80085bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80085be:	4b53      	ldr	r3, [pc, #332]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 80085c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c2:	f003 0303 	and.w	r3, r3, #3
 80085c6:	2b03      	cmp	r3, #3
 80085c8:	d101      	bne.n	80085ce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80085ca:	2301      	movs	r3, #1
 80085cc:	e099      	b.n	8008702 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80085ce:	4b4f      	ldr	r3, [pc, #316]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a4e      	ldr	r2, [pc, #312]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 80085d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085da:	f7fb fadd 	bl	8003b98 <HAL_GetTick>
 80085de:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80085e0:	e008      	b.n	80085f4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80085e2:	f7fb fad9 	bl	8003b98 <HAL_GetTick>
 80085e6:	4602      	mov	r2, r0
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	1ad3      	subs	r3, r2, r3
 80085ec:	2b02      	cmp	r3, #2
 80085ee:	d901      	bls.n	80085f4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80085f0:	2303      	movs	r3, #3
 80085f2:	e086      	b.n	8008702 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80085f4:	4b45      	ldr	r3, [pc, #276]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d1f0      	bne.n	80085e2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008600:	4b42      	ldr	r3, [pc, #264]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 8008602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008604:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	051b      	lsls	r3, r3, #20
 800860e:	493f      	ldr	r1, [pc, #252]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 8008610:	4313      	orrs	r3, r2
 8008612:	628b      	str	r3, [r1, #40]	; 0x28
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	3b01      	subs	r3, #1
 800861a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	3b01      	subs	r3, #1
 8008624:	025b      	lsls	r3, r3, #9
 8008626:	b29b      	uxth	r3, r3
 8008628:	431a      	orrs	r2, r3
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	3b01      	subs	r3, #1
 8008630:	041b      	lsls	r3, r3, #16
 8008632:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008636:	431a      	orrs	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	3b01      	subs	r3, #1
 800863e:	061b      	lsls	r3, r3, #24
 8008640:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008644:	4931      	ldr	r1, [pc, #196]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 8008646:	4313      	orrs	r3, r2
 8008648:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800864a:	4b30      	ldr	r3, [pc, #192]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 800864c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800864e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	695b      	ldr	r3, [r3, #20]
 8008656:	492d      	ldr	r1, [pc, #180]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 8008658:	4313      	orrs	r3, r2
 800865a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800865c:	4b2b      	ldr	r3, [pc, #172]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 800865e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008660:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	699b      	ldr	r3, [r3, #24]
 8008668:	4928      	ldr	r1, [pc, #160]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 800866a:	4313      	orrs	r3, r2
 800866c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800866e:	4b27      	ldr	r3, [pc, #156]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 8008670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008672:	4a26      	ldr	r2, [pc, #152]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 8008674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008678:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800867a:	4b24      	ldr	r3, [pc, #144]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 800867c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800867e:	4b24      	ldr	r3, [pc, #144]	; (8008710 <RCCEx_PLL3_Config+0x160>)
 8008680:	4013      	ands	r3, r2
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	69d2      	ldr	r2, [r2, #28]
 8008686:	00d2      	lsls	r2, r2, #3
 8008688:	4920      	ldr	r1, [pc, #128]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 800868a:	4313      	orrs	r3, r2
 800868c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800868e:	4b1f      	ldr	r3, [pc, #124]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 8008690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008692:	4a1e      	ldr	r2, [pc, #120]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 8008694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008698:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d106      	bne.n	80086ae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80086a0:	4b1a      	ldr	r3, [pc, #104]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 80086a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a4:	4a19      	ldr	r2, [pc, #100]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 80086a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80086aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80086ac:	e00f      	b.n	80086ce <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d106      	bne.n	80086c2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80086b4:	4b15      	ldr	r3, [pc, #84]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 80086b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b8:	4a14      	ldr	r2, [pc, #80]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 80086ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80086be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80086c0:	e005      	b.n	80086ce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80086c2:	4b12      	ldr	r3, [pc, #72]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 80086c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c6:	4a11      	ldr	r2, [pc, #68]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 80086c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80086cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80086ce:	4b0f      	ldr	r3, [pc, #60]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a0e      	ldr	r2, [pc, #56]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 80086d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086da:	f7fb fa5d 	bl	8003b98 <HAL_GetTick>
 80086de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80086e0:	e008      	b.n	80086f4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80086e2:	f7fb fa59 	bl	8003b98 <HAL_GetTick>
 80086e6:	4602      	mov	r2, r0
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	1ad3      	subs	r3, r2, r3
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d901      	bls.n	80086f4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80086f0:	2303      	movs	r3, #3
 80086f2:	e006      	b.n	8008702 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80086f4:	4b05      	ldr	r3, [pc, #20]	; (800870c <RCCEx_PLL3_Config+0x15c>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d0f0      	beq.n	80086e2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008700:	7bfb      	ldrb	r3, [r7, #15]
}
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	58024400 	.word	0x58024400
 8008710:	ffff0007 	.word	0xffff0007

08008714 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d101      	bne.n	8008726 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	e049      	b.n	80087ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800872c:	b2db      	uxtb	r3, r3
 800872e:	2b00      	cmp	r3, #0
 8008730:	d106      	bne.n	8008740 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f7fa ff24 	bl	8003588 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2202      	movs	r2, #2
 8008744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	3304      	adds	r3, #4
 8008750:	4619      	mov	r1, r3
 8008752:	4610      	mov	r0, r2
 8008754:	f000 fae2 	bl	8008d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2201      	movs	r2, #1
 8008764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2201      	movs	r2, #1
 800877c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2201      	movs	r2, #1
 8008794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087b8:	2300      	movs	r3, #0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3708      	adds	r7, #8
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
	...

080087c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d001      	beq.n	80087dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	e04f      	b.n	800887c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2202      	movs	r2, #2
 80087e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68da      	ldr	r2, [r3, #12]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f042 0201 	orr.w	r2, r2, #1
 80087f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a23      	ldr	r2, [pc, #140]	; (8008888 <HAL_TIM_Base_Start_IT+0xc4>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d01d      	beq.n	800883a <HAL_TIM_Base_Start_IT+0x76>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008806:	d018      	beq.n	800883a <HAL_TIM_Base_Start_IT+0x76>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a1f      	ldr	r2, [pc, #124]	; (800888c <HAL_TIM_Base_Start_IT+0xc8>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d013      	beq.n	800883a <HAL_TIM_Base_Start_IT+0x76>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a1e      	ldr	r2, [pc, #120]	; (8008890 <HAL_TIM_Base_Start_IT+0xcc>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d00e      	beq.n	800883a <HAL_TIM_Base_Start_IT+0x76>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a1c      	ldr	r2, [pc, #112]	; (8008894 <HAL_TIM_Base_Start_IT+0xd0>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d009      	beq.n	800883a <HAL_TIM_Base_Start_IT+0x76>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a1b      	ldr	r2, [pc, #108]	; (8008898 <HAL_TIM_Base_Start_IT+0xd4>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d004      	beq.n	800883a <HAL_TIM_Base_Start_IT+0x76>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a19      	ldr	r2, [pc, #100]	; (800889c <HAL_TIM_Base_Start_IT+0xd8>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d115      	bne.n	8008866 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	689a      	ldr	r2, [r3, #8]
 8008840:	4b17      	ldr	r3, [pc, #92]	; (80088a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008842:	4013      	ands	r3, r2
 8008844:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2b06      	cmp	r3, #6
 800884a:	d015      	beq.n	8008878 <HAL_TIM_Base_Start_IT+0xb4>
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008852:	d011      	beq.n	8008878 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f042 0201 	orr.w	r2, r2, #1
 8008862:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008864:	e008      	b.n	8008878 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f042 0201 	orr.w	r2, r2, #1
 8008874:	601a      	str	r2, [r3, #0]
 8008876:	e000      	b.n	800887a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008878:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	3714      	adds	r7, #20
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr
 8008888:	40010000 	.word	0x40010000
 800888c:	40000400 	.word	0x40000400
 8008890:	40000800 	.word	0x40000800
 8008894:	40000c00 	.word	0x40000c00
 8008898:	40010400 	.word	0x40010400
 800889c:	40001800 	.word	0x40001800
 80088a0:	00010007 	.word	0x00010007

080088a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	691b      	ldr	r3, [r3, #16]
 80088b2:	f003 0302 	and.w	r3, r3, #2
 80088b6:	2b02      	cmp	r3, #2
 80088b8:	d122      	bne.n	8008900 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	f003 0302 	and.w	r3, r3, #2
 80088c4:	2b02      	cmp	r3, #2
 80088c6:	d11b      	bne.n	8008900 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f06f 0202 	mvn.w	r2, #2
 80088d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2201      	movs	r2, #1
 80088d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	699b      	ldr	r3, [r3, #24]
 80088de:	f003 0303 	and.w	r3, r3, #3
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d003      	beq.n	80088ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f9fa 	bl	8008ce0 <HAL_TIM_IC_CaptureCallback>
 80088ec:	e005      	b.n	80088fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 f9ec 	bl	8008ccc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 f9fd 	bl	8008cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	f003 0304 	and.w	r3, r3, #4
 800890a:	2b04      	cmp	r3, #4
 800890c:	d122      	bne.n	8008954 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	f003 0304 	and.w	r3, r3, #4
 8008918:	2b04      	cmp	r3, #4
 800891a:	d11b      	bne.n	8008954 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f06f 0204 	mvn.w	r2, #4
 8008924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2202      	movs	r2, #2
 800892a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	699b      	ldr	r3, [r3, #24]
 8008932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008936:	2b00      	cmp	r3, #0
 8008938:	d003      	beq.n	8008942 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 f9d0 	bl	8008ce0 <HAL_TIM_IC_CaptureCallback>
 8008940:	e005      	b.n	800894e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 f9c2 	bl	8008ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 f9d3 	bl	8008cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	f003 0308 	and.w	r3, r3, #8
 800895e:	2b08      	cmp	r3, #8
 8008960:	d122      	bne.n	80089a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	68db      	ldr	r3, [r3, #12]
 8008968:	f003 0308 	and.w	r3, r3, #8
 800896c:	2b08      	cmp	r3, #8
 800896e:	d11b      	bne.n	80089a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f06f 0208 	mvn.w	r2, #8
 8008978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2204      	movs	r2, #4
 800897e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	69db      	ldr	r3, [r3, #28]
 8008986:	f003 0303 	and.w	r3, r3, #3
 800898a:	2b00      	cmp	r3, #0
 800898c:	d003      	beq.n	8008996 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 f9a6 	bl	8008ce0 <HAL_TIM_IC_CaptureCallback>
 8008994:	e005      	b.n	80089a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 f998 	bl	8008ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 f9a9 	bl	8008cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	691b      	ldr	r3, [r3, #16]
 80089ae:	f003 0310 	and.w	r3, r3, #16
 80089b2:	2b10      	cmp	r3, #16
 80089b4:	d122      	bne.n	80089fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	f003 0310 	and.w	r3, r3, #16
 80089c0:	2b10      	cmp	r3, #16
 80089c2:	d11b      	bne.n	80089fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f06f 0210 	mvn.w	r2, #16
 80089cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2208      	movs	r2, #8
 80089d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	69db      	ldr	r3, [r3, #28]
 80089da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d003      	beq.n	80089ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 f97c 	bl	8008ce0 <HAL_TIM_IC_CaptureCallback>
 80089e8:	e005      	b.n	80089f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 f96e 	bl	8008ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 f97f 	bl	8008cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	f003 0301 	and.w	r3, r3, #1
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d10e      	bne.n	8008a28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	f003 0301 	and.w	r3, r3, #1
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d107      	bne.n	8008a28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f06f 0201 	mvn.w	r2, #1
 8008a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f7fa faee 	bl	8003004 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	691b      	ldr	r3, [r3, #16]
 8008a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a32:	2b80      	cmp	r3, #128	; 0x80
 8008a34:	d10e      	bne.n	8008a54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a40:	2b80      	cmp	r3, #128	; 0x80
 8008a42:	d107      	bne.n	8008a54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 fb2e 	bl	80090b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	691b      	ldr	r3, [r3, #16]
 8008a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a62:	d10e      	bne.n	8008a82 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a6e:	2b80      	cmp	r3, #128	; 0x80
 8008a70:	d107      	bne.n	8008a82 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 fb21 	bl	80090c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a8c:	2b40      	cmp	r3, #64	; 0x40
 8008a8e:	d10e      	bne.n	8008aae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a9a:	2b40      	cmp	r3, #64	; 0x40
 8008a9c:	d107      	bne.n	8008aae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 f92d 	bl	8008d08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	691b      	ldr	r3, [r3, #16]
 8008ab4:	f003 0320 	and.w	r3, r3, #32
 8008ab8:	2b20      	cmp	r3, #32
 8008aba:	d10e      	bne.n	8008ada <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	68db      	ldr	r3, [r3, #12]
 8008ac2:	f003 0320 	and.w	r3, r3, #32
 8008ac6:	2b20      	cmp	r3, #32
 8008ac8:	d107      	bne.n	8008ada <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f06f 0220 	mvn.w	r2, #32
 8008ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 fae1 	bl	800909c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ada:	bf00      	nop
 8008adc:	3708      	adds	r7, #8
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
	...

08008ae4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d101      	bne.n	8008afc <HAL_TIM_ConfigClockSource+0x18>
 8008af8:	2302      	movs	r3, #2
 8008afa:	e0db      	b.n	8008cb4 <HAL_TIM_ConfigClockSource+0x1d0>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2201      	movs	r2, #1
 8008b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2202      	movs	r2, #2
 8008b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008b14:	68fa      	ldr	r2, [r7, #12]
 8008b16:	4b69      	ldr	r3, [pc, #420]	; (8008cbc <HAL_TIM_ConfigClockSource+0x1d8>)
 8008b18:	4013      	ands	r3, r2
 8008b1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b22:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a63      	ldr	r2, [pc, #396]	; (8008cc0 <HAL_TIM_ConfigClockSource+0x1dc>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	f000 80a9 	beq.w	8008c8a <HAL_TIM_ConfigClockSource+0x1a6>
 8008b38:	4a61      	ldr	r2, [pc, #388]	; (8008cc0 <HAL_TIM_ConfigClockSource+0x1dc>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	f200 80ae 	bhi.w	8008c9c <HAL_TIM_ConfigClockSource+0x1b8>
 8008b40:	4a60      	ldr	r2, [pc, #384]	; (8008cc4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	f000 80a1 	beq.w	8008c8a <HAL_TIM_ConfigClockSource+0x1a6>
 8008b48:	4a5e      	ldr	r2, [pc, #376]	; (8008cc4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	f200 80a6 	bhi.w	8008c9c <HAL_TIM_ConfigClockSource+0x1b8>
 8008b50:	4a5d      	ldr	r2, [pc, #372]	; (8008cc8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	f000 8099 	beq.w	8008c8a <HAL_TIM_ConfigClockSource+0x1a6>
 8008b58:	4a5b      	ldr	r2, [pc, #364]	; (8008cc8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	f200 809e 	bhi.w	8008c9c <HAL_TIM_ConfigClockSource+0x1b8>
 8008b60:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008b64:	f000 8091 	beq.w	8008c8a <HAL_TIM_ConfigClockSource+0x1a6>
 8008b68:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008b6c:	f200 8096 	bhi.w	8008c9c <HAL_TIM_ConfigClockSource+0x1b8>
 8008b70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b74:	f000 8089 	beq.w	8008c8a <HAL_TIM_ConfigClockSource+0x1a6>
 8008b78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b7c:	f200 808e 	bhi.w	8008c9c <HAL_TIM_ConfigClockSource+0x1b8>
 8008b80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b84:	d03e      	beq.n	8008c04 <HAL_TIM_ConfigClockSource+0x120>
 8008b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b8a:	f200 8087 	bhi.w	8008c9c <HAL_TIM_ConfigClockSource+0x1b8>
 8008b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b92:	f000 8085 	beq.w	8008ca0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b9a:	d87f      	bhi.n	8008c9c <HAL_TIM_ConfigClockSource+0x1b8>
 8008b9c:	2b70      	cmp	r3, #112	; 0x70
 8008b9e:	d01a      	beq.n	8008bd6 <HAL_TIM_ConfigClockSource+0xf2>
 8008ba0:	2b70      	cmp	r3, #112	; 0x70
 8008ba2:	d87b      	bhi.n	8008c9c <HAL_TIM_ConfigClockSource+0x1b8>
 8008ba4:	2b60      	cmp	r3, #96	; 0x60
 8008ba6:	d050      	beq.n	8008c4a <HAL_TIM_ConfigClockSource+0x166>
 8008ba8:	2b60      	cmp	r3, #96	; 0x60
 8008baa:	d877      	bhi.n	8008c9c <HAL_TIM_ConfigClockSource+0x1b8>
 8008bac:	2b50      	cmp	r3, #80	; 0x50
 8008bae:	d03c      	beq.n	8008c2a <HAL_TIM_ConfigClockSource+0x146>
 8008bb0:	2b50      	cmp	r3, #80	; 0x50
 8008bb2:	d873      	bhi.n	8008c9c <HAL_TIM_ConfigClockSource+0x1b8>
 8008bb4:	2b40      	cmp	r3, #64	; 0x40
 8008bb6:	d058      	beq.n	8008c6a <HAL_TIM_ConfigClockSource+0x186>
 8008bb8:	2b40      	cmp	r3, #64	; 0x40
 8008bba:	d86f      	bhi.n	8008c9c <HAL_TIM_ConfigClockSource+0x1b8>
 8008bbc:	2b30      	cmp	r3, #48	; 0x30
 8008bbe:	d064      	beq.n	8008c8a <HAL_TIM_ConfigClockSource+0x1a6>
 8008bc0:	2b30      	cmp	r3, #48	; 0x30
 8008bc2:	d86b      	bhi.n	8008c9c <HAL_TIM_ConfigClockSource+0x1b8>
 8008bc4:	2b20      	cmp	r3, #32
 8008bc6:	d060      	beq.n	8008c8a <HAL_TIM_ConfigClockSource+0x1a6>
 8008bc8:	2b20      	cmp	r3, #32
 8008bca:	d867      	bhi.n	8008c9c <HAL_TIM_ConfigClockSource+0x1b8>
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d05c      	beq.n	8008c8a <HAL_TIM_ConfigClockSource+0x1a6>
 8008bd0:	2b10      	cmp	r3, #16
 8008bd2:	d05a      	beq.n	8008c8a <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008bd4:	e062      	b.n	8008c9c <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6818      	ldr	r0, [r3, #0]
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	6899      	ldr	r1, [r3, #8]
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	685a      	ldr	r2, [r3, #4]
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	f000 f9b1 	bl	8008f4c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008bf8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	68fa      	ldr	r2, [r7, #12]
 8008c00:	609a      	str	r2, [r3, #8]
      break;
 8008c02:	e04e      	b.n	8008ca2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6818      	ldr	r0, [r3, #0]
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	6899      	ldr	r1, [r3, #8]
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	685a      	ldr	r2, [r3, #4]
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	f000 f99a 	bl	8008f4c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	689a      	ldr	r2, [r3, #8]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c26:	609a      	str	r2, [r3, #8]
      break;
 8008c28:	e03b      	b.n	8008ca2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6818      	ldr	r0, [r3, #0]
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	6859      	ldr	r1, [r3, #4]
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	461a      	mov	r2, r3
 8008c38:	f000 f90a 	bl	8008e50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2150      	movs	r1, #80	; 0x50
 8008c42:	4618      	mov	r0, r3
 8008c44:	f000 f964 	bl	8008f10 <TIM_ITRx_SetConfig>
      break;
 8008c48:	e02b      	b.n	8008ca2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6818      	ldr	r0, [r3, #0]
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	6859      	ldr	r1, [r3, #4]
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	68db      	ldr	r3, [r3, #12]
 8008c56:	461a      	mov	r2, r3
 8008c58:	f000 f929 	bl	8008eae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2160      	movs	r1, #96	; 0x60
 8008c62:	4618      	mov	r0, r3
 8008c64:	f000 f954 	bl	8008f10 <TIM_ITRx_SetConfig>
      break;
 8008c68:	e01b      	b.n	8008ca2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6818      	ldr	r0, [r3, #0]
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	6859      	ldr	r1, [r3, #4]
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	461a      	mov	r2, r3
 8008c78:	f000 f8ea 	bl	8008e50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2140      	movs	r1, #64	; 0x40
 8008c82:	4618      	mov	r0, r3
 8008c84:	f000 f944 	bl	8008f10 <TIM_ITRx_SetConfig>
      break;
 8008c88:	e00b      	b.n	8008ca2 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4619      	mov	r1, r3
 8008c94:	4610      	mov	r0, r2
 8008c96:	f000 f93b 	bl	8008f10 <TIM_ITRx_SetConfig>
        break;
 8008c9a:	e002      	b.n	8008ca2 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8008c9c:	bf00      	nop
 8008c9e:	e000      	b.n	8008ca2 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8008ca0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2200      	movs	r2, #0
 8008cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008cb2:	2300      	movs	r3, #0
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3710      	adds	r7, #16
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	ffceff88 	.word	0xffceff88
 8008cc0:	00100040 	.word	0x00100040
 8008cc4:	00100030 	.word	0x00100030
 8008cc8:	00100020 	.word	0x00100020

08008ccc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008cd4:	bf00      	nop
 8008cd6:	370c      	adds	r7, #12
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr

08008ce0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b083      	sub	sp, #12
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ce8:	bf00      	nop
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr

08008cf4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008cfc:	bf00      	nop
 8008cfe:	370c      	adds	r7, #12
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d10:	bf00      	nop
 8008d12:	370c      	adds	r7, #12
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr

08008d1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b085      	sub	sp, #20
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a40      	ldr	r2, [pc, #256]	; (8008e30 <TIM_Base_SetConfig+0x114>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d013      	beq.n	8008d5c <TIM_Base_SetConfig+0x40>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d3a:	d00f      	beq.n	8008d5c <TIM_Base_SetConfig+0x40>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	4a3d      	ldr	r2, [pc, #244]	; (8008e34 <TIM_Base_SetConfig+0x118>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d00b      	beq.n	8008d5c <TIM_Base_SetConfig+0x40>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4a3c      	ldr	r2, [pc, #240]	; (8008e38 <TIM_Base_SetConfig+0x11c>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d007      	beq.n	8008d5c <TIM_Base_SetConfig+0x40>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	4a3b      	ldr	r2, [pc, #236]	; (8008e3c <TIM_Base_SetConfig+0x120>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d003      	beq.n	8008d5c <TIM_Base_SetConfig+0x40>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	4a3a      	ldr	r2, [pc, #232]	; (8008e40 <TIM_Base_SetConfig+0x124>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d108      	bne.n	8008d6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	68fa      	ldr	r2, [r7, #12]
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4a2f      	ldr	r2, [pc, #188]	; (8008e30 <TIM_Base_SetConfig+0x114>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d01f      	beq.n	8008db6 <TIM_Base_SetConfig+0x9a>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d7c:	d01b      	beq.n	8008db6 <TIM_Base_SetConfig+0x9a>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4a2c      	ldr	r2, [pc, #176]	; (8008e34 <TIM_Base_SetConfig+0x118>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d017      	beq.n	8008db6 <TIM_Base_SetConfig+0x9a>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4a2b      	ldr	r2, [pc, #172]	; (8008e38 <TIM_Base_SetConfig+0x11c>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d013      	beq.n	8008db6 <TIM_Base_SetConfig+0x9a>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4a2a      	ldr	r2, [pc, #168]	; (8008e3c <TIM_Base_SetConfig+0x120>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d00f      	beq.n	8008db6 <TIM_Base_SetConfig+0x9a>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	4a29      	ldr	r2, [pc, #164]	; (8008e40 <TIM_Base_SetConfig+0x124>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d00b      	beq.n	8008db6 <TIM_Base_SetConfig+0x9a>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4a28      	ldr	r2, [pc, #160]	; (8008e44 <TIM_Base_SetConfig+0x128>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d007      	beq.n	8008db6 <TIM_Base_SetConfig+0x9a>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4a27      	ldr	r2, [pc, #156]	; (8008e48 <TIM_Base_SetConfig+0x12c>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d003      	beq.n	8008db6 <TIM_Base_SetConfig+0x9a>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4a26      	ldr	r2, [pc, #152]	; (8008e4c <TIM_Base_SetConfig+0x130>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d108      	bne.n	8008dc8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	68fa      	ldr	r2, [r7, #12]
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	695b      	ldr	r3, [r3, #20]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	689a      	ldr	r2, [r3, #8]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a10      	ldr	r2, [pc, #64]	; (8008e30 <TIM_Base_SetConfig+0x114>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d00f      	beq.n	8008e14 <TIM_Base_SetConfig+0xf8>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4a12      	ldr	r2, [pc, #72]	; (8008e40 <TIM_Base_SetConfig+0x124>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d00b      	beq.n	8008e14 <TIM_Base_SetConfig+0xf8>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4a11      	ldr	r2, [pc, #68]	; (8008e44 <TIM_Base_SetConfig+0x128>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d007      	beq.n	8008e14 <TIM_Base_SetConfig+0xf8>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4a10      	ldr	r2, [pc, #64]	; (8008e48 <TIM_Base_SetConfig+0x12c>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d003      	beq.n	8008e14 <TIM_Base_SetConfig+0xf8>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4a0f      	ldr	r2, [pc, #60]	; (8008e4c <TIM_Base_SetConfig+0x130>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d103      	bne.n	8008e1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	691a      	ldr	r2, [r3, #16]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	615a      	str	r2, [r3, #20]
}
 8008e22:	bf00      	nop
 8008e24:	3714      	adds	r7, #20
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	40010000 	.word	0x40010000
 8008e34:	40000400 	.word	0x40000400
 8008e38:	40000800 	.word	0x40000800
 8008e3c:	40000c00 	.word	0x40000c00
 8008e40:	40010400 	.word	0x40010400
 8008e44:	40014000 	.word	0x40014000
 8008e48:	40014400 	.word	0x40014400
 8008e4c:	40014800 	.word	0x40014800

08008e50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b087      	sub	sp, #28
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6a1b      	ldr	r3, [r3, #32]
 8008e60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	6a1b      	ldr	r3, [r3, #32]
 8008e66:	f023 0201 	bic.w	r2, r3, #1
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	699b      	ldr	r3, [r3, #24]
 8008e72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	011b      	lsls	r3, r3, #4
 8008e80:	693a      	ldr	r2, [r7, #16]
 8008e82:	4313      	orrs	r3, r2
 8008e84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	f023 030a 	bic.w	r3, r3, #10
 8008e8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e8e:	697a      	ldr	r2, [r7, #20]
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	4313      	orrs	r3, r2
 8008e94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	693a      	ldr	r2, [r7, #16]
 8008e9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	697a      	ldr	r2, [r7, #20]
 8008ea0:	621a      	str	r2, [r3, #32]
}
 8008ea2:	bf00      	nop
 8008ea4:	371c      	adds	r7, #28
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr

08008eae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008eae:	b480      	push	{r7}
 8008eb0:	b087      	sub	sp, #28
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	60f8      	str	r0, [r7, #12]
 8008eb6:	60b9      	str	r1, [r7, #8]
 8008eb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6a1b      	ldr	r3, [r3, #32]
 8008ebe:	f023 0210 	bic.w	r2, r3, #16
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	699b      	ldr	r3, [r3, #24]
 8008eca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	6a1b      	ldr	r3, [r3, #32]
 8008ed0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ed8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	031b      	lsls	r3, r3, #12
 8008ede:	697a      	ldr	r2, [r7, #20]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008eea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	011b      	lsls	r3, r3, #4
 8008ef0:	693a      	ldr	r2, [r7, #16]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	697a      	ldr	r2, [r7, #20]
 8008efa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	693a      	ldr	r2, [r7, #16]
 8008f00:	621a      	str	r2, [r3, #32]
}
 8008f02:	bf00      	nop
 8008f04:	371c      	adds	r7, #28
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr
	...

08008f10 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b085      	sub	sp, #20
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f20:	68fa      	ldr	r2, [r7, #12]
 8008f22:	4b09      	ldr	r3, [pc, #36]	; (8008f48 <TIM_ITRx_SetConfig+0x38>)
 8008f24:	4013      	ands	r3, r2
 8008f26:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f28:	683a      	ldr	r2, [r7, #0]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	f043 0307 	orr.w	r3, r3, #7
 8008f32:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	609a      	str	r2, [r3, #8]
}
 8008f3a:	bf00      	nop
 8008f3c:	3714      	adds	r7, #20
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop
 8008f48:	ffcfff8f 	.word	0xffcfff8f

08008f4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b087      	sub	sp, #28
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	60f8      	str	r0, [r7, #12]
 8008f54:	60b9      	str	r1, [r7, #8]
 8008f56:	607a      	str	r2, [r7, #4]
 8008f58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	021a      	lsls	r2, r3, #8
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	431a      	orrs	r2, r3
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	697a      	ldr	r2, [r7, #20]
 8008f76:	4313      	orrs	r3, r2
 8008f78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	697a      	ldr	r2, [r7, #20]
 8008f7e:	609a      	str	r2, [r3, #8]
}
 8008f80:	bf00      	nop
 8008f82:	371c      	adds	r7, #28
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr

08008f8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b085      	sub	sp, #20
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d101      	bne.n	8008fa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008fa0:	2302      	movs	r3, #2
 8008fa2:	e068      	b.n	8009076 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2202      	movs	r2, #2
 8008fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	689b      	ldr	r3, [r3, #8]
 8008fc2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a2e      	ldr	r2, [pc, #184]	; (8009084 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d004      	beq.n	8008fd8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a2d      	ldr	r2, [pc, #180]	; (8009088 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d108      	bne.n	8008fea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008fde:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	68fa      	ldr	r2, [r7, #12]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ff0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	68fa      	ldr	r2, [r7, #12]
 8009002:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a1e      	ldr	r2, [pc, #120]	; (8009084 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d01d      	beq.n	800904a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009016:	d018      	beq.n	800904a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a1b      	ldr	r2, [pc, #108]	; (800908c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d013      	beq.n	800904a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a1a      	ldr	r2, [pc, #104]	; (8009090 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d00e      	beq.n	800904a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a18      	ldr	r2, [pc, #96]	; (8009094 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d009      	beq.n	800904a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4a13      	ldr	r2, [pc, #76]	; (8009088 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d004      	beq.n	800904a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a14      	ldr	r2, [pc, #80]	; (8009098 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d10c      	bne.n	8009064 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009050:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	68ba      	ldr	r2, [r7, #8]
 8009058:	4313      	orrs	r3, r2
 800905a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	68ba      	ldr	r2, [r7, #8]
 8009062:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2201      	movs	r2, #1
 8009068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009074:	2300      	movs	r3, #0
}
 8009076:	4618      	mov	r0, r3
 8009078:	3714      	adds	r7, #20
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr
 8009082:	bf00      	nop
 8009084:	40010000 	.word	0x40010000
 8009088:	40010400 	.word	0x40010400
 800908c:	40000400 	.word	0x40000400
 8009090:	40000800 	.word	0x40000800
 8009094:	40000c00 	.word	0x40000c00
 8009098:	40001800 	.word	0x40001800

0800909c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80090a4:	bf00      	nop
 80090a6:	370c      	adds	r7, #12
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr

080090b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80090b8:	bf00      	nop
 80090ba:	370c      	adds	r7, #12
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80090cc:	bf00      	nop
 80090ce:	370c      	adds	r7, #12
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr

080090d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d101      	bne.n	80090ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	e042      	b.n	8009170 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d106      	bne.n	8009102 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f7fa faa7 	bl	8003650 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2224      	movs	r2, #36	; 0x24
 8009106:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f022 0201 	bic.w	r2, r2, #1
 8009118:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 f996 	bl	800944c <UART_SetConfig>
 8009120:	4603      	mov	r3, r0
 8009122:	2b01      	cmp	r3, #1
 8009124:	d101      	bne.n	800912a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009126:	2301      	movs	r3, #1
 8009128:	e022      	b.n	8009170 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800912e:	2b00      	cmp	r3, #0
 8009130:	d002      	beq.n	8009138 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 feea 	bl	8009f0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	685a      	ldr	r2, [r3, #4]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009146:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	689a      	ldr	r2, [r3, #8]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009156:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f042 0201 	orr.w	r2, r2, #1
 8009166:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 ff71 	bl	800a050 <UART_CheckIdleState>
 800916e:	4603      	mov	r3, r0
}
 8009170:	4618      	mov	r0, r3
 8009172:	3708      	adds	r7, #8
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b08a      	sub	sp, #40	; 0x28
 800917c:	af02      	add	r7, sp, #8
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	60b9      	str	r1, [r7, #8]
 8009182:	603b      	str	r3, [r7, #0]
 8009184:	4613      	mov	r3, r2
 8009186:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800918e:	2b20      	cmp	r3, #32
 8009190:	f040 8083 	bne.w	800929a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d002      	beq.n	80091a0 <HAL_UART_Transmit+0x28>
 800919a:	88fb      	ldrh	r3, [r7, #6]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d101      	bne.n	80091a4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80091a0:	2301      	movs	r3, #1
 80091a2:	e07b      	b.n	800929c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d101      	bne.n	80091b2 <HAL_UART_Transmit+0x3a>
 80091ae:	2302      	movs	r3, #2
 80091b0:	e074      	b.n	800929c <HAL_UART_Transmit+0x124>
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2201      	movs	r2, #1
 80091b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2200      	movs	r2, #0
 80091be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2221      	movs	r2, #33	; 0x21
 80091c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80091ca:	f7fa fce5 	bl	8003b98 <HAL_GetTick>
 80091ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	88fa      	ldrh	r2, [r7, #6]
 80091d4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	88fa      	ldrh	r2, [r7, #6]
 80091dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	689b      	ldr	r3, [r3, #8]
 80091e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091e8:	d108      	bne.n	80091fc <HAL_UART_Transmit+0x84>
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	691b      	ldr	r3, [r3, #16]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d104      	bne.n	80091fc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80091f2:	2300      	movs	r3, #0
 80091f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	61bb      	str	r3, [r7, #24]
 80091fa:	e003      	b.n	8009204 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009200:	2300      	movs	r3, #0
 8009202:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2200      	movs	r2, #0
 8009208:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800920c:	e02c      	b.n	8009268 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	9300      	str	r3, [sp, #0]
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	2200      	movs	r2, #0
 8009216:	2180      	movs	r1, #128	; 0x80
 8009218:	68f8      	ldr	r0, [r7, #12]
 800921a:	f000 ff64 	bl	800a0e6 <UART_WaitOnFlagUntilTimeout>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d001      	beq.n	8009228 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009224:	2303      	movs	r3, #3
 8009226:	e039      	b.n	800929c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d10b      	bne.n	8009246 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	881b      	ldrh	r3, [r3, #0]
 8009232:	461a      	mov	r2, r3
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800923c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	3302      	adds	r3, #2
 8009242:	61bb      	str	r3, [r7, #24]
 8009244:	e007      	b.n	8009256 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009246:	69fb      	ldr	r3, [r7, #28]
 8009248:	781a      	ldrb	r2, [r3, #0]
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009250:	69fb      	ldr	r3, [r7, #28]
 8009252:	3301      	adds	r3, #1
 8009254:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800925c:	b29b      	uxth	r3, r3
 800925e:	3b01      	subs	r3, #1
 8009260:	b29a      	uxth	r2, r3
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800926e:	b29b      	uxth	r3, r3
 8009270:	2b00      	cmp	r3, #0
 8009272:	d1cc      	bne.n	800920e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	9300      	str	r3, [sp, #0]
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	2200      	movs	r2, #0
 800927c:	2140      	movs	r1, #64	; 0x40
 800927e:	68f8      	ldr	r0, [r7, #12]
 8009280:	f000 ff31 	bl	800a0e6 <UART_WaitOnFlagUntilTimeout>
 8009284:	4603      	mov	r3, r0
 8009286:	2b00      	cmp	r3, #0
 8009288:	d001      	beq.n	800928e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800928a:	2303      	movs	r3, #3
 800928c:	e006      	b.n	800929c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2220      	movs	r2, #32
 8009292:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8009296:	2300      	movs	r3, #0
 8009298:	e000      	b.n	800929c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800929a:	2302      	movs	r3, #2
  }
}
 800929c:	4618      	mov	r0, r3
 800929e:	3720      	adds	r7, #32
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b08a      	sub	sp, #40	; 0x28
 80092a8:	af02      	add	r7, sp, #8
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	60b9      	str	r1, [r7, #8]
 80092ae:	603b      	str	r3, [r7, #0]
 80092b0:	4613      	mov	r3, r2
 80092b2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092ba:	2b20      	cmp	r3, #32
 80092bc:	f040 80c0 	bne.w	8009440 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d002      	beq.n	80092cc <HAL_UART_Receive+0x28>
 80092c6:	88fb      	ldrh	r3, [r7, #6]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d101      	bne.n	80092d0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80092cc:	2301      	movs	r3, #1
 80092ce:	e0b8      	b.n	8009442 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d101      	bne.n	80092de <HAL_UART_Receive+0x3a>
 80092da:	2302      	movs	r3, #2
 80092dc:	e0b1      	b.n	8009442 <HAL_UART_Receive+0x19e>
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2201      	movs	r2, #1
 80092e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2200      	movs	r2, #0
 80092ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2222      	movs	r2, #34	; 0x22
 80092f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2200      	movs	r2, #0
 80092fa:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80092fc:	f7fa fc4c 	bl	8003b98 <HAL_GetTick>
 8009300:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	88fa      	ldrh	r2, [r7, #6]
 8009306:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	88fa      	ldrh	r2, [r7, #6]
 800930e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800931a:	d10e      	bne.n	800933a <HAL_UART_Receive+0x96>
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d105      	bne.n	8009330 <HAL_UART_Receive+0x8c>
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f240 12ff 	movw	r2, #511	; 0x1ff
 800932a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800932e:	e02d      	b.n	800938c <HAL_UART_Receive+0xe8>
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	22ff      	movs	r2, #255	; 0xff
 8009334:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009338:	e028      	b.n	800938c <HAL_UART_Receive+0xe8>
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d10d      	bne.n	800935e <HAL_UART_Receive+0xba>
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	691b      	ldr	r3, [r3, #16]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d104      	bne.n	8009354 <HAL_UART_Receive+0xb0>
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	22ff      	movs	r2, #255	; 0xff
 800934e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009352:	e01b      	b.n	800938c <HAL_UART_Receive+0xe8>
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	227f      	movs	r2, #127	; 0x7f
 8009358:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800935c:	e016      	b.n	800938c <HAL_UART_Receive+0xe8>
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009366:	d10d      	bne.n	8009384 <HAL_UART_Receive+0xe0>
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	691b      	ldr	r3, [r3, #16]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d104      	bne.n	800937a <HAL_UART_Receive+0xd6>
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	227f      	movs	r2, #127	; 0x7f
 8009374:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009378:	e008      	b.n	800938c <HAL_UART_Receive+0xe8>
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	223f      	movs	r2, #63	; 0x3f
 800937e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009382:	e003      	b.n	800938c <HAL_UART_Receive+0xe8>
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2200      	movs	r2, #0
 8009388:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009392:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	689b      	ldr	r3, [r3, #8]
 8009398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800939c:	d108      	bne.n	80093b0 <HAL_UART_Receive+0x10c>
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	691b      	ldr	r3, [r3, #16]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d104      	bne.n	80093b0 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80093a6:	2300      	movs	r3, #0
 80093a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	61bb      	str	r3, [r7, #24]
 80093ae:	e003      	b.n	80093b8 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80093b4:	2300      	movs	r3, #0
 80093b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80093c0:	e032      	b.n	8009428 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	9300      	str	r3, [sp, #0]
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	2200      	movs	r2, #0
 80093ca:	2120      	movs	r1, #32
 80093cc:	68f8      	ldr	r0, [r7, #12]
 80093ce:	f000 fe8a 	bl	800a0e6 <UART_WaitOnFlagUntilTimeout>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d001      	beq.n	80093dc <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80093d8:	2303      	movs	r3, #3
 80093da:	e032      	b.n	8009442 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d10c      	bne.n	80093fc <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e8:	b29a      	uxth	r2, r3
 80093ea:	8a7b      	ldrh	r3, [r7, #18]
 80093ec:	4013      	ands	r3, r2
 80093ee:	b29a      	uxth	r2, r3
 80093f0:	69bb      	ldr	r3, [r7, #24]
 80093f2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80093f4:	69bb      	ldr	r3, [r7, #24]
 80093f6:	3302      	adds	r3, #2
 80093f8:	61bb      	str	r3, [r7, #24]
 80093fa:	e00c      	b.n	8009416 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009402:	b2da      	uxtb	r2, r3
 8009404:	8a7b      	ldrh	r3, [r7, #18]
 8009406:	b2db      	uxtb	r3, r3
 8009408:	4013      	ands	r3, r2
 800940a:	b2da      	uxtb	r2, r3
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009410:	69fb      	ldr	r3, [r7, #28]
 8009412:	3301      	adds	r3, #1
 8009414:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800941c:	b29b      	uxth	r3, r3
 800941e:	3b01      	subs	r3, #1
 8009420:	b29a      	uxth	r2, r3
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800942e:	b29b      	uxth	r3, r3
 8009430:	2b00      	cmp	r3, #0
 8009432:	d1c6      	bne.n	80093c2 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2220      	movs	r2, #32
 8009438:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800943c:	2300      	movs	r3, #0
 800943e:	e000      	b.n	8009442 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8009440:	2302      	movs	r3, #2
  }
}
 8009442:	4618      	mov	r0, r3
 8009444:	3720      	adds	r7, #32
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
	...

0800944c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800944c:	b5b0      	push	{r4, r5, r7, lr}
 800944e:	b08e      	sub	sp, #56	; 0x38
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009454:	2300      	movs	r3, #0
 8009456:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	689a      	ldr	r2, [r3, #8]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	431a      	orrs	r2, r3
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	695b      	ldr	r3, [r3, #20]
 8009468:	431a      	orrs	r2, r3
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	69db      	ldr	r3, [r3, #28]
 800946e:	4313      	orrs	r3, r2
 8009470:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	4bbf      	ldr	r3, [pc, #764]	; (8009778 <UART_SetConfig+0x32c>)
 800947a:	4013      	ands	r3, r2
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	6812      	ldr	r2, [r2, #0]
 8009480:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009482:	430b      	orrs	r3, r1
 8009484:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	68da      	ldr	r2, [r3, #12]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	430a      	orrs	r2, r1
 800949a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	699b      	ldr	r3, [r3, #24]
 80094a0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4ab5      	ldr	r2, [pc, #724]	; (800977c <UART_SetConfig+0x330>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d004      	beq.n	80094b6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6a1b      	ldr	r3, [r3, #32]
 80094b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094b2:	4313      	orrs	r3, r2
 80094b4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	689a      	ldr	r2, [r3, #8]
 80094bc:	4bb0      	ldr	r3, [pc, #704]	; (8009780 <UART_SetConfig+0x334>)
 80094be:	4013      	ands	r3, r2
 80094c0:	687a      	ldr	r2, [r7, #4]
 80094c2:	6812      	ldr	r2, [r2, #0]
 80094c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80094c6:	430b      	orrs	r3, r1
 80094c8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d0:	f023 010f 	bic.w	r1, r3, #15
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	430a      	orrs	r2, r1
 80094de:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4aa7      	ldr	r2, [pc, #668]	; (8009784 <UART_SetConfig+0x338>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d176      	bne.n	80095d8 <UART_SetConfig+0x18c>
 80094ea:	4ba7      	ldr	r3, [pc, #668]	; (8009788 <UART_SetConfig+0x33c>)
 80094ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80094f2:	2b28      	cmp	r3, #40	; 0x28
 80094f4:	d86c      	bhi.n	80095d0 <UART_SetConfig+0x184>
 80094f6:	a201      	add	r2, pc, #4	; (adr r2, 80094fc <UART_SetConfig+0xb0>)
 80094f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094fc:	080095a1 	.word	0x080095a1
 8009500:	080095d1 	.word	0x080095d1
 8009504:	080095d1 	.word	0x080095d1
 8009508:	080095d1 	.word	0x080095d1
 800950c:	080095d1 	.word	0x080095d1
 8009510:	080095d1 	.word	0x080095d1
 8009514:	080095d1 	.word	0x080095d1
 8009518:	080095d1 	.word	0x080095d1
 800951c:	080095a9 	.word	0x080095a9
 8009520:	080095d1 	.word	0x080095d1
 8009524:	080095d1 	.word	0x080095d1
 8009528:	080095d1 	.word	0x080095d1
 800952c:	080095d1 	.word	0x080095d1
 8009530:	080095d1 	.word	0x080095d1
 8009534:	080095d1 	.word	0x080095d1
 8009538:	080095d1 	.word	0x080095d1
 800953c:	080095b1 	.word	0x080095b1
 8009540:	080095d1 	.word	0x080095d1
 8009544:	080095d1 	.word	0x080095d1
 8009548:	080095d1 	.word	0x080095d1
 800954c:	080095d1 	.word	0x080095d1
 8009550:	080095d1 	.word	0x080095d1
 8009554:	080095d1 	.word	0x080095d1
 8009558:	080095d1 	.word	0x080095d1
 800955c:	080095b9 	.word	0x080095b9
 8009560:	080095d1 	.word	0x080095d1
 8009564:	080095d1 	.word	0x080095d1
 8009568:	080095d1 	.word	0x080095d1
 800956c:	080095d1 	.word	0x080095d1
 8009570:	080095d1 	.word	0x080095d1
 8009574:	080095d1 	.word	0x080095d1
 8009578:	080095d1 	.word	0x080095d1
 800957c:	080095c1 	.word	0x080095c1
 8009580:	080095d1 	.word	0x080095d1
 8009584:	080095d1 	.word	0x080095d1
 8009588:	080095d1 	.word	0x080095d1
 800958c:	080095d1 	.word	0x080095d1
 8009590:	080095d1 	.word	0x080095d1
 8009594:	080095d1 	.word	0x080095d1
 8009598:	080095d1 	.word	0x080095d1
 800959c:	080095c9 	.word	0x080095c9
 80095a0:	2301      	movs	r3, #1
 80095a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095a6:	e222      	b.n	80099ee <UART_SetConfig+0x5a2>
 80095a8:	2304      	movs	r3, #4
 80095aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095ae:	e21e      	b.n	80099ee <UART_SetConfig+0x5a2>
 80095b0:	2308      	movs	r3, #8
 80095b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095b6:	e21a      	b.n	80099ee <UART_SetConfig+0x5a2>
 80095b8:	2310      	movs	r3, #16
 80095ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095be:	e216      	b.n	80099ee <UART_SetConfig+0x5a2>
 80095c0:	2320      	movs	r3, #32
 80095c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095c6:	e212      	b.n	80099ee <UART_SetConfig+0x5a2>
 80095c8:	2340      	movs	r3, #64	; 0x40
 80095ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095ce:	e20e      	b.n	80099ee <UART_SetConfig+0x5a2>
 80095d0:	2380      	movs	r3, #128	; 0x80
 80095d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095d6:	e20a      	b.n	80099ee <UART_SetConfig+0x5a2>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a6b      	ldr	r2, [pc, #428]	; (800978c <UART_SetConfig+0x340>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d130      	bne.n	8009644 <UART_SetConfig+0x1f8>
 80095e2:	4b69      	ldr	r3, [pc, #420]	; (8009788 <UART_SetConfig+0x33c>)
 80095e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095e6:	f003 0307 	and.w	r3, r3, #7
 80095ea:	2b05      	cmp	r3, #5
 80095ec:	d826      	bhi.n	800963c <UART_SetConfig+0x1f0>
 80095ee:	a201      	add	r2, pc, #4	; (adr r2, 80095f4 <UART_SetConfig+0x1a8>)
 80095f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f4:	0800960d 	.word	0x0800960d
 80095f8:	08009615 	.word	0x08009615
 80095fc:	0800961d 	.word	0x0800961d
 8009600:	08009625 	.word	0x08009625
 8009604:	0800962d 	.word	0x0800962d
 8009608:	08009635 	.word	0x08009635
 800960c:	2300      	movs	r3, #0
 800960e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009612:	e1ec      	b.n	80099ee <UART_SetConfig+0x5a2>
 8009614:	2304      	movs	r3, #4
 8009616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800961a:	e1e8      	b.n	80099ee <UART_SetConfig+0x5a2>
 800961c:	2308      	movs	r3, #8
 800961e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009622:	e1e4      	b.n	80099ee <UART_SetConfig+0x5a2>
 8009624:	2310      	movs	r3, #16
 8009626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800962a:	e1e0      	b.n	80099ee <UART_SetConfig+0x5a2>
 800962c:	2320      	movs	r3, #32
 800962e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009632:	e1dc      	b.n	80099ee <UART_SetConfig+0x5a2>
 8009634:	2340      	movs	r3, #64	; 0x40
 8009636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800963a:	e1d8      	b.n	80099ee <UART_SetConfig+0x5a2>
 800963c:	2380      	movs	r3, #128	; 0x80
 800963e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009642:	e1d4      	b.n	80099ee <UART_SetConfig+0x5a2>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a51      	ldr	r2, [pc, #324]	; (8009790 <UART_SetConfig+0x344>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d130      	bne.n	80096b0 <UART_SetConfig+0x264>
 800964e:	4b4e      	ldr	r3, [pc, #312]	; (8009788 <UART_SetConfig+0x33c>)
 8009650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009652:	f003 0307 	and.w	r3, r3, #7
 8009656:	2b05      	cmp	r3, #5
 8009658:	d826      	bhi.n	80096a8 <UART_SetConfig+0x25c>
 800965a:	a201      	add	r2, pc, #4	; (adr r2, 8009660 <UART_SetConfig+0x214>)
 800965c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009660:	08009679 	.word	0x08009679
 8009664:	08009681 	.word	0x08009681
 8009668:	08009689 	.word	0x08009689
 800966c:	08009691 	.word	0x08009691
 8009670:	08009699 	.word	0x08009699
 8009674:	080096a1 	.word	0x080096a1
 8009678:	2300      	movs	r3, #0
 800967a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800967e:	e1b6      	b.n	80099ee <UART_SetConfig+0x5a2>
 8009680:	2304      	movs	r3, #4
 8009682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009686:	e1b2      	b.n	80099ee <UART_SetConfig+0x5a2>
 8009688:	2308      	movs	r3, #8
 800968a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800968e:	e1ae      	b.n	80099ee <UART_SetConfig+0x5a2>
 8009690:	2310      	movs	r3, #16
 8009692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009696:	e1aa      	b.n	80099ee <UART_SetConfig+0x5a2>
 8009698:	2320      	movs	r3, #32
 800969a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800969e:	e1a6      	b.n	80099ee <UART_SetConfig+0x5a2>
 80096a0:	2340      	movs	r3, #64	; 0x40
 80096a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096a6:	e1a2      	b.n	80099ee <UART_SetConfig+0x5a2>
 80096a8:	2380      	movs	r3, #128	; 0x80
 80096aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ae:	e19e      	b.n	80099ee <UART_SetConfig+0x5a2>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a37      	ldr	r2, [pc, #220]	; (8009794 <UART_SetConfig+0x348>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d130      	bne.n	800971c <UART_SetConfig+0x2d0>
 80096ba:	4b33      	ldr	r3, [pc, #204]	; (8009788 <UART_SetConfig+0x33c>)
 80096bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096be:	f003 0307 	and.w	r3, r3, #7
 80096c2:	2b05      	cmp	r3, #5
 80096c4:	d826      	bhi.n	8009714 <UART_SetConfig+0x2c8>
 80096c6:	a201      	add	r2, pc, #4	; (adr r2, 80096cc <UART_SetConfig+0x280>)
 80096c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096cc:	080096e5 	.word	0x080096e5
 80096d0:	080096ed 	.word	0x080096ed
 80096d4:	080096f5 	.word	0x080096f5
 80096d8:	080096fd 	.word	0x080096fd
 80096dc:	08009705 	.word	0x08009705
 80096e0:	0800970d 	.word	0x0800970d
 80096e4:	2300      	movs	r3, #0
 80096e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ea:	e180      	b.n	80099ee <UART_SetConfig+0x5a2>
 80096ec:	2304      	movs	r3, #4
 80096ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096f2:	e17c      	b.n	80099ee <UART_SetConfig+0x5a2>
 80096f4:	2308      	movs	r3, #8
 80096f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096fa:	e178      	b.n	80099ee <UART_SetConfig+0x5a2>
 80096fc:	2310      	movs	r3, #16
 80096fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009702:	e174      	b.n	80099ee <UART_SetConfig+0x5a2>
 8009704:	2320      	movs	r3, #32
 8009706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800970a:	e170      	b.n	80099ee <UART_SetConfig+0x5a2>
 800970c:	2340      	movs	r3, #64	; 0x40
 800970e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009712:	e16c      	b.n	80099ee <UART_SetConfig+0x5a2>
 8009714:	2380      	movs	r3, #128	; 0x80
 8009716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800971a:	e168      	b.n	80099ee <UART_SetConfig+0x5a2>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a1d      	ldr	r2, [pc, #116]	; (8009798 <UART_SetConfig+0x34c>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d142      	bne.n	80097ac <UART_SetConfig+0x360>
 8009726:	4b18      	ldr	r3, [pc, #96]	; (8009788 <UART_SetConfig+0x33c>)
 8009728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800972a:	f003 0307 	and.w	r3, r3, #7
 800972e:	2b05      	cmp	r3, #5
 8009730:	d838      	bhi.n	80097a4 <UART_SetConfig+0x358>
 8009732:	a201      	add	r2, pc, #4	; (adr r2, 8009738 <UART_SetConfig+0x2ec>)
 8009734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009738:	08009751 	.word	0x08009751
 800973c:	08009759 	.word	0x08009759
 8009740:	08009761 	.word	0x08009761
 8009744:	08009769 	.word	0x08009769
 8009748:	08009771 	.word	0x08009771
 800974c:	0800979d 	.word	0x0800979d
 8009750:	2300      	movs	r3, #0
 8009752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009756:	e14a      	b.n	80099ee <UART_SetConfig+0x5a2>
 8009758:	2304      	movs	r3, #4
 800975a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800975e:	e146      	b.n	80099ee <UART_SetConfig+0x5a2>
 8009760:	2308      	movs	r3, #8
 8009762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009766:	e142      	b.n	80099ee <UART_SetConfig+0x5a2>
 8009768:	2310      	movs	r3, #16
 800976a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800976e:	e13e      	b.n	80099ee <UART_SetConfig+0x5a2>
 8009770:	2320      	movs	r3, #32
 8009772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009776:	e13a      	b.n	80099ee <UART_SetConfig+0x5a2>
 8009778:	cfff69f3 	.word	0xcfff69f3
 800977c:	58000c00 	.word	0x58000c00
 8009780:	11fff4ff 	.word	0x11fff4ff
 8009784:	40011000 	.word	0x40011000
 8009788:	58024400 	.word	0x58024400
 800978c:	40004400 	.word	0x40004400
 8009790:	40004800 	.word	0x40004800
 8009794:	40004c00 	.word	0x40004c00
 8009798:	40005000 	.word	0x40005000
 800979c:	2340      	movs	r3, #64	; 0x40
 800979e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097a2:	e124      	b.n	80099ee <UART_SetConfig+0x5a2>
 80097a4:	2380      	movs	r3, #128	; 0x80
 80097a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097aa:	e120      	b.n	80099ee <UART_SetConfig+0x5a2>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4acc      	ldr	r2, [pc, #816]	; (8009ae4 <UART_SetConfig+0x698>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d176      	bne.n	80098a4 <UART_SetConfig+0x458>
 80097b6:	4bcc      	ldr	r3, [pc, #816]	; (8009ae8 <UART_SetConfig+0x69c>)
 80097b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80097be:	2b28      	cmp	r3, #40	; 0x28
 80097c0:	d86c      	bhi.n	800989c <UART_SetConfig+0x450>
 80097c2:	a201      	add	r2, pc, #4	; (adr r2, 80097c8 <UART_SetConfig+0x37c>)
 80097c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c8:	0800986d 	.word	0x0800986d
 80097cc:	0800989d 	.word	0x0800989d
 80097d0:	0800989d 	.word	0x0800989d
 80097d4:	0800989d 	.word	0x0800989d
 80097d8:	0800989d 	.word	0x0800989d
 80097dc:	0800989d 	.word	0x0800989d
 80097e0:	0800989d 	.word	0x0800989d
 80097e4:	0800989d 	.word	0x0800989d
 80097e8:	08009875 	.word	0x08009875
 80097ec:	0800989d 	.word	0x0800989d
 80097f0:	0800989d 	.word	0x0800989d
 80097f4:	0800989d 	.word	0x0800989d
 80097f8:	0800989d 	.word	0x0800989d
 80097fc:	0800989d 	.word	0x0800989d
 8009800:	0800989d 	.word	0x0800989d
 8009804:	0800989d 	.word	0x0800989d
 8009808:	0800987d 	.word	0x0800987d
 800980c:	0800989d 	.word	0x0800989d
 8009810:	0800989d 	.word	0x0800989d
 8009814:	0800989d 	.word	0x0800989d
 8009818:	0800989d 	.word	0x0800989d
 800981c:	0800989d 	.word	0x0800989d
 8009820:	0800989d 	.word	0x0800989d
 8009824:	0800989d 	.word	0x0800989d
 8009828:	08009885 	.word	0x08009885
 800982c:	0800989d 	.word	0x0800989d
 8009830:	0800989d 	.word	0x0800989d
 8009834:	0800989d 	.word	0x0800989d
 8009838:	0800989d 	.word	0x0800989d
 800983c:	0800989d 	.word	0x0800989d
 8009840:	0800989d 	.word	0x0800989d
 8009844:	0800989d 	.word	0x0800989d
 8009848:	0800988d 	.word	0x0800988d
 800984c:	0800989d 	.word	0x0800989d
 8009850:	0800989d 	.word	0x0800989d
 8009854:	0800989d 	.word	0x0800989d
 8009858:	0800989d 	.word	0x0800989d
 800985c:	0800989d 	.word	0x0800989d
 8009860:	0800989d 	.word	0x0800989d
 8009864:	0800989d 	.word	0x0800989d
 8009868:	08009895 	.word	0x08009895
 800986c:	2301      	movs	r3, #1
 800986e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009872:	e0bc      	b.n	80099ee <UART_SetConfig+0x5a2>
 8009874:	2304      	movs	r3, #4
 8009876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800987a:	e0b8      	b.n	80099ee <UART_SetConfig+0x5a2>
 800987c:	2308      	movs	r3, #8
 800987e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009882:	e0b4      	b.n	80099ee <UART_SetConfig+0x5a2>
 8009884:	2310      	movs	r3, #16
 8009886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800988a:	e0b0      	b.n	80099ee <UART_SetConfig+0x5a2>
 800988c:	2320      	movs	r3, #32
 800988e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009892:	e0ac      	b.n	80099ee <UART_SetConfig+0x5a2>
 8009894:	2340      	movs	r3, #64	; 0x40
 8009896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800989a:	e0a8      	b.n	80099ee <UART_SetConfig+0x5a2>
 800989c:	2380      	movs	r3, #128	; 0x80
 800989e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098a2:	e0a4      	b.n	80099ee <UART_SetConfig+0x5a2>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a90      	ldr	r2, [pc, #576]	; (8009aec <UART_SetConfig+0x6a0>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d130      	bne.n	8009910 <UART_SetConfig+0x4c4>
 80098ae:	4b8e      	ldr	r3, [pc, #568]	; (8009ae8 <UART_SetConfig+0x69c>)
 80098b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098b2:	f003 0307 	and.w	r3, r3, #7
 80098b6:	2b05      	cmp	r3, #5
 80098b8:	d826      	bhi.n	8009908 <UART_SetConfig+0x4bc>
 80098ba:	a201      	add	r2, pc, #4	; (adr r2, 80098c0 <UART_SetConfig+0x474>)
 80098bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c0:	080098d9 	.word	0x080098d9
 80098c4:	080098e1 	.word	0x080098e1
 80098c8:	080098e9 	.word	0x080098e9
 80098cc:	080098f1 	.word	0x080098f1
 80098d0:	080098f9 	.word	0x080098f9
 80098d4:	08009901 	.word	0x08009901
 80098d8:	2300      	movs	r3, #0
 80098da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098de:	e086      	b.n	80099ee <UART_SetConfig+0x5a2>
 80098e0:	2304      	movs	r3, #4
 80098e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098e6:	e082      	b.n	80099ee <UART_SetConfig+0x5a2>
 80098e8:	2308      	movs	r3, #8
 80098ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098ee:	e07e      	b.n	80099ee <UART_SetConfig+0x5a2>
 80098f0:	2310      	movs	r3, #16
 80098f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098f6:	e07a      	b.n	80099ee <UART_SetConfig+0x5a2>
 80098f8:	2320      	movs	r3, #32
 80098fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098fe:	e076      	b.n	80099ee <UART_SetConfig+0x5a2>
 8009900:	2340      	movs	r3, #64	; 0x40
 8009902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009906:	e072      	b.n	80099ee <UART_SetConfig+0x5a2>
 8009908:	2380      	movs	r3, #128	; 0x80
 800990a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800990e:	e06e      	b.n	80099ee <UART_SetConfig+0x5a2>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a76      	ldr	r2, [pc, #472]	; (8009af0 <UART_SetConfig+0x6a4>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d130      	bne.n	800997c <UART_SetConfig+0x530>
 800991a:	4b73      	ldr	r3, [pc, #460]	; (8009ae8 <UART_SetConfig+0x69c>)
 800991c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800991e:	f003 0307 	and.w	r3, r3, #7
 8009922:	2b05      	cmp	r3, #5
 8009924:	d826      	bhi.n	8009974 <UART_SetConfig+0x528>
 8009926:	a201      	add	r2, pc, #4	; (adr r2, 800992c <UART_SetConfig+0x4e0>)
 8009928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800992c:	08009945 	.word	0x08009945
 8009930:	0800994d 	.word	0x0800994d
 8009934:	08009955 	.word	0x08009955
 8009938:	0800995d 	.word	0x0800995d
 800993c:	08009965 	.word	0x08009965
 8009940:	0800996d 	.word	0x0800996d
 8009944:	2300      	movs	r3, #0
 8009946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800994a:	e050      	b.n	80099ee <UART_SetConfig+0x5a2>
 800994c:	2304      	movs	r3, #4
 800994e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009952:	e04c      	b.n	80099ee <UART_SetConfig+0x5a2>
 8009954:	2308      	movs	r3, #8
 8009956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800995a:	e048      	b.n	80099ee <UART_SetConfig+0x5a2>
 800995c:	2310      	movs	r3, #16
 800995e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009962:	e044      	b.n	80099ee <UART_SetConfig+0x5a2>
 8009964:	2320      	movs	r3, #32
 8009966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800996a:	e040      	b.n	80099ee <UART_SetConfig+0x5a2>
 800996c:	2340      	movs	r3, #64	; 0x40
 800996e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009972:	e03c      	b.n	80099ee <UART_SetConfig+0x5a2>
 8009974:	2380      	movs	r3, #128	; 0x80
 8009976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800997a:	e038      	b.n	80099ee <UART_SetConfig+0x5a2>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a5c      	ldr	r2, [pc, #368]	; (8009af4 <UART_SetConfig+0x6a8>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d130      	bne.n	80099e8 <UART_SetConfig+0x59c>
 8009986:	4b58      	ldr	r3, [pc, #352]	; (8009ae8 <UART_SetConfig+0x69c>)
 8009988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800998a:	f003 0307 	and.w	r3, r3, #7
 800998e:	2b05      	cmp	r3, #5
 8009990:	d826      	bhi.n	80099e0 <UART_SetConfig+0x594>
 8009992:	a201      	add	r2, pc, #4	; (adr r2, 8009998 <UART_SetConfig+0x54c>)
 8009994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009998:	080099b1 	.word	0x080099b1
 800999c:	080099b9 	.word	0x080099b9
 80099a0:	080099c1 	.word	0x080099c1
 80099a4:	080099c9 	.word	0x080099c9
 80099a8:	080099d1 	.word	0x080099d1
 80099ac:	080099d9 	.word	0x080099d9
 80099b0:	2302      	movs	r3, #2
 80099b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099b6:	e01a      	b.n	80099ee <UART_SetConfig+0x5a2>
 80099b8:	2304      	movs	r3, #4
 80099ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099be:	e016      	b.n	80099ee <UART_SetConfig+0x5a2>
 80099c0:	2308      	movs	r3, #8
 80099c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099c6:	e012      	b.n	80099ee <UART_SetConfig+0x5a2>
 80099c8:	2310      	movs	r3, #16
 80099ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ce:	e00e      	b.n	80099ee <UART_SetConfig+0x5a2>
 80099d0:	2320      	movs	r3, #32
 80099d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099d6:	e00a      	b.n	80099ee <UART_SetConfig+0x5a2>
 80099d8:	2340      	movs	r3, #64	; 0x40
 80099da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099de:	e006      	b.n	80099ee <UART_SetConfig+0x5a2>
 80099e0:	2380      	movs	r3, #128	; 0x80
 80099e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099e6:	e002      	b.n	80099ee <UART_SetConfig+0x5a2>
 80099e8:	2380      	movs	r3, #128	; 0x80
 80099ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a40      	ldr	r2, [pc, #256]	; (8009af4 <UART_SetConfig+0x6a8>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	f040 80ef 	bne.w	8009bd8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80099fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80099fe:	2b20      	cmp	r3, #32
 8009a00:	dc46      	bgt.n	8009a90 <UART_SetConfig+0x644>
 8009a02:	2b02      	cmp	r3, #2
 8009a04:	f2c0 8081 	blt.w	8009b0a <UART_SetConfig+0x6be>
 8009a08:	3b02      	subs	r3, #2
 8009a0a:	2b1e      	cmp	r3, #30
 8009a0c:	d87d      	bhi.n	8009b0a <UART_SetConfig+0x6be>
 8009a0e:	a201      	add	r2, pc, #4	; (adr r2, 8009a14 <UART_SetConfig+0x5c8>)
 8009a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a14:	08009a97 	.word	0x08009a97
 8009a18:	08009b0b 	.word	0x08009b0b
 8009a1c:	08009a9f 	.word	0x08009a9f
 8009a20:	08009b0b 	.word	0x08009b0b
 8009a24:	08009b0b 	.word	0x08009b0b
 8009a28:	08009b0b 	.word	0x08009b0b
 8009a2c:	08009aaf 	.word	0x08009aaf
 8009a30:	08009b0b 	.word	0x08009b0b
 8009a34:	08009b0b 	.word	0x08009b0b
 8009a38:	08009b0b 	.word	0x08009b0b
 8009a3c:	08009b0b 	.word	0x08009b0b
 8009a40:	08009b0b 	.word	0x08009b0b
 8009a44:	08009b0b 	.word	0x08009b0b
 8009a48:	08009b0b 	.word	0x08009b0b
 8009a4c:	08009abf 	.word	0x08009abf
 8009a50:	08009b0b 	.word	0x08009b0b
 8009a54:	08009b0b 	.word	0x08009b0b
 8009a58:	08009b0b 	.word	0x08009b0b
 8009a5c:	08009b0b 	.word	0x08009b0b
 8009a60:	08009b0b 	.word	0x08009b0b
 8009a64:	08009b0b 	.word	0x08009b0b
 8009a68:	08009b0b 	.word	0x08009b0b
 8009a6c:	08009b0b 	.word	0x08009b0b
 8009a70:	08009b0b 	.word	0x08009b0b
 8009a74:	08009b0b 	.word	0x08009b0b
 8009a78:	08009b0b 	.word	0x08009b0b
 8009a7c:	08009b0b 	.word	0x08009b0b
 8009a80:	08009b0b 	.word	0x08009b0b
 8009a84:	08009b0b 	.word	0x08009b0b
 8009a88:	08009b0b 	.word	0x08009b0b
 8009a8c:	08009afd 	.word	0x08009afd
 8009a90:	2b40      	cmp	r3, #64	; 0x40
 8009a92:	d036      	beq.n	8009b02 <UART_SetConfig+0x6b6>
 8009a94:	e039      	b.n	8009b0a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009a96:	f7fe fa1b 	bl	8007ed0 <HAL_RCCEx_GetD3PCLK1Freq>
 8009a9a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009a9c:	e03b      	b.n	8009b16 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a9e:	f107 0314 	add.w	r3, r7, #20
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f7fe fa2a 	bl	8007efc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009aa8:	69bb      	ldr	r3, [r7, #24]
 8009aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009aac:	e033      	b.n	8009b16 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009aae:	f107 0308 	add.w	r3, r7, #8
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7fe fb76 	bl	80081a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009abc:	e02b      	b.n	8009b16 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009abe:	4b0a      	ldr	r3, [pc, #40]	; (8009ae8 <UART_SetConfig+0x69c>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f003 0320 	and.w	r3, r3, #32
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d009      	beq.n	8009ade <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009aca:	4b07      	ldr	r3, [pc, #28]	; (8009ae8 <UART_SetConfig+0x69c>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	08db      	lsrs	r3, r3, #3
 8009ad0:	f003 0303 	and.w	r3, r3, #3
 8009ad4:	4a08      	ldr	r2, [pc, #32]	; (8009af8 <UART_SetConfig+0x6ac>)
 8009ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8009ada:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009adc:	e01b      	b.n	8009b16 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8009ade:	4b06      	ldr	r3, [pc, #24]	; (8009af8 <UART_SetConfig+0x6ac>)
 8009ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ae2:	e018      	b.n	8009b16 <UART_SetConfig+0x6ca>
 8009ae4:	40011400 	.word	0x40011400
 8009ae8:	58024400 	.word	0x58024400
 8009aec:	40007800 	.word	0x40007800
 8009af0:	40007c00 	.word	0x40007c00
 8009af4:	58000c00 	.word	0x58000c00
 8009af8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009afc:	4bc4      	ldr	r3, [pc, #784]	; (8009e10 <UART_SetConfig+0x9c4>)
 8009afe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b00:	e009      	b.n	8009b16 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b08:	e005      	b.n	8009b16 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009b14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	f000 81da 	beq.w	8009ed2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b22:	4abc      	ldr	r2, [pc, #752]	; (8009e14 <UART_SetConfig+0x9c8>)
 8009b24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b28:	461a      	mov	r2, r3
 8009b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b30:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	685a      	ldr	r2, [r3, #4]
 8009b36:	4613      	mov	r3, r2
 8009b38:	005b      	lsls	r3, r3, #1
 8009b3a:	4413      	add	r3, r2
 8009b3c:	6a3a      	ldr	r2, [r7, #32]
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d305      	bcc.n	8009b4e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b48:	6a3a      	ldr	r2, [r7, #32]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d903      	bls.n	8009b56 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009b54:	e1bd      	b.n	8009ed2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f04f 0100 	mov.w	r1, #0
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b62:	4aac      	ldr	r2, [pc, #688]	; (8009e14 <UART_SetConfig+0x9c8>)
 8009b64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b68:	b29a      	uxth	r2, r3
 8009b6a:	f04f 0300 	mov.w	r3, #0
 8009b6e:	f7f6 fc0f 	bl	8000390 <__aeabi_uldivmod>
 8009b72:	4602      	mov	r2, r0
 8009b74:	460b      	mov	r3, r1
 8009b76:	4610      	mov	r0, r2
 8009b78:	4619      	mov	r1, r3
 8009b7a:	f04f 0200 	mov.w	r2, #0
 8009b7e:	f04f 0300 	mov.w	r3, #0
 8009b82:	020b      	lsls	r3, r1, #8
 8009b84:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009b88:	0202      	lsls	r2, r0, #8
 8009b8a:	6879      	ldr	r1, [r7, #4]
 8009b8c:	6849      	ldr	r1, [r1, #4]
 8009b8e:	0849      	lsrs	r1, r1, #1
 8009b90:	4608      	mov	r0, r1
 8009b92:	f04f 0100 	mov.w	r1, #0
 8009b96:	1814      	adds	r4, r2, r0
 8009b98:	eb43 0501 	adc.w	r5, r3, r1
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	f04f 0300 	mov.w	r3, #0
 8009ba6:	4620      	mov	r0, r4
 8009ba8:	4629      	mov	r1, r5
 8009baa:	f7f6 fbf1 	bl	8000390 <__aeabi_uldivmod>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	4613      	mov	r3, r2
 8009bb4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bbc:	d308      	bcc.n	8009bd0 <UART_SetConfig+0x784>
 8009bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bc4:	d204      	bcs.n	8009bd0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bcc:	60da      	str	r2, [r3, #12]
 8009bce:	e180      	b.n	8009ed2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009bd6:	e17c      	b.n	8009ed2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	69db      	ldr	r3, [r3, #28]
 8009bdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009be0:	f040 80bf 	bne.w	8009d62 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8009be4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009be8:	2b20      	cmp	r3, #32
 8009bea:	dc49      	bgt.n	8009c80 <UART_SetConfig+0x834>
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	db7c      	blt.n	8009cea <UART_SetConfig+0x89e>
 8009bf0:	2b20      	cmp	r3, #32
 8009bf2:	d87a      	bhi.n	8009cea <UART_SetConfig+0x89e>
 8009bf4:	a201      	add	r2, pc, #4	; (adr r2, 8009bfc <UART_SetConfig+0x7b0>)
 8009bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bfa:	bf00      	nop
 8009bfc:	08009c87 	.word	0x08009c87
 8009c00:	08009c8f 	.word	0x08009c8f
 8009c04:	08009ceb 	.word	0x08009ceb
 8009c08:	08009ceb 	.word	0x08009ceb
 8009c0c:	08009c97 	.word	0x08009c97
 8009c10:	08009ceb 	.word	0x08009ceb
 8009c14:	08009ceb 	.word	0x08009ceb
 8009c18:	08009ceb 	.word	0x08009ceb
 8009c1c:	08009ca7 	.word	0x08009ca7
 8009c20:	08009ceb 	.word	0x08009ceb
 8009c24:	08009ceb 	.word	0x08009ceb
 8009c28:	08009ceb 	.word	0x08009ceb
 8009c2c:	08009ceb 	.word	0x08009ceb
 8009c30:	08009ceb 	.word	0x08009ceb
 8009c34:	08009ceb 	.word	0x08009ceb
 8009c38:	08009ceb 	.word	0x08009ceb
 8009c3c:	08009cb7 	.word	0x08009cb7
 8009c40:	08009ceb 	.word	0x08009ceb
 8009c44:	08009ceb 	.word	0x08009ceb
 8009c48:	08009ceb 	.word	0x08009ceb
 8009c4c:	08009ceb 	.word	0x08009ceb
 8009c50:	08009ceb 	.word	0x08009ceb
 8009c54:	08009ceb 	.word	0x08009ceb
 8009c58:	08009ceb 	.word	0x08009ceb
 8009c5c:	08009ceb 	.word	0x08009ceb
 8009c60:	08009ceb 	.word	0x08009ceb
 8009c64:	08009ceb 	.word	0x08009ceb
 8009c68:	08009ceb 	.word	0x08009ceb
 8009c6c:	08009ceb 	.word	0x08009ceb
 8009c70:	08009ceb 	.word	0x08009ceb
 8009c74:	08009ceb 	.word	0x08009ceb
 8009c78:	08009ceb 	.word	0x08009ceb
 8009c7c:	08009cdd 	.word	0x08009cdd
 8009c80:	2b40      	cmp	r3, #64	; 0x40
 8009c82:	d02e      	beq.n	8009ce2 <UART_SetConfig+0x896>
 8009c84:	e031      	b.n	8009cea <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c86:	f7fd f9b7 	bl	8006ff8 <HAL_RCC_GetPCLK1Freq>
 8009c8a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009c8c:	e033      	b.n	8009cf6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c8e:	f7fd f9c9 	bl	8007024 <HAL_RCC_GetPCLK2Freq>
 8009c92:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009c94:	e02f      	b.n	8009cf6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c96:	f107 0314 	add.w	r3, r7, #20
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7fe f92e 	bl	8007efc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ca0:	69bb      	ldr	r3, [r7, #24]
 8009ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ca4:	e027      	b.n	8009cf6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ca6:	f107 0308 	add.w	r3, r7, #8
 8009caa:	4618      	mov	r0, r3
 8009cac:	f7fe fa7a 	bl	80081a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009cb4:	e01f      	b.n	8009cf6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009cb6:	4b58      	ldr	r3, [pc, #352]	; (8009e18 <UART_SetConfig+0x9cc>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f003 0320 	and.w	r3, r3, #32
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d009      	beq.n	8009cd6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009cc2:	4b55      	ldr	r3, [pc, #340]	; (8009e18 <UART_SetConfig+0x9cc>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	08db      	lsrs	r3, r3, #3
 8009cc8:	f003 0303 	and.w	r3, r3, #3
 8009ccc:	4a53      	ldr	r2, [pc, #332]	; (8009e1c <UART_SetConfig+0x9d0>)
 8009cce:	fa22 f303 	lsr.w	r3, r2, r3
 8009cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009cd4:	e00f      	b.n	8009cf6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8009cd6:	4b51      	ldr	r3, [pc, #324]	; (8009e1c <UART_SetConfig+0x9d0>)
 8009cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009cda:	e00c      	b.n	8009cf6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009cdc:	4b4c      	ldr	r3, [pc, #304]	; (8009e10 <UART_SetConfig+0x9c4>)
 8009cde:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ce0:	e009      	b.n	8009cf6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ce8:	e005      	b.n	8009cf6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8009cea:	2300      	movs	r3, #0
 8009cec:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009cf4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	f000 80ea 	beq.w	8009ed2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d02:	4a44      	ldr	r2, [pc, #272]	; (8009e14 <UART_SetConfig+0x9c8>)
 8009d04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d08:	461a      	mov	r2, r3
 8009d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d10:	005a      	lsls	r2, r3, #1
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	085b      	lsrs	r3, r3, #1
 8009d18:	441a      	add	r2, r3
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d22:	b29b      	uxth	r3, r3
 8009d24:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d28:	2b0f      	cmp	r3, #15
 8009d2a:	d916      	bls.n	8009d5a <UART_SetConfig+0x90e>
 8009d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d32:	d212      	bcs.n	8009d5a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	f023 030f 	bic.w	r3, r3, #15
 8009d3c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d40:	085b      	lsrs	r3, r3, #1
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	f003 0307 	and.w	r3, r3, #7
 8009d48:	b29a      	uxth	r2, r3
 8009d4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009d56:	60da      	str	r2, [r3, #12]
 8009d58:	e0bb      	b.n	8009ed2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009d60:	e0b7      	b.n	8009ed2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009d62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009d66:	2b20      	cmp	r3, #32
 8009d68:	dc4a      	bgt.n	8009e00 <UART_SetConfig+0x9b4>
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	f2c0 8086 	blt.w	8009e7c <UART_SetConfig+0xa30>
 8009d70:	2b20      	cmp	r3, #32
 8009d72:	f200 8083 	bhi.w	8009e7c <UART_SetConfig+0xa30>
 8009d76:	a201      	add	r2, pc, #4	; (adr r2, 8009d7c <UART_SetConfig+0x930>)
 8009d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d7c:	08009e07 	.word	0x08009e07
 8009d80:	08009e21 	.word	0x08009e21
 8009d84:	08009e7d 	.word	0x08009e7d
 8009d88:	08009e7d 	.word	0x08009e7d
 8009d8c:	08009e29 	.word	0x08009e29
 8009d90:	08009e7d 	.word	0x08009e7d
 8009d94:	08009e7d 	.word	0x08009e7d
 8009d98:	08009e7d 	.word	0x08009e7d
 8009d9c:	08009e39 	.word	0x08009e39
 8009da0:	08009e7d 	.word	0x08009e7d
 8009da4:	08009e7d 	.word	0x08009e7d
 8009da8:	08009e7d 	.word	0x08009e7d
 8009dac:	08009e7d 	.word	0x08009e7d
 8009db0:	08009e7d 	.word	0x08009e7d
 8009db4:	08009e7d 	.word	0x08009e7d
 8009db8:	08009e7d 	.word	0x08009e7d
 8009dbc:	08009e49 	.word	0x08009e49
 8009dc0:	08009e7d 	.word	0x08009e7d
 8009dc4:	08009e7d 	.word	0x08009e7d
 8009dc8:	08009e7d 	.word	0x08009e7d
 8009dcc:	08009e7d 	.word	0x08009e7d
 8009dd0:	08009e7d 	.word	0x08009e7d
 8009dd4:	08009e7d 	.word	0x08009e7d
 8009dd8:	08009e7d 	.word	0x08009e7d
 8009ddc:	08009e7d 	.word	0x08009e7d
 8009de0:	08009e7d 	.word	0x08009e7d
 8009de4:	08009e7d 	.word	0x08009e7d
 8009de8:	08009e7d 	.word	0x08009e7d
 8009dec:	08009e7d 	.word	0x08009e7d
 8009df0:	08009e7d 	.word	0x08009e7d
 8009df4:	08009e7d 	.word	0x08009e7d
 8009df8:	08009e7d 	.word	0x08009e7d
 8009dfc:	08009e6f 	.word	0x08009e6f
 8009e00:	2b40      	cmp	r3, #64	; 0x40
 8009e02:	d037      	beq.n	8009e74 <UART_SetConfig+0xa28>
 8009e04:	e03a      	b.n	8009e7c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e06:	f7fd f8f7 	bl	8006ff8 <HAL_RCC_GetPCLK1Freq>
 8009e0a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009e0c:	e03c      	b.n	8009e88 <UART_SetConfig+0xa3c>
 8009e0e:	bf00      	nop
 8009e10:	003d0900 	.word	0x003d0900
 8009e14:	0800e468 	.word	0x0800e468
 8009e18:	58024400 	.word	0x58024400
 8009e1c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e20:	f7fd f900 	bl	8007024 <HAL_RCC_GetPCLK2Freq>
 8009e24:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009e26:	e02f      	b.n	8009e88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e28:	f107 0314 	add.w	r3, r7, #20
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f7fe f865 	bl	8007efc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009e32:	69bb      	ldr	r3, [r7, #24]
 8009e34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e36:	e027      	b.n	8009e88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e38:	f107 0308 	add.w	r3, r7, #8
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f7fe f9b1 	bl	80081a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e46:	e01f      	b.n	8009e88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e48:	4b2c      	ldr	r3, [pc, #176]	; (8009efc <UART_SetConfig+0xab0>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f003 0320 	and.w	r3, r3, #32
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d009      	beq.n	8009e68 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e54:	4b29      	ldr	r3, [pc, #164]	; (8009efc <UART_SetConfig+0xab0>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	08db      	lsrs	r3, r3, #3
 8009e5a:	f003 0303 	and.w	r3, r3, #3
 8009e5e:	4a28      	ldr	r2, [pc, #160]	; (8009f00 <UART_SetConfig+0xab4>)
 8009e60:	fa22 f303 	lsr.w	r3, r2, r3
 8009e64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e66:	e00f      	b.n	8009e88 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8009e68:	4b25      	ldr	r3, [pc, #148]	; (8009f00 <UART_SetConfig+0xab4>)
 8009e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e6c:	e00c      	b.n	8009e88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e6e:	4b25      	ldr	r3, [pc, #148]	; (8009f04 <UART_SetConfig+0xab8>)
 8009e70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e72:	e009      	b.n	8009e88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e7a:	e005      	b.n	8009e88 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009e80:	2301      	movs	r3, #1
 8009e82:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009e86:	bf00      	nop
    }

    if (pclk != 0U)
 8009e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d021      	beq.n	8009ed2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e92:	4a1d      	ldr	r2, [pc, #116]	; (8009f08 <UART_SetConfig+0xabc>)
 8009e94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e98:	461a      	mov	r2, r3
 8009e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e9c:	fbb3 f2f2 	udiv	r2, r3, r2
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	085b      	lsrs	r3, r3, #1
 8009ea6:	441a      	add	r2, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eb0:	b29b      	uxth	r3, r3
 8009eb2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb6:	2b0f      	cmp	r3, #15
 8009eb8:	d908      	bls.n	8009ecc <UART_SetConfig+0xa80>
 8009eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ec0:	d204      	bcs.n	8009ecc <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ec8:	60da      	str	r2, [r3, #12]
 8009eca:	e002      	b.n	8009ed2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2201      	movs	r2, #1
 8009ede:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2200      	movs	r2, #0
 8009eec:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009eee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3738      	adds	r7, #56	; 0x38
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bdb0      	pop	{r4, r5, r7, pc}
 8009efa:	bf00      	nop
 8009efc:	58024400 	.word	0x58024400
 8009f00:	03d09000 	.word	0x03d09000
 8009f04:	003d0900 	.word	0x003d0900
 8009f08:	0800e468 	.word	0x0800e468

08009f0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b083      	sub	sp, #12
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f18:	f003 0301 	and.w	r3, r3, #1
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d00a      	beq.n	8009f36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	430a      	orrs	r2, r1
 8009f34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f3a:	f003 0302 	and.w	r3, r3, #2
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d00a      	beq.n	8009f58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	430a      	orrs	r2, r1
 8009f56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f5c:	f003 0304 	and.w	r3, r3, #4
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d00a      	beq.n	8009f7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	430a      	orrs	r2, r1
 8009f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f7e:	f003 0308 	and.w	r3, r3, #8
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d00a      	beq.n	8009f9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	430a      	orrs	r2, r1
 8009f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fa0:	f003 0310 	and.w	r3, r3, #16
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d00a      	beq.n	8009fbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	689b      	ldr	r3, [r3, #8]
 8009fae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	430a      	orrs	r2, r1
 8009fbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fc2:	f003 0320 	and.w	r3, r3, #32
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d00a      	beq.n	8009fe0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	689b      	ldr	r3, [r3, #8]
 8009fd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	430a      	orrs	r2, r1
 8009fde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d01a      	beq.n	800a022 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	430a      	orrs	r2, r1
 800a000:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a006:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a00a:	d10a      	bne.n	800a022 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	430a      	orrs	r2, r1
 800a020:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d00a      	beq.n	800a044 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	430a      	orrs	r2, r1
 800a042:	605a      	str	r2, [r3, #4]
  }
}
 800a044:	bf00      	nop
 800a046:	370c      	adds	r7, #12
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr

0800a050 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b086      	sub	sp, #24
 800a054:	af02      	add	r7, sp, #8
 800a056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2200      	movs	r2, #0
 800a05c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a060:	f7f9 fd9a 	bl	8003b98 <HAL_GetTick>
 800a064:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f003 0308 	and.w	r3, r3, #8
 800a070:	2b08      	cmp	r3, #8
 800a072:	d10e      	bne.n	800a092 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a074:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a078:	9300      	str	r3, [sp, #0]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2200      	movs	r2, #0
 800a07e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 f82f 	bl	800a0e6 <UART_WaitOnFlagUntilTimeout>
 800a088:	4603      	mov	r3, r0
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d001      	beq.n	800a092 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a08e:	2303      	movs	r3, #3
 800a090:	e025      	b.n	800a0de <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f003 0304 	and.w	r3, r3, #4
 800a09c:	2b04      	cmp	r3, #4
 800a09e:	d10e      	bne.n	800a0be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a0a4:	9300      	str	r3, [sp, #0]
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 f819 	bl	800a0e6 <UART_WaitOnFlagUntilTimeout>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d001      	beq.n	800a0be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0ba:	2303      	movs	r3, #3
 800a0bc:	e00f      	b.n	800a0de <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2220      	movs	r2, #32
 800a0c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2220      	movs	r2, #32
 800a0ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a0dc:	2300      	movs	r3, #0
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b084      	sub	sp, #16
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	60f8      	str	r0, [r7, #12]
 800a0ee:	60b9      	str	r1, [r7, #8]
 800a0f0:	603b      	str	r3, [r7, #0]
 800a0f2:	4613      	mov	r3, r2
 800a0f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0f6:	e062      	b.n	800a1be <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0f8:	69bb      	ldr	r3, [r7, #24]
 800a0fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0fe:	d05e      	beq.n	800a1be <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a100:	f7f9 fd4a 	bl	8003b98 <HAL_GetTick>
 800a104:	4602      	mov	r2, r0
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	1ad3      	subs	r3, r2, r3
 800a10a:	69ba      	ldr	r2, [r7, #24]
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d302      	bcc.n	800a116 <UART_WaitOnFlagUntilTimeout+0x30>
 800a110:	69bb      	ldr	r3, [r7, #24]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d11d      	bne.n	800a152 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a124:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	689a      	ldr	r2, [r3, #8]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f022 0201 	bic.w	r2, r2, #1
 800a134:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2220      	movs	r2, #32
 800a13a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2220      	movs	r2, #32
 800a142:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2200      	movs	r2, #0
 800a14a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a14e:	2303      	movs	r3, #3
 800a150:	e045      	b.n	800a1de <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f003 0304 	and.w	r3, r3, #4
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d02e      	beq.n	800a1be <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	69db      	ldr	r3, [r3, #28]
 800a166:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a16a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a16e:	d126      	bne.n	800a1be <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a178:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a188:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	689a      	ldr	r2, [r3, #8]
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f022 0201 	bic.w	r2, r2, #1
 800a198:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2220      	movs	r2, #32
 800a19e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	2220      	movs	r2, #32
 800a1a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2220      	movs	r2, #32
 800a1ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a1ba:	2303      	movs	r3, #3
 800a1bc:	e00f      	b.n	800a1de <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	69da      	ldr	r2, [r3, #28]
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	4013      	ands	r3, r2
 800a1c8:	68ba      	ldr	r2, [r7, #8]
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	bf0c      	ite	eq
 800a1ce:	2301      	moveq	r3, #1
 800a1d0:	2300      	movne	r3, #0
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	79fb      	ldrb	r3, [r7, #7]
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d08d      	beq.n	800a0f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a1dc:	2300      	movs	r3, #0
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3710      	adds	r7, #16
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}

0800a1e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a1e6:	b480      	push	{r7}
 800a1e8:	b085      	sub	sp, #20
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d101      	bne.n	800a1fc <HAL_UARTEx_DisableFifoMode+0x16>
 800a1f8:	2302      	movs	r3, #2
 800a1fa:	e027      	b.n	800a24c <HAL_UARTEx_DisableFifoMode+0x66>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2201      	movs	r2, #1
 800a200:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2224      	movs	r2, #36	; 0x24
 800a208:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f022 0201 	bic.w	r2, r2, #1
 800a222:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a22a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2200      	movs	r2, #0
 800a230:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	68fa      	ldr	r2, [r7, #12]
 800a238:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2220      	movs	r2, #32
 800a23e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2200      	movs	r2, #0
 800a246:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a24a:	2300      	movs	r3, #0
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3714      	adds	r7, #20
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d101      	bne.n	800a270 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a26c:	2302      	movs	r3, #2
 800a26e:	e02d      	b.n	800a2cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2201      	movs	r2, #1
 800a274:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2224      	movs	r2, #36	; 0x24
 800a27c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f022 0201 	bic.w	r2, r2, #1
 800a296:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	689b      	ldr	r3, [r3, #8]
 800a29e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	683a      	ldr	r2, [r7, #0]
 800a2a8:	430a      	orrs	r2, r1
 800a2aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 f84f 	bl	800a350 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	68fa      	ldr	r2, [r7, #12]
 800a2b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2220      	movs	r2, #32
 800a2be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a2ca:	2300      	movs	r3, #0
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3710      	adds	r7, #16
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b084      	sub	sp, #16
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d101      	bne.n	800a2ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a2e8:	2302      	movs	r3, #2
 800a2ea:	e02d      	b.n	800a348 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2224      	movs	r2, #36	; 0x24
 800a2f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f022 0201 	bic.w	r2, r2, #1
 800a312:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	689b      	ldr	r3, [r3, #8]
 800a31a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	683a      	ldr	r2, [r7, #0]
 800a324:	430a      	orrs	r2, r1
 800a326:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 f811 	bl	800a350 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	68fa      	ldr	r2, [r7, #12]
 800a334:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2220      	movs	r2, #32
 800a33a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a346:	2300      	movs	r3, #0
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3710      	adds	r7, #16
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a350:	b480      	push	{r7}
 800a352:	b085      	sub	sp, #20
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d108      	bne.n	800a372 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2201      	movs	r2, #1
 800a364:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2201      	movs	r2, #1
 800a36c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a370:	e031      	b.n	800a3d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a372:	2310      	movs	r3, #16
 800a374:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a376:	2310      	movs	r3, #16
 800a378:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	689b      	ldr	r3, [r3, #8]
 800a380:	0e5b      	lsrs	r3, r3, #25
 800a382:	b2db      	uxtb	r3, r3
 800a384:	f003 0307 	and.w	r3, r3, #7
 800a388:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	689b      	ldr	r3, [r3, #8]
 800a390:	0f5b      	lsrs	r3, r3, #29
 800a392:	b2db      	uxtb	r3, r3
 800a394:	f003 0307 	and.w	r3, r3, #7
 800a398:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a39a:	7bbb      	ldrb	r3, [r7, #14]
 800a39c:	7b3a      	ldrb	r2, [r7, #12]
 800a39e:	4911      	ldr	r1, [pc, #68]	; (800a3e4 <UARTEx_SetNbDataToProcess+0x94>)
 800a3a0:	5c8a      	ldrb	r2, [r1, r2]
 800a3a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a3a6:	7b3a      	ldrb	r2, [r7, #12]
 800a3a8:	490f      	ldr	r1, [pc, #60]	; (800a3e8 <UARTEx_SetNbDataToProcess+0x98>)
 800a3aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a3ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3b0:	b29a      	uxth	r2, r3
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a3b8:	7bfb      	ldrb	r3, [r7, #15]
 800a3ba:	7b7a      	ldrb	r2, [r7, #13]
 800a3bc:	4909      	ldr	r1, [pc, #36]	; (800a3e4 <UARTEx_SetNbDataToProcess+0x94>)
 800a3be:	5c8a      	ldrb	r2, [r1, r2]
 800a3c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a3c4:	7b7a      	ldrb	r2, [r7, #13]
 800a3c6:	4908      	ldr	r1, [pc, #32]	; (800a3e8 <UARTEx_SetNbDataToProcess+0x98>)
 800a3c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a3ca:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3ce:	b29a      	uxth	r2, r3
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a3d6:	bf00      	nop
 800a3d8:	3714      	adds	r7, #20
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr
 800a3e2:	bf00      	nop
 800a3e4:	0800e480 	.word	0x0800e480
 800a3e8:	0800e488 	.word	0x0800e488

0800a3ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a3ec:	b084      	sub	sp, #16
 800a3ee:	b580      	push	{r7, lr}
 800a3f0:	b084      	sub	sp, #16
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
 800a3f6:	f107 001c 	add.w	r0, r7, #28
 800a3fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a400:	2b01      	cmp	r3, #1
 800a402:	d120      	bne.n	800a446 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a408:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	68da      	ldr	r2, [r3, #12]
 800a414:	4b2a      	ldr	r3, [pc, #168]	; (800a4c0 <USB_CoreInit+0xd4>)
 800a416:	4013      	ands	r3, r2
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	68db      	ldr	r3, [r3, #12]
 800a420:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	d105      	bne.n	800a43a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	68db      	ldr	r3, [r3, #12]
 800a432:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f000 fa60 	bl	800a900 <USB_CoreReset>
 800a440:	4603      	mov	r3, r0
 800a442:	73fb      	strb	r3, [r7, #15]
 800a444:	e01a      	b.n	800a47c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	68db      	ldr	r3, [r3, #12]
 800a44a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f000 fa54 	bl	800a900 <USB_CoreReset>
 800a458:	4603      	mov	r3, r0
 800a45a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a45c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d106      	bne.n	800a470 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a466:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	639a      	str	r2, [r3, #56]	; 0x38
 800a46e:	e005      	b.n	800a47c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a474:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47e:	2b01      	cmp	r3, #1
 800a480:	d116      	bne.n	800a4b0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a486:	b29a      	uxth	r2, r3
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a490:	4b0c      	ldr	r3, [pc, #48]	; (800a4c4 <USB_CoreInit+0xd8>)
 800a492:	4313      	orrs	r3, r2
 800a494:	687a      	ldr	r2, [r7, #4]
 800a496:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	f043 0206 	orr.w	r2, r3, #6
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	f043 0220 	orr.w	r2, r3, #32
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a4b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3710      	adds	r7, #16
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a4bc:	b004      	add	sp, #16
 800a4be:	4770      	bx	lr
 800a4c0:	ffbdffbf 	.word	0xffbdffbf
 800a4c4:	03ee0000 	.word	0x03ee0000

0800a4c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b083      	sub	sp, #12
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	f023 0201 	bic.w	r2, r3, #1
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a4dc:	2300      	movs	r3, #0
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	370c      	adds	r7, #12
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr

0800a4ea <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a4ea:	b580      	push	{r7, lr}
 800a4ec:	b082      	sub	sp, #8
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	68db      	ldr	r3, [r3, #12]
 800a4fa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a502:	78fb      	ldrb	r3, [r7, #3]
 800a504:	2b01      	cmp	r3, #1
 800a506:	d106      	bne.n	800a516 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	68db      	ldr	r3, [r3, #12]
 800a50c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	60da      	str	r2, [r3, #12]
 800a514:	e00b      	b.n	800a52e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a516:	78fb      	ldrb	r3, [r7, #3]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d106      	bne.n	800a52a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	60da      	str	r2, [r3, #12]
 800a528:	e001      	b.n	800a52e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a52a:	2301      	movs	r3, #1
 800a52c:	e003      	b.n	800a536 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a52e:	2032      	movs	r0, #50	; 0x32
 800a530:	f7f9 fb3e 	bl	8003bb0 <HAL_Delay>

  return HAL_OK;
 800a534:	2300      	movs	r3, #0
}
 800a536:	4618      	mov	r0, r3
 800a538:	3708      	adds	r7, #8
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
	...

0800a540 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a540:	b084      	sub	sp, #16
 800a542:	b580      	push	{r7, lr}
 800a544:	b086      	sub	sp, #24
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
 800a54a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a54e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a552:	2300      	movs	r3, #0
 800a554:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a55a:	2300      	movs	r3, #0
 800a55c:	613b      	str	r3, [r7, #16]
 800a55e:	e009      	b.n	800a574 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	3340      	adds	r3, #64	; 0x40
 800a566:	009b      	lsls	r3, r3, #2
 800a568:	4413      	add	r3, r2
 800a56a:	2200      	movs	r2, #0
 800a56c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	3301      	adds	r3, #1
 800a572:	613b      	str	r3, [r7, #16]
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	2b0e      	cmp	r3, #14
 800a578:	d9f2      	bls.n	800a560 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a57a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d11c      	bne.n	800a5ba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	68fa      	ldr	r2, [r7, #12]
 800a58a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a58e:	f043 0302 	orr.w	r3, r3, #2
 800a592:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a598:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	601a      	str	r2, [r3, #0]
 800a5b8:	e005      	b.n	800a5c6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5d8:	4619      	mov	r1, r3
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	680b      	ldr	r3, [r1, #0]
 800a5e4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d10c      	bne.n	800a606 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d104      	bne.n	800a5fc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a5f2:	2100      	movs	r1, #0
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f000 f949 	bl	800a88c <USB_SetDevSpeed>
 800a5fa:	e008      	b.n	800a60e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a5fc:	2101      	movs	r1, #1
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 f944 	bl	800a88c <USB_SetDevSpeed>
 800a604:	e003      	b.n	800a60e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a606:	2103      	movs	r1, #3
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f000 f93f 	bl	800a88c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a60e:	2110      	movs	r1, #16
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 f8f3 	bl	800a7fc <USB_FlushTxFifo>
 800a616:	4603      	mov	r3, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d001      	beq.n	800a620 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a61c:	2301      	movs	r3, #1
 800a61e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f000 f911 	bl	800a848 <USB_FlushRxFifo>
 800a626:	4603      	mov	r3, r0
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d001      	beq.n	800a630 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a62c:	2301      	movs	r3, #1
 800a62e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a636:	461a      	mov	r2, r3
 800a638:	2300      	movs	r3, #0
 800a63a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a642:	461a      	mov	r2, r3
 800a644:	2300      	movs	r3, #0
 800a646:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a64e:	461a      	mov	r2, r3
 800a650:	2300      	movs	r3, #0
 800a652:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a654:	2300      	movs	r3, #0
 800a656:	613b      	str	r3, [r7, #16]
 800a658:	e043      	b.n	800a6e2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	015a      	lsls	r2, r3, #5
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	4413      	add	r3, r2
 800a662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a66c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a670:	d118      	bne.n	800a6a4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d10a      	bne.n	800a68e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	015a      	lsls	r2, r3, #5
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	4413      	add	r3, r2
 800a680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a684:	461a      	mov	r2, r3
 800a686:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a68a:	6013      	str	r3, [r2, #0]
 800a68c:	e013      	b.n	800a6b6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	015a      	lsls	r2, r3, #5
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	4413      	add	r3, r2
 800a696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a69a:	461a      	mov	r2, r3
 800a69c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a6a0:	6013      	str	r3, [r2, #0]
 800a6a2:	e008      	b.n	800a6b6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	015a      	lsls	r2, r3, #5
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	4413      	add	r3, r2
 800a6ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	015a      	lsls	r2, r3, #5
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	4413      	add	r3, r2
 800a6be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	015a      	lsls	r2, r3, #5
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a6da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	3301      	adds	r3, #1
 800a6e0:	613b      	str	r3, [r7, #16]
 800a6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e4:	693a      	ldr	r2, [r7, #16]
 800a6e6:	429a      	cmp	r2, r3
 800a6e8:	d3b7      	bcc.n	800a65a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	613b      	str	r3, [r7, #16]
 800a6ee:	e043      	b.n	800a778 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	015a      	lsls	r2, r3, #5
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	4413      	add	r3, r2
 800a6f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a702:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a706:	d118      	bne.n	800a73a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d10a      	bne.n	800a724 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	015a      	lsls	r2, r3, #5
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	4413      	add	r3, r2
 800a716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a71a:	461a      	mov	r2, r3
 800a71c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a720:	6013      	str	r3, [r2, #0]
 800a722:	e013      	b.n	800a74c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	015a      	lsls	r2, r3, #5
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	4413      	add	r3, r2
 800a72c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a730:	461a      	mov	r2, r3
 800a732:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a736:	6013      	str	r3, [r2, #0]
 800a738:	e008      	b.n	800a74c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	015a      	lsls	r2, r3, #5
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	4413      	add	r3, r2
 800a742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a746:	461a      	mov	r2, r3
 800a748:	2300      	movs	r3, #0
 800a74a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	015a      	lsls	r2, r3, #5
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	4413      	add	r3, r2
 800a754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a758:	461a      	mov	r2, r3
 800a75a:	2300      	movs	r3, #0
 800a75c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	015a      	lsls	r2, r3, #5
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	4413      	add	r3, r2
 800a766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a76a:	461a      	mov	r2, r3
 800a76c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a770:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	3301      	adds	r3, #1
 800a776:	613b      	str	r3, [r7, #16]
 800a778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77a:	693a      	ldr	r2, [r7, #16]
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d3b7      	bcc.n	800a6f0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a786:	691b      	ldr	r3, [r3, #16]
 800a788:	68fa      	ldr	r2, [r7, #12]
 800a78a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a78e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a792:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2200      	movs	r2, #0
 800a798:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a7a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d105      	bne.n	800a7b4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	699b      	ldr	r3, [r3, #24]
 800a7ac:	f043 0210 	orr.w	r2, r3, #16
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	699a      	ldr	r2, [r3, #24]
 800a7b8:	4b0e      	ldr	r3, [pc, #56]	; (800a7f4 <USB_DevInit+0x2b4>)
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	687a      	ldr	r2, [r7, #4]
 800a7be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a7c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d005      	beq.n	800a7d2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	699b      	ldr	r3, [r3, #24]
 800a7ca:	f043 0208 	orr.w	r2, r3, #8
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a7d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d105      	bne.n	800a7e4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	699a      	ldr	r2, [r3, #24]
 800a7dc:	4b06      	ldr	r3, [pc, #24]	; (800a7f8 <USB_DevInit+0x2b8>)
 800a7de:	4313      	orrs	r3, r2
 800a7e0:	687a      	ldr	r2, [r7, #4]
 800a7e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a7e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3718      	adds	r7, #24
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a7f0:	b004      	add	sp, #16
 800a7f2:	4770      	bx	lr
 800a7f4:	803c3800 	.word	0x803c3800
 800a7f8:	40000004 	.word	0x40000004

0800a7fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b085      	sub	sp, #20
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a806:	2300      	movs	r3, #0
 800a808:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	019b      	lsls	r3, r3, #6
 800a80e:	f043 0220 	orr.w	r2, r3, #32
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	3301      	adds	r3, #1
 800a81a:	60fb      	str	r3, [r7, #12]
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	4a09      	ldr	r2, [pc, #36]	; (800a844 <USB_FlushTxFifo+0x48>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d901      	bls.n	800a828 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a824:	2303      	movs	r3, #3
 800a826:	e006      	b.n	800a836 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	691b      	ldr	r3, [r3, #16]
 800a82c:	f003 0320 	and.w	r3, r3, #32
 800a830:	2b20      	cmp	r3, #32
 800a832:	d0f0      	beq.n	800a816 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a834:	2300      	movs	r3, #0
}
 800a836:	4618      	mov	r0, r3
 800a838:	3714      	adds	r7, #20
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr
 800a842:	bf00      	nop
 800a844:	00030d40 	.word	0x00030d40

0800a848 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a848:	b480      	push	{r7}
 800a84a:	b085      	sub	sp, #20
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a850:	2300      	movs	r3, #0
 800a852:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2210      	movs	r2, #16
 800a858:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	3301      	adds	r3, #1
 800a85e:	60fb      	str	r3, [r7, #12]
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	4a09      	ldr	r2, [pc, #36]	; (800a888 <USB_FlushRxFifo+0x40>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d901      	bls.n	800a86c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a868:	2303      	movs	r3, #3
 800a86a:	e006      	b.n	800a87a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	691b      	ldr	r3, [r3, #16]
 800a870:	f003 0310 	and.w	r3, r3, #16
 800a874:	2b10      	cmp	r3, #16
 800a876:	d0f0      	beq.n	800a85a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a878:	2300      	movs	r3, #0
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3714      	adds	r7, #20
 800a87e:	46bd      	mov	sp, r7
 800a880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a884:	4770      	bx	lr
 800a886:	bf00      	nop
 800a888:	00030d40 	.word	0x00030d40

0800a88c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b085      	sub	sp, #20
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	460b      	mov	r3, r1
 800a896:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	78fb      	ldrb	r3, [r7, #3]
 800a8a6:	68f9      	ldr	r1, [r7, #12]
 800a8a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a8b0:	2300      	movs	r3, #0
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3714      	adds	r7, #20
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr

0800a8be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a8be:	b480      	push	{r7}
 800a8c0:	b085      	sub	sp, #20
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	68fa      	ldr	r2, [r7, #12]
 800a8d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a8d8:	f023 0303 	bic.w	r3, r3, #3
 800a8dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	68fa      	ldr	r2, [r7, #12]
 800a8e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8ec:	f043 0302 	orr.w	r3, r3, #2
 800a8f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a8f2:	2300      	movs	r3, #0
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3714      	adds	r7, #20
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr

0800a900 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a900:	b480      	push	{r7}
 800a902:	b085      	sub	sp, #20
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a908:	2300      	movs	r3, #0
 800a90a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	3301      	adds	r3, #1
 800a910:	60fb      	str	r3, [r7, #12]
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	4a13      	ldr	r2, [pc, #76]	; (800a964 <USB_CoreReset+0x64>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d901      	bls.n	800a91e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a91a:	2303      	movs	r3, #3
 800a91c:	e01b      	b.n	800a956 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	691b      	ldr	r3, [r3, #16]
 800a922:	2b00      	cmp	r3, #0
 800a924:	daf2      	bge.n	800a90c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a926:	2300      	movs	r3, #0
 800a928:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	691b      	ldr	r3, [r3, #16]
 800a92e:	f043 0201 	orr.w	r2, r3, #1
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	3301      	adds	r3, #1
 800a93a:	60fb      	str	r3, [r7, #12]
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	4a09      	ldr	r2, [pc, #36]	; (800a964 <USB_CoreReset+0x64>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d901      	bls.n	800a948 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a944:	2303      	movs	r3, #3
 800a946:	e006      	b.n	800a956 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	691b      	ldr	r3, [r3, #16]
 800a94c:	f003 0301 	and.w	r3, r3, #1
 800a950:	2b01      	cmp	r3, #1
 800a952:	d0f0      	beq.n	800a936 <USB_CoreReset+0x36>

  return HAL_OK;
 800a954:	2300      	movs	r3, #0
}
 800a956:	4618      	mov	r0, r3
 800a958:	3714      	adds	r7, #20
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr
 800a962:	bf00      	nop
 800a964:	00030d40 	.word	0x00030d40

0800a968 <__errno>:
 800a968:	4b01      	ldr	r3, [pc, #4]	; (800a970 <__errno+0x8>)
 800a96a:	6818      	ldr	r0, [r3, #0]
 800a96c:	4770      	bx	lr
 800a96e:	bf00      	nop
 800a970:	24000010 	.word	0x24000010

0800a974 <__libc_init_array>:
 800a974:	b570      	push	{r4, r5, r6, lr}
 800a976:	4d0d      	ldr	r5, [pc, #52]	; (800a9ac <__libc_init_array+0x38>)
 800a978:	4c0d      	ldr	r4, [pc, #52]	; (800a9b0 <__libc_init_array+0x3c>)
 800a97a:	1b64      	subs	r4, r4, r5
 800a97c:	10a4      	asrs	r4, r4, #2
 800a97e:	2600      	movs	r6, #0
 800a980:	42a6      	cmp	r6, r4
 800a982:	d109      	bne.n	800a998 <__libc_init_array+0x24>
 800a984:	4d0b      	ldr	r5, [pc, #44]	; (800a9b4 <__libc_init_array+0x40>)
 800a986:	4c0c      	ldr	r4, [pc, #48]	; (800a9b8 <__libc_init_array+0x44>)
 800a988:	f003 fb34 	bl	800dff4 <_init>
 800a98c:	1b64      	subs	r4, r4, r5
 800a98e:	10a4      	asrs	r4, r4, #2
 800a990:	2600      	movs	r6, #0
 800a992:	42a6      	cmp	r6, r4
 800a994:	d105      	bne.n	800a9a2 <__libc_init_array+0x2e>
 800a996:	bd70      	pop	{r4, r5, r6, pc}
 800a998:	f855 3b04 	ldr.w	r3, [r5], #4
 800a99c:	4798      	blx	r3
 800a99e:	3601      	adds	r6, #1
 800a9a0:	e7ee      	b.n	800a980 <__libc_init_array+0xc>
 800a9a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9a6:	4798      	blx	r3
 800a9a8:	3601      	adds	r6, #1
 800a9aa:	e7f2      	b.n	800a992 <__libc_init_array+0x1e>
 800a9ac:	080101a8 	.word	0x080101a8
 800a9b0:	080101a8 	.word	0x080101a8
 800a9b4:	080101a8 	.word	0x080101a8
 800a9b8:	080101ac 	.word	0x080101ac

0800a9bc <memcpy>:
 800a9bc:	440a      	add	r2, r1
 800a9be:	4291      	cmp	r1, r2
 800a9c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9c4:	d100      	bne.n	800a9c8 <memcpy+0xc>
 800a9c6:	4770      	bx	lr
 800a9c8:	b510      	push	{r4, lr}
 800a9ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9d2:	4291      	cmp	r1, r2
 800a9d4:	d1f9      	bne.n	800a9ca <memcpy+0xe>
 800a9d6:	bd10      	pop	{r4, pc}

0800a9d8 <memset>:
 800a9d8:	4402      	add	r2, r0
 800a9da:	4603      	mov	r3, r0
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d100      	bne.n	800a9e2 <memset+0xa>
 800a9e0:	4770      	bx	lr
 800a9e2:	f803 1b01 	strb.w	r1, [r3], #1
 800a9e6:	e7f9      	b.n	800a9dc <memset+0x4>

0800a9e8 <__cvt>:
 800a9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9ea:	ed2d 8b02 	vpush	{d8}
 800a9ee:	eeb0 8b40 	vmov.f64	d8, d0
 800a9f2:	b085      	sub	sp, #20
 800a9f4:	4617      	mov	r7, r2
 800a9f6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a9f8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a9fa:	ee18 2a90 	vmov	r2, s17
 800a9fe:	f025 0520 	bic.w	r5, r5, #32
 800aa02:	2a00      	cmp	r2, #0
 800aa04:	bfb6      	itet	lt
 800aa06:	222d      	movlt	r2, #45	; 0x2d
 800aa08:	2200      	movge	r2, #0
 800aa0a:	eeb1 8b40 	vneglt.f64	d8, d0
 800aa0e:	2d46      	cmp	r5, #70	; 0x46
 800aa10:	460c      	mov	r4, r1
 800aa12:	701a      	strb	r2, [r3, #0]
 800aa14:	d004      	beq.n	800aa20 <__cvt+0x38>
 800aa16:	2d45      	cmp	r5, #69	; 0x45
 800aa18:	d100      	bne.n	800aa1c <__cvt+0x34>
 800aa1a:	3401      	adds	r4, #1
 800aa1c:	2102      	movs	r1, #2
 800aa1e:	e000      	b.n	800aa22 <__cvt+0x3a>
 800aa20:	2103      	movs	r1, #3
 800aa22:	ab03      	add	r3, sp, #12
 800aa24:	9301      	str	r3, [sp, #4]
 800aa26:	ab02      	add	r3, sp, #8
 800aa28:	9300      	str	r3, [sp, #0]
 800aa2a:	4622      	mov	r2, r4
 800aa2c:	4633      	mov	r3, r6
 800aa2e:	eeb0 0b48 	vmov.f64	d0, d8
 800aa32:	f000 febd 	bl	800b7b0 <_dtoa_r>
 800aa36:	2d47      	cmp	r5, #71	; 0x47
 800aa38:	d109      	bne.n	800aa4e <__cvt+0x66>
 800aa3a:	07fb      	lsls	r3, r7, #31
 800aa3c:	d407      	bmi.n	800aa4e <__cvt+0x66>
 800aa3e:	9b03      	ldr	r3, [sp, #12]
 800aa40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa42:	1a1b      	subs	r3, r3, r0
 800aa44:	6013      	str	r3, [r2, #0]
 800aa46:	b005      	add	sp, #20
 800aa48:	ecbd 8b02 	vpop	{d8}
 800aa4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa4e:	2d46      	cmp	r5, #70	; 0x46
 800aa50:	eb00 0204 	add.w	r2, r0, r4
 800aa54:	d10c      	bne.n	800aa70 <__cvt+0x88>
 800aa56:	7803      	ldrb	r3, [r0, #0]
 800aa58:	2b30      	cmp	r3, #48	; 0x30
 800aa5a:	d107      	bne.n	800aa6c <__cvt+0x84>
 800aa5c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800aa60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa64:	bf1c      	itt	ne
 800aa66:	f1c4 0401 	rsbne	r4, r4, #1
 800aa6a:	6034      	strne	r4, [r6, #0]
 800aa6c:	6833      	ldr	r3, [r6, #0]
 800aa6e:	441a      	add	r2, r3
 800aa70:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800aa74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa78:	bf08      	it	eq
 800aa7a:	9203      	streq	r2, [sp, #12]
 800aa7c:	2130      	movs	r1, #48	; 0x30
 800aa7e:	9b03      	ldr	r3, [sp, #12]
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d2dc      	bcs.n	800aa3e <__cvt+0x56>
 800aa84:	1c5c      	adds	r4, r3, #1
 800aa86:	9403      	str	r4, [sp, #12]
 800aa88:	7019      	strb	r1, [r3, #0]
 800aa8a:	e7f8      	b.n	800aa7e <__cvt+0x96>

0800aa8c <__exponent>:
 800aa8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa8e:	4603      	mov	r3, r0
 800aa90:	2900      	cmp	r1, #0
 800aa92:	bfb8      	it	lt
 800aa94:	4249      	neglt	r1, r1
 800aa96:	f803 2b02 	strb.w	r2, [r3], #2
 800aa9a:	bfb4      	ite	lt
 800aa9c:	222d      	movlt	r2, #45	; 0x2d
 800aa9e:	222b      	movge	r2, #43	; 0x2b
 800aaa0:	2909      	cmp	r1, #9
 800aaa2:	7042      	strb	r2, [r0, #1]
 800aaa4:	dd2a      	ble.n	800aafc <__exponent+0x70>
 800aaa6:	f10d 0407 	add.w	r4, sp, #7
 800aaaa:	46a4      	mov	ip, r4
 800aaac:	270a      	movs	r7, #10
 800aaae:	46a6      	mov	lr, r4
 800aab0:	460a      	mov	r2, r1
 800aab2:	fb91 f6f7 	sdiv	r6, r1, r7
 800aab6:	fb07 1516 	mls	r5, r7, r6, r1
 800aaba:	3530      	adds	r5, #48	; 0x30
 800aabc:	2a63      	cmp	r2, #99	; 0x63
 800aabe:	f104 34ff 	add.w	r4, r4, #4294967295
 800aac2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800aac6:	4631      	mov	r1, r6
 800aac8:	dcf1      	bgt.n	800aaae <__exponent+0x22>
 800aaca:	3130      	adds	r1, #48	; 0x30
 800aacc:	f1ae 0502 	sub.w	r5, lr, #2
 800aad0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800aad4:	1c44      	adds	r4, r0, #1
 800aad6:	4629      	mov	r1, r5
 800aad8:	4561      	cmp	r1, ip
 800aada:	d30a      	bcc.n	800aaf2 <__exponent+0x66>
 800aadc:	f10d 0209 	add.w	r2, sp, #9
 800aae0:	eba2 020e 	sub.w	r2, r2, lr
 800aae4:	4565      	cmp	r5, ip
 800aae6:	bf88      	it	hi
 800aae8:	2200      	movhi	r2, #0
 800aaea:	4413      	add	r3, r2
 800aaec:	1a18      	subs	r0, r3, r0
 800aaee:	b003      	add	sp, #12
 800aaf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aaf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aaf6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800aafa:	e7ed      	b.n	800aad8 <__exponent+0x4c>
 800aafc:	2330      	movs	r3, #48	; 0x30
 800aafe:	3130      	adds	r1, #48	; 0x30
 800ab00:	7083      	strb	r3, [r0, #2]
 800ab02:	70c1      	strb	r1, [r0, #3]
 800ab04:	1d03      	adds	r3, r0, #4
 800ab06:	e7f1      	b.n	800aaec <__exponent+0x60>

0800ab08 <_printf_float>:
 800ab08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab0c:	b08b      	sub	sp, #44	; 0x2c
 800ab0e:	460c      	mov	r4, r1
 800ab10:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800ab14:	4616      	mov	r6, r2
 800ab16:	461f      	mov	r7, r3
 800ab18:	4605      	mov	r5, r0
 800ab1a:	f001 fd83 	bl	800c624 <_localeconv_r>
 800ab1e:	f8d0 b000 	ldr.w	fp, [r0]
 800ab22:	4658      	mov	r0, fp
 800ab24:	f7f5 fbdc 	bl	80002e0 <strlen>
 800ab28:	2300      	movs	r3, #0
 800ab2a:	9308      	str	r3, [sp, #32]
 800ab2c:	f8d8 3000 	ldr.w	r3, [r8]
 800ab30:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ab34:	6822      	ldr	r2, [r4, #0]
 800ab36:	3307      	adds	r3, #7
 800ab38:	f023 0307 	bic.w	r3, r3, #7
 800ab3c:	f103 0108 	add.w	r1, r3, #8
 800ab40:	f8c8 1000 	str.w	r1, [r8]
 800ab44:	4682      	mov	sl, r0
 800ab46:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ab4a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800ab4e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800adb0 <_printf_float+0x2a8>
 800ab52:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800ab56:	eeb0 6bc0 	vabs.f64	d6, d0
 800ab5a:	eeb4 6b47 	vcmp.f64	d6, d7
 800ab5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab62:	dd24      	ble.n	800abae <_printf_float+0xa6>
 800ab64:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ab68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab6c:	d502      	bpl.n	800ab74 <_printf_float+0x6c>
 800ab6e:	232d      	movs	r3, #45	; 0x2d
 800ab70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab74:	4b90      	ldr	r3, [pc, #576]	; (800adb8 <_printf_float+0x2b0>)
 800ab76:	4891      	ldr	r0, [pc, #580]	; (800adbc <_printf_float+0x2b4>)
 800ab78:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ab7c:	bf94      	ite	ls
 800ab7e:	4698      	movls	r8, r3
 800ab80:	4680      	movhi	r8, r0
 800ab82:	2303      	movs	r3, #3
 800ab84:	6123      	str	r3, [r4, #16]
 800ab86:	f022 0204 	bic.w	r2, r2, #4
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	6022      	str	r2, [r4, #0]
 800ab8e:	9304      	str	r3, [sp, #16]
 800ab90:	9700      	str	r7, [sp, #0]
 800ab92:	4633      	mov	r3, r6
 800ab94:	aa09      	add	r2, sp, #36	; 0x24
 800ab96:	4621      	mov	r1, r4
 800ab98:	4628      	mov	r0, r5
 800ab9a:	f000 f9d3 	bl	800af44 <_printf_common>
 800ab9e:	3001      	adds	r0, #1
 800aba0:	f040 808a 	bne.w	800acb8 <_printf_float+0x1b0>
 800aba4:	f04f 30ff 	mov.w	r0, #4294967295
 800aba8:	b00b      	add	sp, #44	; 0x2c
 800abaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abae:	eeb4 0b40 	vcmp.f64	d0, d0
 800abb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abb6:	d709      	bvc.n	800abcc <_printf_float+0xc4>
 800abb8:	ee10 3a90 	vmov	r3, s1
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	bfbc      	itt	lt
 800abc0:	232d      	movlt	r3, #45	; 0x2d
 800abc2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800abc6:	487e      	ldr	r0, [pc, #504]	; (800adc0 <_printf_float+0x2b8>)
 800abc8:	4b7e      	ldr	r3, [pc, #504]	; (800adc4 <_printf_float+0x2bc>)
 800abca:	e7d5      	b.n	800ab78 <_printf_float+0x70>
 800abcc:	6863      	ldr	r3, [r4, #4]
 800abce:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800abd2:	9104      	str	r1, [sp, #16]
 800abd4:	1c59      	adds	r1, r3, #1
 800abd6:	d13c      	bne.n	800ac52 <_printf_float+0x14a>
 800abd8:	2306      	movs	r3, #6
 800abda:	6063      	str	r3, [r4, #4]
 800abdc:	2300      	movs	r3, #0
 800abde:	9303      	str	r3, [sp, #12]
 800abe0:	ab08      	add	r3, sp, #32
 800abe2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800abe6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800abea:	ab07      	add	r3, sp, #28
 800abec:	6861      	ldr	r1, [r4, #4]
 800abee:	9300      	str	r3, [sp, #0]
 800abf0:	6022      	str	r2, [r4, #0]
 800abf2:	f10d 031b 	add.w	r3, sp, #27
 800abf6:	4628      	mov	r0, r5
 800abf8:	f7ff fef6 	bl	800a9e8 <__cvt>
 800abfc:	9b04      	ldr	r3, [sp, #16]
 800abfe:	9907      	ldr	r1, [sp, #28]
 800ac00:	2b47      	cmp	r3, #71	; 0x47
 800ac02:	4680      	mov	r8, r0
 800ac04:	d108      	bne.n	800ac18 <_printf_float+0x110>
 800ac06:	1cc8      	adds	r0, r1, #3
 800ac08:	db02      	blt.n	800ac10 <_printf_float+0x108>
 800ac0a:	6863      	ldr	r3, [r4, #4]
 800ac0c:	4299      	cmp	r1, r3
 800ac0e:	dd41      	ble.n	800ac94 <_printf_float+0x18c>
 800ac10:	f1a9 0902 	sub.w	r9, r9, #2
 800ac14:	fa5f f989 	uxtb.w	r9, r9
 800ac18:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ac1c:	d820      	bhi.n	800ac60 <_printf_float+0x158>
 800ac1e:	3901      	subs	r1, #1
 800ac20:	464a      	mov	r2, r9
 800ac22:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ac26:	9107      	str	r1, [sp, #28]
 800ac28:	f7ff ff30 	bl	800aa8c <__exponent>
 800ac2c:	9a08      	ldr	r2, [sp, #32]
 800ac2e:	9004      	str	r0, [sp, #16]
 800ac30:	1813      	adds	r3, r2, r0
 800ac32:	2a01      	cmp	r2, #1
 800ac34:	6123      	str	r3, [r4, #16]
 800ac36:	dc02      	bgt.n	800ac3e <_printf_float+0x136>
 800ac38:	6822      	ldr	r2, [r4, #0]
 800ac3a:	07d2      	lsls	r2, r2, #31
 800ac3c:	d501      	bpl.n	800ac42 <_printf_float+0x13a>
 800ac3e:	3301      	adds	r3, #1
 800ac40:	6123      	str	r3, [r4, #16]
 800ac42:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d0a2      	beq.n	800ab90 <_printf_float+0x88>
 800ac4a:	232d      	movs	r3, #45	; 0x2d
 800ac4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac50:	e79e      	b.n	800ab90 <_printf_float+0x88>
 800ac52:	9904      	ldr	r1, [sp, #16]
 800ac54:	2947      	cmp	r1, #71	; 0x47
 800ac56:	d1c1      	bne.n	800abdc <_printf_float+0xd4>
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d1bf      	bne.n	800abdc <_printf_float+0xd4>
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	e7bc      	b.n	800abda <_printf_float+0xd2>
 800ac60:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800ac64:	d118      	bne.n	800ac98 <_printf_float+0x190>
 800ac66:	2900      	cmp	r1, #0
 800ac68:	6863      	ldr	r3, [r4, #4]
 800ac6a:	dd0b      	ble.n	800ac84 <_printf_float+0x17c>
 800ac6c:	6121      	str	r1, [r4, #16]
 800ac6e:	b913      	cbnz	r3, 800ac76 <_printf_float+0x16e>
 800ac70:	6822      	ldr	r2, [r4, #0]
 800ac72:	07d0      	lsls	r0, r2, #31
 800ac74:	d502      	bpl.n	800ac7c <_printf_float+0x174>
 800ac76:	3301      	adds	r3, #1
 800ac78:	440b      	add	r3, r1
 800ac7a:	6123      	str	r3, [r4, #16]
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	65a1      	str	r1, [r4, #88]	; 0x58
 800ac80:	9304      	str	r3, [sp, #16]
 800ac82:	e7de      	b.n	800ac42 <_printf_float+0x13a>
 800ac84:	b913      	cbnz	r3, 800ac8c <_printf_float+0x184>
 800ac86:	6822      	ldr	r2, [r4, #0]
 800ac88:	07d2      	lsls	r2, r2, #31
 800ac8a:	d501      	bpl.n	800ac90 <_printf_float+0x188>
 800ac8c:	3302      	adds	r3, #2
 800ac8e:	e7f4      	b.n	800ac7a <_printf_float+0x172>
 800ac90:	2301      	movs	r3, #1
 800ac92:	e7f2      	b.n	800ac7a <_printf_float+0x172>
 800ac94:	f04f 0967 	mov.w	r9, #103	; 0x67
 800ac98:	9b08      	ldr	r3, [sp, #32]
 800ac9a:	4299      	cmp	r1, r3
 800ac9c:	db05      	blt.n	800acaa <_printf_float+0x1a2>
 800ac9e:	6823      	ldr	r3, [r4, #0]
 800aca0:	6121      	str	r1, [r4, #16]
 800aca2:	07d8      	lsls	r0, r3, #31
 800aca4:	d5ea      	bpl.n	800ac7c <_printf_float+0x174>
 800aca6:	1c4b      	adds	r3, r1, #1
 800aca8:	e7e7      	b.n	800ac7a <_printf_float+0x172>
 800acaa:	2900      	cmp	r1, #0
 800acac:	bfd4      	ite	le
 800acae:	f1c1 0202 	rsble	r2, r1, #2
 800acb2:	2201      	movgt	r2, #1
 800acb4:	4413      	add	r3, r2
 800acb6:	e7e0      	b.n	800ac7a <_printf_float+0x172>
 800acb8:	6823      	ldr	r3, [r4, #0]
 800acba:	055a      	lsls	r2, r3, #21
 800acbc:	d407      	bmi.n	800acce <_printf_float+0x1c6>
 800acbe:	6923      	ldr	r3, [r4, #16]
 800acc0:	4642      	mov	r2, r8
 800acc2:	4631      	mov	r1, r6
 800acc4:	4628      	mov	r0, r5
 800acc6:	47b8      	blx	r7
 800acc8:	3001      	adds	r0, #1
 800acca:	d12a      	bne.n	800ad22 <_printf_float+0x21a>
 800accc:	e76a      	b.n	800aba4 <_printf_float+0x9c>
 800acce:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800acd2:	f240 80e2 	bls.w	800ae9a <_printf_float+0x392>
 800acd6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800acda:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800acde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ace2:	d133      	bne.n	800ad4c <_printf_float+0x244>
 800ace4:	4a38      	ldr	r2, [pc, #224]	; (800adc8 <_printf_float+0x2c0>)
 800ace6:	2301      	movs	r3, #1
 800ace8:	4631      	mov	r1, r6
 800acea:	4628      	mov	r0, r5
 800acec:	47b8      	blx	r7
 800acee:	3001      	adds	r0, #1
 800acf0:	f43f af58 	beq.w	800aba4 <_printf_float+0x9c>
 800acf4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800acf8:	429a      	cmp	r2, r3
 800acfa:	db02      	blt.n	800ad02 <_printf_float+0x1fa>
 800acfc:	6823      	ldr	r3, [r4, #0]
 800acfe:	07d8      	lsls	r0, r3, #31
 800ad00:	d50f      	bpl.n	800ad22 <_printf_float+0x21a>
 800ad02:	4653      	mov	r3, sl
 800ad04:	465a      	mov	r2, fp
 800ad06:	4631      	mov	r1, r6
 800ad08:	4628      	mov	r0, r5
 800ad0a:	47b8      	blx	r7
 800ad0c:	3001      	adds	r0, #1
 800ad0e:	f43f af49 	beq.w	800aba4 <_printf_float+0x9c>
 800ad12:	f04f 0800 	mov.w	r8, #0
 800ad16:	f104 091a 	add.w	r9, r4, #26
 800ad1a:	9b08      	ldr	r3, [sp, #32]
 800ad1c:	3b01      	subs	r3, #1
 800ad1e:	4543      	cmp	r3, r8
 800ad20:	dc09      	bgt.n	800ad36 <_printf_float+0x22e>
 800ad22:	6823      	ldr	r3, [r4, #0]
 800ad24:	079b      	lsls	r3, r3, #30
 800ad26:	f100 8108 	bmi.w	800af3a <_printf_float+0x432>
 800ad2a:	68e0      	ldr	r0, [r4, #12]
 800ad2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad2e:	4298      	cmp	r0, r3
 800ad30:	bfb8      	it	lt
 800ad32:	4618      	movlt	r0, r3
 800ad34:	e738      	b.n	800aba8 <_printf_float+0xa0>
 800ad36:	2301      	movs	r3, #1
 800ad38:	464a      	mov	r2, r9
 800ad3a:	4631      	mov	r1, r6
 800ad3c:	4628      	mov	r0, r5
 800ad3e:	47b8      	blx	r7
 800ad40:	3001      	adds	r0, #1
 800ad42:	f43f af2f 	beq.w	800aba4 <_printf_float+0x9c>
 800ad46:	f108 0801 	add.w	r8, r8, #1
 800ad4a:	e7e6      	b.n	800ad1a <_printf_float+0x212>
 800ad4c:	9b07      	ldr	r3, [sp, #28]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	dc3c      	bgt.n	800adcc <_printf_float+0x2c4>
 800ad52:	4a1d      	ldr	r2, [pc, #116]	; (800adc8 <_printf_float+0x2c0>)
 800ad54:	2301      	movs	r3, #1
 800ad56:	4631      	mov	r1, r6
 800ad58:	4628      	mov	r0, r5
 800ad5a:	47b8      	blx	r7
 800ad5c:	3001      	adds	r0, #1
 800ad5e:	f43f af21 	beq.w	800aba4 <_printf_float+0x9c>
 800ad62:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ad66:	4313      	orrs	r3, r2
 800ad68:	d102      	bne.n	800ad70 <_printf_float+0x268>
 800ad6a:	6823      	ldr	r3, [r4, #0]
 800ad6c:	07d9      	lsls	r1, r3, #31
 800ad6e:	d5d8      	bpl.n	800ad22 <_printf_float+0x21a>
 800ad70:	4653      	mov	r3, sl
 800ad72:	465a      	mov	r2, fp
 800ad74:	4631      	mov	r1, r6
 800ad76:	4628      	mov	r0, r5
 800ad78:	47b8      	blx	r7
 800ad7a:	3001      	adds	r0, #1
 800ad7c:	f43f af12 	beq.w	800aba4 <_printf_float+0x9c>
 800ad80:	f04f 0900 	mov.w	r9, #0
 800ad84:	f104 0a1a 	add.w	sl, r4, #26
 800ad88:	9b07      	ldr	r3, [sp, #28]
 800ad8a:	425b      	negs	r3, r3
 800ad8c:	454b      	cmp	r3, r9
 800ad8e:	dc01      	bgt.n	800ad94 <_printf_float+0x28c>
 800ad90:	9b08      	ldr	r3, [sp, #32]
 800ad92:	e795      	b.n	800acc0 <_printf_float+0x1b8>
 800ad94:	2301      	movs	r3, #1
 800ad96:	4652      	mov	r2, sl
 800ad98:	4631      	mov	r1, r6
 800ad9a:	4628      	mov	r0, r5
 800ad9c:	47b8      	blx	r7
 800ad9e:	3001      	adds	r0, #1
 800ada0:	f43f af00 	beq.w	800aba4 <_printf_float+0x9c>
 800ada4:	f109 0901 	add.w	r9, r9, #1
 800ada8:	e7ee      	b.n	800ad88 <_printf_float+0x280>
 800adaa:	bf00      	nop
 800adac:	f3af 8000 	nop.w
 800adb0:	ffffffff 	.word	0xffffffff
 800adb4:	7fefffff 	.word	0x7fefffff
 800adb8:	0800e494 	.word	0x0800e494
 800adbc:	0800e498 	.word	0x0800e498
 800adc0:	0800e4a0 	.word	0x0800e4a0
 800adc4:	0800e49c 	.word	0x0800e49c
 800adc8:	0800e4a4 	.word	0x0800e4a4
 800adcc:	9a08      	ldr	r2, [sp, #32]
 800adce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800add0:	429a      	cmp	r2, r3
 800add2:	bfa8      	it	ge
 800add4:	461a      	movge	r2, r3
 800add6:	2a00      	cmp	r2, #0
 800add8:	4691      	mov	r9, r2
 800adda:	dc38      	bgt.n	800ae4e <_printf_float+0x346>
 800addc:	2300      	movs	r3, #0
 800adde:	9305      	str	r3, [sp, #20]
 800ade0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ade4:	f104 021a 	add.w	r2, r4, #26
 800ade8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800adea:	9905      	ldr	r1, [sp, #20]
 800adec:	9304      	str	r3, [sp, #16]
 800adee:	eba3 0309 	sub.w	r3, r3, r9
 800adf2:	428b      	cmp	r3, r1
 800adf4:	dc33      	bgt.n	800ae5e <_printf_float+0x356>
 800adf6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800adfa:	429a      	cmp	r2, r3
 800adfc:	db3c      	blt.n	800ae78 <_printf_float+0x370>
 800adfe:	6823      	ldr	r3, [r4, #0]
 800ae00:	07da      	lsls	r2, r3, #31
 800ae02:	d439      	bmi.n	800ae78 <_printf_float+0x370>
 800ae04:	9a08      	ldr	r2, [sp, #32]
 800ae06:	9b04      	ldr	r3, [sp, #16]
 800ae08:	9907      	ldr	r1, [sp, #28]
 800ae0a:	1ad3      	subs	r3, r2, r3
 800ae0c:	eba2 0901 	sub.w	r9, r2, r1
 800ae10:	4599      	cmp	r9, r3
 800ae12:	bfa8      	it	ge
 800ae14:	4699      	movge	r9, r3
 800ae16:	f1b9 0f00 	cmp.w	r9, #0
 800ae1a:	dc35      	bgt.n	800ae88 <_printf_float+0x380>
 800ae1c:	f04f 0800 	mov.w	r8, #0
 800ae20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae24:	f104 0a1a 	add.w	sl, r4, #26
 800ae28:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ae2c:	1a9b      	subs	r3, r3, r2
 800ae2e:	eba3 0309 	sub.w	r3, r3, r9
 800ae32:	4543      	cmp	r3, r8
 800ae34:	f77f af75 	ble.w	800ad22 <_printf_float+0x21a>
 800ae38:	2301      	movs	r3, #1
 800ae3a:	4652      	mov	r2, sl
 800ae3c:	4631      	mov	r1, r6
 800ae3e:	4628      	mov	r0, r5
 800ae40:	47b8      	blx	r7
 800ae42:	3001      	adds	r0, #1
 800ae44:	f43f aeae 	beq.w	800aba4 <_printf_float+0x9c>
 800ae48:	f108 0801 	add.w	r8, r8, #1
 800ae4c:	e7ec      	b.n	800ae28 <_printf_float+0x320>
 800ae4e:	4613      	mov	r3, r2
 800ae50:	4631      	mov	r1, r6
 800ae52:	4642      	mov	r2, r8
 800ae54:	4628      	mov	r0, r5
 800ae56:	47b8      	blx	r7
 800ae58:	3001      	adds	r0, #1
 800ae5a:	d1bf      	bne.n	800addc <_printf_float+0x2d4>
 800ae5c:	e6a2      	b.n	800aba4 <_printf_float+0x9c>
 800ae5e:	2301      	movs	r3, #1
 800ae60:	4631      	mov	r1, r6
 800ae62:	4628      	mov	r0, r5
 800ae64:	9204      	str	r2, [sp, #16]
 800ae66:	47b8      	blx	r7
 800ae68:	3001      	adds	r0, #1
 800ae6a:	f43f ae9b 	beq.w	800aba4 <_printf_float+0x9c>
 800ae6e:	9b05      	ldr	r3, [sp, #20]
 800ae70:	9a04      	ldr	r2, [sp, #16]
 800ae72:	3301      	adds	r3, #1
 800ae74:	9305      	str	r3, [sp, #20]
 800ae76:	e7b7      	b.n	800ade8 <_printf_float+0x2e0>
 800ae78:	4653      	mov	r3, sl
 800ae7a:	465a      	mov	r2, fp
 800ae7c:	4631      	mov	r1, r6
 800ae7e:	4628      	mov	r0, r5
 800ae80:	47b8      	blx	r7
 800ae82:	3001      	adds	r0, #1
 800ae84:	d1be      	bne.n	800ae04 <_printf_float+0x2fc>
 800ae86:	e68d      	b.n	800aba4 <_printf_float+0x9c>
 800ae88:	9a04      	ldr	r2, [sp, #16]
 800ae8a:	464b      	mov	r3, r9
 800ae8c:	4442      	add	r2, r8
 800ae8e:	4631      	mov	r1, r6
 800ae90:	4628      	mov	r0, r5
 800ae92:	47b8      	blx	r7
 800ae94:	3001      	adds	r0, #1
 800ae96:	d1c1      	bne.n	800ae1c <_printf_float+0x314>
 800ae98:	e684      	b.n	800aba4 <_printf_float+0x9c>
 800ae9a:	9a08      	ldr	r2, [sp, #32]
 800ae9c:	2a01      	cmp	r2, #1
 800ae9e:	dc01      	bgt.n	800aea4 <_printf_float+0x39c>
 800aea0:	07db      	lsls	r3, r3, #31
 800aea2:	d537      	bpl.n	800af14 <_printf_float+0x40c>
 800aea4:	2301      	movs	r3, #1
 800aea6:	4642      	mov	r2, r8
 800aea8:	4631      	mov	r1, r6
 800aeaa:	4628      	mov	r0, r5
 800aeac:	47b8      	blx	r7
 800aeae:	3001      	adds	r0, #1
 800aeb0:	f43f ae78 	beq.w	800aba4 <_printf_float+0x9c>
 800aeb4:	4653      	mov	r3, sl
 800aeb6:	465a      	mov	r2, fp
 800aeb8:	4631      	mov	r1, r6
 800aeba:	4628      	mov	r0, r5
 800aebc:	47b8      	blx	r7
 800aebe:	3001      	adds	r0, #1
 800aec0:	f43f ae70 	beq.w	800aba4 <_printf_float+0x9c>
 800aec4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800aec8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aed0:	d01b      	beq.n	800af0a <_printf_float+0x402>
 800aed2:	9b08      	ldr	r3, [sp, #32]
 800aed4:	f108 0201 	add.w	r2, r8, #1
 800aed8:	3b01      	subs	r3, #1
 800aeda:	4631      	mov	r1, r6
 800aedc:	4628      	mov	r0, r5
 800aede:	47b8      	blx	r7
 800aee0:	3001      	adds	r0, #1
 800aee2:	d10e      	bne.n	800af02 <_printf_float+0x3fa>
 800aee4:	e65e      	b.n	800aba4 <_printf_float+0x9c>
 800aee6:	2301      	movs	r3, #1
 800aee8:	464a      	mov	r2, r9
 800aeea:	4631      	mov	r1, r6
 800aeec:	4628      	mov	r0, r5
 800aeee:	47b8      	blx	r7
 800aef0:	3001      	adds	r0, #1
 800aef2:	f43f ae57 	beq.w	800aba4 <_printf_float+0x9c>
 800aef6:	f108 0801 	add.w	r8, r8, #1
 800aefa:	9b08      	ldr	r3, [sp, #32]
 800aefc:	3b01      	subs	r3, #1
 800aefe:	4543      	cmp	r3, r8
 800af00:	dcf1      	bgt.n	800aee6 <_printf_float+0x3de>
 800af02:	9b04      	ldr	r3, [sp, #16]
 800af04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800af08:	e6db      	b.n	800acc2 <_printf_float+0x1ba>
 800af0a:	f04f 0800 	mov.w	r8, #0
 800af0e:	f104 091a 	add.w	r9, r4, #26
 800af12:	e7f2      	b.n	800aefa <_printf_float+0x3f2>
 800af14:	2301      	movs	r3, #1
 800af16:	4642      	mov	r2, r8
 800af18:	e7df      	b.n	800aeda <_printf_float+0x3d2>
 800af1a:	2301      	movs	r3, #1
 800af1c:	464a      	mov	r2, r9
 800af1e:	4631      	mov	r1, r6
 800af20:	4628      	mov	r0, r5
 800af22:	47b8      	blx	r7
 800af24:	3001      	adds	r0, #1
 800af26:	f43f ae3d 	beq.w	800aba4 <_printf_float+0x9c>
 800af2a:	f108 0801 	add.w	r8, r8, #1
 800af2e:	68e3      	ldr	r3, [r4, #12]
 800af30:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af32:	1a5b      	subs	r3, r3, r1
 800af34:	4543      	cmp	r3, r8
 800af36:	dcf0      	bgt.n	800af1a <_printf_float+0x412>
 800af38:	e6f7      	b.n	800ad2a <_printf_float+0x222>
 800af3a:	f04f 0800 	mov.w	r8, #0
 800af3e:	f104 0919 	add.w	r9, r4, #25
 800af42:	e7f4      	b.n	800af2e <_printf_float+0x426>

0800af44 <_printf_common>:
 800af44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af48:	4616      	mov	r6, r2
 800af4a:	4699      	mov	r9, r3
 800af4c:	688a      	ldr	r2, [r1, #8]
 800af4e:	690b      	ldr	r3, [r1, #16]
 800af50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af54:	4293      	cmp	r3, r2
 800af56:	bfb8      	it	lt
 800af58:	4613      	movlt	r3, r2
 800af5a:	6033      	str	r3, [r6, #0]
 800af5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af60:	4607      	mov	r7, r0
 800af62:	460c      	mov	r4, r1
 800af64:	b10a      	cbz	r2, 800af6a <_printf_common+0x26>
 800af66:	3301      	adds	r3, #1
 800af68:	6033      	str	r3, [r6, #0]
 800af6a:	6823      	ldr	r3, [r4, #0]
 800af6c:	0699      	lsls	r1, r3, #26
 800af6e:	bf42      	ittt	mi
 800af70:	6833      	ldrmi	r3, [r6, #0]
 800af72:	3302      	addmi	r3, #2
 800af74:	6033      	strmi	r3, [r6, #0]
 800af76:	6825      	ldr	r5, [r4, #0]
 800af78:	f015 0506 	ands.w	r5, r5, #6
 800af7c:	d106      	bne.n	800af8c <_printf_common+0x48>
 800af7e:	f104 0a19 	add.w	sl, r4, #25
 800af82:	68e3      	ldr	r3, [r4, #12]
 800af84:	6832      	ldr	r2, [r6, #0]
 800af86:	1a9b      	subs	r3, r3, r2
 800af88:	42ab      	cmp	r3, r5
 800af8a:	dc26      	bgt.n	800afda <_printf_common+0x96>
 800af8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800af90:	1e13      	subs	r3, r2, #0
 800af92:	6822      	ldr	r2, [r4, #0]
 800af94:	bf18      	it	ne
 800af96:	2301      	movne	r3, #1
 800af98:	0692      	lsls	r2, r2, #26
 800af9a:	d42b      	bmi.n	800aff4 <_printf_common+0xb0>
 800af9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800afa0:	4649      	mov	r1, r9
 800afa2:	4638      	mov	r0, r7
 800afa4:	47c0      	blx	r8
 800afa6:	3001      	adds	r0, #1
 800afa8:	d01e      	beq.n	800afe8 <_printf_common+0xa4>
 800afaa:	6823      	ldr	r3, [r4, #0]
 800afac:	68e5      	ldr	r5, [r4, #12]
 800afae:	6832      	ldr	r2, [r6, #0]
 800afb0:	f003 0306 	and.w	r3, r3, #6
 800afb4:	2b04      	cmp	r3, #4
 800afb6:	bf08      	it	eq
 800afb8:	1aad      	subeq	r5, r5, r2
 800afba:	68a3      	ldr	r3, [r4, #8]
 800afbc:	6922      	ldr	r2, [r4, #16]
 800afbe:	bf0c      	ite	eq
 800afc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800afc4:	2500      	movne	r5, #0
 800afc6:	4293      	cmp	r3, r2
 800afc8:	bfc4      	itt	gt
 800afca:	1a9b      	subgt	r3, r3, r2
 800afcc:	18ed      	addgt	r5, r5, r3
 800afce:	2600      	movs	r6, #0
 800afd0:	341a      	adds	r4, #26
 800afd2:	42b5      	cmp	r5, r6
 800afd4:	d11a      	bne.n	800b00c <_printf_common+0xc8>
 800afd6:	2000      	movs	r0, #0
 800afd8:	e008      	b.n	800afec <_printf_common+0xa8>
 800afda:	2301      	movs	r3, #1
 800afdc:	4652      	mov	r2, sl
 800afde:	4649      	mov	r1, r9
 800afe0:	4638      	mov	r0, r7
 800afe2:	47c0      	blx	r8
 800afe4:	3001      	adds	r0, #1
 800afe6:	d103      	bne.n	800aff0 <_printf_common+0xac>
 800afe8:	f04f 30ff 	mov.w	r0, #4294967295
 800afec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aff0:	3501      	adds	r5, #1
 800aff2:	e7c6      	b.n	800af82 <_printf_common+0x3e>
 800aff4:	18e1      	adds	r1, r4, r3
 800aff6:	1c5a      	adds	r2, r3, #1
 800aff8:	2030      	movs	r0, #48	; 0x30
 800affa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800affe:	4422      	add	r2, r4
 800b000:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b004:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b008:	3302      	adds	r3, #2
 800b00a:	e7c7      	b.n	800af9c <_printf_common+0x58>
 800b00c:	2301      	movs	r3, #1
 800b00e:	4622      	mov	r2, r4
 800b010:	4649      	mov	r1, r9
 800b012:	4638      	mov	r0, r7
 800b014:	47c0      	blx	r8
 800b016:	3001      	adds	r0, #1
 800b018:	d0e6      	beq.n	800afe8 <_printf_common+0xa4>
 800b01a:	3601      	adds	r6, #1
 800b01c:	e7d9      	b.n	800afd2 <_printf_common+0x8e>
	...

0800b020 <_printf_i>:
 800b020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b024:	460c      	mov	r4, r1
 800b026:	4691      	mov	r9, r2
 800b028:	7e27      	ldrb	r7, [r4, #24]
 800b02a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b02c:	2f78      	cmp	r7, #120	; 0x78
 800b02e:	4680      	mov	r8, r0
 800b030:	469a      	mov	sl, r3
 800b032:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b036:	d807      	bhi.n	800b048 <_printf_i+0x28>
 800b038:	2f62      	cmp	r7, #98	; 0x62
 800b03a:	d80a      	bhi.n	800b052 <_printf_i+0x32>
 800b03c:	2f00      	cmp	r7, #0
 800b03e:	f000 80d8 	beq.w	800b1f2 <_printf_i+0x1d2>
 800b042:	2f58      	cmp	r7, #88	; 0x58
 800b044:	f000 80a3 	beq.w	800b18e <_printf_i+0x16e>
 800b048:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b04c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b050:	e03a      	b.n	800b0c8 <_printf_i+0xa8>
 800b052:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b056:	2b15      	cmp	r3, #21
 800b058:	d8f6      	bhi.n	800b048 <_printf_i+0x28>
 800b05a:	a001      	add	r0, pc, #4	; (adr r0, 800b060 <_printf_i+0x40>)
 800b05c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b060:	0800b0b9 	.word	0x0800b0b9
 800b064:	0800b0cd 	.word	0x0800b0cd
 800b068:	0800b049 	.word	0x0800b049
 800b06c:	0800b049 	.word	0x0800b049
 800b070:	0800b049 	.word	0x0800b049
 800b074:	0800b049 	.word	0x0800b049
 800b078:	0800b0cd 	.word	0x0800b0cd
 800b07c:	0800b049 	.word	0x0800b049
 800b080:	0800b049 	.word	0x0800b049
 800b084:	0800b049 	.word	0x0800b049
 800b088:	0800b049 	.word	0x0800b049
 800b08c:	0800b1d9 	.word	0x0800b1d9
 800b090:	0800b0fd 	.word	0x0800b0fd
 800b094:	0800b1bb 	.word	0x0800b1bb
 800b098:	0800b049 	.word	0x0800b049
 800b09c:	0800b049 	.word	0x0800b049
 800b0a0:	0800b1fb 	.word	0x0800b1fb
 800b0a4:	0800b049 	.word	0x0800b049
 800b0a8:	0800b0fd 	.word	0x0800b0fd
 800b0ac:	0800b049 	.word	0x0800b049
 800b0b0:	0800b049 	.word	0x0800b049
 800b0b4:	0800b1c3 	.word	0x0800b1c3
 800b0b8:	680b      	ldr	r3, [r1, #0]
 800b0ba:	1d1a      	adds	r2, r3, #4
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	600a      	str	r2, [r1, #0]
 800b0c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b0c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	e0a3      	b.n	800b214 <_printf_i+0x1f4>
 800b0cc:	6825      	ldr	r5, [r4, #0]
 800b0ce:	6808      	ldr	r0, [r1, #0]
 800b0d0:	062e      	lsls	r6, r5, #24
 800b0d2:	f100 0304 	add.w	r3, r0, #4
 800b0d6:	d50a      	bpl.n	800b0ee <_printf_i+0xce>
 800b0d8:	6805      	ldr	r5, [r0, #0]
 800b0da:	600b      	str	r3, [r1, #0]
 800b0dc:	2d00      	cmp	r5, #0
 800b0de:	da03      	bge.n	800b0e8 <_printf_i+0xc8>
 800b0e0:	232d      	movs	r3, #45	; 0x2d
 800b0e2:	426d      	negs	r5, r5
 800b0e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0e8:	485e      	ldr	r0, [pc, #376]	; (800b264 <_printf_i+0x244>)
 800b0ea:	230a      	movs	r3, #10
 800b0ec:	e019      	b.n	800b122 <_printf_i+0x102>
 800b0ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b0f2:	6805      	ldr	r5, [r0, #0]
 800b0f4:	600b      	str	r3, [r1, #0]
 800b0f6:	bf18      	it	ne
 800b0f8:	b22d      	sxthne	r5, r5
 800b0fa:	e7ef      	b.n	800b0dc <_printf_i+0xbc>
 800b0fc:	680b      	ldr	r3, [r1, #0]
 800b0fe:	6825      	ldr	r5, [r4, #0]
 800b100:	1d18      	adds	r0, r3, #4
 800b102:	6008      	str	r0, [r1, #0]
 800b104:	0628      	lsls	r0, r5, #24
 800b106:	d501      	bpl.n	800b10c <_printf_i+0xec>
 800b108:	681d      	ldr	r5, [r3, #0]
 800b10a:	e002      	b.n	800b112 <_printf_i+0xf2>
 800b10c:	0669      	lsls	r1, r5, #25
 800b10e:	d5fb      	bpl.n	800b108 <_printf_i+0xe8>
 800b110:	881d      	ldrh	r5, [r3, #0]
 800b112:	4854      	ldr	r0, [pc, #336]	; (800b264 <_printf_i+0x244>)
 800b114:	2f6f      	cmp	r7, #111	; 0x6f
 800b116:	bf0c      	ite	eq
 800b118:	2308      	moveq	r3, #8
 800b11a:	230a      	movne	r3, #10
 800b11c:	2100      	movs	r1, #0
 800b11e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b122:	6866      	ldr	r6, [r4, #4]
 800b124:	60a6      	str	r6, [r4, #8]
 800b126:	2e00      	cmp	r6, #0
 800b128:	bfa2      	ittt	ge
 800b12a:	6821      	ldrge	r1, [r4, #0]
 800b12c:	f021 0104 	bicge.w	r1, r1, #4
 800b130:	6021      	strge	r1, [r4, #0]
 800b132:	b90d      	cbnz	r5, 800b138 <_printf_i+0x118>
 800b134:	2e00      	cmp	r6, #0
 800b136:	d04d      	beq.n	800b1d4 <_printf_i+0x1b4>
 800b138:	4616      	mov	r6, r2
 800b13a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b13e:	fb03 5711 	mls	r7, r3, r1, r5
 800b142:	5dc7      	ldrb	r7, [r0, r7]
 800b144:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b148:	462f      	mov	r7, r5
 800b14a:	42bb      	cmp	r3, r7
 800b14c:	460d      	mov	r5, r1
 800b14e:	d9f4      	bls.n	800b13a <_printf_i+0x11a>
 800b150:	2b08      	cmp	r3, #8
 800b152:	d10b      	bne.n	800b16c <_printf_i+0x14c>
 800b154:	6823      	ldr	r3, [r4, #0]
 800b156:	07df      	lsls	r7, r3, #31
 800b158:	d508      	bpl.n	800b16c <_printf_i+0x14c>
 800b15a:	6923      	ldr	r3, [r4, #16]
 800b15c:	6861      	ldr	r1, [r4, #4]
 800b15e:	4299      	cmp	r1, r3
 800b160:	bfde      	ittt	le
 800b162:	2330      	movle	r3, #48	; 0x30
 800b164:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b168:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b16c:	1b92      	subs	r2, r2, r6
 800b16e:	6122      	str	r2, [r4, #16]
 800b170:	f8cd a000 	str.w	sl, [sp]
 800b174:	464b      	mov	r3, r9
 800b176:	aa03      	add	r2, sp, #12
 800b178:	4621      	mov	r1, r4
 800b17a:	4640      	mov	r0, r8
 800b17c:	f7ff fee2 	bl	800af44 <_printf_common>
 800b180:	3001      	adds	r0, #1
 800b182:	d14c      	bne.n	800b21e <_printf_i+0x1fe>
 800b184:	f04f 30ff 	mov.w	r0, #4294967295
 800b188:	b004      	add	sp, #16
 800b18a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b18e:	4835      	ldr	r0, [pc, #212]	; (800b264 <_printf_i+0x244>)
 800b190:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b194:	6823      	ldr	r3, [r4, #0]
 800b196:	680e      	ldr	r6, [r1, #0]
 800b198:	061f      	lsls	r7, r3, #24
 800b19a:	f856 5b04 	ldr.w	r5, [r6], #4
 800b19e:	600e      	str	r6, [r1, #0]
 800b1a0:	d514      	bpl.n	800b1cc <_printf_i+0x1ac>
 800b1a2:	07d9      	lsls	r1, r3, #31
 800b1a4:	bf44      	itt	mi
 800b1a6:	f043 0320 	orrmi.w	r3, r3, #32
 800b1aa:	6023      	strmi	r3, [r4, #0]
 800b1ac:	b91d      	cbnz	r5, 800b1b6 <_printf_i+0x196>
 800b1ae:	6823      	ldr	r3, [r4, #0]
 800b1b0:	f023 0320 	bic.w	r3, r3, #32
 800b1b4:	6023      	str	r3, [r4, #0]
 800b1b6:	2310      	movs	r3, #16
 800b1b8:	e7b0      	b.n	800b11c <_printf_i+0xfc>
 800b1ba:	6823      	ldr	r3, [r4, #0]
 800b1bc:	f043 0320 	orr.w	r3, r3, #32
 800b1c0:	6023      	str	r3, [r4, #0]
 800b1c2:	2378      	movs	r3, #120	; 0x78
 800b1c4:	4828      	ldr	r0, [pc, #160]	; (800b268 <_printf_i+0x248>)
 800b1c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b1ca:	e7e3      	b.n	800b194 <_printf_i+0x174>
 800b1cc:	065e      	lsls	r6, r3, #25
 800b1ce:	bf48      	it	mi
 800b1d0:	b2ad      	uxthmi	r5, r5
 800b1d2:	e7e6      	b.n	800b1a2 <_printf_i+0x182>
 800b1d4:	4616      	mov	r6, r2
 800b1d6:	e7bb      	b.n	800b150 <_printf_i+0x130>
 800b1d8:	680b      	ldr	r3, [r1, #0]
 800b1da:	6826      	ldr	r6, [r4, #0]
 800b1dc:	6960      	ldr	r0, [r4, #20]
 800b1de:	1d1d      	adds	r5, r3, #4
 800b1e0:	600d      	str	r5, [r1, #0]
 800b1e2:	0635      	lsls	r5, r6, #24
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	d501      	bpl.n	800b1ec <_printf_i+0x1cc>
 800b1e8:	6018      	str	r0, [r3, #0]
 800b1ea:	e002      	b.n	800b1f2 <_printf_i+0x1d2>
 800b1ec:	0671      	lsls	r1, r6, #25
 800b1ee:	d5fb      	bpl.n	800b1e8 <_printf_i+0x1c8>
 800b1f0:	8018      	strh	r0, [r3, #0]
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	6123      	str	r3, [r4, #16]
 800b1f6:	4616      	mov	r6, r2
 800b1f8:	e7ba      	b.n	800b170 <_printf_i+0x150>
 800b1fa:	680b      	ldr	r3, [r1, #0]
 800b1fc:	1d1a      	adds	r2, r3, #4
 800b1fe:	600a      	str	r2, [r1, #0]
 800b200:	681e      	ldr	r6, [r3, #0]
 800b202:	6862      	ldr	r2, [r4, #4]
 800b204:	2100      	movs	r1, #0
 800b206:	4630      	mov	r0, r6
 800b208:	f7f5 f872 	bl	80002f0 <memchr>
 800b20c:	b108      	cbz	r0, 800b212 <_printf_i+0x1f2>
 800b20e:	1b80      	subs	r0, r0, r6
 800b210:	6060      	str	r0, [r4, #4]
 800b212:	6863      	ldr	r3, [r4, #4]
 800b214:	6123      	str	r3, [r4, #16]
 800b216:	2300      	movs	r3, #0
 800b218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b21c:	e7a8      	b.n	800b170 <_printf_i+0x150>
 800b21e:	6923      	ldr	r3, [r4, #16]
 800b220:	4632      	mov	r2, r6
 800b222:	4649      	mov	r1, r9
 800b224:	4640      	mov	r0, r8
 800b226:	47d0      	blx	sl
 800b228:	3001      	adds	r0, #1
 800b22a:	d0ab      	beq.n	800b184 <_printf_i+0x164>
 800b22c:	6823      	ldr	r3, [r4, #0]
 800b22e:	079b      	lsls	r3, r3, #30
 800b230:	d413      	bmi.n	800b25a <_printf_i+0x23a>
 800b232:	68e0      	ldr	r0, [r4, #12]
 800b234:	9b03      	ldr	r3, [sp, #12]
 800b236:	4298      	cmp	r0, r3
 800b238:	bfb8      	it	lt
 800b23a:	4618      	movlt	r0, r3
 800b23c:	e7a4      	b.n	800b188 <_printf_i+0x168>
 800b23e:	2301      	movs	r3, #1
 800b240:	4632      	mov	r2, r6
 800b242:	4649      	mov	r1, r9
 800b244:	4640      	mov	r0, r8
 800b246:	47d0      	blx	sl
 800b248:	3001      	adds	r0, #1
 800b24a:	d09b      	beq.n	800b184 <_printf_i+0x164>
 800b24c:	3501      	adds	r5, #1
 800b24e:	68e3      	ldr	r3, [r4, #12]
 800b250:	9903      	ldr	r1, [sp, #12]
 800b252:	1a5b      	subs	r3, r3, r1
 800b254:	42ab      	cmp	r3, r5
 800b256:	dcf2      	bgt.n	800b23e <_printf_i+0x21e>
 800b258:	e7eb      	b.n	800b232 <_printf_i+0x212>
 800b25a:	2500      	movs	r5, #0
 800b25c:	f104 0619 	add.w	r6, r4, #25
 800b260:	e7f5      	b.n	800b24e <_printf_i+0x22e>
 800b262:	bf00      	nop
 800b264:	0800e4a6 	.word	0x0800e4a6
 800b268:	0800e4b7 	.word	0x0800e4b7

0800b26c <iprintf>:
 800b26c:	b40f      	push	{r0, r1, r2, r3}
 800b26e:	4b0a      	ldr	r3, [pc, #40]	; (800b298 <iprintf+0x2c>)
 800b270:	b513      	push	{r0, r1, r4, lr}
 800b272:	681c      	ldr	r4, [r3, #0]
 800b274:	b124      	cbz	r4, 800b280 <iprintf+0x14>
 800b276:	69a3      	ldr	r3, [r4, #24]
 800b278:	b913      	cbnz	r3, 800b280 <iprintf+0x14>
 800b27a:	4620      	mov	r0, r4
 800b27c:	f001 f934 	bl	800c4e8 <__sinit>
 800b280:	ab05      	add	r3, sp, #20
 800b282:	9a04      	ldr	r2, [sp, #16]
 800b284:	68a1      	ldr	r1, [r4, #8]
 800b286:	9301      	str	r3, [sp, #4]
 800b288:	4620      	mov	r0, r4
 800b28a:	f001 fea1 	bl	800cfd0 <_vfiprintf_r>
 800b28e:	b002      	add	sp, #8
 800b290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b294:	b004      	add	sp, #16
 800b296:	4770      	bx	lr
 800b298:	24000010 	.word	0x24000010

0800b29c <_puts_r>:
 800b29c:	b570      	push	{r4, r5, r6, lr}
 800b29e:	460e      	mov	r6, r1
 800b2a0:	4605      	mov	r5, r0
 800b2a2:	b118      	cbz	r0, 800b2ac <_puts_r+0x10>
 800b2a4:	6983      	ldr	r3, [r0, #24]
 800b2a6:	b90b      	cbnz	r3, 800b2ac <_puts_r+0x10>
 800b2a8:	f001 f91e 	bl	800c4e8 <__sinit>
 800b2ac:	69ab      	ldr	r3, [r5, #24]
 800b2ae:	68ac      	ldr	r4, [r5, #8]
 800b2b0:	b913      	cbnz	r3, 800b2b8 <_puts_r+0x1c>
 800b2b2:	4628      	mov	r0, r5
 800b2b4:	f001 f918 	bl	800c4e8 <__sinit>
 800b2b8:	4b2c      	ldr	r3, [pc, #176]	; (800b36c <_puts_r+0xd0>)
 800b2ba:	429c      	cmp	r4, r3
 800b2bc:	d120      	bne.n	800b300 <_puts_r+0x64>
 800b2be:	686c      	ldr	r4, [r5, #4]
 800b2c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b2c2:	07db      	lsls	r3, r3, #31
 800b2c4:	d405      	bmi.n	800b2d2 <_puts_r+0x36>
 800b2c6:	89a3      	ldrh	r3, [r4, #12]
 800b2c8:	0598      	lsls	r0, r3, #22
 800b2ca:	d402      	bmi.n	800b2d2 <_puts_r+0x36>
 800b2cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2ce:	f001 f9ae 	bl	800c62e <__retarget_lock_acquire_recursive>
 800b2d2:	89a3      	ldrh	r3, [r4, #12]
 800b2d4:	0719      	lsls	r1, r3, #28
 800b2d6:	d51d      	bpl.n	800b314 <_puts_r+0x78>
 800b2d8:	6923      	ldr	r3, [r4, #16]
 800b2da:	b1db      	cbz	r3, 800b314 <_puts_r+0x78>
 800b2dc:	3e01      	subs	r6, #1
 800b2de:	68a3      	ldr	r3, [r4, #8]
 800b2e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b2e4:	3b01      	subs	r3, #1
 800b2e6:	60a3      	str	r3, [r4, #8]
 800b2e8:	bb39      	cbnz	r1, 800b33a <_puts_r+0x9e>
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	da38      	bge.n	800b360 <_puts_r+0xc4>
 800b2ee:	4622      	mov	r2, r4
 800b2f0:	210a      	movs	r1, #10
 800b2f2:	4628      	mov	r0, r5
 800b2f4:	f000 f90e 	bl	800b514 <__swbuf_r>
 800b2f8:	3001      	adds	r0, #1
 800b2fa:	d011      	beq.n	800b320 <_puts_r+0x84>
 800b2fc:	250a      	movs	r5, #10
 800b2fe:	e011      	b.n	800b324 <_puts_r+0x88>
 800b300:	4b1b      	ldr	r3, [pc, #108]	; (800b370 <_puts_r+0xd4>)
 800b302:	429c      	cmp	r4, r3
 800b304:	d101      	bne.n	800b30a <_puts_r+0x6e>
 800b306:	68ac      	ldr	r4, [r5, #8]
 800b308:	e7da      	b.n	800b2c0 <_puts_r+0x24>
 800b30a:	4b1a      	ldr	r3, [pc, #104]	; (800b374 <_puts_r+0xd8>)
 800b30c:	429c      	cmp	r4, r3
 800b30e:	bf08      	it	eq
 800b310:	68ec      	ldreq	r4, [r5, #12]
 800b312:	e7d5      	b.n	800b2c0 <_puts_r+0x24>
 800b314:	4621      	mov	r1, r4
 800b316:	4628      	mov	r0, r5
 800b318:	f000 f94e 	bl	800b5b8 <__swsetup_r>
 800b31c:	2800      	cmp	r0, #0
 800b31e:	d0dd      	beq.n	800b2dc <_puts_r+0x40>
 800b320:	f04f 35ff 	mov.w	r5, #4294967295
 800b324:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b326:	07da      	lsls	r2, r3, #31
 800b328:	d405      	bmi.n	800b336 <_puts_r+0x9a>
 800b32a:	89a3      	ldrh	r3, [r4, #12]
 800b32c:	059b      	lsls	r3, r3, #22
 800b32e:	d402      	bmi.n	800b336 <_puts_r+0x9a>
 800b330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b332:	f001 f97d 	bl	800c630 <__retarget_lock_release_recursive>
 800b336:	4628      	mov	r0, r5
 800b338:	bd70      	pop	{r4, r5, r6, pc}
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	da04      	bge.n	800b348 <_puts_r+0xac>
 800b33e:	69a2      	ldr	r2, [r4, #24]
 800b340:	429a      	cmp	r2, r3
 800b342:	dc06      	bgt.n	800b352 <_puts_r+0xb6>
 800b344:	290a      	cmp	r1, #10
 800b346:	d004      	beq.n	800b352 <_puts_r+0xb6>
 800b348:	6823      	ldr	r3, [r4, #0]
 800b34a:	1c5a      	adds	r2, r3, #1
 800b34c:	6022      	str	r2, [r4, #0]
 800b34e:	7019      	strb	r1, [r3, #0]
 800b350:	e7c5      	b.n	800b2de <_puts_r+0x42>
 800b352:	4622      	mov	r2, r4
 800b354:	4628      	mov	r0, r5
 800b356:	f000 f8dd 	bl	800b514 <__swbuf_r>
 800b35a:	3001      	adds	r0, #1
 800b35c:	d1bf      	bne.n	800b2de <_puts_r+0x42>
 800b35e:	e7df      	b.n	800b320 <_puts_r+0x84>
 800b360:	6823      	ldr	r3, [r4, #0]
 800b362:	250a      	movs	r5, #10
 800b364:	1c5a      	adds	r2, r3, #1
 800b366:	6022      	str	r2, [r4, #0]
 800b368:	701d      	strb	r5, [r3, #0]
 800b36a:	e7db      	b.n	800b324 <_puts_r+0x88>
 800b36c:	0800e57c 	.word	0x0800e57c
 800b370:	0800e59c 	.word	0x0800e59c
 800b374:	0800e55c 	.word	0x0800e55c

0800b378 <puts>:
 800b378:	4b02      	ldr	r3, [pc, #8]	; (800b384 <puts+0xc>)
 800b37a:	4601      	mov	r1, r0
 800b37c:	6818      	ldr	r0, [r3, #0]
 800b37e:	f7ff bf8d 	b.w	800b29c <_puts_r>
 800b382:	bf00      	nop
 800b384:	24000010 	.word	0x24000010

0800b388 <setvbuf>:
 800b388:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b38c:	461d      	mov	r5, r3
 800b38e:	4b5d      	ldr	r3, [pc, #372]	; (800b504 <setvbuf+0x17c>)
 800b390:	681f      	ldr	r7, [r3, #0]
 800b392:	4604      	mov	r4, r0
 800b394:	460e      	mov	r6, r1
 800b396:	4690      	mov	r8, r2
 800b398:	b127      	cbz	r7, 800b3a4 <setvbuf+0x1c>
 800b39a:	69bb      	ldr	r3, [r7, #24]
 800b39c:	b913      	cbnz	r3, 800b3a4 <setvbuf+0x1c>
 800b39e:	4638      	mov	r0, r7
 800b3a0:	f001 f8a2 	bl	800c4e8 <__sinit>
 800b3a4:	4b58      	ldr	r3, [pc, #352]	; (800b508 <setvbuf+0x180>)
 800b3a6:	429c      	cmp	r4, r3
 800b3a8:	d167      	bne.n	800b47a <setvbuf+0xf2>
 800b3aa:	687c      	ldr	r4, [r7, #4]
 800b3ac:	f1b8 0f02 	cmp.w	r8, #2
 800b3b0:	d006      	beq.n	800b3c0 <setvbuf+0x38>
 800b3b2:	f1b8 0f01 	cmp.w	r8, #1
 800b3b6:	f200 809f 	bhi.w	800b4f8 <setvbuf+0x170>
 800b3ba:	2d00      	cmp	r5, #0
 800b3bc:	f2c0 809c 	blt.w	800b4f8 <setvbuf+0x170>
 800b3c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b3c2:	07db      	lsls	r3, r3, #31
 800b3c4:	d405      	bmi.n	800b3d2 <setvbuf+0x4a>
 800b3c6:	89a3      	ldrh	r3, [r4, #12]
 800b3c8:	0598      	lsls	r0, r3, #22
 800b3ca:	d402      	bmi.n	800b3d2 <setvbuf+0x4a>
 800b3cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3ce:	f001 f92e 	bl	800c62e <__retarget_lock_acquire_recursive>
 800b3d2:	4621      	mov	r1, r4
 800b3d4:	4638      	mov	r0, r7
 800b3d6:	f000 fff3 	bl	800c3c0 <_fflush_r>
 800b3da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3dc:	b141      	cbz	r1, 800b3f0 <setvbuf+0x68>
 800b3de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3e2:	4299      	cmp	r1, r3
 800b3e4:	d002      	beq.n	800b3ec <setvbuf+0x64>
 800b3e6:	4638      	mov	r0, r7
 800b3e8:	f001 fd1e 	bl	800ce28 <_free_r>
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	6363      	str	r3, [r4, #52]	; 0x34
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	61a3      	str	r3, [r4, #24]
 800b3f4:	6063      	str	r3, [r4, #4]
 800b3f6:	89a3      	ldrh	r3, [r4, #12]
 800b3f8:	0619      	lsls	r1, r3, #24
 800b3fa:	d503      	bpl.n	800b404 <setvbuf+0x7c>
 800b3fc:	6921      	ldr	r1, [r4, #16]
 800b3fe:	4638      	mov	r0, r7
 800b400:	f001 fd12 	bl	800ce28 <_free_r>
 800b404:	89a3      	ldrh	r3, [r4, #12]
 800b406:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800b40a:	f023 0303 	bic.w	r3, r3, #3
 800b40e:	f1b8 0f02 	cmp.w	r8, #2
 800b412:	81a3      	strh	r3, [r4, #12]
 800b414:	d06c      	beq.n	800b4f0 <setvbuf+0x168>
 800b416:	ab01      	add	r3, sp, #4
 800b418:	466a      	mov	r2, sp
 800b41a:	4621      	mov	r1, r4
 800b41c:	4638      	mov	r0, r7
 800b41e:	f001 f908 	bl	800c632 <__swhatbuf_r>
 800b422:	89a3      	ldrh	r3, [r4, #12]
 800b424:	4318      	orrs	r0, r3
 800b426:	81a0      	strh	r0, [r4, #12]
 800b428:	2d00      	cmp	r5, #0
 800b42a:	d130      	bne.n	800b48e <setvbuf+0x106>
 800b42c:	9d00      	ldr	r5, [sp, #0]
 800b42e:	4628      	mov	r0, r5
 800b430:	f001 f964 	bl	800c6fc <malloc>
 800b434:	4606      	mov	r6, r0
 800b436:	2800      	cmp	r0, #0
 800b438:	d155      	bne.n	800b4e6 <setvbuf+0x15e>
 800b43a:	f8dd 9000 	ldr.w	r9, [sp]
 800b43e:	45a9      	cmp	r9, r5
 800b440:	d14a      	bne.n	800b4d8 <setvbuf+0x150>
 800b442:	f04f 35ff 	mov.w	r5, #4294967295
 800b446:	2200      	movs	r2, #0
 800b448:	60a2      	str	r2, [r4, #8]
 800b44a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800b44e:	6022      	str	r2, [r4, #0]
 800b450:	6122      	str	r2, [r4, #16]
 800b452:	2201      	movs	r2, #1
 800b454:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b458:	6162      	str	r2, [r4, #20]
 800b45a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b45c:	f043 0302 	orr.w	r3, r3, #2
 800b460:	07d2      	lsls	r2, r2, #31
 800b462:	81a3      	strh	r3, [r4, #12]
 800b464:	d405      	bmi.n	800b472 <setvbuf+0xea>
 800b466:	f413 7f00 	tst.w	r3, #512	; 0x200
 800b46a:	d102      	bne.n	800b472 <setvbuf+0xea>
 800b46c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b46e:	f001 f8df 	bl	800c630 <__retarget_lock_release_recursive>
 800b472:	4628      	mov	r0, r5
 800b474:	b003      	add	sp, #12
 800b476:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b47a:	4b24      	ldr	r3, [pc, #144]	; (800b50c <setvbuf+0x184>)
 800b47c:	429c      	cmp	r4, r3
 800b47e:	d101      	bne.n	800b484 <setvbuf+0xfc>
 800b480:	68bc      	ldr	r4, [r7, #8]
 800b482:	e793      	b.n	800b3ac <setvbuf+0x24>
 800b484:	4b22      	ldr	r3, [pc, #136]	; (800b510 <setvbuf+0x188>)
 800b486:	429c      	cmp	r4, r3
 800b488:	bf08      	it	eq
 800b48a:	68fc      	ldreq	r4, [r7, #12]
 800b48c:	e78e      	b.n	800b3ac <setvbuf+0x24>
 800b48e:	2e00      	cmp	r6, #0
 800b490:	d0cd      	beq.n	800b42e <setvbuf+0xa6>
 800b492:	69bb      	ldr	r3, [r7, #24]
 800b494:	b913      	cbnz	r3, 800b49c <setvbuf+0x114>
 800b496:	4638      	mov	r0, r7
 800b498:	f001 f826 	bl	800c4e8 <__sinit>
 800b49c:	f1b8 0f01 	cmp.w	r8, #1
 800b4a0:	bf08      	it	eq
 800b4a2:	89a3      	ldrheq	r3, [r4, #12]
 800b4a4:	6026      	str	r6, [r4, #0]
 800b4a6:	bf04      	itt	eq
 800b4a8:	f043 0301 	orreq.w	r3, r3, #1
 800b4ac:	81a3      	strheq	r3, [r4, #12]
 800b4ae:	89a2      	ldrh	r2, [r4, #12]
 800b4b0:	f012 0308 	ands.w	r3, r2, #8
 800b4b4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800b4b8:	d01c      	beq.n	800b4f4 <setvbuf+0x16c>
 800b4ba:	07d3      	lsls	r3, r2, #31
 800b4bc:	bf41      	itttt	mi
 800b4be:	2300      	movmi	r3, #0
 800b4c0:	426d      	negmi	r5, r5
 800b4c2:	60a3      	strmi	r3, [r4, #8]
 800b4c4:	61a5      	strmi	r5, [r4, #24]
 800b4c6:	bf58      	it	pl
 800b4c8:	60a5      	strpl	r5, [r4, #8]
 800b4ca:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800b4cc:	f015 0501 	ands.w	r5, r5, #1
 800b4d0:	d115      	bne.n	800b4fe <setvbuf+0x176>
 800b4d2:	f412 7f00 	tst.w	r2, #512	; 0x200
 800b4d6:	e7c8      	b.n	800b46a <setvbuf+0xe2>
 800b4d8:	4648      	mov	r0, r9
 800b4da:	f001 f90f 	bl	800c6fc <malloc>
 800b4de:	4606      	mov	r6, r0
 800b4e0:	2800      	cmp	r0, #0
 800b4e2:	d0ae      	beq.n	800b442 <setvbuf+0xba>
 800b4e4:	464d      	mov	r5, r9
 800b4e6:	89a3      	ldrh	r3, [r4, #12]
 800b4e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4ec:	81a3      	strh	r3, [r4, #12]
 800b4ee:	e7d0      	b.n	800b492 <setvbuf+0x10a>
 800b4f0:	2500      	movs	r5, #0
 800b4f2:	e7a8      	b.n	800b446 <setvbuf+0xbe>
 800b4f4:	60a3      	str	r3, [r4, #8]
 800b4f6:	e7e8      	b.n	800b4ca <setvbuf+0x142>
 800b4f8:	f04f 35ff 	mov.w	r5, #4294967295
 800b4fc:	e7b9      	b.n	800b472 <setvbuf+0xea>
 800b4fe:	2500      	movs	r5, #0
 800b500:	e7b7      	b.n	800b472 <setvbuf+0xea>
 800b502:	bf00      	nop
 800b504:	24000010 	.word	0x24000010
 800b508:	0800e57c 	.word	0x0800e57c
 800b50c:	0800e59c 	.word	0x0800e59c
 800b510:	0800e55c 	.word	0x0800e55c

0800b514 <__swbuf_r>:
 800b514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b516:	460e      	mov	r6, r1
 800b518:	4614      	mov	r4, r2
 800b51a:	4605      	mov	r5, r0
 800b51c:	b118      	cbz	r0, 800b526 <__swbuf_r+0x12>
 800b51e:	6983      	ldr	r3, [r0, #24]
 800b520:	b90b      	cbnz	r3, 800b526 <__swbuf_r+0x12>
 800b522:	f000 ffe1 	bl	800c4e8 <__sinit>
 800b526:	4b21      	ldr	r3, [pc, #132]	; (800b5ac <__swbuf_r+0x98>)
 800b528:	429c      	cmp	r4, r3
 800b52a:	d12b      	bne.n	800b584 <__swbuf_r+0x70>
 800b52c:	686c      	ldr	r4, [r5, #4]
 800b52e:	69a3      	ldr	r3, [r4, #24]
 800b530:	60a3      	str	r3, [r4, #8]
 800b532:	89a3      	ldrh	r3, [r4, #12]
 800b534:	071a      	lsls	r2, r3, #28
 800b536:	d52f      	bpl.n	800b598 <__swbuf_r+0x84>
 800b538:	6923      	ldr	r3, [r4, #16]
 800b53a:	b36b      	cbz	r3, 800b598 <__swbuf_r+0x84>
 800b53c:	6923      	ldr	r3, [r4, #16]
 800b53e:	6820      	ldr	r0, [r4, #0]
 800b540:	1ac0      	subs	r0, r0, r3
 800b542:	6963      	ldr	r3, [r4, #20]
 800b544:	b2f6      	uxtb	r6, r6
 800b546:	4283      	cmp	r3, r0
 800b548:	4637      	mov	r7, r6
 800b54a:	dc04      	bgt.n	800b556 <__swbuf_r+0x42>
 800b54c:	4621      	mov	r1, r4
 800b54e:	4628      	mov	r0, r5
 800b550:	f000 ff36 	bl	800c3c0 <_fflush_r>
 800b554:	bb30      	cbnz	r0, 800b5a4 <__swbuf_r+0x90>
 800b556:	68a3      	ldr	r3, [r4, #8]
 800b558:	3b01      	subs	r3, #1
 800b55a:	60a3      	str	r3, [r4, #8]
 800b55c:	6823      	ldr	r3, [r4, #0]
 800b55e:	1c5a      	adds	r2, r3, #1
 800b560:	6022      	str	r2, [r4, #0]
 800b562:	701e      	strb	r6, [r3, #0]
 800b564:	6963      	ldr	r3, [r4, #20]
 800b566:	3001      	adds	r0, #1
 800b568:	4283      	cmp	r3, r0
 800b56a:	d004      	beq.n	800b576 <__swbuf_r+0x62>
 800b56c:	89a3      	ldrh	r3, [r4, #12]
 800b56e:	07db      	lsls	r3, r3, #31
 800b570:	d506      	bpl.n	800b580 <__swbuf_r+0x6c>
 800b572:	2e0a      	cmp	r6, #10
 800b574:	d104      	bne.n	800b580 <__swbuf_r+0x6c>
 800b576:	4621      	mov	r1, r4
 800b578:	4628      	mov	r0, r5
 800b57a:	f000 ff21 	bl	800c3c0 <_fflush_r>
 800b57e:	b988      	cbnz	r0, 800b5a4 <__swbuf_r+0x90>
 800b580:	4638      	mov	r0, r7
 800b582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b584:	4b0a      	ldr	r3, [pc, #40]	; (800b5b0 <__swbuf_r+0x9c>)
 800b586:	429c      	cmp	r4, r3
 800b588:	d101      	bne.n	800b58e <__swbuf_r+0x7a>
 800b58a:	68ac      	ldr	r4, [r5, #8]
 800b58c:	e7cf      	b.n	800b52e <__swbuf_r+0x1a>
 800b58e:	4b09      	ldr	r3, [pc, #36]	; (800b5b4 <__swbuf_r+0xa0>)
 800b590:	429c      	cmp	r4, r3
 800b592:	bf08      	it	eq
 800b594:	68ec      	ldreq	r4, [r5, #12]
 800b596:	e7ca      	b.n	800b52e <__swbuf_r+0x1a>
 800b598:	4621      	mov	r1, r4
 800b59a:	4628      	mov	r0, r5
 800b59c:	f000 f80c 	bl	800b5b8 <__swsetup_r>
 800b5a0:	2800      	cmp	r0, #0
 800b5a2:	d0cb      	beq.n	800b53c <__swbuf_r+0x28>
 800b5a4:	f04f 37ff 	mov.w	r7, #4294967295
 800b5a8:	e7ea      	b.n	800b580 <__swbuf_r+0x6c>
 800b5aa:	bf00      	nop
 800b5ac:	0800e57c 	.word	0x0800e57c
 800b5b0:	0800e59c 	.word	0x0800e59c
 800b5b4:	0800e55c 	.word	0x0800e55c

0800b5b8 <__swsetup_r>:
 800b5b8:	4b32      	ldr	r3, [pc, #200]	; (800b684 <__swsetup_r+0xcc>)
 800b5ba:	b570      	push	{r4, r5, r6, lr}
 800b5bc:	681d      	ldr	r5, [r3, #0]
 800b5be:	4606      	mov	r6, r0
 800b5c0:	460c      	mov	r4, r1
 800b5c2:	b125      	cbz	r5, 800b5ce <__swsetup_r+0x16>
 800b5c4:	69ab      	ldr	r3, [r5, #24]
 800b5c6:	b913      	cbnz	r3, 800b5ce <__swsetup_r+0x16>
 800b5c8:	4628      	mov	r0, r5
 800b5ca:	f000 ff8d 	bl	800c4e8 <__sinit>
 800b5ce:	4b2e      	ldr	r3, [pc, #184]	; (800b688 <__swsetup_r+0xd0>)
 800b5d0:	429c      	cmp	r4, r3
 800b5d2:	d10f      	bne.n	800b5f4 <__swsetup_r+0x3c>
 800b5d4:	686c      	ldr	r4, [r5, #4]
 800b5d6:	89a3      	ldrh	r3, [r4, #12]
 800b5d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5dc:	0719      	lsls	r1, r3, #28
 800b5de:	d42c      	bmi.n	800b63a <__swsetup_r+0x82>
 800b5e0:	06dd      	lsls	r5, r3, #27
 800b5e2:	d411      	bmi.n	800b608 <__swsetup_r+0x50>
 800b5e4:	2309      	movs	r3, #9
 800b5e6:	6033      	str	r3, [r6, #0]
 800b5e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b5ec:	81a3      	strh	r3, [r4, #12]
 800b5ee:	f04f 30ff 	mov.w	r0, #4294967295
 800b5f2:	e03e      	b.n	800b672 <__swsetup_r+0xba>
 800b5f4:	4b25      	ldr	r3, [pc, #148]	; (800b68c <__swsetup_r+0xd4>)
 800b5f6:	429c      	cmp	r4, r3
 800b5f8:	d101      	bne.n	800b5fe <__swsetup_r+0x46>
 800b5fa:	68ac      	ldr	r4, [r5, #8]
 800b5fc:	e7eb      	b.n	800b5d6 <__swsetup_r+0x1e>
 800b5fe:	4b24      	ldr	r3, [pc, #144]	; (800b690 <__swsetup_r+0xd8>)
 800b600:	429c      	cmp	r4, r3
 800b602:	bf08      	it	eq
 800b604:	68ec      	ldreq	r4, [r5, #12]
 800b606:	e7e6      	b.n	800b5d6 <__swsetup_r+0x1e>
 800b608:	0758      	lsls	r0, r3, #29
 800b60a:	d512      	bpl.n	800b632 <__swsetup_r+0x7a>
 800b60c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b60e:	b141      	cbz	r1, 800b622 <__swsetup_r+0x6a>
 800b610:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b614:	4299      	cmp	r1, r3
 800b616:	d002      	beq.n	800b61e <__swsetup_r+0x66>
 800b618:	4630      	mov	r0, r6
 800b61a:	f001 fc05 	bl	800ce28 <_free_r>
 800b61e:	2300      	movs	r3, #0
 800b620:	6363      	str	r3, [r4, #52]	; 0x34
 800b622:	89a3      	ldrh	r3, [r4, #12]
 800b624:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b628:	81a3      	strh	r3, [r4, #12]
 800b62a:	2300      	movs	r3, #0
 800b62c:	6063      	str	r3, [r4, #4]
 800b62e:	6923      	ldr	r3, [r4, #16]
 800b630:	6023      	str	r3, [r4, #0]
 800b632:	89a3      	ldrh	r3, [r4, #12]
 800b634:	f043 0308 	orr.w	r3, r3, #8
 800b638:	81a3      	strh	r3, [r4, #12]
 800b63a:	6923      	ldr	r3, [r4, #16]
 800b63c:	b94b      	cbnz	r3, 800b652 <__swsetup_r+0x9a>
 800b63e:	89a3      	ldrh	r3, [r4, #12]
 800b640:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b648:	d003      	beq.n	800b652 <__swsetup_r+0x9a>
 800b64a:	4621      	mov	r1, r4
 800b64c:	4630      	mov	r0, r6
 800b64e:	f001 f815 	bl	800c67c <__smakebuf_r>
 800b652:	89a0      	ldrh	r0, [r4, #12]
 800b654:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b658:	f010 0301 	ands.w	r3, r0, #1
 800b65c:	d00a      	beq.n	800b674 <__swsetup_r+0xbc>
 800b65e:	2300      	movs	r3, #0
 800b660:	60a3      	str	r3, [r4, #8]
 800b662:	6963      	ldr	r3, [r4, #20]
 800b664:	425b      	negs	r3, r3
 800b666:	61a3      	str	r3, [r4, #24]
 800b668:	6923      	ldr	r3, [r4, #16]
 800b66a:	b943      	cbnz	r3, 800b67e <__swsetup_r+0xc6>
 800b66c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b670:	d1ba      	bne.n	800b5e8 <__swsetup_r+0x30>
 800b672:	bd70      	pop	{r4, r5, r6, pc}
 800b674:	0781      	lsls	r1, r0, #30
 800b676:	bf58      	it	pl
 800b678:	6963      	ldrpl	r3, [r4, #20]
 800b67a:	60a3      	str	r3, [r4, #8]
 800b67c:	e7f4      	b.n	800b668 <__swsetup_r+0xb0>
 800b67e:	2000      	movs	r0, #0
 800b680:	e7f7      	b.n	800b672 <__swsetup_r+0xba>
 800b682:	bf00      	nop
 800b684:	24000010 	.word	0x24000010
 800b688:	0800e57c 	.word	0x0800e57c
 800b68c:	0800e59c 	.word	0x0800e59c
 800b690:	0800e55c 	.word	0x0800e55c

0800b694 <quorem>:
 800b694:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b698:	6903      	ldr	r3, [r0, #16]
 800b69a:	690c      	ldr	r4, [r1, #16]
 800b69c:	42a3      	cmp	r3, r4
 800b69e:	4607      	mov	r7, r0
 800b6a0:	f2c0 8081 	blt.w	800b7a6 <quorem+0x112>
 800b6a4:	3c01      	subs	r4, #1
 800b6a6:	f101 0814 	add.w	r8, r1, #20
 800b6aa:	f100 0514 	add.w	r5, r0, #20
 800b6ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b6b2:	9301      	str	r3, [sp, #4]
 800b6b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b6b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b6bc:	3301      	adds	r3, #1
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b6c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b6c8:	fbb2 f6f3 	udiv	r6, r2, r3
 800b6cc:	d331      	bcc.n	800b732 <quorem+0x9e>
 800b6ce:	f04f 0e00 	mov.w	lr, #0
 800b6d2:	4640      	mov	r0, r8
 800b6d4:	46ac      	mov	ip, r5
 800b6d6:	46f2      	mov	sl, lr
 800b6d8:	f850 2b04 	ldr.w	r2, [r0], #4
 800b6dc:	b293      	uxth	r3, r2
 800b6de:	fb06 e303 	mla	r3, r6, r3, lr
 800b6e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b6e6:	b29b      	uxth	r3, r3
 800b6e8:	ebaa 0303 	sub.w	r3, sl, r3
 800b6ec:	0c12      	lsrs	r2, r2, #16
 800b6ee:	f8dc a000 	ldr.w	sl, [ip]
 800b6f2:	fb06 e202 	mla	r2, r6, r2, lr
 800b6f6:	fa13 f38a 	uxtah	r3, r3, sl
 800b6fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b6fe:	fa1f fa82 	uxth.w	sl, r2
 800b702:	f8dc 2000 	ldr.w	r2, [ip]
 800b706:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b70a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b70e:	b29b      	uxth	r3, r3
 800b710:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b714:	4581      	cmp	r9, r0
 800b716:	f84c 3b04 	str.w	r3, [ip], #4
 800b71a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b71e:	d2db      	bcs.n	800b6d8 <quorem+0x44>
 800b720:	f855 300b 	ldr.w	r3, [r5, fp]
 800b724:	b92b      	cbnz	r3, 800b732 <quorem+0x9e>
 800b726:	9b01      	ldr	r3, [sp, #4]
 800b728:	3b04      	subs	r3, #4
 800b72a:	429d      	cmp	r5, r3
 800b72c:	461a      	mov	r2, r3
 800b72e:	d32e      	bcc.n	800b78e <quorem+0xfa>
 800b730:	613c      	str	r4, [r7, #16]
 800b732:	4638      	mov	r0, r7
 800b734:	f001 fa68 	bl	800cc08 <__mcmp>
 800b738:	2800      	cmp	r0, #0
 800b73a:	db24      	blt.n	800b786 <quorem+0xf2>
 800b73c:	3601      	adds	r6, #1
 800b73e:	4628      	mov	r0, r5
 800b740:	f04f 0c00 	mov.w	ip, #0
 800b744:	f858 2b04 	ldr.w	r2, [r8], #4
 800b748:	f8d0 e000 	ldr.w	lr, [r0]
 800b74c:	b293      	uxth	r3, r2
 800b74e:	ebac 0303 	sub.w	r3, ip, r3
 800b752:	0c12      	lsrs	r2, r2, #16
 800b754:	fa13 f38e 	uxtah	r3, r3, lr
 800b758:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b75c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b760:	b29b      	uxth	r3, r3
 800b762:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b766:	45c1      	cmp	r9, r8
 800b768:	f840 3b04 	str.w	r3, [r0], #4
 800b76c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b770:	d2e8      	bcs.n	800b744 <quorem+0xb0>
 800b772:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b776:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b77a:	b922      	cbnz	r2, 800b786 <quorem+0xf2>
 800b77c:	3b04      	subs	r3, #4
 800b77e:	429d      	cmp	r5, r3
 800b780:	461a      	mov	r2, r3
 800b782:	d30a      	bcc.n	800b79a <quorem+0x106>
 800b784:	613c      	str	r4, [r7, #16]
 800b786:	4630      	mov	r0, r6
 800b788:	b003      	add	sp, #12
 800b78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b78e:	6812      	ldr	r2, [r2, #0]
 800b790:	3b04      	subs	r3, #4
 800b792:	2a00      	cmp	r2, #0
 800b794:	d1cc      	bne.n	800b730 <quorem+0x9c>
 800b796:	3c01      	subs	r4, #1
 800b798:	e7c7      	b.n	800b72a <quorem+0x96>
 800b79a:	6812      	ldr	r2, [r2, #0]
 800b79c:	3b04      	subs	r3, #4
 800b79e:	2a00      	cmp	r2, #0
 800b7a0:	d1f0      	bne.n	800b784 <quorem+0xf0>
 800b7a2:	3c01      	subs	r4, #1
 800b7a4:	e7eb      	b.n	800b77e <quorem+0xea>
 800b7a6:	2000      	movs	r0, #0
 800b7a8:	e7ee      	b.n	800b788 <quorem+0xf4>
 800b7aa:	0000      	movs	r0, r0
 800b7ac:	0000      	movs	r0, r0
	...

0800b7b0 <_dtoa_r>:
 800b7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b4:	ec59 8b10 	vmov	r8, r9, d0
 800b7b8:	b095      	sub	sp, #84	; 0x54
 800b7ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b7bc:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800b7be:	9107      	str	r1, [sp, #28]
 800b7c0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800b7c4:	4606      	mov	r6, r0
 800b7c6:	9209      	str	r2, [sp, #36]	; 0x24
 800b7c8:	9310      	str	r3, [sp, #64]	; 0x40
 800b7ca:	b975      	cbnz	r5, 800b7ea <_dtoa_r+0x3a>
 800b7cc:	2010      	movs	r0, #16
 800b7ce:	f000 ff95 	bl	800c6fc <malloc>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	6270      	str	r0, [r6, #36]	; 0x24
 800b7d6:	b920      	cbnz	r0, 800b7e2 <_dtoa_r+0x32>
 800b7d8:	4bab      	ldr	r3, [pc, #684]	; (800ba88 <_dtoa_r+0x2d8>)
 800b7da:	21ea      	movs	r1, #234	; 0xea
 800b7dc:	48ab      	ldr	r0, [pc, #684]	; (800ba8c <_dtoa_r+0x2dc>)
 800b7de:	f001 fd8d 	bl	800d2fc <__assert_func>
 800b7e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b7e6:	6005      	str	r5, [r0, #0]
 800b7e8:	60c5      	str	r5, [r0, #12]
 800b7ea:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b7ec:	6819      	ldr	r1, [r3, #0]
 800b7ee:	b151      	cbz	r1, 800b806 <_dtoa_r+0x56>
 800b7f0:	685a      	ldr	r2, [r3, #4]
 800b7f2:	604a      	str	r2, [r1, #4]
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	4093      	lsls	r3, r2
 800b7f8:	608b      	str	r3, [r1, #8]
 800b7fa:	4630      	mov	r0, r6
 800b7fc:	f000 ffc6 	bl	800c78c <_Bfree>
 800b800:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b802:	2200      	movs	r2, #0
 800b804:	601a      	str	r2, [r3, #0]
 800b806:	f1b9 0300 	subs.w	r3, r9, #0
 800b80a:	bfbb      	ittet	lt
 800b80c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b810:	9303      	strlt	r3, [sp, #12]
 800b812:	2300      	movge	r3, #0
 800b814:	2201      	movlt	r2, #1
 800b816:	bfac      	ite	ge
 800b818:	6023      	strge	r3, [r4, #0]
 800b81a:	6022      	strlt	r2, [r4, #0]
 800b81c:	4b9c      	ldr	r3, [pc, #624]	; (800ba90 <_dtoa_r+0x2e0>)
 800b81e:	9c03      	ldr	r4, [sp, #12]
 800b820:	43a3      	bics	r3, r4
 800b822:	d11a      	bne.n	800b85a <_dtoa_r+0xaa>
 800b824:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b826:	f242 730f 	movw	r3, #9999	; 0x270f
 800b82a:	6013      	str	r3, [r2, #0]
 800b82c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800b830:	ea53 0308 	orrs.w	r3, r3, r8
 800b834:	f000 8512 	beq.w	800c25c <_dtoa_r+0xaac>
 800b838:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b83a:	b953      	cbnz	r3, 800b852 <_dtoa_r+0xa2>
 800b83c:	4b95      	ldr	r3, [pc, #596]	; (800ba94 <_dtoa_r+0x2e4>)
 800b83e:	e01f      	b.n	800b880 <_dtoa_r+0xd0>
 800b840:	4b95      	ldr	r3, [pc, #596]	; (800ba98 <_dtoa_r+0x2e8>)
 800b842:	9300      	str	r3, [sp, #0]
 800b844:	3308      	adds	r3, #8
 800b846:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b848:	6013      	str	r3, [r2, #0]
 800b84a:	9800      	ldr	r0, [sp, #0]
 800b84c:	b015      	add	sp, #84	; 0x54
 800b84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b852:	4b90      	ldr	r3, [pc, #576]	; (800ba94 <_dtoa_r+0x2e4>)
 800b854:	9300      	str	r3, [sp, #0]
 800b856:	3303      	adds	r3, #3
 800b858:	e7f5      	b.n	800b846 <_dtoa_r+0x96>
 800b85a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b85e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b866:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b86a:	d10b      	bne.n	800b884 <_dtoa_r+0xd4>
 800b86c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b86e:	2301      	movs	r3, #1
 800b870:	6013      	str	r3, [r2, #0]
 800b872:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b874:	2b00      	cmp	r3, #0
 800b876:	f000 84ee 	beq.w	800c256 <_dtoa_r+0xaa6>
 800b87a:	4888      	ldr	r0, [pc, #544]	; (800ba9c <_dtoa_r+0x2ec>)
 800b87c:	6018      	str	r0, [r3, #0]
 800b87e:	1e43      	subs	r3, r0, #1
 800b880:	9300      	str	r3, [sp, #0]
 800b882:	e7e2      	b.n	800b84a <_dtoa_r+0x9a>
 800b884:	a913      	add	r1, sp, #76	; 0x4c
 800b886:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b88a:	aa12      	add	r2, sp, #72	; 0x48
 800b88c:	4630      	mov	r0, r6
 800b88e:	f001 fa5f 	bl	800cd50 <__d2b>
 800b892:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800b896:	4605      	mov	r5, r0
 800b898:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b89a:	2900      	cmp	r1, #0
 800b89c:	d047      	beq.n	800b92e <_dtoa_r+0x17e>
 800b89e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b8a0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b8a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b8a8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800b8ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b8b0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b8b4:	2400      	movs	r4, #0
 800b8b6:	ec43 2b16 	vmov	d6, r2, r3
 800b8ba:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800b8be:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800ba70 <_dtoa_r+0x2c0>
 800b8c2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b8c6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800ba78 <_dtoa_r+0x2c8>
 800b8ca:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b8ce:	eeb0 7b46 	vmov.f64	d7, d6
 800b8d2:	ee06 1a90 	vmov	s13, r1
 800b8d6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800b8da:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800ba80 <_dtoa_r+0x2d0>
 800b8de:	eea5 7b06 	vfma.f64	d7, d5, d6
 800b8e2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b8e6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b8ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8ee:	ee16 ba90 	vmov	fp, s13
 800b8f2:	9411      	str	r4, [sp, #68]	; 0x44
 800b8f4:	d508      	bpl.n	800b908 <_dtoa_r+0x158>
 800b8f6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b8fa:	eeb4 6b47 	vcmp.f64	d6, d7
 800b8fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b902:	bf18      	it	ne
 800b904:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800b908:	f1bb 0f16 	cmp.w	fp, #22
 800b90c:	d832      	bhi.n	800b974 <_dtoa_r+0x1c4>
 800b90e:	4b64      	ldr	r3, [pc, #400]	; (800baa0 <_dtoa_r+0x2f0>)
 800b910:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b914:	ed93 7b00 	vldr	d7, [r3]
 800b918:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800b91c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b924:	d501      	bpl.n	800b92a <_dtoa_r+0x17a>
 800b926:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b92a:	2300      	movs	r3, #0
 800b92c:	e023      	b.n	800b976 <_dtoa_r+0x1c6>
 800b92e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b930:	4401      	add	r1, r0
 800b932:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800b936:	2b20      	cmp	r3, #32
 800b938:	bfc3      	ittte	gt
 800b93a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b93e:	fa04 f303 	lslgt.w	r3, r4, r3
 800b942:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800b946:	f1c3 0320 	rsble	r3, r3, #32
 800b94a:	bfc6      	itte	gt
 800b94c:	fa28 f804 	lsrgt.w	r8, r8, r4
 800b950:	ea43 0308 	orrgt.w	r3, r3, r8
 800b954:	fa08 f303 	lslle.w	r3, r8, r3
 800b958:	ee07 3a90 	vmov	s15, r3
 800b95c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b960:	3901      	subs	r1, #1
 800b962:	ed8d 7b00 	vstr	d7, [sp]
 800b966:	9c01      	ldr	r4, [sp, #4]
 800b968:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b96c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800b970:	2401      	movs	r4, #1
 800b972:	e7a0      	b.n	800b8b6 <_dtoa_r+0x106>
 800b974:	2301      	movs	r3, #1
 800b976:	930f      	str	r3, [sp, #60]	; 0x3c
 800b978:	1a43      	subs	r3, r0, r1
 800b97a:	1e5a      	subs	r2, r3, #1
 800b97c:	bf45      	ittet	mi
 800b97e:	f1c3 0301 	rsbmi	r3, r3, #1
 800b982:	9305      	strmi	r3, [sp, #20]
 800b984:	2300      	movpl	r3, #0
 800b986:	2300      	movmi	r3, #0
 800b988:	9206      	str	r2, [sp, #24]
 800b98a:	bf54      	ite	pl
 800b98c:	9305      	strpl	r3, [sp, #20]
 800b98e:	9306      	strmi	r3, [sp, #24]
 800b990:	f1bb 0f00 	cmp.w	fp, #0
 800b994:	db18      	blt.n	800b9c8 <_dtoa_r+0x218>
 800b996:	9b06      	ldr	r3, [sp, #24]
 800b998:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800b99c:	445b      	add	r3, fp
 800b99e:	9306      	str	r3, [sp, #24]
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	9a07      	ldr	r2, [sp, #28]
 800b9a4:	2a09      	cmp	r2, #9
 800b9a6:	d849      	bhi.n	800ba3c <_dtoa_r+0x28c>
 800b9a8:	2a05      	cmp	r2, #5
 800b9aa:	bfc4      	itt	gt
 800b9ac:	3a04      	subgt	r2, #4
 800b9ae:	9207      	strgt	r2, [sp, #28]
 800b9b0:	9a07      	ldr	r2, [sp, #28]
 800b9b2:	f1a2 0202 	sub.w	r2, r2, #2
 800b9b6:	bfcc      	ite	gt
 800b9b8:	2400      	movgt	r4, #0
 800b9ba:	2401      	movle	r4, #1
 800b9bc:	2a03      	cmp	r2, #3
 800b9be:	d848      	bhi.n	800ba52 <_dtoa_r+0x2a2>
 800b9c0:	e8df f002 	tbb	[pc, r2]
 800b9c4:	3a2c2e0b 	.word	0x3a2c2e0b
 800b9c8:	9b05      	ldr	r3, [sp, #20]
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	eba3 030b 	sub.w	r3, r3, fp
 800b9d0:	9305      	str	r3, [sp, #20]
 800b9d2:	920e      	str	r2, [sp, #56]	; 0x38
 800b9d4:	f1cb 0300 	rsb	r3, fp, #0
 800b9d8:	e7e3      	b.n	800b9a2 <_dtoa_r+0x1f2>
 800b9da:	2200      	movs	r2, #0
 800b9dc:	9208      	str	r2, [sp, #32]
 800b9de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9e0:	2a00      	cmp	r2, #0
 800b9e2:	dc39      	bgt.n	800ba58 <_dtoa_r+0x2a8>
 800b9e4:	f04f 0a01 	mov.w	sl, #1
 800b9e8:	46d1      	mov	r9, sl
 800b9ea:	4652      	mov	r2, sl
 800b9ec:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b9f0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800b9f2:	2100      	movs	r1, #0
 800b9f4:	6079      	str	r1, [r7, #4]
 800b9f6:	2004      	movs	r0, #4
 800b9f8:	f100 0c14 	add.w	ip, r0, #20
 800b9fc:	4594      	cmp	ip, r2
 800b9fe:	6879      	ldr	r1, [r7, #4]
 800ba00:	d92f      	bls.n	800ba62 <_dtoa_r+0x2b2>
 800ba02:	4630      	mov	r0, r6
 800ba04:	930c      	str	r3, [sp, #48]	; 0x30
 800ba06:	f000 fe81 	bl	800c70c <_Balloc>
 800ba0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba0c:	9000      	str	r0, [sp, #0]
 800ba0e:	4602      	mov	r2, r0
 800ba10:	2800      	cmp	r0, #0
 800ba12:	d149      	bne.n	800baa8 <_dtoa_r+0x2f8>
 800ba14:	4b23      	ldr	r3, [pc, #140]	; (800baa4 <_dtoa_r+0x2f4>)
 800ba16:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ba1a:	e6df      	b.n	800b7dc <_dtoa_r+0x2c>
 800ba1c:	2201      	movs	r2, #1
 800ba1e:	e7dd      	b.n	800b9dc <_dtoa_r+0x22c>
 800ba20:	2200      	movs	r2, #0
 800ba22:	9208      	str	r2, [sp, #32]
 800ba24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba26:	eb0b 0a02 	add.w	sl, fp, r2
 800ba2a:	f10a 0901 	add.w	r9, sl, #1
 800ba2e:	464a      	mov	r2, r9
 800ba30:	2a01      	cmp	r2, #1
 800ba32:	bfb8      	it	lt
 800ba34:	2201      	movlt	r2, #1
 800ba36:	e7db      	b.n	800b9f0 <_dtoa_r+0x240>
 800ba38:	2201      	movs	r2, #1
 800ba3a:	e7f2      	b.n	800ba22 <_dtoa_r+0x272>
 800ba3c:	2401      	movs	r4, #1
 800ba3e:	2200      	movs	r2, #0
 800ba40:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800ba44:	f04f 3aff 	mov.w	sl, #4294967295
 800ba48:	2100      	movs	r1, #0
 800ba4a:	46d1      	mov	r9, sl
 800ba4c:	2212      	movs	r2, #18
 800ba4e:	9109      	str	r1, [sp, #36]	; 0x24
 800ba50:	e7ce      	b.n	800b9f0 <_dtoa_r+0x240>
 800ba52:	2201      	movs	r2, #1
 800ba54:	9208      	str	r2, [sp, #32]
 800ba56:	e7f5      	b.n	800ba44 <_dtoa_r+0x294>
 800ba58:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800ba5c:	46d1      	mov	r9, sl
 800ba5e:	4652      	mov	r2, sl
 800ba60:	e7c6      	b.n	800b9f0 <_dtoa_r+0x240>
 800ba62:	3101      	adds	r1, #1
 800ba64:	6079      	str	r1, [r7, #4]
 800ba66:	0040      	lsls	r0, r0, #1
 800ba68:	e7c6      	b.n	800b9f8 <_dtoa_r+0x248>
 800ba6a:	bf00      	nop
 800ba6c:	f3af 8000 	nop.w
 800ba70:	636f4361 	.word	0x636f4361
 800ba74:	3fd287a7 	.word	0x3fd287a7
 800ba78:	8b60c8b3 	.word	0x8b60c8b3
 800ba7c:	3fc68a28 	.word	0x3fc68a28
 800ba80:	509f79fb 	.word	0x509f79fb
 800ba84:	3fd34413 	.word	0x3fd34413
 800ba88:	0800e4d5 	.word	0x0800e4d5
 800ba8c:	0800e4ec 	.word	0x0800e4ec
 800ba90:	7ff00000 	.word	0x7ff00000
 800ba94:	0800e4d1 	.word	0x0800e4d1
 800ba98:	0800e4c8 	.word	0x0800e4c8
 800ba9c:	0800e4a5 	.word	0x0800e4a5
 800baa0:	0800e648 	.word	0x0800e648
 800baa4:	0800e54b 	.word	0x0800e54b
 800baa8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800baaa:	9900      	ldr	r1, [sp, #0]
 800baac:	6011      	str	r1, [r2, #0]
 800baae:	f1b9 0f0e 	cmp.w	r9, #14
 800bab2:	d872      	bhi.n	800bb9a <_dtoa_r+0x3ea>
 800bab4:	2c00      	cmp	r4, #0
 800bab6:	d070      	beq.n	800bb9a <_dtoa_r+0x3ea>
 800bab8:	f1bb 0f00 	cmp.w	fp, #0
 800babc:	f340 80a6 	ble.w	800bc0c <_dtoa_r+0x45c>
 800bac0:	49ca      	ldr	r1, [pc, #808]	; (800bdec <_dtoa_r+0x63c>)
 800bac2:	f00b 020f 	and.w	r2, fp, #15
 800bac6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800baca:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bace:	ed92 7b00 	vldr	d7, [r2]
 800bad2:	ea4f 112b 	mov.w	r1, fp, asr #4
 800bad6:	f000 808d 	beq.w	800bbf4 <_dtoa_r+0x444>
 800bada:	4ac5      	ldr	r2, [pc, #788]	; (800bdf0 <_dtoa_r+0x640>)
 800badc:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800bae0:	ed92 6b08 	vldr	d6, [r2, #32]
 800bae4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800bae8:	ed8d 6b02 	vstr	d6, [sp, #8]
 800baec:	f001 010f 	and.w	r1, r1, #15
 800baf0:	2203      	movs	r2, #3
 800baf2:	48bf      	ldr	r0, [pc, #764]	; (800bdf0 <_dtoa_r+0x640>)
 800baf4:	2900      	cmp	r1, #0
 800baf6:	d17f      	bne.n	800bbf8 <_dtoa_r+0x448>
 800baf8:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bafc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800bb00:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bb04:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bb06:	2900      	cmp	r1, #0
 800bb08:	f000 80b2 	beq.w	800bc70 <_dtoa_r+0x4c0>
 800bb0c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800bb10:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bb14:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bb18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb1c:	f140 80a8 	bpl.w	800bc70 <_dtoa_r+0x4c0>
 800bb20:	f1b9 0f00 	cmp.w	r9, #0
 800bb24:	f000 80a4 	beq.w	800bc70 <_dtoa_r+0x4c0>
 800bb28:	f1ba 0f00 	cmp.w	sl, #0
 800bb2c:	dd31      	ble.n	800bb92 <_dtoa_r+0x3e2>
 800bb2e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800bb32:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bb36:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bb3a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800bb3e:	3201      	adds	r2, #1
 800bb40:	4650      	mov	r0, sl
 800bb42:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bb46:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800bb4a:	ee07 2a90 	vmov	s15, r2
 800bb4e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bb52:	eea7 5b06 	vfma.f64	d5, d7, d6
 800bb56:	ed8d 5b02 	vstr	d5, [sp, #8]
 800bb5a:	9c03      	ldr	r4, [sp, #12]
 800bb5c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800bb60:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800bb64:	2800      	cmp	r0, #0
 800bb66:	f040 8086 	bne.w	800bc76 <_dtoa_r+0x4c6>
 800bb6a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800bb6e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800bb72:	ec42 1b17 	vmov	d7, r1, r2
 800bb76:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bb7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb7e:	f300 8272 	bgt.w	800c066 <_dtoa_r+0x8b6>
 800bb82:	eeb1 7b47 	vneg.f64	d7, d7
 800bb86:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bb8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb8e:	f100 8267 	bmi.w	800c060 <_dtoa_r+0x8b0>
 800bb92:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800bb96:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800bb9a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bb9c:	2a00      	cmp	r2, #0
 800bb9e:	f2c0 8129 	blt.w	800bdf4 <_dtoa_r+0x644>
 800bba2:	f1bb 0f0e 	cmp.w	fp, #14
 800bba6:	f300 8125 	bgt.w	800bdf4 <_dtoa_r+0x644>
 800bbaa:	4b90      	ldr	r3, [pc, #576]	; (800bdec <_dtoa_r+0x63c>)
 800bbac:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bbb0:	ed93 6b00 	vldr	d6, [r3]
 800bbb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	f280 80c3 	bge.w	800bd42 <_dtoa_r+0x592>
 800bbbc:	f1b9 0f00 	cmp.w	r9, #0
 800bbc0:	f300 80bf 	bgt.w	800bd42 <_dtoa_r+0x592>
 800bbc4:	f040 824c 	bne.w	800c060 <_dtoa_r+0x8b0>
 800bbc8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800bbcc:	ee26 6b07 	vmul.f64	d6, d6, d7
 800bbd0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bbd4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bbd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbdc:	464c      	mov	r4, r9
 800bbde:	464f      	mov	r7, r9
 800bbe0:	f280 8222 	bge.w	800c028 <_dtoa_r+0x878>
 800bbe4:	f8dd 8000 	ldr.w	r8, [sp]
 800bbe8:	2331      	movs	r3, #49	; 0x31
 800bbea:	f808 3b01 	strb.w	r3, [r8], #1
 800bbee:	f10b 0b01 	add.w	fp, fp, #1
 800bbf2:	e21e      	b.n	800c032 <_dtoa_r+0x882>
 800bbf4:	2202      	movs	r2, #2
 800bbf6:	e77c      	b.n	800baf2 <_dtoa_r+0x342>
 800bbf8:	07cc      	lsls	r4, r1, #31
 800bbfa:	d504      	bpl.n	800bc06 <_dtoa_r+0x456>
 800bbfc:	ed90 6b00 	vldr	d6, [r0]
 800bc00:	3201      	adds	r2, #1
 800bc02:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bc06:	1049      	asrs	r1, r1, #1
 800bc08:	3008      	adds	r0, #8
 800bc0a:	e773      	b.n	800baf4 <_dtoa_r+0x344>
 800bc0c:	d02e      	beq.n	800bc6c <_dtoa_r+0x4bc>
 800bc0e:	f1cb 0100 	rsb	r1, fp, #0
 800bc12:	4a76      	ldr	r2, [pc, #472]	; (800bdec <_dtoa_r+0x63c>)
 800bc14:	f001 000f 	and.w	r0, r1, #15
 800bc18:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800bc1c:	ed92 7b00 	vldr	d7, [r2]
 800bc20:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800bc24:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bc28:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800bc2c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800bc30:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800bc34:	486e      	ldr	r0, [pc, #440]	; (800bdf0 <_dtoa_r+0x640>)
 800bc36:	1109      	asrs	r1, r1, #4
 800bc38:	2400      	movs	r4, #0
 800bc3a:	2202      	movs	r2, #2
 800bc3c:	b939      	cbnz	r1, 800bc4e <_dtoa_r+0x49e>
 800bc3e:	2c00      	cmp	r4, #0
 800bc40:	f43f af60 	beq.w	800bb04 <_dtoa_r+0x354>
 800bc44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bc48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc4c:	e75a      	b.n	800bb04 <_dtoa_r+0x354>
 800bc4e:	07cf      	lsls	r7, r1, #31
 800bc50:	d509      	bpl.n	800bc66 <_dtoa_r+0x4b6>
 800bc52:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800bc56:	ed90 7b00 	vldr	d7, [r0]
 800bc5a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bc5e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800bc62:	3201      	adds	r2, #1
 800bc64:	2401      	movs	r4, #1
 800bc66:	1049      	asrs	r1, r1, #1
 800bc68:	3008      	adds	r0, #8
 800bc6a:	e7e7      	b.n	800bc3c <_dtoa_r+0x48c>
 800bc6c:	2202      	movs	r2, #2
 800bc6e:	e749      	b.n	800bb04 <_dtoa_r+0x354>
 800bc70:	465f      	mov	r7, fp
 800bc72:	4648      	mov	r0, r9
 800bc74:	e765      	b.n	800bb42 <_dtoa_r+0x392>
 800bc76:	ec42 1b17 	vmov	d7, r1, r2
 800bc7a:	4a5c      	ldr	r2, [pc, #368]	; (800bdec <_dtoa_r+0x63c>)
 800bc7c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800bc80:	ed12 4b02 	vldr	d4, [r2, #-8]
 800bc84:	9a00      	ldr	r2, [sp, #0]
 800bc86:	1814      	adds	r4, r2, r0
 800bc88:	9a08      	ldr	r2, [sp, #32]
 800bc8a:	b352      	cbz	r2, 800bce2 <_dtoa_r+0x532>
 800bc8c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800bc90:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800bc94:	f8dd 8000 	ldr.w	r8, [sp]
 800bc98:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800bc9c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800bca0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bca4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bca8:	ee14 2a90 	vmov	r2, s9
 800bcac:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bcb0:	3230      	adds	r2, #48	; 0x30
 800bcb2:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bcb6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bcba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcbe:	f808 2b01 	strb.w	r2, [r8], #1
 800bcc2:	d439      	bmi.n	800bd38 <_dtoa_r+0x588>
 800bcc4:	ee32 5b46 	vsub.f64	d5, d2, d6
 800bcc8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800bccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcd0:	d472      	bmi.n	800bdb8 <_dtoa_r+0x608>
 800bcd2:	45a0      	cmp	r8, r4
 800bcd4:	f43f af5d 	beq.w	800bb92 <_dtoa_r+0x3e2>
 800bcd8:	ee27 7b03 	vmul.f64	d7, d7, d3
 800bcdc:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bce0:	e7e0      	b.n	800bca4 <_dtoa_r+0x4f4>
 800bce2:	f8dd 8000 	ldr.w	r8, [sp]
 800bce6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bcea:	4621      	mov	r1, r4
 800bcec:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800bcf0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bcf4:	ee14 2a90 	vmov	r2, s9
 800bcf8:	3230      	adds	r2, #48	; 0x30
 800bcfa:	f808 2b01 	strb.w	r2, [r8], #1
 800bcfe:	45a0      	cmp	r8, r4
 800bd00:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bd04:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bd08:	d118      	bne.n	800bd3c <_dtoa_r+0x58c>
 800bd0a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800bd0e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800bd12:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800bd16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd1a:	dc4d      	bgt.n	800bdb8 <_dtoa_r+0x608>
 800bd1c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bd20:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bd24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd28:	f57f af33 	bpl.w	800bb92 <_dtoa_r+0x3e2>
 800bd2c:	4688      	mov	r8, r1
 800bd2e:	3901      	subs	r1, #1
 800bd30:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800bd34:	2b30      	cmp	r3, #48	; 0x30
 800bd36:	d0f9      	beq.n	800bd2c <_dtoa_r+0x57c>
 800bd38:	46bb      	mov	fp, r7
 800bd3a:	e02a      	b.n	800bd92 <_dtoa_r+0x5e2>
 800bd3c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bd40:	e7d6      	b.n	800bcf0 <_dtoa_r+0x540>
 800bd42:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bd46:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800bd4a:	f8dd 8000 	ldr.w	r8, [sp]
 800bd4e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800bd52:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800bd56:	ee15 3a10 	vmov	r3, s10
 800bd5a:	3330      	adds	r3, #48	; 0x30
 800bd5c:	f808 3b01 	strb.w	r3, [r8], #1
 800bd60:	9b00      	ldr	r3, [sp, #0]
 800bd62:	eba8 0303 	sub.w	r3, r8, r3
 800bd66:	4599      	cmp	r9, r3
 800bd68:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800bd6c:	eea3 7b46 	vfms.f64	d7, d3, d6
 800bd70:	d133      	bne.n	800bdda <_dtoa_r+0x62a>
 800bd72:	ee37 7b07 	vadd.f64	d7, d7, d7
 800bd76:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bd7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd7e:	dc1a      	bgt.n	800bdb6 <_dtoa_r+0x606>
 800bd80:	eeb4 7b46 	vcmp.f64	d7, d6
 800bd84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd88:	d103      	bne.n	800bd92 <_dtoa_r+0x5e2>
 800bd8a:	ee15 3a10 	vmov	r3, s10
 800bd8e:	07d9      	lsls	r1, r3, #31
 800bd90:	d411      	bmi.n	800bdb6 <_dtoa_r+0x606>
 800bd92:	4629      	mov	r1, r5
 800bd94:	4630      	mov	r0, r6
 800bd96:	f000 fcf9 	bl	800c78c <_Bfree>
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bd9e:	f888 3000 	strb.w	r3, [r8]
 800bda2:	f10b 0301 	add.w	r3, fp, #1
 800bda6:	6013      	str	r3, [r2, #0]
 800bda8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	f43f ad4d 	beq.w	800b84a <_dtoa_r+0x9a>
 800bdb0:	f8c3 8000 	str.w	r8, [r3]
 800bdb4:	e549      	b.n	800b84a <_dtoa_r+0x9a>
 800bdb6:	465f      	mov	r7, fp
 800bdb8:	4643      	mov	r3, r8
 800bdba:	4698      	mov	r8, r3
 800bdbc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bdc0:	2a39      	cmp	r2, #57	; 0x39
 800bdc2:	d106      	bne.n	800bdd2 <_dtoa_r+0x622>
 800bdc4:	9a00      	ldr	r2, [sp, #0]
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d1f7      	bne.n	800bdba <_dtoa_r+0x60a>
 800bdca:	9900      	ldr	r1, [sp, #0]
 800bdcc:	2230      	movs	r2, #48	; 0x30
 800bdce:	3701      	adds	r7, #1
 800bdd0:	700a      	strb	r2, [r1, #0]
 800bdd2:	781a      	ldrb	r2, [r3, #0]
 800bdd4:	3201      	adds	r2, #1
 800bdd6:	701a      	strb	r2, [r3, #0]
 800bdd8:	e7ae      	b.n	800bd38 <_dtoa_r+0x588>
 800bdda:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bdde:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bde2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bde6:	d1b2      	bne.n	800bd4e <_dtoa_r+0x59e>
 800bde8:	e7d3      	b.n	800bd92 <_dtoa_r+0x5e2>
 800bdea:	bf00      	nop
 800bdec:	0800e648 	.word	0x0800e648
 800bdf0:	0800e620 	.word	0x0800e620
 800bdf4:	9908      	ldr	r1, [sp, #32]
 800bdf6:	2900      	cmp	r1, #0
 800bdf8:	f000 80d1 	beq.w	800bf9e <_dtoa_r+0x7ee>
 800bdfc:	9907      	ldr	r1, [sp, #28]
 800bdfe:	2901      	cmp	r1, #1
 800be00:	f300 80b4 	bgt.w	800bf6c <_dtoa_r+0x7bc>
 800be04:	9911      	ldr	r1, [sp, #68]	; 0x44
 800be06:	2900      	cmp	r1, #0
 800be08:	f000 80ac 	beq.w	800bf64 <_dtoa_r+0x7b4>
 800be0c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800be10:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800be14:	461c      	mov	r4, r3
 800be16:	930a      	str	r3, [sp, #40]	; 0x28
 800be18:	9b05      	ldr	r3, [sp, #20]
 800be1a:	4413      	add	r3, r2
 800be1c:	9305      	str	r3, [sp, #20]
 800be1e:	9b06      	ldr	r3, [sp, #24]
 800be20:	2101      	movs	r1, #1
 800be22:	4413      	add	r3, r2
 800be24:	4630      	mov	r0, r6
 800be26:	9306      	str	r3, [sp, #24]
 800be28:	f000 fd6c 	bl	800c904 <__i2b>
 800be2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be2e:	4607      	mov	r7, r0
 800be30:	f1b8 0f00 	cmp.w	r8, #0
 800be34:	dd0d      	ble.n	800be52 <_dtoa_r+0x6a2>
 800be36:	9a06      	ldr	r2, [sp, #24]
 800be38:	2a00      	cmp	r2, #0
 800be3a:	dd0a      	ble.n	800be52 <_dtoa_r+0x6a2>
 800be3c:	4542      	cmp	r2, r8
 800be3e:	9905      	ldr	r1, [sp, #20]
 800be40:	bfa8      	it	ge
 800be42:	4642      	movge	r2, r8
 800be44:	1a89      	subs	r1, r1, r2
 800be46:	9105      	str	r1, [sp, #20]
 800be48:	9906      	ldr	r1, [sp, #24]
 800be4a:	eba8 0802 	sub.w	r8, r8, r2
 800be4e:	1a8a      	subs	r2, r1, r2
 800be50:	9206      	str	r2, [sp, #24]
 800be52:	b303      	cbz	r3, 800be96 <_dtoa_r+0x6e6>
 800be54:	9a08      	ldr	r2, [sp, #32]
 800be56:	2a00      	cmp	r2, #0
 800be58:	f000 80a6 	beq.w	800bfa8 <_dtoa_r+0x7f8>
 800be5c:	2c00      	cmp	r4, #0
 800be5e:	dd13      	ble.n	800be88 <_dtoa_r+0x6d8>
 800be60:	4639      	mov	r1, r7
 800be62:	4622      	mov	r2, r4
 800be64:	4630      	mov	r0, r6
 800be66:	930c      	str	r3, [sp, #48]	; 0x30
 800be68:	f000 fe08 	bl	800ca7c <__pow5mult>
 800be6c:	462a      	mov	r2, r5
 800be6e:	4601      	mov	r1, r0
 800be70:	4607      	mov	r7, r0
 800be72:	4630      	mov	r0, r6
 800be74:	f000 fd5c 	bl	800c930 <__multiply>
 800be78:	4629      	mov	r1, r5
 800be7a:	900a      	str	r0, [sp, #40]	; 0x28
 800be7c:	4630      	mov	r0, r6
 800be7e:	f000 fc85 	bl	800c78c <_Bfree>
 800be82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be86:	4615      	mov	r5, r2
 800be88:	1b1a      	subs	r2, r3, r4
 800be8a:	d004      	beq.n	800be96 <_dtoa_r+0x6e6>
 800be8c:	4629      	mov	r1, r5
 800be8e:	4630      	mov	r0, r6
 800be90:	f000 fdf4 	bl	800ca7c <__pow5mult>
 800be94:	4605      	mov	r5, r0
 800be96:	2101      	movs	r1, #1
 800be98:	4630      	mov	r0, r6
 800be9a:	f000 fd33 	bl	800c904 <__i2b>
 800be9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	4604      	mov	r4, r0
 800bea4:	f340 8082 	ble.w	800bfac <_dtoa_r+0x7fc>
 800bea8:	461a      	mov	r2, r3
 800beaa:	4601      	mov	r1, r0
 800beac:	4630      	mov	r0, r6
 800beae:	f000 fde5 	bl	800ca7c <__pow5mult>
 800beb2:	9b07      	ldr	r3, [sp, #28]
 800beb4:	2b01      	cmp	r3, #1
 800beb6:	4604      	mov	r4, r0
 800beb8:	dd7b      	ble.n	800bfb2 <_dtoa_r+0x802>
 800beba:	2300      	movs	r3, #0
 800bebc:	930a      	str	r3, [sp, #40]	; 0x28
 800bebe:	6922      	ldr	r2, [r4, #16]
 800bec0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bec4:	6910      	ldr	r0, [r2, #16]
 800bec6:	f000 fccd 	bl	800c864 <__hi0bits>
 800beca:	f1c0 0020 	rsb	r0, r0, #32
 800bece:	9b06      	ldr	r3, [sp, #24]
 800bed0:	4418      	add	r0, r3
 800bed2:	f010 001f 	ands.w	r0, r0, #31
 800bed6:	f000 808d 	beq.w	800bff4 <_dtoa_r+0x844>
 800beda:	f1c0 0220 	rsb	r2, r0, #32
 800bede:	2a04      	cmp	r2, #4
 800bee0:	f340 8086 	ble.w	800bff0 <_dtoa_r+0x840>
 800bee4:	f1c0 001c 	rsb	r0, r0, #28
 800bee8:	9b05      	ldr	r3, [sp, #20]
 800beea:	4403      	add	r3, r0
 800beec:	9305      	str	r3, [sp, #20]
 800beee:	9b06      	ldr	r3, [sp, #24]
 800bef0:	4403      	add	r3, r0
 800bef2:	4480      	add	r8, r0
 800bef4:	9306      	str	r3, [sp, #24]
 800bef6:	9b05      	ldr	r3, [sp, #20]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	dd05      	ble.n	800bf08 <_dtoa_r+0x758>
 800befc:	4629      	mov	r1, r5
 800befe:	461a      	mov	r2, r3
 800bf00:	4630      	mov	r0, r6
 800bf02:	f000 fe15 	bl	800cb30 <__lshift>
 800bf06:	4605      	mov	r5, r0
 800bf08:	9b06      	ldr	r3, [sp, #24]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	dd05      	ble.n	800bf1a <_dtoa_r+0x76a>
 800bf0e:	4621      	mov	r1, r4
 800bf10:	461a      	mov	r2, r3
 800bf12:	4630      	mov	r0, r6
 800bf14:	f000 fe0c 	bl	800cb30 <__lshift>
 800bf18:	4604      	mov	r4, r0
 800bf1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d06b      	beq.n	800bff8 <_dtoa_r+0x848>
 800bf20:	4621      	mov	r1, r4
 800bf22:	4628      	mov	r0, r5
 800bf24:	f000 fe70 	bl	800cc08 <__mcmp>
 800bf28:	2800      	cmp	r0, #0
 800bf2a:	da65      	bge.n	800bff8 <_dtoa_r+0x848>
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	4629      	mov	r1, r5
 800bf30:	220a      	movs	r2, #10
 800bf32:	4630      	mov	r0, r6
 800bf34:	f000 fc4c 	bl	800c7d0 <__multadd>
 800bf38:	9b08      	ldr	r3, [sp, #32]
 800bf3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bf3e:	4605      	mov	r5, r0
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	f000 8192 	beq.w	800c26a <_dtoa_r+0xaba>
 800bf46:	4639      	mov	r1, r7
 800bf48:	2300      	movs	r3, #0
 800bf4a:	220a      	movs	r2, #10
 800bf4c:	4630      	mov	r0, r6
 800bf4e:	f000 fc3f 	bl	800c7d0 <__multadd>
 800bf52:	f1ba 0f00 	cmp.w	sl, #0
 800bf56:	4607      	mov	r7, r0
 800bf58:	f300 808e 	bgt.w	800c078 <_dtoa_r+0x8c8>
 800bf5c:	9b07      	ldr	r3, [sp, #28]
 800bf5e:	2b02      	cmp	r3, #2
 800bf60:	dc51      	bgt.n	800c006 <_dtoa_r+0x856>
 800bf62:	e089      	b.n	800c078 <_dtoa_r+0x8c8>
 800bf64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bf66:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bf6a:	e751      	b.n	800be10 <_dtoa_r+0x660>
 800bf6c:	f109 34ff 	add.w	r4, r9, #4294967295
 800bf70:	42a3      	cmp	r3, r4
 800bf72:	bfbf      	itttt	lt
 800bf74:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800bf76:	1ae3      	sublt	r3, r4, r3
 800bf78:	18d2      	addlt	r2, r2, r3
 800bf7a:	4613      	movlt	r3, r2
 800bf7c:	bfb7      	itett	lt
 800bf7e:	930e      	strlt	r3, [sp, #56]	; 0x38
 800bf80:	1b1c      	subge	r4, r3, r4
 800bf82:	4623      	movlt	r3, r4
 800bf84:	2400      	movlt	r4, #0
 800bf86:	f1b9 0f00 	cmp.w	r9, #0
 800bf8a:	bfb5      	itete	lt
 800bf8c:	9a05      	ldrlt	r2, [sp, #20]
 800bf8e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800bf92:	eba2 0809 	sublt.w	r8, r2, r9
 800bf96:	464a      	movge	r2, r9
 800bf98:	bfb8      	it	lt
 800bf9a:	2200      	movlt	r2, #0
 800bf9c:	e73b      	b.n	800be16 <_dtoa_r+0x666>
 800bf9e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800bfa2:	9f08      	ldr	r7, [sp, #32]
 800bfa4:	461c      	mov	r4, r3
 800bfa6:	e743      	b.n	800be30 <_dtoa_r+0x680>
 800bfa8:	461a      	mov	r2, r3
 800bfaa:	e76f      	b.n	800be8c <_dtoa_r+0x6dc>
 800bfac:	9b07      	ldr	r3, [sp, #28]
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	dc18      	bgt.n	800bfe4 <_dtoa_r+0x834>
 800bfb2:	9b02      	ldr	r3, [sp, #8]
 800bfb4:	b9b3      	cbnz	r3, 800bfe4 <_dtoa_r+0x834>
 800bfb6:	9b03      	ldr	r3, [sp, #12]
 800bfb8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800bfbc:	b9a2      	cbnz	r2, 800bfe8 <_dtoa_r+0x838>
 800bfbe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bfc2:	0d12      	lsrs	r2, r2, #20
 800bfc4:	0512      	lsls	r2, r2, #20
 800bfc6:	b18a      	cbz	r2, 800bfec <_dtoa_r+0x83c>
 800bfc8:	9b05      	ldr	r3, [sp, #20]
 800bfca:	3301      	adds	r3, #1
 800bfcc:	9305      	str	r3, [sp, #20]
 800bfce:	9b06      	ldr	r3, [sp, #24]
 800bfd0:	3301      	adds	r3, #1
 800bfd2:	9306      	str	r3, [sp, #24]
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	930a      	str	r3, [sp, #40]	; 0x28
 800bfd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	f47f af6f 	bne.w	800bebe <_dtoa_r+0x70e>
 800bfe0:	2001      	movs	r0, #1
 800bfe2:	e774      	b.n	800bece <_dtoa_r+0x71e>
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	e7f6      	b.n	800bfd6 <_dtoa_r+0x826>
 800bfe8:	9b02      	ldr	r3, [sp, #8]
 800bfea:	e7f4      	b.n	800bfd6 <_dtoa_r+0x826>
 800bfec:	920a      	str	r2, [sp, #40]	; 0x28
 800bfee:	e7f3      	b.n	800bfd8 <_dtoa_r+0x828>
 800bff0:	d081      	beq.n	800bef6 <_dtoa_r+0x746>
 800bff2:	4610      	mov	r0, r2
 800bff4:	301c      	adds	r0, #28
 800bff6:	e777      	b.n	800bee8 <_dtoa_r+0x738>
 800bff8:	f1b9 0f00 	cmp.w	r9, #0
 800bffc:	dc37      	bgt.n	800c06e <_dtoa_r+0x8be>
 800bffe:	9b07      	ldr	r3, [sp, #28]
 800c000:	2b02      	cmp	r3, #2
 800c002:	dd34      	ble.n	800c06e <_dtoa_r+0x8be>
 800c004:	46ca      	mov	sl, r9
 800c006:	f1ba 0f00 	cmp.w	sl, #0
 800c00a:	d10d      	bne.n	800c028 <_dtoa_r+0x878>
 800c00c:	4621      	mov	r1, r4
 800c00e:	4653      	mov	r3, sl
 800c010:	2205      	movs	r2, #5
 800c012:	4630      	mov	r0, r6
 800c014:	f000 fbdc 	bl	800c7d0 <__multadd>
 800c018:	4601      	mov	r1, r0
 800c01a:	4604      	mov	r4, r0
 800c01c:	4628      	mov	r0, r5
 800c01e:	f000 fdf3 	bl	800cc08 <__mcmp>
 800c022:	2800      	cmp	r0, #0
 800c024:	f73f adde 	bgt.w	800bbe4 <_dtoa_r+0x434>
 800c028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c02a:	f8dd 8000 	ldr.w	r8, [sp]
 800c02e:	ea6f 0b03 	mvn.w	fp, r3
 800c032:	f04f 0900 	mov.w	r9, #0
 800c036:	4621      	mov	r1, r4
 800c038:	4630      	mov	r0, r6
 800c03a:	f000 fba7 	bl	800c78c <_Bfree>
 800c03e:	2f00      	cmp	r7, #0
 800c040:	f43f aea7 	beq.w	800bd92 <_dtoa_r+0x5e2>
 800c044:	f1b9 0f00 	cmp.w	r9, #0
 800c048:	d005      	beq.n	800c056 <_dtoa_r+0x8a6>
 800c04a:	45b9      	cmp	r9, r7
 800c04c:	d003      	beq.n	800c056 <_dtoa_r+0x8a6>
 800c04e:	4649      	mov	r1, r9
 800c050:	4630      	mov	r0, r6
 800c052:	f000 fb9b 	bl	800c78c <_Bfree>
 800c056:	4639      	mov	r1, r7
 800c058:	4630      	mov	r0, r6
 800c05a:	f000 fb97 	bl	800c78c <_Bfree>
 800c05e:	e698      	b.n	800bd92 <_dtoa_r+0x5e2>
 800c060:	2400      	movs	r4, #0
 800c062:	4627      	mov	r7, r4
 800c064:	e7e0      	b.n	800c028 <_dtoa_r+0x878>
 800c066:	46bb      	mov	fp, r7
 800c068:	4604      	mov	r4, r0
 800c06a:	4607      	mov	r7, r0
 800c06c:	e5ba      	b.n	800bbe4 <_dtoa_r+0x434>
 800c06e:	9b08      	ldr	r3, [sp, #32]
 800c070:	46ca      	mov	sl, r9
 800c072:	2b00      	cmp	r3, #0
 800c074:	f000 8100 	beq.w	800c278 <_dtoa_r+0xac8>
 800c078:	f1b8 0f00 	cmp.w	r8, #0
 800c07c:	dd05      	ble.n	800c08a <_dtoa_r+0x8da>
 800c07e:	4639      	mov	r1, r7
 800c080:	4642      	mov	r2, r8
 800c082:	4630      	mov	r0, r6
 800c084:	f000 fd54 	bl	800cb30 <__lshift>
 800c088:	4607      	mov	r7, r0
 800c08a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d05d      	beq.n	800c14c <_dtoa_r+0x99c>
 800c090:	6879      	ldr	r1, [r7, #4]
 800c092:	4630      	mov	r0, r6
 800c094:	f000 fb3a 	bl	800c70c <_Balloc>
 800c098:	4680      	mov	r8, r0
 800c09a:	b928      	cbnz	r0, 800c0a8 <_dtoa_r+0x8f8>
 800c09c:	4b82      	ldr	r3, [pc, #520]	; (800c2a8 <_dtoa_r+0xaf8>)
 800c09e:	4602      	mov	r2, r0
 800c0a0:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c0a4:	f7ff bb9a 	b.w	800b7dc <_dtoa_r+0x2c>
 800c0a8:	693a      	ldr	r2, [r7, #16]
 800c0aa:	3202      	adds	r2, #2
 800c0ac:	0092      	lsls	r2, r2, #2
 800c0ae:	f107 010c 	add.w	r1, r7, #12
 800c0b2:	300c      	adds	r0, #12
 800c0b4:	f7fe fc82 	bl	800a9bc <memcpy>
 800c0b8:	2201      	movs	r2, #1
 800c0ba:	4641      	mov	r1, r8
 800c0bc:	4630      	mov	r0, r6
 800c0be:	f000 fd37 	bl	800cb30 <__lshift>
 800c0c2:	9b00      	ldr	r3, [sp, #0]
 800c0c4:	3301      	adds	r3, #1
 800c0c6:	9305      	str	r3, [sp, #20]
 800c0c8:	9b00      	ldr	r3, [sp, #0]
 800c0ca:	4453      	add	r3, sl
 800c0cc:	9309      	str	r3, [sp, #36]	; 0x24
 800c0ce:	9b02      	ldr	r3, [sp, #8]
 800c0d0:	f003 0301 	and.w	r3, r3, #1
 800c0d4:	46b9      	mov	r9, r7
 800c0d6:	9308      	str	r3, [sp, #32]
 800c0d8:	4607      	mov	r7, r0
 800c0da:	9b05      	ldr	r3, [sp, #20]
 800c0dc:	4621      	mov	r1, r4
 800c0de:	3b01      	subs	r3, #1
 800c0e0:	4628      	mov	r0, r5
 800c0e2:	9302      	str	r3, [sp, #8]
 800c0e4:	f7ff fad6 	bl	800b694 <quorem>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	3330      	adds	r3, #48	; 0x30
 800c0ec:	9006      	str	r0, [sp, #24]
 800c0ee:	4649      	mov	r1, r9
 800c0f0:	4628      	mov	r0, r5
 800c0f2:	930a      	str	r3, [sp, #40]	; 0x28
 800c0f4:	f000 fd88 	bl	800cc08 <__mcmp>
 800c0f8:	463a      	mov	r2, r7
 800c0fa:	4682      	mov	sl, r0
 800c0fc:	4621      	mov	r1, r4
 800c0fe:	4630      	mov	r0, r6
 800c100:	f000 fd9e 	bl	800cc40 <__mdiff>
 800c104:	68c2      	ldr	r2, [r0, #12]
 800c106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c108:	4680      	mov	r8, r0
 800c10a:	bb0a      	cbnz	r2, 800c150 <_dtoa_r+0x9a0>
 800c10c:	4601      	mov	r1, r0
 800c10e:	4628      	mov	r0, r5
 800c110:	f000 fd7a 	bl	800cc08 <__mcmp>
 800c114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c116:	4602      	mov	r2, r0
 800c118:	4641      	mov	r1, r8
 800c11a:	4630      	mov	r0, r6
 800c11c:	920e      	str	r2, [sp, #56]	; 0x38
 800c11e:	930a      	str	r3, [sp, #40]	; 0x28
 800c120:	f000 fb34 	bl	800c78c <_Bfree>
 800c124:	9b07      	ldr	r3, [sp, #28]
 800c126:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c128:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c12c:	ea43 0102 	orr.w	r1, r3, r2
 800c130:	9b08      	ldr	r3, [sp, #32]
 800c132:	430b      	orrs	r3, r1
 800c134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c136:	d10d      	bne.n	800c154 <_dtoa_r+0x9a4>
 800c138:	2b39      	cmp	r3, #57	; 0x39
 800c13a:	d029      	beq.n	800c190 <_dtoa_r+0x9e0>
 800c13c:	f1ba 0f00 	cmp.w	sl, #0
 800c140:	dd01      	ble.n	800c146 <_dtoa_r+0x996>
 800c142:	9b06      	ldr	r3, [sp, #24]
 800c144:	3331      	adds	r3, #49	; 0x31
 800c146:	9a02      	ldr	r2, [sp, #8]
 800c148:	7013      	strb	r3, [r2, #0]
 800c14a:	e774      	b.n	800c036 <_dtoa_r+0x886>
 800c14c:	4638      	mov	r0, r7
 800c14e:	e7b8      	b.n	800c0c2 <_dtoa_r+0x912>
 800c150:	2201      	movs	r2, #1
 800c152:	e7e1      	b.n	800c118 <_dtoa_r+0x968>
 800c154:	f1ba 0f00 	cmp.w	sl, #0
 800c158:	db06      	blt.n	800c168 <_dtoa_r+0x9b8>
 800c15a:	9907      	ldr	r1, [sp, #28]
 800c15c:	ea41 0a0a 	orr.w	sl, r1, sl
 800c160:	9908      	ldr	r1, [sp, #32]
 800c162:	ea5a 0101 	orrs.w	r1, sl, r1
 800c166:	d120      	bne.n	800c1aa <_dtoa_r+0x9fa>
 800c168:	2a00      	cmp	r2, #0
 800c16a:	ddec      	ble.n	800c146 <_dtoa_r+0x996>
 800c16c:	4629      	mov	r1, r5
 800c16e:	2201      	movs	r2, #1
 800c170:	4630      	mov	r0, r6
 800c172:	9305      	str	r3, [sp, #20]
 800c174:	f000 fcdc 	bl	800cb30 <__lshift>
 800c178:	4621      	mov	r1, r4
 800c17a:	4605      	mov	r5, r0
 800c17c:	f000 fd44 	bl	800cc08 <__mcmp>
 800c180:	2800      	cmp	r0, #0
 800c182:	9b05      	ldr	r3, [sp, #20]
 800c184:	dc02      	bgt.n	800c18c <_dtoa_r+0x9dc>
 800c186:	d1de      	bne.n	800c146 <_dtoa_r+0x996>
 800c188:	07da      	lsls	r2, r3, #31
 800c18a:	d5dc      	bpl.n	800c146 <_dtoa_r+0x996>
 800c18c:	2b39      	cmp	r3, #57	; 0x39
 800c18e:	d1d8      	bne.n	800c142 <_dtoa_r+0x992>
 800c190:	9a02      	ldr	r2, [sp, #8]
 800c192:	2339      	movs	r3, #57	; 0x39
 800c194:	7013      	strb	r3, [r2, #0]
 800c196:	4643      	mov	r3, r8
 800c198:	4698      	mov	r8, r3
 800c19a:	3b01      	subs	r3, #1
 800c19c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800c1a0:	2a39      	cmp	r2, #57	; 0x39
 800c1a2:	d051      	beq.n	800c248 <_dtoa_r+0xa98>
 800c1a4:	3201      	adds	r2, #1
 800c1a6:	701a      	strb	r2, [r3, #0]
 800c1a8:	e745      	b.n	800c036 <_dtoa_r+0x886>
 800c1aa:	2a00      	cmp	r2, #0
 800c1ac:	dd03      	ble.n	800c1b6 <_dtoa_r+0xa06>
 800c1ae:	2b39      	cmp	r3, #57	; 0x39
 800c1b0:	d0ee      	beq.n	800c190 <_dtoa_r+0x9e0>
 800c1b2:	3301      	adds	r3, #1
 800c1b4:	e7c7      	b.n	800c146 <_dtoa_r+0x996>
 800c1b6:	9a05      	ldr	r2, [sp, #20]
 800c1b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c1ba:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c1be:	428a      	cmp	r2, r1
 800c1c0:	d02b      	beq.n	800c21a <_dtoa_r+0xa6a>
 800c1c2:	4629      	mov	r1, r5
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	220a      	movs	r2, #10
 800c1c8:	4630      	mov	r0, r6
 800c1ca:	f000 fb01 	bl	800c7d0 <__multadd>
 800c1ce:	45b9      	cmp	r9, r7
 800c1d0:	4605      	mov	r5, r0
 800c1d2:	f04f 0300 	mov.w	r3, #0
 800c1d6:	f04f 020a 	mov.w	r2, #10
 800c1da:	4649      	mov	r1, r9
 800c1dc:	4630      	mov	r0, r6
 800c1de:	d107      	bne.n	800c1f0 <_dtoa_r+0xa40>
 800c1e0:	f000 faf6 	bl	800c7d0 <__multadd>
 800c1e4:	4681      	mov	r9, r0
 800c1e6:	4607      	mov	r7, r0
 800c1e8:	9b05      	ldr	r3, [sp, #20]
 800c1ea:	3301      	adds	r3, #1
 800c1ec:	9305      	str	r3, [sp, #20]
 800c1ee:	e774      	b.n	800c0da <_dtoa_r+0x92a>
 800c1f0:	f000 faee 	bl	800c7d0 <__multadd>
 800c1f4:	4639      	mov	r1, r7
 800c1f6:	4681      	mov	r9, r0
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	220a      	movs	r2, #10
 800c1fc:	4630      	mov	r0, r6
 800c1fe:	f000 fae7 	bl	800c7d0 <__multadd>
 800c202:	4607      	mov	r7, r0
 800c204:	e7f0      	b.n	800c1e8 <_dtoa_r+0xa38>
 800c206:	f1ba 0f00 	cmp.w	sl, #0
 800c20a:	9a00      	ldr	r2, [sp, #0]
 800c20c:	bfcc      	ite	gt
 800c20e:	46d0      	movgt	r8, sl
 800c210:	f04f 0801 	movle.w	r8, #1
 800c214:	4490      	add	r8, r2
 800c216:	f04f 0900 	mov.w	r9, #0
 800c21a:	4629      	mov	r1, r5
 800c21c:	2201      	movs	r2, #1
 800c21e:	4630      	mov	r0, r6
 800c220:	9302      	str	r3, [sp, #8]
 800c222:	f000 fc85 	bl	800cb30 <__lshift>
 800c226:	4621      	mov	r1, r4
 800c228:	4605      	mov	r5, r0
 800c22a:	f000 fced 	bl	800cc08 <__mcmp>
 800c22e:	2800      	cmp	r0, #0
 800c230:	dcb1      	bgt.n	800c196 <_dtoa_r+0x9e6>
 800c232:	d102      	bne.n	800c23a <_dtoa_r+0xa8a>
 800c234:	9b02      	ldr	r3, [sp, #8]
 800c236:	07db      	lsls	r3, r3, #31
 800c238:	d4ad      	bmi.n	800c196 <_dtoa_r+0x9e6>
 800c23a:	4643      	mov	r3, r8
 800c23c:	4698      	mov	r8, r3
 800c23e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c242:	2a30      	cmp	r2, #48	; 0x30
 800c244:	d0fa      	beq.n	800c23c <_dtoa_r+0xa8c>
 800c246:	e6f6      	b.n	800c036 <_dtoa_r+0x886>
 800c248:	9a00      	ldr	r2, [sp, #0]
 800c24a:	429a      	cmp	r2, r3
 800c24c:	d1a4      	bne.n	800c198 <_dtoa_r+0x9e8>
 800c24e:	f10b 0b01 	add.w	fp, fp, #1
 800c252:	2331      	movs	r3, #49	; 0x31
 800c254:	e778      	b.n	800c148 <_dtoa_r+0x998>
 800c256:	4b15      	ldr	r3, [pc, #84]	; (800c2ac <_dtoa_r+0xafc>)
 800c258:	f7ff bb12 	b.w	800b880 <_dtoa_r+0xd0>
 800c25c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c25e:	2b00      	cmp	r3, #0
 800c260:	f47f aaee 	bne.w	800b840 <_dtoa_r+0x90>
 800c264:	4b12      	ldr	r3, [pc, #72]	; (800c2b0 <_dtoa_r+0xb00>)
 800c266:	f7ff bb0b 	b.w	800b880 <_dtoa_r+0xd0>
 800c26a:	f1ba 0f00 	cmp.w	sl, #0
 800c26e:	dc03      	bgt.n	800c278 <_dtoa_r+0xac8>
 800c270:	9b07      	ldr	r3, [sp, #28]
 800c272:	2b02      	cmp	r3, #2
 800c274:	f73f aec7 	bgt.w	800c006 <_dtoa_r+0x856>
 800c278:	f8dd 8000 	ldr.w	r8, [sp]
 800c27c:	4621      	mov	r1, r4
 800c27e:	4628      	mov	r0, r5
 800c280:	f7ff fa08 	bl	800b694 <quorem>
 800c284:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c288:	f808 3b01 	strb.w	r3, [r8], #1
 800c28c:	9a00      	ldr	r2, [sp, #0]
 800c28e:	eba8 0202 	sub.w	r2, r8, r2
 800c292:	4592      	cmp	sl, r2
 800c294:	ddb7      	ble.n	800c206 <_dtoa_r+0xa56>
 800c296:	4629      	mov	r1, r5
 800c298:	2300      	movs	r3, #0
 800c29a:	220a      	movs	r2, #10
 800c29c:	4630      	mov	r0, r6
 800c29e:	f000 fa97 	bl	800c7d0 <__multadd>
 800c2a2:	4605      	mov	r5, r0
 800c2a4:	e7ea      	b.n	800c27c <_dtoa_r+0xacc>
 800c2a6:	bf00      	nop
 800c2a8:	0800e54b 	.word	0x0800e54b
 800c2ac:	0800e4a4 	.word	0x0800e4a4
 800c2b0:	0800e4c8 	.word	0x0800e4c8

0800c2b4 <__sflush_r>:
 800c2b4:	898a      	ldrh	r2, [r1, #12]
 800c2b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2ba:	4605      	mov	r5, r0
 800c2bc:	0710      	lsls	r0, r2, #28
 800c2be:	460c      	mov	r4, r1
 800c2c0:	d458      	bmi.n	800c374 <__sflush_r+0xc0>
 800c2c2:	684b      	ldr	r3, [r1, #4]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	dc05      	bgt.n	800c2d4 <__sflush_r+0x20>
 800c2c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	dc02      	bgt.n	800c2d4 <__sflush_r+0x20>
 800c2ce:	2000      	movs	r0, #0
 800c2d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2d6:	2e00      	cmp	r6, #0
 800c2d8:	d0f9      	beq.n	800c2ce <__sflush_r+0x1a>
 800c2da:	2300      	movs	r3, #0
 800c2dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c2e0:	682f      	ldr	r7, [r5, #0]
 800c2e2:	602b      	str	r3, [r5, #0]
 800c2e4:	d032      	beq.n	800c34c <__sflush_r+0x98>
 800c2e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c2e8:	89a3      	ldrh	r3, [r4, #12]
 800c2ea:	075a      	lsls	r2, r3, #29
 800c2ec:	d505      	bpl.n	800c2fa <__sflush_r+0x46>
 800c2ee:	6863      	ldr	r3, [r4, #4]
 800c2f0:	1ac0      	subs	r0, r0, r3
 800c2f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c2f4:	b10b      	cbz	r3, 800c2fa <__sflush_r+0x46>
 800c2f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c2f8:	1ac0      	subs	r0, r0, r3
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	4602      	mov	r2, r0
 800c2fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c300:	6a21      	ldr	r1, [r4, #32]
 800c302:	4628      	mov	r0, r5
 800c304:	47b0      	blx	r6
 800c306:	1c43      	adds	r3, r0, #1
 800c308:	89a3      	ldrh	r3, [r4, #12]
 800c30a:	d106      	bne.n	800c31a <__sflush_r+0x66>
 800c30c:	6829      	ldr	r1, [r5, #0]
 800c30e:	291d      	cmp	r1, #29
 800c310:	d82c      	bhi.n	800c36c <__sflush_r+0xb8>
 800c312:	4a2a      	ldr	r2, [pc, #168]	; (800c3bc <__sflush_r+0x108>)
 800c314:	40ca      	lsrs	r2, r1
 800c316:	07d6      	lsls	r6, r2, #31
 800c318:	d528      	bpl.n	800c36c <__sflush_r+0xb8>
 800c31a:	2200      	movs	r2, #0
 800c31c:	6062      	str	r2, [r4, #4]
 800c31e:	04d9      	lsls	r1, r3, #19
 800c320:	6922      	ldr	r2, [r4, #16]
 800c322:	6022      	str	r2, [r4, #0]
 800c324:	d504      	bpl.n	800c330 <__sflush_r+0x7c>
 800c326:	1c42      	adds	r2, r0, #1
 800c328:	d101      	bne.n	800c32e <__sflush_r+0x7a>
 800c32a:	682b      	ldr	r3, [r5, #0]
 800c32c:	b903      	cbnz	r3, 800c330 <__sflush_r+0x7c>
 800c32e:	6560      	str	r0, [r4, #84]	; 0x54
 800c330:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c332:	602f      	str	r7, [r5, #0]
 800c334:	2900      	cmp	r1, #0
 800c336:	d0ca      	beq.n	800c2ce <__sflush_r+0x1a>
 800c338:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c33c:	4299      	cmp	r1, r3
 800c33e:	d002      	beq.n	800c346 <__sflush_r+0x92>
 800c340:	4628      	mov	r0, r5
 800c342:	f000 fd71 	bl	800ce28 <_free_r>
 800c346:	2000      	movs	r0, #0
 800c348:	6360      	str	r0, [r4, #52]	; 0x34
 800c34a:	e7c1      	b.n	800c2d0 <__sflush_r+0x1c>
 800c34c:	6a21      	ldr	r1, [r4, #32]
 800c34e:	2301      	movs	r3, #1
 800c350:	4628      	mov	r0, r5
 800c352:	47b0      	blx	r6
 800c354:	1c41      	adds	r1, r0, #1
 800c356:	d1c7      	bne.n	800c2e8 <__sflush_r+0x34>
 800c358:	682b      	ldr	r3, [r5, #0]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d0c4      	beq.n	800c2e8 <__sflush_r+0x34>
 800c35e:	2b1d      	cmp	r3, #29
 800c360:	d001      	beq.n	800c366 <__sflush_r+0xb2>
 800c362:	2b16      	cmp	r3, #22
 800c364:	d101      	bne.n	800c36a <__sflush_r+0xb6>
 800c366:	602f      	str	r7, [r5, #0]
 800c368:	e7b1      	b.n	800c2ce <__sflush_r+0x1a>
 800c36a:	89a3      	ldrh	r3, [r4, #12]
 800c36c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c370:	81a3      	strh	r3, [r4, #12]
 800c372:	e7ad      	b.n	800c2d0 <__sflush_r+0x1c>
 800c374:	690f      	ldr	r7, [r1, #16]
 800c376:	2f00      	cmp	r7, #0
 800c378:	d0a9      	beq.n	800c2ce <__sflush_r+0x1a>
 800c37a:	0793      	lsls	r3, r2, #30
 800c37c:	680e      	ldr	r6, [r1, #0]
 800c37e:	bf08      	it	eq
 800c380:	694b      	ldreq	r3, [r1, #20]
 800c382:	600f      	str	r7, [r1, #0]
 800c384:	bf18      	it	ne
 800c386:	2300      	movne	r3, #0
 800c388:	eba6 0807 	sub.w	r8, r6, r7
 800c38c:	608b      	str	r3, [r1, #8]
 800c38e:	f1b8 0f00 	cmp.w	r8, #0
 800c392:	dd9c      	ble.n	800c2ce <__sflush_r+0x1a>
 800c394:	6a21      	ldr	r1, [r4, #32]
 800c396:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c398:	4643      	mov	r3, r8
 800c39a:	463a      	mov	r2, r7
 800c39c:	4628      	mov	r0, r5
 800c39e:	47b0      	blx	r6
 800c3a0:	2800      	cmp	r0, #0
 800c3a2:	dc06      	bgt.n	800c3b2 <__sflush_r+0xfe>
 800c3a4:	89a3      	ldrh	r3, [r4, #12]
 800c3a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3aa:	81a3      	strh	r3, [r4, #12]
 800c3ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c3b0:	e78e      	b.n	800c2d0 <__sflush_r+0x1c>
 800c3b2:	4407      	add	r7, r0
 800c3b4:	eba8 0800 	sub.w	r8, r8, r0
 800c3b8:	e7e9      	b.n	800c38e <__sflush_r+0xda>
 800c3ba:	bf00      	nop
 800c3bc:	20400001 	.word	0x20400001

0800c3c0 <_fflush_r>:
 800c3c0:	b538      	push	{r3, r4, r5, lr}
 800c3c2:	690b      	ldr	r3, [r1, #16]
 800c3c4:	4605      	mov	r5, r0
 800c3c6:	460c      	mov	r4, r1
 800c3c8:	b913      	cbnz	r3, 800c3d0 <_fflush_r+0x10>
 800c3ca:	2500      	movs	r5, #0
 800c3cc:	4628      	mov	r0, r5
 800c3ce:	bd38      	pop	{r3, r4, r5, pc}
 800c3d0:	b118      	cbz	r0, 800c3da <_fflush_r+0x1a>
 800c3d2:	6983      	ldr	r3, [r0, #24]
 800c3d4:	b90b      	cbnz	r3, 800c3da <_fflush_r+0x1a>
 800c3d6:	f000 f887 	bl	800c4e8 <__sinit>
 800c3da:	4b14      	ldr	r3, [pc, #80]	; (800c42c <_fflush_r+0x6c>)
 800c3dc:	429c      	cmp	r4, r3
 800c3de:	d11b      	bne.n	800c418 <_fflush_r+0x58>
 800c3e0:	686c      	ldr	r4, [r5, #4]
 800c3e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d0ef      	beq.n	800c3ca <_fflush_r+0xa>
 800c3ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c3ec:	07d0      	lsls	r0, r2, #31
 800c3ee:	d404      	bmi.n	800c3fa <_fflush_r+0x3a>
 800c3f0:	0599      	lsls	r1, r3, #22
 800c3f2:	d402      	bmi.n	800c3fa <_fflush_r+0x3a>
 800c3f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3f6:	f000 f91a 	bl	800c62e <__retarget_lock_acquire_recursive>
 800c3fa:	4628      	mov	r0, r5
 800c3fc:	4621      	mov	r1, r4
 800c3fe:	f7ff ff59 	bl	800c2b4 <__sflush_r>
 800c402:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c404:	07da      	lsls	r2, r3, #31
 800c406:	4605      	mov	r5, r0
 800c408:	d4e0      	bmi.n	800c3cc <_fflush_r+0xc>
 800c40a:	89a3      	ldrh	r3, [r4, #12]
 800c40c:	059b      	lsls	r3, r3, #22
 800c40e:	d4dd      	bmi.n	800c3cc <_fflush_r+0xc>
 800c410:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c412:	f000 f90d 	bl	800c630 <__retarget_lock_release_recursive>
 800c416:	e7d9      	b.n	800c3cc <_fflush_r+0xc>
 800c418:	4b05      	ldr	r3, [pc, #20]	; (800c430 <_fflush_r+0x70>)
 800c41a:	429c      	cmp	r4, r3
 800c41c:	d101      	bne.n	800c422 <_fflush_r+0x62>
 800c41e:	68ac      	ldr	r4, [r5, #8]
 800c420:	e7df      	b.n	800c3e2 <_fflush_r+0x22>
 800c422:	4b04      	ldr	r3, [pc, #16]	; (800c434 <_fflush_r+0x74>)
 800c424:	429c      	cmp	r4, r3
 800c426:	bf08      	it	eq
 800c428:	68ec      	ldreq	r4, [r5, #12]
 800c42a:	e7da      	b.n	800c3e2 <_fflush_r+0x22>
 800c42c:	0800e57c 	.word	0x0800e57c
 800c430:	0800e59c 	.word	0x0800e59c
 800c434:	0800e55c 	.word	0x0800e55c

0800c438 <std>:
 800c438:	2300      	movs	r3, #0
 800c43a:	b510      	push	{r4, lr}
 800c43c:	4604      	mov	r4, r0
 800c43e:	e9c0 3300 	strd	r3, r3, [r0]
 800c442:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c446:	6083      	str	r3, [r0, #8]
 800c448:	8181      	strh	r1, [r0, #12]
 800c44a:	6643      	str	r3, [r0, #100]	; 0x64
 800c44c:	81c2      	strh	r2, [r0, #14]
 800c44e:	6183      	str	r3, [r0, #24]
 800c450:	4619      	mov	r1, r3
 800c452:	2208      	movs	r2, #8
 800c454:	305c      	adds	r0, #92	; 0x5c
 800c456:	f7fe fabf 	bl	800a9d8 <memset>
 800c45a:	4b05      	ldr	r3, [pc, #20]	; (800c470 <std+0x38>)
 800c45c:	6263      	str	r3, [r4, #36]	; 0x24
 800c45e:	4b05      	ldr	r3, [pc, #20]	; (800c474 <std+0x3c>)
 800c460:	62a3      	str	r3, [r4, #40]	; 0x28
 800c462:	4b05      	ldr	r3, [pc, #20]	; (800c478 <std+0x40>)
 800c464:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c466:	4b05      	ldr	r3, [pc, #20]	; (800c47c <std+0x44>)
 800c468:	6224      	str	r4, [r4, #32]
 800c46a:	6323      	str	r3, [r4, #48]	; 0x30
 800c46c:	bd10      	pop	{r4, pc}
 800c46e:	bf00      	nop
 800c470:	0800d251 	.word	0x0800d251
 800c474:	0800d273 	.word	0x0800d273
 800c478:	0800d2ab 	.word	0x0800d2ab
 800c47c:	0800d2cf 	.word	0x0800d2cf

0800c480 <_cleanup_r>:
 800c480:	4901      	ldr	r1, [pc, #4]	; (800c488 <_cleanup_r+0x8>)
 800c482:	f000 b8af 	b.w	800c5e4 <_fwalk_reent>
 800c486:	bf00      	nop
 800c488:	0800c3c1 	.word	0x0800c3c1

0800c48c <__sfmoreglue>:
 800c48c:	b570      	push	{r4, r5, r6, lr}
 800c48e:	1e4a      	subs	r2, r1, #1
 800c490:	2568      	movs	r5, #104	; 0x68
 800c492:	4355      	muls	r5, r2
 800c494:	460e      	mov	r6, r1
 800c496:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c49a:	f000 fd15 	bl	800cec8 <_malloc_r>
 800c49e:	4604      	mov	r4, r0
 800c4a0:	b140      	cbz	r0, 800c4b4 <__sfmoreglue+0x28>
 800c4a2:	2100      	movs	r1, #0
 800c4a4:	e9c0 1600 	strd	r1, r6, [r0]
 800c4a8:	300c      	adds	r0, #12
 800c4aa:	60a0      	str	r0, [r4, #8]
 800c4ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c4b0:	f7fe fa92 	bl	800a9d8 <memset>
 800c4b4:	4620      	mov	r0, r4
 800c4b6:	bd70      	pop	{r4, r5, r6, pc}

0800c4b8 <__sfp_lock_acquire>:
 800c4b8:	4801      	ldr	r0, [pc, #4]	; (800c4c0 <__sfp_lock_acquire+0x8>)
 800c4ba:	f000 b8b8 	b.w	800c62e <__retarget_lock_acquire_recursive>
 800c4be:	bf00      	nop
 800c4c0:	2400c70c 	.word	0x2400c70c

0800c4c4 <__sfp_lock_release>:
 800c4c4:	4801      	ldr	r0, [pc, #4]	; (800c4cc <__sfp_lock_release+0x8>)
 800c4c6:	f000 b8b3 	b.w	800c630 <__retarget_lock_release_recursive>
 800c4ca:	bf00      	nop
 800c4cc:	2400c70c 	.word	0x2400c70c

0800c4d0 <__sinit_lock_acquire>:
 800c4d0:	4801      	ldr	r0, [pc, #4]	; (800c4d8 <__sinit_lock_acquire+0x8>)
 800c4d2:	f000 b8ac 	b.w	800c62e <__retarget_lock_acquire_recursive>
 800c4d6:	bf00      	nop
 800c4d8:	2400c707 	.word	0x2400c707

0800c4dc <__sinit_lock_release>:
 800c4dc:	4801      	ldr	r0, [pc, #4]	; (800c4e4 <__sinit_lock_release+0x8>)
 800c4de:	f000 b8a7 	b.w	800c630 <__retarget_lock_release_recursive>
 800c4e2:	bf00      	nop
 800c4e4:	2400c707 	.word	0x2400c707

0800c4e8 <__sinit>:
 800c4e8:	b510      	push	{r4, lr}
 800c4ea:	4604      	mov	r4, r0
 800c4ec:	f7ff fff0 	bl	800c4d0 <__sinit_lock_acquire>
 800c4f0:	69a3      	ldr	r3, [r4, #24]
 800c4f2:	b11b      	cbz	r3, 800c4fc <__sinit+0x14>
 800c4f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4f8:	f7ff bff0 	b.w	800c4dc <__sinit_lock_release>
 800c4fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c500:	6523      	str	r3, [r4, #80]	; 0x50
 800c502:	4b13      	ldr	r3, [pc, #76]	; (800c550 <__sinit+0x68>)
 800c504:	4a13      	ldr	r2, [pc, #76]	; (800c554 <__sinit+0x6c>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	62a2      	str	r2, [r4, #40]	; 0x28
 800c50a:	42a3      	cmp	r3, r4
 800c50c:	bf04      	itt	eq
 800c50e:	2301      	moveq	r3, #1
 800c510:	61a3      	streq	r3, [r4, #24]
 800c512:	4620      	mov	r0, r4
 800c514:	f000 f820 	bl	800c558 <__sfp>
 800c518:	6060      	str	r0, [r4, #4]
 800c51a:	4620      	mov	r0, r4
 800c51c:	f000 f81c 	bl	800c558 <__sfp>
 800c520:	60a0      	str	r0, [r4, #8]
 800c522:	4620      	mov	r0, r4
 800c524:	f000 f818 	bl	800c558 <__sfp>
 800c528:	2200      	movs	r2, #0
 800c52a:	60e0      	str	r0, [r4, #12]
 800c52c:	2104      	movs	r1, #4
 800c52e:	6860      	ldr	r0, [r4, #4]
 800c530:	f7ff ff82 	bl	800c438 <std>
 800c534:	68a0      	ldr	r0, [r4, #8]
 800c536:	2201      	movs	r2, #1
 800c538:	2109      	movs	r1, #9
 800c53a:	f7ff ff7d 	bl	800c438 <std>
 800c53e:	68e0      	ldr	r0, [r4, #12]
 800c540:	2202      	movs	r2, #2
 800c542:	2112      	movs	r1, #18
 800c544:	f7ff ff78 	bl	800c438 <std>
 800c548:	2301      	movs	r3, #1
 800c54a:	61a3      	str	r3, [r4, #24]
 800c54c:	e7d2      	b.n	800c4f4 <__sinit+0xc>
 800c54e:	bf00      	nop
 800c550:	0800e490 	.word	0x0800e490
 800c554:	0800c481 	.word	0x0800c481

0800c558 <__sfp>:
 800c558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c55a:	4607      	mov	r7, r0
 800c55c:	f7ff ffac 	bl	800c4b8 <__sfp_lock_acquire>
 800c560:	4b1e      	ldr	r3, [pc, #120]	; (800c5dc <__sfp+0x84>)
 800c562:	681e      	ldr	r6, [r3, #0]
 800c564:	69b3      	ldr	r3, [r6, #24]
 800c566:	b913      	cbnz	r3, 800c56e <__sfp+0x16>
 800c568:	4630      	mov	r0, r6
 800c56a:	f7ff ffbd 	bl	800c4e8 <__sinit>
 800c56e:	3648      	adds	r6, #72	; 0x48
 800c570:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c574:	3b01      	subs	r3, #1
 800c576:	d503      	bpl.n	800c580 <__sfp+0x28>
 800c578:	6833      	ldr	r3, [r6, #0]
 800c57a:	b30b      	cbz	r3, 800c5c0 <__sfp+0x68>
 800c57c:	6836      	ldr	r6, [r6, #0]
 800c57e:	e7f7      	b.n	800c570 <__sfp+0x18>
 800c580:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c584:	b9d5      	cbnz	r5, 800c5bc <__sfp+0x64>
 800c586:	4b16      	ldr	r3, [pc, #88]	; (800c5e0 <__sfp+0x88>)
 800c588:	60e3      	str	r3, [r4, #12]
 800c58a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c58e:	6665      	str	r5, [r4, #100]	; 0x64
 800c590:	f000 f84c 	bl	800c62c <__retarget_lock_init_recursive>
 800c594:	f7ff ff96 	bl	800c4c4 <__sfp_lock_release>
 800c598:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c59c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c5a0:	6025      	str	r5, [r4, #0]
 800c5a2:	61a5      	str	r5, [r4, #24]
 800c5a4:	2208      	movs	r2, #8
 800c5a6:	4629      	mov	r1, r5
 800c5a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c5ac:	f7fe fa14 	bl	800a9d8 <memset>
 800c5b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c5b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c5b8:	4620      	mov	r0, r4
 800c5ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5bc:	3468      	adds	r4, #104	; 0x68
 800c5be:	e7d9      	b.n	800c574 <__sfp+0x1c>
 800c5c0:	2104      	movs	r1, #4
 800c5c2:	4638      	mov	r0, r7
 800c5c4:	f7ff ff62 	bl	800c48c <__sfmoreglue>
 800c5c8:	4604      	mov	r4, r0
 800c5ca:	6030      	str	r0, [r6, #0]
 800c5cc:	2800      	cmp	r0, #0
 800c5ce:	d1d5      	bne.n	800c57c <__sfp+0x24>
 800c5d0:	f7ff ff78 	bl	800c4c4 <__sfp_lock_release>
 800c5d4:	230c      	movs	r3, #12
 800c5d6:	603b      	str	r3, [r7, #0]
 800c5d8:	e7ee      	b.n	800c5b8 <__sfp+0x60>
 800c5da:	bf00      	nop
 800c5dc:	0800e490 	.word	0x0800e490
 800c5e0:	ffff0001 	.word	0xffff0001

0800c5e4 <_fwalk_reent>:
 800c5e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5e8:	4606      	mov	r6, r0
 800c5ea:	4688      	mov	r8, r1
 800c5ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c5f0:	2700      	movs	r7, #0
 800c5f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c5f6:	f1b9 0901 	subs.w	r9, r9, #1
 800c5fa:	d505      	bpl.n	800c608 <_fwalk_reent+0x24>
 800c5fc:	6824      	ldr	r4, [r4, #0]
 800c5fe:	2c00      	cmp	r4, #0
 800c600:	d1f7      	bne.n	800c5f2 <_fwalk_reent+0xe>
 800c602:	4638      	mov	r0, r7
 800c604:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c608:	89ab      	ldrh	r3, [r5, #12]
 800c60a:	2b01      	cmp	r3, #1
 800c60c:	d907      	bls.n	800c61e <_fwalk_reent+0x3a>
 800c60e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c612:	3301      	adds	r3, #1
 800c614:	d003      	beq.n	800c61e <_fwalk_reent+0x3a>
 800c616:	4629      	mov	r1, r5
 800c618:	4630      	mov	r0, r6
 800c61a:	47c0      	blx	r8
 800c61c:	4307      	orrs	r7, r0
 800c61e:	3568      	adds	r5, #104	; 0x68
 800c620:	e7e9      	b.n	800c5f6 <_fwalk_reent+0x12>
	...

0800c624 <_localeconv_r>:
 800c624:	4800      	ldr	r0, [pc, #0]	; (800c628 <_localeconv_r+0x4>)
 800c626:	4770      	bx	lr
 800c628:	24000164 	.word	0x24000164

0800c62c <__retarget_lock_init_recursive>:
 800c62c:	4770      	bx	lr

0800c62e <__retarget_lock_acquire_recursive>:
 800c62e:	4770      	bx	lr

0800c630 <__retarget_lock_release_recursive>:
 800c630:	4770      	bx	lr

0800c632 <__swhatbuf_r>:
 800c632:	b570      	push	{r4, r5, r6, lr}
 800c634:	460e      	mov	r6, r1
 800c636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c63a:	2900      	cmp	r1, #0
 800c63c:	b096      	sub	sp, #88	; 0x58
 800c63e:	4614      	mov	r4, r2
 800c640:	461d      	mov	r5, r3
 800c642:	da07      	bge.n	800c654 <__swhatbuf_r+0x22>
 800c644:	2300      	movs	r3, #0
 800c646:	602b      	str	r3, [r5, #0]
 800c648:	89b3      	ldrh	r3, [r6, #12]
 800c64a:	061a      	lsls	r2, r3, #24
 800c64c:	d410      	bmi.n	800c670 <__swhatbuf_r+0x3e>
 800c64e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c652:	e00e      	b.n	800c672 <__swhatbuf_r+0x40>
 800c654:	466a      	mov	r2, sp
 800c656:	f000 fe91 	bl	800d37c <_fstat_r>
 800c65a:	2800      	cmp	r0, #0
 800c65c:	dbf2      	blt.n	800c644 <__swhatbuf_r+0x12>
 800c65e:	9a01      	ldr	r2, [sp, #4]
 800c660:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c664:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c668:	425a      	negs	r2, r3
 800c66a:	415a      	adcs	r2, r3
 800c66c:	602a      	str	r2, [r5, #0]
 800c66e:	e7ee      	b.n	800c64e <__swhatbuf_r+0x1c>
 800c670:	2340      	movs	r3, #64	; 0x40
 800c672:	2000      	movs	r0, #0
 800c674:	6023      	str	r3, [r4, #0]
 800c676:	b016      	add	sp, #88	; 0x58
 800c678:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c67c <__smakebuf_r>:
 800c67c:	898b      	ldrh	r3, [r1, #12]
 800c67e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c680:	079d      	lsls	r5, r3, #30
 800c682:	4606      	mov	r6, r0
 800c684:	460c      	mov	r4, r1
 800c686:	d507      	bpl.n	800c698 <__smakebuf_r+0x1c>
 800c688:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c68c:	6023      	str	r3, [r4, #0]
 800c68e:	6123      	str	r3, [r4, #16]
 800c690:	2301      	movs	r3, #1
 800c692:	6163      	str	r3, [r4, #20]
 800c694:	b002      	add	sp, #8
 800c696:	bd70      	pop	{r4, r5, r6, pc}
 800c698:	ab01      	add	r3, sp, #4
 800c69a:	466a      	mov	r2, sp
 800c69c:	f7ff ffc9 	bl	800c632 <__swhatbuf_r>
 800c6a0:	9900      	ldr	r1, [sp, #0]
 800c6a2:	4605      	mov	r5, r0
 800c6a4:	4630      	mov	r0, r6
 800c6a6:	f000 fc0f 	bl	800cec8 <_malloc_r>
 800c6aa:	b948      	cbnz	r0, 800c6c0 <__smakebuf_r+0x44>
 800c6ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6b0:	059a      	lsls	r2, r3, #22
 800c6b2:	d4ef      	bmi.n	800c694 <__smakebuf_r+0x18>
 800c6b4:	f023 0303 	bic.w	r3, r3, #3
 800c6b8:	f043 0302 	orr.w	r3, r3, #2
 800c6bc:	81a3      	strh	r3, [r4, #12]
 800c6be:	e7e3      	b.n	800c688 <__smakebuf_r+0xc>
 800c6c0:	4b0d      	ldr	r3, [pc, #52]	; (800c6f8 <__smakebuf_r+0x7c>)
 800c6c2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c6c4:	89a3      	ldrh	r3, [r4, #12]
 800c6c6:	6020      	str	r0, [r4, #0]
 800c6c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6cc:	81a3      	strh	r3, [r4, #12]
 800c6ce:	9b00      	ldr	r3, [sp, #0]
 800c6d0:	6163      	str	r3, [r4, #20]
 800c6d2:	9b01      	ldr	r3, [sp, #4]
 800c6d4:	6120      	str	r0, [r4, #16]
 800c6d6:	b15b      	cbz	r3, 800c6f0 <__smakebuf_r+0x74>
 800c6d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6dc:	4630      	mov	r0, r6
 800c6de:	f000 fe5f 	bl	800d3a0 <_isatty_r>
 800c6e2:	b128      	cbz	r0, 800c6f0 <__smakebuf_r+0x74>
 800c6e4:	89a3      	ldrh	r3, [r4, #12]
 800c6e6:	f023 0303 	bic.w	r3, r3, #3
 800c6ea:	f043 0301 	orr.w	r3, r3, #1
 800c6ee:	81a3      	strh	r3, [r4, #12]
 800c6f0:	89a0      	ldrh	r0, [r4, #12]
 800c6f2:	4305      	orrs	r5, r0
 800c6f4:	81a5      	strh	r5, [r4, #12]
 800c6f6:	e7cd      	b.n	800c694 <__smakebuf_r+0x18>
 800c6f8:	0800c481 	.word	0x0800c481

0800c6fc <malloc>:
 800c6fc:	4b02      	ldr	r3, [pc, #8]	; (800c708 <malloc+0xc>)
 800c6fe:	4601      	mov	r1, r0
 800c700:	6818      	ldr	r0, [r3, #0]
 800c702:	f000 bbe1 	b.w	800cec8 <_malloc_r>
 800c706:	bf00      	nop
 800c708:	24000010 	.word	0x24000010

0800c70c <_Balloc>:
 800c70c:	b570      	push	{r4, r5, r6, lr}
 800c70e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c710:	4604      	mov	r4, r0
 800c712:	460d      	mov	r5, r1
 800c714:	b976      	cbnz	r6, 800c734 <_Balloc+0x28>
 800c716:	2010      	movs	r0, #16
 800c718:	f7ff fff0 	bl	800c6fc <malloc>
 800c71c:	4602      	mov	r2, r0
 800c71e:	6260      	str	r0, [r4, #36]	; 0x24
 800c720:	b920      	cbnz	r0, 800c72c <_Balloc+0x20>
 800c722:	4b18      	ldr	r3, [pc, #96]	; (800c784 <_Balloc+0x78>)
 800c724:	4818      	ldr	r0, [pc, #96]	; (800c788 <_Balloc+0x7c>)
 800c726:	2166      	movs	r1, #102	; 0x66
 800c728:	f000 fde8 	bl	800d2fc <__assert_func>
 800c72c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c730:	6006      	str	r6, [r0, #0]
 800c732:	60c6      	str	r6, [r0, #12]
 800c734:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c736:	68f3      	ldr	r3, [r6, #12]
 800c738:	b183      	cbz	r3, 800c75c <_Balloc+0x50>
 800c73a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c73c:	68db      	ldr	r3, [r3, #12]
 800c73e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c742:	b9b8      	cbnz	r0, 800c774 <_Balloc+0x68>
 800c744:	2101      	movs	r1, #1
 800c746:	fa01 f605 	lsl.w	r6, r1, r5
 800c74a:	1d72      	adds	r2, r6, #5
 800c74c:	0092      	lsls	r2, r2, #2
 800c74e:	4620      	mov	r0, r4
 800c750:	f000 fb5a 	bl	800ce08 <_calloc_r>
 800c754:	b160      	cbz	r0, 800c770 <_Balloc+0x64>
 800c756:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c75a:	e00e      	b.n	800c77a <_Balloc+0x6e>
 800c75c:	2221      	movs	r2, #33	; 0x21
 800c75e:	2104      	movs	r1, #4
 800c760:	4620      	mov	r0, r4
 800c762:	f000 fb51 	bl	800ce08 <_calloc_r>
 800c766:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c768:	60f0      	str	r0, [r6, #12]
 800c76a:	68db      	ldr	r3, [r3, #12]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d1e4      	bne.n	800c73a <_Balloc+0x2e>
 800c770:	2000      	movs	r0, #0
 800c772:	bd70      	pop	{r4, r5, r6, pc}
 800c774:	6802      	ldr	r2, [r0, #0]
 800c776:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c77a:	2300      	movs	r3, #0
 800c77c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c780:	e7f7      	b.n	800c772 <_Balloc+0x66>
 800c782:	bf00      	nop
 800c784:	0800e4d5 	.word	0x0800e4d5
 800c788:	0800e5bc 	.word	0x0800e5bc

0800c78c <_Bfree>:
 800c78c:	b570      	push	{r4, r5, r6, lr}
 800c78e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c790:	4605      	mov	r5, r0
 800c792:	460c      	mov	r4, r1
 800c794:	b976      	cbnz	r6, 800c7b4 <_Bfree+0x28>
 800c796:	2010      	movs	r0, #16
 800c798:	f7ff ffb0 	bl	800c6fc <malloc>
 800c79c:	4602      	mov	r2, r0
 800c79e:	6268      	str	r0, [r5, #36]	; 0x24
 800c7a0:	b920      	cbnz	r0, 800c7ac <_Bfree+0x20>
 800c7a2:	4b09      	ldr	r3, [pc, #36]	; (800c7c8 <_Bfree+0x3c>)
 800c7a4:	4809      	ldr	r0, [pc, #36]	; (800c7cc <_Bfree+0x40>)
 800c7a6:	218a      	movs	r1, #138	; 0x8a
 800c7a8:	f000 fda8 	bl	800d2fc <__assert_func>
 800c7ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c7b0:	6006      	str	r6, [r0, #0]
 800c7b2:	60c6      	str	r6, [r0, #12]
 800c7b4:	b13c      	cbz	r4, 800c7c6 <_Bfree+0x3a>
 800c7b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c7b8:	6862      	ldr	r2, [r4, #4]
 800c7ba:	68db      	ldr	r3, [r3, #12]
 800c7bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c7c0:	6021      	str	r1, [r4, #0]
 800c7c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c7c6:	bd70      	pop	{r4, r5, r6, pc}
 800c7c8:	0800e4d5 	.word	0x0800e4d5
 800c7cc:	0800e5bc 	.word	0x0800e5bc

0800c7d0 <__multadd>:
 800c7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7d4:	690e      	ldr	r6, [r1, #16]
 800c7d6:	4607      	mov	r7, r0
 800c7d8:	4698      	mov	r8, r3
 800c7da:	460c      	mov	r4, r1
 800c7dc:	f101 0014 	add.w	r0, r1, #20
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	6805      	ldr	r5, [r0, #0]
 800c7e4:	b2a9      	uxth	r1, r5
 800c7e6:	fb02 8101 	mla	r1, r2, r1, r8
 800c7ea:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c7ee:	0c2d      	lsrs	r5, r5, #16
 800c7f0:	fb02 c505 	mla	r5, r2, r5, ip
 800c7f4:	b289      	uxth	r1, r1
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c7fc:	429e      	cmp	r6, r3
 800c7fe:	f840 1b04 	str.w	r1, [r0], #4
 800c802:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c806:	dcec      	bgt.n	800c7e2 <__multadd+0x12>
 800c808:	f1b8 0f00 	cmp.w	r8, #0
 800c80c:	d022      	beq.n	800c854 <__multadd+0x84>
 800c80e:	68a3      	ldr	r3, [r4, #8]
 800c810:	42b3      	cmp	r3, r6
 800c812:	dc19      	bgt.n	800c848 <__multadd+0x78>
 800c814:	6861      	ldr	r1, [r4, #4]
 800c816:	4638      	mov	r0, r7
 800c818:	3101      	adds	r1, #1
 800c81a:	f7ff ff77 	bl	800c70c <_Balloc>
 800c81e:	4605      	mov	r5, r0
 800c820:	b928      	cbnz	r0, 800c82e <__multadd+0x5e>
 800c822:	4602      	mov	r2, r0
 800c824:	4b0d      	ldr	r3, [pc, #52]	; (800c85c <__multadd+0x8c>)
 800c826:	480e      	ldr	r0, [pc, #56]	; (800c860 <__multadd+0x90>)
 800c828:	21b5      	movs	r1, #181	; 0xb5
 800c82a:	f000 fd67 	bl	800d2fc <__assert_func>
 800c82e:	6922      	ldr	r2, [r4, #16]
 800c830:	3202      	adds	r2, #2
 800c832:	f104 010c 	add.w	r1, r4, #12
 800c836:	0092      	lsls	r2, r2, #2
 800c838:	300c      	adds	r0, #12
 800c83a:	f7fe f8bf 	bl	800a9bc <memcpy>
 800c83e:	4621      	mov	r1, r4
 800c840:	4638      	mov	r0, r7
 800c842:	f7ff ffa3 	bl	800c78c <_Bfree>
 800c846:	462c      	mov	r4, r5
 800c848:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c84c:	3601      	adds	r6, #1
 800c84e:	f8c3 8014 	str.w	r8, [r3, #20]
 800c852:	6126      	str	r6, [r4, #16]
 800c854:	4620      	mov	r0, r4
 800c856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c85a:	bf00      	nop
 800c85c:	0800e54b 	.word	0x0800e54b
 800c860:	0800e5bc 	.word	0x0800e5bc

0800c864 <__hi0bits>:
 800c864:	0c03      	lsrs	r3, r0, #16
 800c866:	041b      	lsls	r3, r3, #16
 800c868:	b9d3      	cbnz	r3, 800c8a0 <__hi0bits+0x3c>
 800c86a:	0400      	lsls	r0, r0, #16
 800c86c:	2310      	movs	r3, #16
 800c86e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c872:	bf04      	itt	eq
 800c874:	0200      	lsleq	r0, r0, #8
 800c876:	3308      	addeq	r3, #8
 800c878:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c87c:	bf04      	itt	eq
 800c87e:	0100      	lsleq	r0, r0, #4
 800c880:	3304      	addeq	r3, #4
 800c882:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c886:	bf04      	itt	eq
 800c888:	0080      	lsleq	r0, r0, #2
 800c88a:	3302      	addeq	r3, #2
 800c88c:	2800      	cmp	r0, #0
 800c88e:	db05      	blt.n	800c89c <__hi0bits+0x38>
 800c890:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c894:	f103 0301 	add.w	r3, r3, #1
 800c898:	bf08      	it	eq
 800c89a:	2320      	moveq	r3, #32
 800c89c:	4618      	mov	r0, r3
 800c89e:	4770      	bx	lr
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	e7e4      	b.n	800c86e <__hi0bits+0xa>

0800c8a4 <__lo0bits>:
 800c8a4:	6803      	ldr	r3, [r0, #0]
 800c8a6:	f013 0207 	ands.w	r2, r3, #7
 800c8aa:	4601      	mov	r1, r0
 800c8ac:	d00b      	beq.n	800c8c6 <__lo0bits+0x22>
 800c8ae:	07da      	lsls	r2, r3, #31
 800c8b0:	d424      	bmi.n	800c8fc <__lo0bits+0x58>
 800c8b2:	0798      	lsls	r0, r3, #30
 800c8b4:	bf49      	itett	mi
 800c8b6:	085b      	lsrmi	r3, r3, #1
 800c8b8:	089b      	lsrpl	r3, r3, #2
 800c8ba:	2001      	movmi	r0, #1
 800c8bc:	600b      	strmi	r3, [r1, #0]
 800c8be:	bf5c      	itt	pl
 800c8c0:	600b      	strpl	r3, [r1, #0]
 800c8c2:	2002      	movpl	r0, #2
 800c8c4:	4770      	bx	lr
 800c8c6:	b298      	uxth	r0, r3
 800c8c8:	b9b0      	cbnz	r0, 800c8f8 <__lo0bits+0x54>
 800c8ca:	0c1b      	lsrs	r3, r3, #16
 800c8cc:	2010      	movs	r0, #16
 800c8ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c8d2:	bf04      	itt	eq
 800c8d4:	0a1b      	lsreq	r3, r3, #8
 800c8d6:	3008      	addeq	r0, #8
 800c8d8:	071a      	lsls	r2, r3, #28
 800c8da:	bf04      	itt	eq
 800c8dc:	091b      	lsreq	r3, r3, #4
 800c8de:	3004      	addeq	r0, #4
 800c8e0:	079a      	lsls	r2, r3, #30
 800c8e2:	bf04      	itt	eq
 800c8e4:	089b      	lsreq	r3, r3, #2
 800c8e6:	3002      	addeq	r0, #2
 800c8e8:	07da      	lsls	r2, r3, #31
 800c8ea:	d403      	bmi.n	800c8f4 <__lo0bits+0x50>
 800c8ec:	085b      	lsrs	r3, r3, #1
 800c8ee:	f100 0001 	add.w	r0, r0, #1
 800c8f2:	d005      	beq.n	800c900 <__lo0bits+0x5c>
 800c8f4:	600b      	str	r3, [r1, #0]
 800c8f6:	4770      	bx	lr
 800c8f8:	4610      	mov	r0, r2
 800c8fa:	e7e8      	b.n	800c8ce <__lo0bits+0x2a>
 800c8fc:	2000      	movs	r0, #0
 800c8fe:	4770      	bx	lr
 800c900:	2020      	movs	r0, #32
 800c902:	4770      	bx	lr

0800c904 <__i2b>:
 800c904:	b510      	push	{r4, lr}
 800c906:	460c      	mov	r4, r1
 800c908:	2101      	movs	r1, #1
 800c90a:	f7ff feff 	bl	800c70c <_Balloc>
 800c90e:	4602      	mov	r2, r0
 800c910:	b928      	cbnz	r0, 800c91e <__i2b+0x1a>
 800c912:	4b05      	ldr	r3, [pc, #20]	; (800c928 <__i2b+0x24>)
 800c914:	4805      	ldr	r0, [pc, #20]	; (800c92c <__i2b+0x28>)
 800c916:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c91a:	f000 fcef 	bl	800d2fc <__assert_func>
 800c91e:	2301      	movs	r3, #1
 800c920:	6144      	str	r4, [r0, #20]
 800c922:	6103      	str	r3, [r0, #16]
 800c924:	bd10      	pop	{r4, pc}
 800c926:	bf00      	nop
 800c928:	0800e54b 	.word	0x0800e54b
 800c92c:	0800e5bc 	.word	0x0800e5bc

0800c930 <__multiply>:
 800c930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c934:	4614      	mov	r4, r2
 800c936:	690a      	ldr	r2, [r1, #16]
 800c938:	6923      	ldr	r3, [r4, #16]
 800c93a:	429a      	cmp	r2, r3
 800c93c:	bfb8      	it	lt
 800c93e:	460b      	movlt	r3, r1
 800c940:	460d      	mov	r5, r1
 800c942:	bfbc      	itt	lt
 800c944:	4625      	movlt	r5, r4
 800c946:	461c      	movlt	r4, r3
 800c948:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c94c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c950:	68ab      	ldr	r3, [r5, #8]
 800c952:	6869      	ldr	r1, [r5, #4]
 800c954:	eb0a 0709 	add.w	r7, sl, r9
 800c958:	42bb      	cmp	r3, r7
 800c95a:	b085      	sub	sp, #20
 800c95c:	bfb8      	it	lt
 800c95e:	3101      	addlt	r1, #1
 800c960:	f7ff fed4 	bl	800c70c <_Balloc>
 800c964:	b930      	cbnz	r0, 800c974 <__multiply+0x44>
 800c966:	4602      	mov	r2, r0
 800c968:	4b42      	ldr	r3, [pc, #264]	; (800ca74 <__multiply+0x144>)
 800c96a:	4843      	ldr	r0, [pc, #268]	; (800ca78 <__multiply+0x148>)
 800c96c:	f240 115d 	movw	r1, #349	; 0x15d
 800c970:	f000 fcc4 	bl	800d2fc <__assert_func>
 800c974:	f100 0614 	add.w	r6, r0, #20
 800c978:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c97c:	4633      	mov	r3, r6
 800c97e:	2200      	movs	r2, #0
 800c980:	4543      	cmp	r3, r8
 800c982:	d31e      	bcc.n	800c9c2 <__multiply+0x92>
 800c984:	f105 0c14 	add.w	ip, r5, #20
 800c988:	f104 0314 	add.w	r3, r4, #20
 800c98c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c990:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c994:	9202      	str	r2, [sp, #8]
 800c996:	ebac 0205 	sub.w	r2, ip, r5
 800c99a:	3a15      	subs	r2, #21
 800c99c:	f022 0203 	bic.w	r2, r2, #3
 800c9a0:	3204      	adds	r2, #4
 800c9a2:	f105 0115 	add.w	r1, r5, #21
 800c9a6:	458c      	cmp	ip, r1
 800c9a8:	bf38      	it	cc
 800c9aa:	2204      	movcc	r2, #4
 800c9ac:	9201      	str	r2, [sp, #4]
 800c9ae:	9a02      	ldr	r2, [sp, #8]
 800c9b0:	9303      	str	r3, [sp, #12]
 800c9b2:	429a      	cmp	r2, r3
 800c9b4:	d808      	bhi.n	800c9c8 <__multiply+0x98>
 800c9b6:	2f00      	cmp	r7, #0
 800c9b8:	dc55      	bgt.n	800ca66 <__multiply+0x136>
 800c9ba:	6107      	str	r7, [r0, #16]
 800c9bc:	b005      	add	sp, #20
 800c9be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9c2:	f843 2b04 	str.w	r2, [r3], #4
 800c9c6:	e7db      	b.n	800c980 <__multiply+0x50>
 800c9c8:	f8b3 a000 	ldrh.w	sl, [r3]
 800c9cc:	f1ba 0f00 	cmp.w	sl, #0
 800c9d0:	d020      	beq.n	800ca14 <__multiply+0xe4>
 800c9d2:	f105 0e14 	add.w	lr, r5, #20
 800c9d6:	46b1      	mov	r9, r6
 800c9d8:	2200      	movs	r2, #0
 800c9da:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c9de:	f8d9 b000 	ldr.w	fp, [r9]
 800c9e2:	b2a1      	uxth	r1, r4
 800c9e4:	fa1f fb8b 	uxth.w	fp, fp
 800c9e8:	fb0a b101 	mla	r1, sl, r1, fp
 800c9ec:	4411      	add	r1, r2
 800c9ee:	f8d9 2000 	ldr.w	r2, [r9]
 800c9f2:	0c24      	lsrs	r4, r4, #16
 800c9f4:	0c12      	lsrs	r2, r2, #16
 800c9f6:	fb0a 2404 	mla	r4, sl, r4, r2
 800c9fa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c9fe:	b289      	uxth	r1, r1
 800ca00:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ca04:	45f4      	cmp	ip, lr
 800ca06:	f849 1b04 	str.w	r1, [r9], #4
 800ca0a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ca0e:	d8e4      	bhi.n	800c9da <__multiply+0xaa>
 800ca10:	9901      	ldr	r1, [sp, #4]
 800ca12:	5072      	str	r2, [r6, r1]
 800ca14:	9a03      	ldr	r2, [sp, #12]
 800ca16:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ca1a:	3304      	adds	r3, #4
 800ca1c:	f1b9 0f00 	cmp.w	r9, #0
 800ca20:	d01f      	beq.n	800ca62 <__multiply+0x132>
 800ca22:	6834      	ldr	r4, [r6, #0]
 800ca24:	f105 0114 	add.w	r1, r5, #20
 800ca28:	46b6      	mov	lr, r6
 800ca2a:	f04f 0a00 	mov.w	sl, #0
 800ca2e:	880a      	ldrh	r2, [r1, #0]
 800ca30:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ca34:	fb09 b202 	mla	r2, r9, r2, fp
 800ca38:	4492      	add	sl, r2
 800ca3a:	b2a4      	uxth	r4, r4
 800ca3c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ca40:	f84e 4b04 	str.w	r4, [lr], #4
 800ca44:	f851 4b04 	ldr.w	r4, [r1], #4
 800ca48:	f8be 2000 	ldrh.w	r2, [lr]
 800ca4c:	0c24      	lsrs	r4, r4, #16
 800ca4e:	fb09 2404 	mla	r4, r9, r4, r2
 800ca52:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ca56:	458c      	cmp	ip, r1
 800ca58:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ca5c:	d8e7      	bhi.n	800ca2e <__multiply+0xfe>
 800ca5e:	9a01      	ldr	r2, [sp, #4]
 800ca60:	50b4      	str	r4, [r6, r2]
 800ca62:	3604      	adds	r6, #4
 800ca64:	e7a3      	b.n	800c9ae <__multiply+0x7e>
 800ca66:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d1a5      	bne.n	800c9ba <__multiply+0x8a>
 800ca6e:	3f01      	subs	r7, #1
 800ca70:	e7a1      	b.n	800c9b6 <__multiply+0x86>
 800ca72:	bf00      	nop
 800ca74:	0800e54b 	.word	0x0800e54b
 800ca78:	0800e5bc 	.word	0x0800e5bc

0800ca7c <__pow5mult>:
 800ca7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca80:	4615      	mov	r5, r2
 800ca82:	f012 0203 	ands.w	r2, r2, #3
 800ca86:	4606      	mov	r6, r0
 800ca88:	460f      	mov	r7, r1
 800ca8a:	d007      	beq.n	800ca9c <__pow5mult+0x20>
 800ca8c:	4c25      	ldr	r4, [pc, #148]	; (800cb24 <__pow5mult+0xa8>)
 800ca8e:	3a01      	subs	r2, #1
 800ca90:	2300      	movs	r3, #0
 800ca92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ca96:	f7ff fe9b 	bl	800c7d0 <__multadd>
 800ca9a:	4607      	mov	r7, r0
 800ca9c:	10ad      	asrs	r5, r5, #2
 800ca9e:	d03d      	beq.n	800cb1c <__pow5mult+0xa0>
 800caa0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800caa2:	b97c      	cbnz	r4, 800cac4 <__pow5mult+0x48>
 800caa4:	2010      	movs	r0, #16
 800caa6:	f7ff fe29 	bl	800c6fc <malloc>
 800caaa:	4602      	mov	r2, r0
 800caac:	6270      	str	r0, [r6, #36]	; 0x24
 800caae:	b928      	cbnz	r0, 800cabc <__pow5mult+0x40>
 800cab0:	4b1d      	ldr	r3, [pc, #116]	; (800cb28 <__pow5mult+0xac>)
 800cab2:	481e      	ldr	r0, [pc, #120]	; (800cb2c <__pow5mult+0xb0>)
 800cab4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cab8:	f000 fc20 	bl	800d2fc <__assert_func>
 800cabc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cac0:	6004      	str	r4, [r0, #0]
 800cac2:	60c4      	str	r4, [r0, #12]
 800cac4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cac8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cacc:	b94c      	cbnz	r4, 800cae2 <__pow5mult+0x66>
 800cace:	f240 2171 	movw	r1, #625	; 0x271
 800cad2:	4630      	mov	r0, r6
 800cad4:	f7ff ff16 	bl	800c904 <__i2b>
 800cad8:	2300      	movs	r3, #0
 800cada:	f8c8 0008 	str.w	r0, [r8, #8]
 800cade:	4604      	mov	r4, r0
 800cae0:	6003      	str	r3, [r0, #0]
 800cae2:	f04f 0900 	mov.w	r9, #0
 800cae6:	07eb      	lsls	r3, r5, #31
 800cae8:	d50a      	bpl.n	800cb00 <__pow5mult+0x84>
 800caea:	4639      	mov	r1, r7
 800caec:	4622      	mov	r2, r4
 800caee:	4630      	mov	r0, r6
 800caf0:	f7ff ff1e 	bl	800c930 <__multiply>
 800caf4:	4639      	mov	r1, r7
 800caf6:	4680      	mov	r8, r0
 800caf8:	4630      	mov	r0, r6
 800cafa:	f7ff fe47 	bl	800c78c <_Bfree>
 800cafe:	4647      	mov	r7, r8
 800cb00:	106d      	asrs	r5, r5, #1
 800cb02:	d00b      	beq.n	800cb1c <__pow5mult+0xa0>
 800cb04:	6820      	ldr	r0, [r4, #0]
 800cb06:	b938      	cbnz	r0, 800cb18 <__pow5mult+0x9c>
 800cb08:	4622      	mov	r2, r4
 800cb0a:	4621      	mov	r1, r4
 800cb0c:	4630      	mov	r0, r6
 800cb0e:	f7ff ff0f 	bl	800c930 <__multiply>
 800cb12:	6020      	str	r0, [r4, #0]
 800cb14:	f8c0 9000 	str.w	r9, [r0]
 800cb18:	4604      	mov	r4, r0
 800cb1a:	e7e4      	b.n	800cae6 <__pow5mult+0x6a>
 800cb1c:	4638      	mov	r0, r7
 800cb1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb22:	bf00      	nop
 800cb24:	0800e710 	.word	0x0800e710
 800cb28:	0800e4d5 	.word	0x0800e4d5
 800cb2c:	0800e5bc 	.word	0x0800e5bc

0800cb30 <__lshift>:
 800cb30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb34:	460c      	mov	r4, r1
 800cb36:	6849      	ldr	r1, [r1, #4]
 800cb38:	6923      	ldr	r3, [r4, #16]
 800cb3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cb3e:	68a3      	ldr	r3, [r4, #8]
 800cb40:	4607      	mov	r7, r0
 800cb42:	4691      	mov	r9, r2
 800cb44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cb48:	f108 0601 	add.w	r6, r8, #1
 800cb4c:	42b3      	cmp	r3, r6
 800cb4e:	db0b      	blt.n	800cb68 <__lshift+0x38>
 800cb50:	4638      	mov	r0, r7
 800cb52:	f7ff fddb 	bl	800c70c <_Balloc>
 800cb56:	4605      	mov	r5, r0
 800cb58:	b948      	cbnz	r0, 800cb6e <__lshift+0x3e>
 800cb5a:	4602      	mov	r2, r0
 800cb5c:	4b28      	ldr	r3, [pc, #160]	; (800cc00 <__lshift+0xd0>)
 800cb5e:	4829      	ldr	r0, [pc, #164]	; (800cc04 <__lshift+0xd4>)
 800cb60:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cb64:	f000 fbca 	bl	800d2fc <__assert_func>
 800cb68:	3101      	adds	r1, #1
 800cb6a:	005b      	lsls	r3, r3, #1
 800cb6c:	e7ee      	b.n	800cb4c <__lshift+0x1c>
 800cb6e:	2300      	movs	r3, #0
 800cb70:	f100 0114 	add.w	r1, r0, #20
 800cb74:	f100 0210 	add.w	r2, r0, #16
 800cb78:	4618      	mov	r0, r3
 800cb7a:	4553      	cmp	r3, sl
 800cb7c:	db33      	blt.n	800cbe6 <__lshift+0xb6>
 800cb7e:	6920      	ldr	r0, [r4, #16]
 800cb80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cb84:	f104 0314 	add.w	r3, r4, #20
 800cb88:	f019 091f 	ands.w	r9, r9, #31
 800cb8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cb90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cb94:	d02b      	beq.n	800cbee <__lshift+0xbe>
 800cb96:	f1c9 0e20 	rsb	lr, r9, #32
 800cb9a:	468a      	mov	sl, r1
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	6818      	ldr	r0, [r3, #0]
 800cba0:	fa00 f009 	lsl.w	r0, r0, r9
 800cba4:	4302      	orrs	r2, r0
 800cba6:	f84a 2b04 	str.w	r2, [sl], #4
 800cbaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbae:	459c      	cmp	ip, r3
 800cbb0:	fa22 f20e 	lsr.w	r2, r2, lr
 800cbb4:	d8f3      	bhi.n	800cb9e <__lshift+0x6e>
 800cbb6:	ebac 0304 	sub.w	r3, ip, r4
 800cbba:	3b15      	subs	r3, #21
 800cbbc:	f023 0303 	bic.w	r3, r3, #3
 800cbc0:	3304      	adds	r3, #4
 800cbc2:	f104 0015 	add.w	r0, r4, #21
 800cbc6:	4584      	cmp	ip, r0
 800cbc8:	bf38      	it	cc
 800cbca:	2304      	movcc	r3, #4
 800cbcc:	50ca      	str	r2, [r1, r3]
 800cbce:	b10a      	cbz	r2, 800cbd4 <__lshift+0xa4>
 800cbd0:	f108 0602 	add.w	r6, r8, #2
 800cbd4:	3e01      	subs	r6, #1
 800cbd6:	4638      	mov	r0, r7
 800cbd8:	612e      	str	r6, [r5, #16]
 800cbda:	4621      	mov	r1, r4
 800cbdc:	f7ff fdd6 	bl	800c78c <_Bfree>
 800cbe0:	4628      	mov	r0, r5
 800cbe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbe6:	f842 0f04 	str.w	r0, [r2, #4]!
 800cbea:	3301      	adds	r3, #1
 800cbec:	e7c5      	b.n	800cb7a <__lshift+0x4a>
 800cbee:	3904      	subs	r1, #4
 800cbf0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbf4:	f841 2f04 	str.w	r2, [r1, #4]!
 800cbf8:	459c      	cmp	ip, r3
 800cbfa:	d8f9      	bhi.n	800cbf0 <__lshift+0xc0>
 800cbfc:	e7ea      	b.n	800cbd4 <__lshift+0xa4>
 800cbfe:	bf00      	nop
 800cc00:	0800e54b 	.word	0x0800e54b
 800cc04:	0800e5bc 	.word	0x0800e5bc

0800cc08 <__mcmp>:
 800cc08:	b530      	push	{r4, r5, lr}
 800cc0a:	6902      	ldr	r2, [r0, #16]
 800cc0c:	690c      	ldr	r4, [r1, #16]
 800cc0e:	1b12      	subs	r2, r2, r4
 800cc10:	d10e      	bne.n	800cc30 <__mcmp+0x28>
 800cc12:	f100 0314 	add.w	r3, r0, #20
 800cc16:	3114      	adds	r1, #20
 800cc18:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cc1c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cc20:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cc24:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cc28:	42a5      	cmp	r5, r4
 800cc2a:	d003      	beq.n	800cc34 <__mcmp+0x2c>
 800cc2c:	d305      	bcc.n	800cc3a <__mcmp+0x32>
 800cc2e:	2201      	movs	r2, #1
 800cc30:	4610      	mov	r0, r2
 800cc32:	bd30      	pop	{r4, r5, pc}
 800cc34:	4283      	cmp	r3, r0
 800cc36:	d3f3      	bcc.n	800cc20 <__mcmp+0x18>
 800cc38:	e7fa      	b.n	800cc30 <__mcmp+0x28>
 800cc3a:	f04f 32ff 	mov.w	r2, #4294967295
 800cc3e:	e7f7      	b.n	800cc30 <__mcmp+0x28>

0800cc40 <__mdiff>:
 800cc40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc44:	460c      	mov	r4, r1
 800cc46:	4606      	mov	r6, r0
 800cc48:	4611      	mov	r1, r2
 800cc4a:	4620      	mov	r0, r4
 800cc4c:	4617      	mov	r7, r2
 800cc4e:	f7ff ffdb 	bl	800cc08 <__mcmp>
 800cc52:	1e05      	subs	r5, r0, #0
 800cc54:	d110      	bne.n	800cc78 <__mdiff+0x38>
 800cc56:	4629      	mov	r1, r5
 800cc58:	4630      	mov	r0, r6
 800cc5a:	f7ff fd57 	bl	800c70c <_Balloc>
 800cc5e:	b930      	cbnz	r0, 800cc6e <__mdiff+0x2e>
 800cc60:	4b39      	ldr	r3, [pc, #228]	; (800cd48 <__mdiff+0x108>)
 800cc62:	4602      	mov	r2, r0
 800cc64:	f240 2132 	movw	r1, #562	; 0x232
 800cc68:	4838      	ldr	r0, [pc, #224]	; (800cd4c <__mdiff+0x10c>)
 800cc6a:	f000 fb47 	bl	800d2fc <__assert_func>
 800cc6e:	2301      	movs	r3, #1
 800cc70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cc74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc78:	bfa4      	itt	ge
 800cc7a:	463b      	movge	r3, r7
 800cc7c:	4627      	movge	r7, r4
 800cc7e:	4630      	mov	r0, r6
 800cc80:	6879      	ldr	r1, [r7, #4]
 800cc82:	bfa6      	itte	ge
 800cc84:	461c      	movge	r4, r3
 800cc86:	2500      	movge	r5, #0
 800cc88:	2501      	movlt	r5, #1
 800cc8a:	f7ff fd3f 	bl	800c70c <_Balloc>
 800cc8e:	b920      	cbnz	r0, 800cc9a <__mdiff+0x5a>
 800cc90:	4b2d      	ldr	r3, [pc, #180]	; (800cd48 <__mdiff+0x108>)
 800cc92:	4602      	mov	r2, r0
 800cc94:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cc98:	e7e6      	b.n	800cc68 <__mdiff+0x28>
 800cc9a:	693e      	ldr	r6, [r7, #16]
 800cc9c:	60c5      	str	r5, [r0, #12]
 800cc9e:	6925      	ldr	r5, [r4, #16]
 800cca0:	f107 0114 	add.w	r1, r7, #20
 800cca4:	f104 0914 	add.w	r9, r4, #20
 800cca8:	f100 0e14 	add.w	lr, r0, #20
 800ccac:	f107 0210 	add.w	r2, r7, #16
 800ccb0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ccb4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ccb8:	46f2      	mov	sl, lr
 800ccba:	2700      	movs	r7, #0
 800ccbc:	f859 3b04 	ldr.w	r3, [r9], #4
 800ccc0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ccc4:	fa1f f883 	uxth.w	r8, r3
 800ccc8:	fa17 f78b 	uxtah	r7, r7, fp
 800cccc:	0c1b      	lsrs	r3, r3, #16
 800ccce:	eba7 0808 	sub.w	r8, r7, r8
 800ccd2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ccd6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ccda:	fa1f f888 	uxth.w	r8, r8
 800ccde:	141f      	asrs	r7, r3, #16
 800cce0:	454d      	cmp	r5, r9
 800cce2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cce6:	f84a 3b04 	str.w	r3, [sl], #4
 800ccea:	d8e7      	bhi.n	800ccbc <__mdiff+0x7c>
 800ccec:	1b2b      	subs	r3, r5, r4
 800ccee:	3b15      	subs	r3, #21
 800ccf0:	f023 0303 	bic.w	r3, r3, #3
 800ccf4:	3304      	adds	r3, #4
 800ccf6:	3415      	adds	r4, #21
 800ccf8:	42a5      	cmp	r5, r4
 800ccfa:	bf38      	it	cc
 800ccfc:	2304      	movcc	r3, #4
 800ccfe:	4419      	add	r1, r3
 800cd00:	4473      	add	r3, lr
 800cd02:	469e      	mov	lr, r3
 800cd04:	460d      	mov	r5, r1
 800cd06:	4565      	cmp	r5, ip
 800cd08:	d30e      	bcc.n	800cd28 <__mdiff+0xe8>
 800cd0a:	f10c 0203 	add.w	r2, ip, #3
 800cd0e:	1a52      	subs	r2, r2, r1
 800cd10:	f022 0203 	bic.w	r2, r2, #3
 800cd14:	3903      	subs	r1, #3
 800cd16:	458c      	cmp	ip, r1
 800cd18:	bf38      	it	cc
 800cd1a:	2200      	movcc	r2, #0
 800cd1c:	441a      	add	r2, r3
 800cd1e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cd22:	b17b      	cbz	r3, 800cd44 <__mdiff+0x104>
 800cd24:	6106      	str	r6, [r0, #16]
 800cd26:	e7a5      	b.n	800cc74 <__mdiff+0x34>
 800cd28:	f855 8b04 	ldr.w	r8, [r5], #4
 800cd2c:	fa17 f488 	uxtah	r4, r7, r8
 800cd30:	1422      	asrs	r2, r4, #16
 800cd32:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800cd36:	b2a4      	uxth	r4, r4
 800cd38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800cd3c:	f84e 4b04 	str.w	r4, [lr], #4
 800cd40:	1417      	asrs	r7, r2, #16
 800cd42:	e7e0      	b.n	800cd06 <__mdiff+0xc6>
 800cd44:	3e01      	subs	r6, #1
 800cd46:	e7ea      	b.n	800cd1e <__mdiff+0xde>
 800cd48:	0800e54b 	.word	0x0800e54b
 800cd4c:	0800e5bc 	.word	0x0800e5bc

0800cd50 <__d2b>:
 800cd50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cd54:	4689      	mov	r9, r1
 800cd56:	2101      	movs	r1, #1
 800cd58:	ec57 6b10 	vmov	r6, r7, d0
 800cd5c:	4690      	mov	r8, r2
 800cd5e:	f7ff fcd5 	bl	800c70c <_Balloc>
 800cd62:	4604      	mov	r4, r0
 800cd64:	b930      	cbnz	r0, 800cd74 <__d2b+0x24>
 800cd66:	4602      	mov	r2, r0
 800cd68:	4b25      	ldr	r3, [pc, #148]	; (800ce00 <__d2b+0xb0>)
 800cd6a:	4826      	ldr	r0, [pc, #152]	; (800ce04 <__d2b+0xb4>)
 800cd6c:	f240 310a 	movw	r1, #778	; 0x30a
 800cd70:	f000 fac4 	bl	800d2fc <__assert_func>
 800cd74:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cd78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cd7c:	bb35      	cbnz	r5, 800cdcc <__d2b+0x7c>
 800cd7e:	2e00      	cmp	r6, #0
 800cd80:	9301      	str	r3, [sp, #4]
 800cd82:	d028      	beq.n	800cdd6 <__d2b+0x86>
 800cd84:	4668      	mov	r0, sp
 800cd86:	9600      	str	r6, [sp, #0]
 800cd88:	f7ff fd8c 	bl	800c8a4 <__lo0bits>
 800cd8c:	9900      	ldr	r1, [sp, #0]
 800cd8e:	b300      	cbz	r0, 800cdd2 <__d2b+0x82>
 800cd90:	9a01      	ldr	r2, [sp, #4]
 800cd92:	f1c0 0320 	rsb	r3, r0, #32
 800cd96:	fa02 f303 	lsl.w	r3, r2, r3
 800cd9a:	430b      	orrs	r3, r1
 800cd9c:	40c2      	lsrs	r2, r0
 800cd9e:	6163      	str	r3, [r4, #20]
 800cda0:	9201      	str	r2, [sp, #4]
 800cda2:	9b01      	ldr	r3, [sp, #4]
 800cda4:	61a3      	str	r3, [r4, #24]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	bf14      	ite	ne
 800cdaa:	2202      	movne	r2, #2
 800cdac:	2201      	moveq	r2, #1
 800cdae:	6122      	str	r2, [r4, #16]
 800cdb0:	b1d5      	cbz	r5, 800cde8 <__d2b+0x98>
 800cdb2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cdb6:	4405      	add	r5, r0
 800cdb8:	f8c9 5000 	str.w	r5, [r9]
 800cdbc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cdc0:	f8c8 0000 	str.w	r0, [r8]
 800cdc4:	4620      	mov	r0, r4
 800cdc6:	b003      	add	sp, #12
 800cdc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cdd0:	e7d5      	b.n	800cd7e <__d2b+0x2e>
 800cdd2:	6161      	str	r1, [r4, #20]
 800cdd4:	e7e5      	b.n	800cda2 <__d2b+0x52>
 800cdd6:	a801      	add	r0, sp, #4
 800cdd8:	f7ff fd64 	bl	800c8a4 <__lo0bits>
 800cddc:	9b01      	ldr	r3, [sp, #4]
 800cdde:	6163      	str	r3, [r4, #20]
 800cde0:	2201      	movs	r2, #1
 800cde2:	6122      	str	r2, [r4, #16]
 800cde4:	3020      	adds	r0, #32
 800cde6:	e7e3      	b.n	800cdb0 <__d2b+0x60>
 800cde8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cdec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cdf0:	f8c9 0000 	str.w	r0, [r9]
 800cdf4:	6918      	ldr	r0, [r3, #16]
 800cdf6:	f7ff fd35 	bl	800c864 <__hi0bits>
 800cdfa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cdfe:	e7df      	b.n	800cdc0 <__d2b+0x70>
 800ce00:	0800e54b 	.word	0x0800e54b
 800ce04:	0800e5bc 	.word	0x0800e5bc

0800ce08 <_calloc_r>:
 800ce08:	b513      	push	{r0, r1, r4, lr}
 800ce0a:	434a      	muls	r2, r1
 800ce0c:	4611      	mov	r1, r2
 800ce0e:	9201      	str	r2, [sp, #4]
 800ce10:	f000 f85a 	bl	800cec8 <_malloc_r>
 800ce14:	4604      	mov	r4, r0
 800ce16:	b118      	cbz	r0, 800ce20 <_calloc_r+0x18>
 800ce18:	9a01      	ldr	r2, [sp, #4]
 800ce1a:	2100      	movs	r1, #0
 800ce1c:	f7fd fddc 	bl	800a9d8 <memset>
 800ce20:	4620      	mov	r0, r4
 800ce22:	b002      	add	sp, #8
 800ce24:	bd10      	pop	{r4, pc}
	...

0800ce28 <_free_r>:
 800ce28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce2a:	2900      	cmp	r1, #0
 800ce2c:	d048      	beq.n	800cec0 <_free_r+0x98>
 800ce2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce32:	9001      	str	r0, [sp, #4]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	f1a1 0404 	sub.w	r4, r1, #4
 800ce3a:	bfb8      	it	lt
 800ce3c:	18e4      	addlt	r4, r4, r3
 800ce3e:	f000 fae3 	bl	800d408 <__malloc_lock>
 800ce42:	4a20      	ldr	r2, [pc, #128]	; (800cec4 <_free_r+0x9c>)
 800ce44:	9801      	ldr	r0, [sp, #4]
 800ce46:	6813      	ldr	r3, [r2, #0]
 800ce48:	4615      	mov	r5, r2
 800ce4a:	b933      	cbnz	r3, 800ce5a <_free_r+0x32>
 800ce4c:	6063      	str	r3, [r4, #4]
 800ce4e:	6014      	str	r4, [r2, #0]
 800ce50:	b003      	add	sp, #12
 800ce52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ce56:	f000 badd 	b.w	800d414 <__malloc_unlock>
 800ce5a:	42a3      	cmp	r3, r4
 800ce5c:	d90b      	bls.n	800ce76 <_free_r+0x4e>
 800ce5e:	6821      	ldr	r1, [r4, #0]
 800ce60:	1862      	adds	r2, r4, r1
 800ce62:	4293      	cmp	r3, r2
 800ce64:	bf04      	itt	eq
 800ce66:	681a      	ldreq	r2, [r3, #0]
 800ce68:	685b      	ldreq	r3, [r3, #4]
 800ce6a:	6063      	str	r3, [r4, #4]
 800ce6c:	bf04      	itt	eq
 800ce6e:	1852      	addeq	r2, r2, r1
 800ce70:	6022      	streq	r2, [r4, #0]
 800ce72:	602c      	str	r4, [r5, #0]
 800ce74:	e7ec      	b.n	800ce50 <_free_r+0x28>
 800ce76:	461a      	mov	r2, r3
 800ce78:	685b      	ldr	r3, [r3, #4]
 800ce7a:	b10b      	cbz	r3, 800ce80 <_free_r+0x58>
 800ce7c:	42a3      	cmp	r3, r4
 800ce7e:	d9fa      	bls.n	800ce76 <_free_r+0x4e>
 800ce80:	6811      	ldr	r1, [r2, #0]
 800ce82:	1855      	adds	r5, r2, r1
 800ce84:	42a5      	cmp	r5, r4
 800ce86:	d10b      	bne.n	800cea0 <_free_r+0x78>
 800ce88:	6824      	ldr	r4, [r4, #0]
 800ce8a:	4421      	add	r1, r4
 800ce8c:	1854      	adds	r4, r2, r1
 800ce8e:	42a3      	cmp	r3, r4
 800ce90:	6011      	str	r1, [r2, #0]
 800ce92:	d1dd      	bne.n	800ce50 <_free_r+0x28>
 800ce94:	681c      	ldr	r4, [r3, #0]
 800ce96:	685b      	ldr	r3, [r3, #4]
 800ce98:	6053      	str	r3, [r2, #4]
 800ce9a:	4421      	add	r1, r4
 800ce9c:	6011      	str	r1, [r2, #0]
 800ce9e:	e7d7      	b.n	800ce50 <_free_r+0x28>
 800cea0:	d902      	bls.n	800cea8 <_free_r+0x80>
 800cea2:	230c      	movs	r3, #12
 800cea4:	6003      	str	r3, [r0, #0]
 800cea6:	e7d3      	b.n	800ce50 <_free_r+0x28>
 800cea8:	6825      	ldr	r5, [r4, #0]
 800ceaa:	1961      	adds	r1, r4, r5
 800ceac:	428b      	cmp	r3, r1
 800ceae:	bf04      	itt	eq
 800ceb0:	6819      	ldreq	r1, [r3, #0]
 800ceb2:	685b      	ldreq	r3, [r3, #4]
 800ceb4:	6063      	str	r3, [r4, #4]
 800ceb6:	bf04      	itt	eq
 800ceb8:	1949      	addeq	r1, r1, r5
 800ceba:	6021      	streq	r1, [r4, #0]
 800cebc:	6054      	str	r4, [r2, #4]
 800cebe:	e7c7      	b.n	800ce50 <_free_r+0x28>
 800cec0:	b003      	add	sp, #12
 800cec2:	bd30      	pop	{r4, r5, pc}
 800cec4:	240002e4 	.word	0x240002e4

0800cec8 <_malloc_r>:
 800cec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceca:	1ccd      	adds	r5, r1, #3
 800cecc:	f025 0503 	bic.w	r5, r5, #3
 800ced0:	3508      	adds	r5, #8
 800ced2:	2d0c      	cmp	r5, #12
 800ced4:	bf38      	it	cc
 800ced6:	250c      	movcc	r5, #12
 800ced8:	2d00      	cmp	r5, #0
 800ceda:	4606      	mov	r6, r0
 800cedc:	db01      	blt.n	800cee2 <_malloc_r+0x1a>
 800cede:	42a9      	cmp	r1, r5
 800cee0:	d903      	bls.n	800ceea <_malloc_r+0x22>
 800cee2:	230c      	movs	r3, #12
 800cee4:	6033      	str	r3, [r6, #0]
 800cee6:	2000      	movs	r0, #0
 800cee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ceea:	f000 fa8d 	bl	800d408 <__malloc_lock>
 800ceee:	4921      	ldr	r1, [pc, #132]	; (800cf74 <_malloc_r+0xac>)
 800cef0:	680a      	ldr	r2, [r1, #0]
 800cef2:	4614      	mov	r4, r2
 800cef4:	b99c      	cbnz	r4, 800cf1e <_malloc_r+0x56>
 800cef6:	4f20      	ldr	r7, [pc, #128]	; (800cf78 <_malloc_r+0xb0>)
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	b923      	cbnz	r3, 800cf06 <_malloc_r+0x3e>
 800cefc:	4621      	mov	r1, r4
 800cefe:	4630      	mov	r0, r6
 800cf00:	f000 f996 	bl	800d230 <_sbrk_r>
 800cf04:	6038      	str	r0, [r7, #0]
 800cf06:	4629      	mov	r1, r5
 800cf08:	4630      	mov	r0, r6
 800cf0a:	f000 f991 	bl	800d230 <_sbrk_r>
 800cf0e:	1c43      	adds	r3, r0, #1
 800cf10:	d123      	bne.n	800cf5a <_malloc_r+0x92>
 800cf12:	230c      	movs	r3, #12
 800cf14:	6033      	str	r3, [r6, #0]
 800cf16:	4630      	mov	r0, r6
 800cf18:	f000 fa7c 	bl	800d414 <__malloc_unlock>
 800cf1c:	e7e3      	b.n	800cee6 <_malloc_r+0x1e>
 800cf1e:	6823      	ldr	r3, [r4, #0]
 800cf20:	1b5b      	subs	r3, r3, r5
 800cf22:	d417      	bmi.n	800cf54 <_malloc_r+0x8c>
 800cf24:	2b0b      	cmp	r3, #11
 800cf26:	d903      	bls.n	800cf30 <_malloc_r+0x68>
 800cf28:	6023      	str	r3, [r4, #0]
 800cf2a:	441c      	add	r4, r3
 800cf2c:	6025      	str	r5, [r4, #0]
 800cf2e:	e004      	b.n	800cf3a <_malloc_r+0x72>
 800cf30:	6863      	ldr	r3, [r4, #4]
 800cf32:	42a2      	cmp	r2, r4
 800cf34:	bf0c      	ite	eq
 800cf36:	600b      	streq	r3, [r1, #0]
 800cf38:	6053      	strne	r3, [r2, #4]
 800cf3a:	4630      	mov	r0, r6
 800cf3c:	f000 fa6a 	bl	800d414 <__malloc_unlock>
 800cf40:	f104 000b 	add.w	r0, r4, #11
 800cf44:	1d23      	adds	r3, r4, #4
 800cf46:	f020 0007 	bic.w	r0, r0, #7
 800cf4a:	1ac2      	subs	r2, r0, r3
 800cf4c:	d0cc      	beq.n	800cee8 <_malloc_r+0x20>
 800cf4e:	1a1b      	subs	r3, r3, r0
 800cf50:	50a3      	str	r3, [r4, r2]
 800cf52:	e7c9      	b.n	800cee8 <_malloc_r+0x20>
 800cf54:	4622      	mov	r2, r4
 800cf56:	6864      	ldr	r4, [r4, #4]
 800cf58:	e7cc      	b.n	800cef4 <_malloc_r+0x2c>
 800cf5a:	1cc4      	adds	r4, r0, #3
 800cf5c:	f024 0403 	bic.w	r4, r4, #3
 800cf60:	42a0      	cmp	r0, r4
 800cf62:	d0e3      	beq.n	800cf2c <_malloc_r+0x64>
 800cf64:	1a21      	subs	r1, r4, r0
 800cf66:	4630      	mov	r0, r6
 800cf68:	f000 f962 	bl	800d230 <_sbrk_r>
 800cf6c:	3001      	adds	r0, #1
 800cf6e:	d1dd      	bne.n	800cf2c <_malloc_r+0x64>
 800cf70:	e7cf      	b.n	800cf12 <_malloc_r+0x4a>
 800cf72:	bf00      	nop
 800cf74:	240002e4 	.word	0x240002e4
 800cf78:	240002e8 	.word	0x240002e8

0800cf7c <__sfputc_r>:
 800cf7c:	6893      	ldr	r3, [r2, #8]
 800cf7e:	3b01      	subs	r3, #1
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	b410      	push	{r4}
 800cf84:	6093      	str	r3, [r2, #8]
 800cf86:	da08      	bge.n	800cf9a <__sfputc_r+0x1e>
 800cf88:	6994      	ldr	r4, [r2, #24]
 800cf8a:	42a3      	cmp	r3, r4
 800cf8c:	db01      	blt.n	800cf92 <__sfputc_r+0x16>
 800cf8e:	290a      	cmp	r1, #10
 800cf90:	d103      	bne.n	800cf9a <__sfputc_r+0x1e>
 800cf92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf96:	f7fe babd 	b.w	800b514 <__swbuf_r>
 800cf9a:	6813      	ldr	r3, [r2, #0]
 800cf9c:	1c58      	adds	r0, r3, #1
 800cf9e:	6010      	str	r0, [r2, #0]
 800cfa0:	7019      	strb	r1, [r3, #0]
 800cfa2:	4608      	mov	r0, r1
 800cfa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cfa8:	4770      	bx	lr

0800cfaa <__sfputs_r>:
 800cfaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfac:	4606      	mov	r6, r0
 800cfae:	460f      	mov	r7, r1
 800cfb0:	4614      	mov	r4, r2
 800cfb2:	18d5      	adds	r5, r2, r3
 800cfb4:	42ac      	cmp	r4, r5
 800cfb6:	d101      	bne.n	800cfbc <__sfputs_r+0x12>
 800cfb8:	2000      	movs	r0, #0
 800cfba:	e007      	b.n	800cfcc <__sfputs_r+0x22>
 800cfbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfc0:	463a      	mov	r2, r7
 800cfc2:	4630      	mov	r0, r6
 800cfc4:	f7ff ffda 	bl	800cf7c <__sfputc_r>
 800cfc8:	1c43      	adds	r3, r0, #1
 800cfca:	d1f3      	bne.n	800cfb4 <__sfputs_r+0xa>
 800cfcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cfd0 <_vfiprintf_r>:
 800cfd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfd4:	460d      	mov	r5, r1
 800cfd6:	b09d      	sub	sp, #116	; 0x74
 800cfd8:	4614      	mov	r4, r2
 800cfda:	4698      	mov	r8, r3
 800cfdc:	4606      	mov	r6, r0
 800cfde:	b118      	cbz	r0, 800cfe8 <_vfiprintf_r+0x18>
 800cfe0:	6983      	ldr	r3, [r0, #24]
 800cfe2:	b90b      	cbnz	r3, 800cfe8 <_vfiprintf_r+0x18>
 800cfe4:	f7ff fa80 	bl	800c4e8 <__sinit>
 800cfe8:	4b89      	ldr	r3, [pc, #548]	; (800d210 <_vfiprintf_r+0x240>)
 800cfea:	429d      	cmp	r5, r3
 800cfec:	d11b      	bne.n	800d026 <_vfiprintf_r+0x56>
 800cfee:	6875      	ldr	r5, [r6, #4]
 800cff0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cff2:	07d9      	lsls	r1, r3, #31
 800cff4:	d405      	bmi.n	800d002 <_vfiprintf_r+0x32>
 800cff6:	89ab      	ldrh	r3, [r5, #12]
 800cff8:	059a      	lsls	r2, r3, #22
 800cffa:	d402      	bmi.n	800d002 <_vfiprintf_r+0x32>
 800cffc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cffe:	f7ff fb16 	bl	800c62e <__retarget_lock_acquire_recursive>
 800d002:	89ab      	ldrh	r3, [r5, #12]
 800d004:	071b      	lsls	r3, r3, #28
 800d006:	d501      	bpl.n	800d00c <_vfiprintf_r+0x3c>
 800d008:	692b      	ldr	r3, [r5, #16]
 800d00a:	b9eb      	cbnz	r3, 800d048 <_vfiprintf_r+0x78>
 800d00c:	4629      	mov	r1, r5
 800d00e:	4630      	mov	r0, r6
 800d010:	f7fe fad2 	bl	800b5b8 <__swsetup_r>
 800d014:	b1c0      	cbz	r0, 800d048 <_vfiprintf_r+0x78>
 800d016:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d018:	07dc      	lsls	r4, r3, #31
 800d01a:	d50e      	bpl.n	800d03a <_vfiprintf_r+0x6a>
 800d01c:	f04f 30ff 	mov.w	r0, #4294967295
 800d020:	b01d      	add	sp, #116	; 0x74
 800d022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d026:	4b7b      	ldr	r3, [pc, #492]	; (800d214 <_vfiprintf_r+0x244>)
 800d028:	429d      	cmp	r5, r3
 800d02a:	d101      	bne.n	800d030 <_vfiprintf_r+0x60>
 800d02c:	68b5      	ldr	r5, [r6, #8]
 800d02e:	e7df      	b.n	800cff0 <_vfiprintf_r+0x20>
 800d030:	4b79      	ldr	r3, [pc, #484]	; (800d218 <_vfiprintf_r+0x248>)
 800d032:	429d      	cmp	r5, r3
 800d034:	bf08      	it	eq
 800d036:	68f5      	ldreq	r5, [r6, #12]
 800d038:	e7da      	b.n	800cff0 <_vfiprintf_r+0x20>
 800d03a:	89ab      	ldrh	r3, [r5, #12]
 800d03c:	0598      	lsls	r0, r3, #22
 800d03e:	d4ed      	bmi.n	800d01c <_vfiprintf_r+0x4c>
 800d040:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d042:	f7ff faf5 	bl	800c630 <__retarget_lock_release_recursive>
 800d046:	e7e9      	b.n	800d01c <_vfiprintf_r+0x4c>
 800d048:	2300      	movs	r3, #0
 800d04a:	9309      	str	r3, [sp, #36]	; 0x24
 800d04c:	2320      	movs	r3, #32
 800d04e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d052:	f8cd 800c 	str.w	r8, [sp, #12]
 800d056:	2330      	movs	r3, #48	; 0x30
 800d058:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d21c <_vfiprintf_r+0x24c>
 800d05c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d060:	f04f 0901 	mov.w	r9, #1
 800d064:	4623      	mov	r3, r4
 800d066:	469a      	mov	sl, r3
 800d068:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d06c:	b10a      	cbz	r2, 800d072 <_vfiprintf_r+0xa2>
 800d06e:	2a25      	cmp	r2, #37	; 0x25
 800d070:	d1f9      	bne.n	800d066 <_vfiprintf_r+0x96>
 800d072:	ebba 0b04 	subs.w	fp, sl, r4
 800d076:	d00b      	beq.n	800d090 <_vfiprintf_r+0xc0>
 800d078:	465b      	mov	r3, fp
 800d07a:	4622      	mov	r2, r4
 800d07c:	4629      	mov	r1, r5
 800d07e:	4630      	mov	r0, r6
 800d080:	f7ff ff93 	bl	800cfaa <__sfputs_r>
 800d084:	3001      	adds	r0, #1
 800d086:	f000 80aa 	beq.w	800d1de <_vfiprintf_r+0x20e>
 800d08a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d08c:	445a      	add	r2, fp
 800d08e:	9209      	str	r2, [sp, #36]	; 0x24
 800d090:	f89a 3000 	ldrb.w	r3, [sl]
 800d094:	2b00      	cmp	r3, #0
 800d096:	f000 80a2 	beq.w	800d1de <_vfiprintf_r+0x20e>
 800d09a:	2300      	movs	r3, #0
 800d09c:	f04f 32ff 	mov.w	r2, #4294967295
 800d0a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d0a4:	f10a 0a01 	add.w	sl, sl, #1
 800d0a8:	9304      	str	r3, [sp, #16]
 800d0aa:	9307      	str	r3, [sp, #28]
 800d0ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d0b0:	931a      	str	r3, [sp, #104]	; 0x68
 800d0b2:	4654      	mov	r4, sl
 800d0b4:	2205      	movs	r2, #5
 800d0b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0ba:	4858      	ldr	r0, [pc, #352]	; (800d21c <_vfiprintf_r+0x24c>)
 800d0bc:	f7f3 f918 	bl	80002f0 <memchr>
 800d0c0:	9a04      	ldr	r2, [sp, #16]
 800d0c2:	b9d8      	cbnz	r0, 800d0fc <_vfiprintf_r+0x12c>
 800d0c4:	06d1      	lsls	r1, r2, #27
 800d0c6:	bf44      	itt	mi
 800d0c8:	2320      	movmi	r3, #32
 800d0ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0ce:	0713      	lsls	r3, r2, #28
 800d0d0:	bf44      	itt	mi
 800d0d2:	232b      	movmi	r3, #43	; 0x2b
 800d0d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0d8:	f89a 3000 	ldrb.w	r3, [sl]
 800d0dc:	2b2a      	cmp	r3, #42	; 0x2a
 800d0de:	d015      	beq.n	800d10c <_vfiprintf_r+0x13c>
 800d0e0:	9a07      	ldr	r2, [sp, #28]
 800d0e2:	4654      	mov	r4, sl
 800d0e4:	2000      	movs	r0, #0
 800d0e6:	f04f 0c0a 	mov.w	ip, #10
 800d0ea:	4621      	mov	r1, r4
 800d0ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0f0:	3b30      	subs	r3, #48	; 0x30
 800d0f2:	2b09      	cmp	r3, #9
 800d0f4:	d94e      	bls.n	800d194 <_vfiprintf_r+0x1c4>
 800d0f6:	b1b0      	cbz	r0, 800d126 <_vfiprintf_r+0x156>
 800d0f8:	9207      	str	r2, [sp, #28]
 800d0fa:	e014      	b.n	800d126 <_vfiprintf_r+0x156>
 800d0fc:	eba0 0308 	sub.w	r3, r0, r8
 800d100:	fa09 f303 	lsl.w	r3, r9, r3
 800d104:	4313      	orrs	r3, r2
 800d106:	9304      	str	r3, [sp, #16]
 800d108:	46a2      	mov	sl, r4
 800d10a:	e7d2      	b.n	800d0b2 <_vfiprintf_r+0xe2>
 800d10c:	9b03      	ldr	r3, [sp, #12]
 800d10e:	1d19      	adds	r1, r3, #4
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	9103      	str	r1, [sp, #12]
 800d114:	2b00      	cmp	r3, #0
 800d116:	bfbb      	ittet	lt
 800d118:	425b      	neglt	r3, r3
 800d11a:	f042 0202 	orrlt.w	r2, r2, #2
 800d11e:	9307      	strge	r3, [sp, #28]
 800d120:	9307      	strlt	r3, [sp, #28]
 800d122:	bfb8      	it	lt
 800d124:	9204      	strlt	r2, [sp, #16]
 800d126:	7823      	ldrb	r3, [r4, #0]
 800d128:	2b2e      	cmp	r3, #46	; 0x2e
 800d12a:	d10c      	bne.n	800d146 <_vfiprintf_r+0x176>
 800d12c:	7863      	ldrb	r3, [r4, #1]
 800d12e:	2b2a      	cmp	r3, #42	; 0x2a
 800d130:	d135      	bne.n	800d19e <_vfiprintf_r+0x1ce>
 800d132:	9b03      	ldr	r3, [sp, #12]
 800d134:	1d1a      	adds	r2, r3, #4
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	9203      	str	r2, [sp, #12]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	bfb8      	it	lt
 800d13e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d142:	3402      	adds	r4, #2
 800d144:	9305      	str	r3, [sp, #20]
 800d146:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d22c <_vfiprintf_r+0x25c>
 800d14a:	7821      	ldrb	r1, [r4, #0]
 800d14c:	2203      	movs	r2, #3
 800d14e:	4650      	mov	r0, sl
 800d150:	f7f3 f8ce 	bl	80002f0 <memchr>
 800d154:	b140      	cbz	r0, 800d168 <_vfiprintf_r+0x198>
 800d156:	2340      	movs	r3, #64	; 0x40
 800d158:	eba0 000a 	sub.w	r0, r0, sl
 800d15c:	fa03 f000 	lsl.w	r0, r3, r0
 800d160:	9b04      	ldr	r3, [sp, #16]
 800d162:	4303      	orrs	r3, r0
 800d164:	3401      	adds	r4, #1
 800d166:	9304      	str	r3, [sp, #16]
 800d168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d16c:	482c      	ldr	r0, [pc, #176]	; (800d220 <_vfiprintf_r+0x250>)
 800d16e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d172:	2206      	movs	r2, #6
 800d174:	f7f3 f8bc 	bl	80002f0 <memchr>
 800d178:	2800      	cmp	r0, #0
 800d17a:	d03f      	beq.n	800d1fc <_vfiprintf_r+0x22c>
 800d17c:	4b29      	ldr	r3, [pc, #164]	; (800d224 <_vfiprintf_r+0x254>)
 800d17e:	bb1b      	cbnz	r3, 800d1c8 <_vfiprintf_r+0x1f8>
 800d180:	9b03      	ldr	r3, [sp, #12]
 800d182:	3307      	adds	r3, #7
 800d184:	f023 0307 	bic.w	r3, r3, #7
 800d188:	3308      	adds	r3, #8
 800d18a:	9303      	str	r3, [sp, #12]
 800d18c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d18e:	443b      	add	r3, r7
 800d190:	9309      	str	r3, [sp, #36]	; 0x24
 800d192:	e767      	b.n	800d064 <_vfiprintf_r+0x94>
 800d194:	fb0c 3202 	mla	r2, ip, r2, r3
 800d198:	460c      	mov	r4, r1
 800d19a:	2001      	movs	r0, #1
 800d19c:	e7a5      	b.n	800d0ea <_vfiprintf_r+0x11a>
 800d19e:	2300      	movs	r3, #0
 800d1a0:	3401      	adds	r4, #1
 800d1a2:	9305      	str	r3, [sp, #20]
 800d1a4:	4619      	mov	r1, r3
 800d1a6:	f04f 0c0a 	mov.w	ip, #10
 800d1aa:	4620      	mov	r0, r4
 800d1ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1b0:	3a30      	subs	r2, #48	; 0x30
 800d1b2:	2a09      	cmp	r2, #9
 800d1b4:	d903      	bls.n	800d1be <_vfiprintf_r+0x1ee>
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d0c5      	beq.n	800d146 <_vfiprintf_r+0x176>
 800d1ba:	9105      	str	r1, [sp, #20]
 800d1bc:	e7c3      	b.n	800d146 <_vfiprintf_r+0x176>
 800d1be:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1c2:	4604      	mov	r4, r0
 800d1c4:	2301      	movs	r3, #1
 800d1c6:	e7f0      	b.n	800d1aa <_vfiprintf_r+0x1da>
 800d1c8:	ab03      	add	r3, sp, #12
 800d1ca:	9300      	str	r3, [sp, #0]
 800d1cc:	462a      	mov	r2, r5
 800d1ce:	4b16      	ldr	r3, [pc, #88]	; (800d228 <_vfiprintf_r+0x258>)
 800d1d0:	a904      	add	r1, sp, #16
 800d1d2:	4630      	mov	r0, r6
 800d1d4:	f7fd fc98 	bl	800ab08 <_printf_float>
 800d1d8:	4607      	mov	r7, r0
 800d1da:	1c78      	adds	r0, r7, #1
 800d1dc:	d1d6      	bne.n	800d18c <_vfiprintf_r+0x1bc>
 800d1de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1e0:	07d9      	lsls	r1, r3, #31
 800d1e2:	d405      	bmi.n	800d1f0 <_vfiprintf_r+0x220>
 800d1e4:	89ab      	ldrh	r3, [r5, #12]
 800d1e6:	059a      	lsls	r2, r3, #22
 800d1e8:	d402      	bmi.n	800d1f0 <_vfiprintf_r+0x220>
 800d1ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1ec:	f7ff fa20 	bl	800c630 <__retarget_lock_release_recursive>
 800d1f0:	89ab      	ldrh	r3, [r5, #12]
 800d1f2:	065b      	lsls	r3, r3, #25
 800d1f4:	f53f af12 	bmi.w	800d01c <_vfiprintf_r+0x4c>
 800d1f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1fa:	e711      	b.n	800d020 <_vfiprintf_r+0x50>
 800d1fc:	ab03      	add	r3, sp, #12
 800d1fe:	9300      	str	r3, [sp, #0]
 800d200:	462a      	mov	r2, r5
 800d202:	4b09      	ldr	r3, [pc, #36]	; (800d228 <_vfiprintf_r+0x258>)
 800d204:	a904      	add	r1, sp, #16
 800d206:	4630      	mov	r0, r6
 800d208:	f7fd ff0a 	bl	800b020 <_printf_i>
 800d20c:	e7e4      	b.n	800d1d8 <_vfiprintf_r+0x208>
 800d20e:	bf00      	nop
 800d210:	0800e57c 	.word	0x0800e57c
 800d214:	0800e59c 	.word	0x0800e59c
 800d218:	0800e55c 	.word	0x0800e55c
 800d21c:	0800e71c 	.word	0x0800e71c
 800d220:	0800e726 	.word	0x0800e726
 800d224:	0800ab09 	.word	0x0800ab09
 800d228:	0800cfab 	.word	0x0800cfab
 800d22c:	0800e722 	.word	0x0800e722

0800d230 <_sbrk_r>:
 800d230:	b538      	push	{r3, r4, r5, lr}
 800d232:	4d06      	ldr	r5, [pc, #24]	; (800d24c <_sbrk_r+0x1c>)
 800d234:	2300      	movs	r3, #0
 800d236:	4604      	mov	r4, r0
 800d238:	4608      	mov	r0, r1
 800d23a:	602b      	str	r3, [r5, #0]
 800d23c:	f7f6 fb3a 	bl	80038b4 <_sbrk>
 800d240:	1c43      	adds	r3, r0, #1
 800d242:	d102      	bne.n	800d24a <_sbrk_r+0x1a>
 800d244:	682b      	ldr	r3, [r5, #0]
 800d246:	b103      	cbz	r3, 800d24a <_sbrk_r+0x1a>
 800d248:	6023      	str	r3, [r4, #0]
 800d24a:	bd38      	pop	{r3, r4, r5, pc}
 800d24c:	2400c710 	.word	0x2400c710

0800d250 <__sread>:
 800d250:	b510      	push	{r4, lr}
 800d252:	460c      	mov	r4, r1
 800d254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d258:	f000 f8e2 	bl	800d420 <_read_r>
 800d25c:	2800      	cmp	r0, #0
 800d25e:	bfab      	itete	ge
 800d260:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d262:	89a3      	ldrhlt	r3, [r4, #12]
 800d264:	181b      	addge	r3, r3, r0
 800d266:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d26a:	bfac      	ite	ge
 800d26c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d26e:	81a3      	strhlt	r3, [r4, #12]
 800d270:	bd10      	pop	{r4, pc}

0800d272 <__swrite>:
 800d272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d276:	461f      	mov	r7, r3
 800d278:	898b      	ldrh	r3, [r1, #12]
 800d27a:	05db      	lsls	r3, r3, #23
 800d27c:	4605      	mov	r5, r0
 800d27e:	460c      	mov	r4, r1
 800d280:	4616      	mov	r6, r2
 800d282:	d505      	bpl.n	800d290 <__swrite+0x1e>
 800d284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d288:	2302      	movs	r3, #2
 800d28a:	2200      	movs	r2, #0
 800d28c:	f000 f898 	bl	800d3c0 <_lseek_r>
 800d290:	89a3      	ldrh	r3, [r4, #12]
 800d292:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d296:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d29a:	81a3      	strh	r3, [r4, #12]
 800d29c:	4632      	mov	r2, r6
 800d29e:	463b      	mov	r3, r7
 800d2a0:	4628      	mov	r0, r5
 800d2a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d2a6:	f000 b817 	b.w	800d2d8 <_write_r>

0800d2aa <__sseek>:
 800d2aa:	b510      	push	{r4, lr}
 800d2ac:	460c      	mov	r4, r1
 800d2ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2b2:	f000 f885 	bl	800d3c0 <_lseek_r>
 800d2b6:	1c43      	adds	r3, r0, #1
 800d2b8:	89a3      	ldrh	r3, [r4, #12]
 800d2ba:	bf15      	itete	ne
 800d2bc:	6560      	strne	r0, [r4, #84]	; 0x54
 800d2be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d2c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d2c6:	81a3      	strheq	r3, [r4, #12]
 800d2c8:	bf18      	it	ne
 800d2ca:	81a3      	strhne	r3, [r4, #12]
 800d2cc:	bd10      	pop	{r4, pc}

0800d2ce <__sclose>:
 800d2ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2d2:	f000 b831 	b.w	800d338 <_close_r>
	...

0800d2d8 <_write_r>:
 800d2d8:	b538      	push	{r3, r4, r5, lr}
 800d2da:	4d07      	ldr	r5, [pc, #28]	; (800d2f8 <_write_r+0x20>)
 800d2dc:	4604      	mov	r4, r0
 800d2de:	4608      	mov	r0, r1
 800d2e0:	4611      	mov	r1, r2
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	602a      	str	r2, [r5, #0]
 800d2e6:	461a      	mov	r2, r3
 800d2e8:	f7f5 ff60 	bl	80031ac <_write>
 800d2ec:	1c43      	adds	r3, r0, #1
 800d2ee:	d102      	bne.n	800d2f6 <_write_r+0x1e>
 800d2f0:	682b      	ldr	r3, [r5, #0]
 800d2f2:	b103      	cbz	r3, 800d2f6 <_write_r+0x1e>
 800d2f4:	6023      	str	r3, [r4, #0]
 800d2f6:	bd38      	pop	{r3, r4, r5, pc}
 800d2f8:	2400c710 	.word	0x2400c710

0800d2fc <__assert_func>:
 800d2fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d2fe:	4614      	mov	r4, r2
 800d300:	461a      	mov	r2, r3
 800d302:	4b09      	ldr	r3, [pc, #36]	; (800d328 <__assert_func+0x2c>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	4605      	mov	r5, r0
 800d308:	68d8      	ldr	r0, [r3, #12]
 800d30a:	b14c      	cbz	r4, 800d320 <__assert_func+0x24>
 800d30c:	4b07      	ldr	r3, [pc, #28]	; (800d32c <__assert_func+0x30>)
 800d30e:	9100      	str	r1, [sp, #0]
 800d310:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d314:	4906      	ldr	r1, [pc, #24]	; (800d330 <__assert_func+0x34>)
 800d316:	462b      	mov	r3, r5
 800d318:	f000 f81e 	bl	800d358 <fiprintf>
 800d31c:	f000 f89f 	bl	800d45e <abort>
 800d320:	4b04      	ldr	r3, [pc, #16]	; (800d334 <__assert_func+0x38>)
 800d322:	461c      	mov	r4, r3
 800d324:	e7f3      	b.n	800d30e <__assert_func+0x12>
 800d326:	bf00      	nop
 800d328:	24000010 	.word	0x24000010
 800d32c:	0800e72d 	.word	0x0800e72d
 800d330:	0800e73a 	.word	0x0800e73a
 800d334:	0800e768 	.word	0x0800e768

0800d338 <_close_r>:
 800d338:	b538      	push	{r3, r4, r5, lr}
 800d33a:	4d06      	ldr	r5, [pc, #24]	; (800d354 <_close_r+0x1c>)
 800d33c:	2300      	movs	r3, #0
 800d33e:	4604      	mov	r4, r0
 800d340:	4608      	mov	r0, r1
 800d342:	602b      	str	r3, [r5, #0]
 800d344:	f7f5 ff5e 	bl	8003204 <_close>
 800d348:	1c43      	adds	r3, r0, #1
 800d34a:	d102      	bne.n	800d352 <_close_r+0x1a>
 800d34c:	682b      	ldr	r3, [r5, #0]
 800d34e:	b103      	cbz	r3, 800d352 <_close_r+0x1a>
 800d350:	6023      	str	r3, [r4, #0]
 800d352:	bd38      	pop	{r3, r4, r5, pc}
 800d354:	2400c710 	.word	0x2400c710

0800d358 <fiprintf>:
 800d358:	b40e      	push	{r1, r2, r3}
 800d35a:	b503      	push	{r0, r1, lr}
 800d35c:	4601      	mov	r1, r0
 800d35e:	ab03      	add	r3, sp, #12
 800d360:	4805      	ldr	r0, [pc, #20]	; (800d378 <fiprintf+0x20>)
 800d362:	f853 2b04 	ldr.w	r2, [r3], #4
 800d366:	6800      	ldr	r0, [r0, #0]
 800d368:	9301      	str	r3, [sp, #4]
 800d36a:	f7ff fe31 	bl	800cfd0 <_vfiprintf_r>
 800d36e:	b002      	add	sp, #8
 800d370:	f85d eb04 	ldr.w	lr, [sp], #4
 800d374:	b003      	add	sp, #12
 800d376:	4770      	bx	lr
 800d378:	24000010 	.word	0x24000010

0800d37c <_fstat_r>:
 800d37c:	b538      	push	{r3, r4, r5, lr}
 800d37e:	4d07      	ldr	r5, [pc, #28]	; (800d39c <_fstat_r+0x20>)
 800d380:	2300      	movs	r3, #0
 800d382:	4604      	mov	r4, r0
 800d384:	4608      	mov	r0, r1
 800d386:	4611      	mov	r1, r2
 800d388:	602b      	str	r3, [r5, #0]
 800d38a:	f7f5 ff8b 	bl	80032a4 <_fstat>
 800d38e:	1c43      	adds	r3, r0, #1
 800d390:	d102      	bne.n	800d398 <_fstat_r+0x1c>
 800d392:	682b      	ldr	r3, [r5, #0]
 800d394:	b103      	cbz	r3, 800d398 <_fstat_r+0x1c>
 800d396:	6023      	str	r3, [r4, #0]
 800d398:	bd38      	pop	{r3, r4, r5, pc}
 800d39a:	bf00      	nop
 800d39c:	2400c710 	.word	0x2400c710

0800d3a0 <_isatty_r>:
 800d3a0:	b538      	push	{r3, r4, r5, lr}
 800d3a2:	4d06      	ldr	r5, [pc, #24]	; (800d3bc <_isatty_r+0x1c>)
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	4604      	mov	r4, r0
 800d3a8:	4608      	mov	r0, r1
 800d3aa:	602b      	str	r3, [r5, #0]
 800d3ac:	f7f5 fee8 	bl	8003180 <_isatty>
 800d3b0:	1c43      	adds	r3, r0, #1
 800d3b2:	d102      	bne.n	800d3ba <_isatty_r+0x1a>
 800d3b4:	682b      	ldr	r3, [r5, #0]
 800d3b6:	b103      	cbz	r3, 800d3ba <_isatty_r+0x1a>
 800d3b8:	6023      	str	r3, [r4, #0]
 800d3ba:	bd38      	pop	{r3, r4, r5, pc}
 800d3bc:	2400c710 	.word	0x2400c710

0800d3c0 <_lseek_r>:
 800d3c0:	b538      	push	{r3, r4, r5, lr}
 800d3c2:	4d07      	ldr	r5, [pc, #28]	; (800d3e0 <_lseek_r+0x20>)
 800d3c4:	4604      	mov	r4, r0
 800d3c6:	4608      	mov	r0, r1
 800d3c8:	4611      	mov	r1, r2
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	602a      	str	r2, [r5, #0]
 800d3ce:	461a      	mov	r2, r3
 800d3d0:	f7f5 ff2f 	bl	8003232 <_lseek>
 800d3d4:	1c43      	adds	r3, r0, #1
 800d3d6:	d102      	bne.n	800d3de <_lseek_r+0x1e>
 800d3d8:	682b      	ldr	r3, [r5, #0]
 800d3da:	b103      	cbz	r3, 800d3de <_lseek_r+0x1e>
 800d3dc:	6023      	str	r3, [r4, #0]
 800d3de:	bd38      	pop	{r3, r4, r5, pc}
 800d3e0:	2400c710 	.word	0x2400c710

0800d3e4 <__ascii_mbtowc>:
 800d3e4:	b082      	sub	sp, #8
 800d3e6:	b901      	cbnz	r1, 800d3ea <__ascii_mbtowc+0x6>
 800d3e8:	a901      	add	r1, sp, #4
 800d3ea:	b142      	cbz	r2, 800d3fe <__ascii_mbtowc+0x1a>
 800d3ec:	b14b      	cbz	r3, 800d402 <__ascii_mbtowc+0x1e>
 800d3ee:	7813      	ldrb	r3, [r2, #0]
 800d3f0:	600b      	str	r3, [r1, #0]
 800d3f2:	7812      	ldrb	r2, [r2, #0]
 800d3f4:	1e10      	subs	r0, r2, #0
 800d3f6:	bf18      	it	ne
 800d3f8:	2001      	movne	r0, #1
 800d3fa:	b002      	add	sp, #8
 800d3fc:	4770      	bx	lr
 800d3fe:	4610      	mov	r0, r2
 800d400:	e7fb      	b.n	800d3fa <__ascii_mbtowc+0x16>
 800d402:	f06f 0001 	mvn.w	r0, #1
 800d406:	e7f8      	b.n	800d3fa <__ascii_mbtowc+0x16>

0800d408 <__malloc_lock>:
 800d408:	4801      	ldr	r0, [pc, #4]	; (800d410 <__malloc_lock+0x8>)
 800d40a:	f7ff b910 	b.w	800c62e <__retarget_lock_acquire_recursive>
 800d40e:	bf00      	nop
 800d410:	2400c708 	.word	0x2400c708

0800d414 <__malloc_unlock>:
 800d414:	4801      	ldr	r0, [pc, #4]	; (800d41c <__malloc_unlock+0x8>)
 800d416:	f7ff b90b 	b.w	800c630 <__retarget_lock_release_recursive>
 800d41a:	bf00      	nop
 800d41c:	2400c708 	.word	0x2400c708

0800d420 <_read_r>:
 800d420:	b538      	push	{r3, r4, r5, lr}
 800d422:	4d07      	ldr	r5, [pc, #28]	; (800d440 <_read_r+0x20>)
 800d424:	4604      	mov	r4, r0
 800d426:	4608      	mov	r0, r1
 800d428:	4611      	mov	r1, r2
 800d42a:	2200      	movs	r2, #0
 800d42c:	602a      	str	r2, [r5, #0]
 800d42e:	461a      	mov	r2, r3
 800d430:	f7f5 ff10 	bl	8003254 <_read>
 800d434:	1c43      	adds	r3, r0, #1
 800d436:	d102      	bne.n	800d43e <_read_r+0x1e>
 800d438:	682b      	ldr	r3, [r5, #0]
 800d43a:	b103      	cbz	r3, 800d43e <_read_r+0x1e>
 800d43c:	6023      	str	r3, [r4, #0]
 800d43e:	bd38      	pop	{r3, r4, r5, pc}
 800d440:	2400c710 	.word	0x2400c710

0800d444 <__ascii_wctomb>:
 800d444:	b149      	cbz	r1, 800d45a <__ascii_wctomb+0x16>
 800d446:	2aff      	cmp	r2, #255	; 0xff
 800d448:	bf85      	ittet	hi
 800d44a:	238a      	movhi	r3, #138	; 0x8a
 800d44c:	6003      	strhi	r3, [r0, #0]
 800d44e:	700a      	strbls	r2, [r1, #0]
 800d450:	f04f 30ff 	movhi.w	r0, #4294967295
 800d454:	bf98      	it	ls
 800d456:	2001      	movls	r0, #1
 800d458:	4770      	bx	lr
 800d45a:	4608      	mov	r0, r1
 800d45c:	4770      	bx	lr

0800d45e <abort>:
 800d45e:	b508      	push	{r3, lr}
 800d460:	2006      	movs	r0, #6
 800d462:	f000 f82b 	bl	800d4bc <raise>
 800d466:	2001      	movs	r0, #1
 800d468:	f000 fdc2 	bl	800dff0 <_exit>

0800d46c <_raise_r>:
 800d46c:	291f      	cmp	r1, #31
 800d46e:	b538      	push	{r3, r4, r5, lr}
 800d470:	4604      	mov	r4, r0
 800d472:	460d      	mov	r5, r1
 800d474:	d904      	bls.n	800d480 <_raise_r+0x14>
 800d476:	2316      	movs	r3, #22
 800d478:	6003      	str	r3, [r0, #0]
 800d47a:	f04f 30ff 	mov.w	r0, #4294967295
 800d47e:	bd38      	pop	{r3, r4, r5, pc}
 800d480:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d482:	b112      	cbz	r2, 800d48a <_raise_r+0x1e>
 800d484:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d488:	b94b      	cbnz	r3, 800d49e <_raise_r+0x32>
 800d48a:	4620      	mov	r0, r4
 800d48c:	f000 f830 	bl	800d4f0 <_getpid_r>
 800d490:	462a      	mov	r2, r5
 800d492:	4601      	mov	r1, r0
 800d494:	4620      	mov	r0, r4
 800d496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d49a:	f000 b817 	b.w	800d4cc <_kill_r>
 800d49e:	2b01      	cmp	r3, #1
 800d4a0:	d00a      	beq.n	800d4b8 <_raise_r+0x4c>
 800d4a2:	1c59      	adds	r1, r3, #1
 800d4a4:	d103      	bne.n	800d4ae <_raise_r+0x42>
 800d4a6:	2316      	movs	r3, #22
 800d4a8:	6003      	str	r3, [r0, #0]
 800d4aa:	2001      	movs	r0, #1
 800d4ac:	e7e7      	b.n	800d47e <_raise_r+0x12>
 800d4ae:	2400      	movs	r4, #0
 800d4b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d4b4:	4628      	mov	r0, r5
 800d4b6:	4798      	blx	r3
 800d4b8:	2000      	movs	r0, #0
 800d4ba:	e7e0      	b.n	800d47e <_raise_r+0x12>

0800d4bc <raise>:
 800d4bc:	4b02      	ldr	r3, [pc, #8]	; (800d4c8 <raise+0xc>)
 800d4be:	4601      	mov	r1, r0
 800d4c0:	6818      	ldr	r0, [r3, #0]
 800d4c2:	f7ff bfd3 	b.w	800d46c <_raise_r>
 800d4c6:	bf00      	nop
 800d4c8:	24000010 	.word	0x24000010

0800d4cc <_kill_r>:
 800d4cc:	b538      	push	{r3, r4, r5, lr}
 800d4ce:	4d07      	ldr	r5, [pc, #28]	; (800d4ec <_kill_r+0x20>)
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	4604      	mov	r4, r0
 800d4d4:	4608      	mov	r0, r1
 800d4d6:	4611      	mov	r1, r2
 800d4d8:	602b      	str	r3, [r5, #0]
 800d4da:	f000 fd81 	bl	800dfe0 <_kill>
 800d4de:	1c43      	adds	r3, r0, #1
 800d4e0:	d102      	bne.n	800d4e8 <_kill_r+0x1c>
 800d4e2:	682b      	ldr	r3, [r5, #0]
 800d4e4:	b103      	cbz	r3, 800d4e8 <_kill_r+0x1c>
 800d4e6:	6023      	str	r3, [r4, #0]
 800d4e8:	bd38      	pop	{r3, r4, r5, pc}
 800d4ea:	bf00      	nop
 800d4ec:	2400c710 	.word	0x2400c710

0800d4f0 <_getpid_r>:
 800d4f0:	f000 bd6e 	b.w	800dfd0 <_getpid>

0800d4f4 <checkint>:
 800d4f4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d4f8:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d500:	dd2b      	ble.n	800d55a <checkint+0x66>
 800d502:	f240 4333 	movw	r3, #1075	; 0x433
 800d506:	429a      	cmp	r2, r3
 800d508:	dc25      	bgt.n	800d556 <checkint+0x62>
 800d50a:	1a9b      	subs	r3, r3, r2
 800d50c:	f1a3 0620 	sub.w	r6, r3, #32
 800d510:	f04f 32ff 	mov.w	r2, #4294967295
 800d514:	fa02 f606 	lsl.w	r6, r2, r6
 800d518:	fa02 f403 	lsl.w	r4, r2, r3
 800d51c:	f1c3 0520 	rsb	r5, r3, #32
 800d520:	4334      	orrs	r4, r6
 800d522:	fa22 f505 	lsr.w	r5, r2, r5
 800d526:	432c      	orrs	r4, r5
 800d528:	409a      	lsls	r2, r3
 800d52a:	ea20 0602 	bic.w	r6, r0, r2
 800d52e:	ea21 0704 	bic.w	r7, r1, r4
 800d532:	ea56 0207 	orrs.w	r2, r6, r7
 800d536:	f1a3 0420 	sub.w	r4, r3, #32
 800d53a:	f1c3 0220 	rsb	r2, r3, #32
 800d53e:	d10c      	bne.n	800d55a <checkint+0x66>
 800d540:	40d8      	lsrs	r0, r3
 800d542:	fa01 f302 	lsl.w	r3, r1, r2
 800d546:	4318      	orrs	r0, r3
 800d548:	40e1      	lsrs	r1, r4
 800d54a:	4308      	orrs	r0, r1
 800d54c:	f000 0301 	and.w	r3, r0, #1
 800d550:	f1c3 0002 	rsb	r0, r3, #2
 800d554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d556:	2002      	movs	r0, #2
 800d558:	e7fc      	b.n	800d554 <checkint+0x60>
 800d55a:	2000      	movs	r0, #0
 800d55c:	e7fa      	b.n	800d554 <checkint+0x60>
	...

0800d560 <pow>:
 800d560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d564:	ed2d 8b0a 	vpush	{d8-d12}
 800d568:	b09b      	sub	sp, #108	; 0x6c
 800d56a:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d56e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d572:	ed8d 1b00 	vstr	d1, [sp]
 800d576:	ea4f 5915 	mov.w	r9, r5, lsr #20
 800d57a:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d57e:	f109 30ff 	add.w	r0, r9, #4294967295
 800d582:	f240 71fd 	movw	r1, #2045	; 0x7fd
 800d586:	4288      	cmp	r0, r1
 800d588:	46cc      	mov	ip, r9
 800d58a:	ea4f 5817 	mov.w	r8, r7, lsr #20
 800d58e:	d806      	bhi.n	800d59e <pow+0x3e>
 800d590:	f3c8 010a 	ubfx	r1, r8, #0, #11
 800d594:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 800d598:	297f      	cmp	r1, #127	; 0x7f
 800d59a:	f240 81ab 	bls.w	800d8f4 <pow+0x394>
 800d59e:	19b1      	adds	r1, r6, r6
 800d5a0:	9104      	str	r1, [sp, #16]
 800d5a2:	eb47 0107 	adc.w	r1, r7, r7
 800d5a6:	9105      	str	r1, [sp, #20]
 800d5a8:	9904      	ldr	r1, [sp, #16]
 800d5aa:	f111 31ff 	adds.w	r1, r1, #4294967295
 800d5ae:	460a      	mov	r2, r1
 800d5b0:	9905      	ldr	r1, [sp, #20]
 800d5b2:	f141 31ff 	adc.w	r1, r1, #4294967295
 800d5b6:	460b      	mov	r3, r1
 800d5b8:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 800d5bc:	f06f 0001 	mvn.w	r0, #1
 800d5c0:	4299      	cmp	r1, r3
 800d5c2:	bf08      	it	eq
 800d5c4:	4290      	cmpeq	r0, r2
 800d5c6:	d260      	bcs.n	800d68a <pow+0x12a>
 800d5c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d5cc:	4313      	orrs	r3, r2
 800d5ce:	d11a      	bne.n	800d606 <pow+0xa6>
 800d5d0:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 800d5d4:	1923      	adds	r3, r4, r4
 800d5d6:	930c      	str	r3, [sp, #48]	; 0x30
 800d5d8:	eb42 0302 	adc.w	r3, r2, r2
 800d5dc:	930d      	str	r3, [sp, #52]	; 0x34
 800d5de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d5e2:	4bcf      	ldr	r3, [pc, #828]	; (800d920 <pow+0x3c0>)
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	428b      	cmp	r3, r1
 800d5e8:	bf08      	it	eq
 800d5ea:	4282      	cmpeq	r2, r0
 800d5ec:	f080 8265 	bcs.w	800daba <pow+0x55a>
 800d5f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d5f4:	ed9d 6b00 	vldr	d6, [sp]
 800d5f8:	ee37 0b06 	vadd.f64	d0, d7, d6
 800d5fc:	b01b      	add	sp, #108	; 0x6c
 800d5fe:	ecbd 8b0a 	vpop	{d8-d12}
 800d602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d606:	49c7      	ldr	r1, [pc, #796]	; (800d924 <pow+0x3c4>)
 800d608:	2000      	movs	r0, #0
 800d60a:	428d      	cmp	r5, r1
 800d60c:	bf08      	it	eq
 800d60e:	4284      	cmpeq	r4, r0
 800d610:	d10b      	bne.n	800d62a <pow+0xca>
 800d612:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800d616:	19b3      	adds	r3, r6, r6
 800d618:	930e      	str	r3, [sp, #56]	; 0x38
 800d61a:	eb42 0302 	adc.w	r3, r2, r2
 800d61e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d620:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d624:	4bbe      	ldr	r3, [pc, #760]	; (800d920 <pow+0x3c0>)
 800d626:	2200      	movs	r2, #0
 800d628:	e7dd      	b.n	800d5e6 <pow+0x86>
 800d62a:	1921      	adds	r1, r4, r4
 800d62c:	9106      	str	r1, [sp, #24]
 800d62e:	eb45 0105 	adc.w	r1, r5, r5
 800d632:	9107      	str	r1, [sp, #28]
 800d634:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800d638:	49bb      	ldr	r1, [pc, #748]	; (800d928 <pow+0x3c8>)
 800d63a:	2000      	movs	r0, #0
 800d63c:	42a1      	cmp	r1, r4
 800d63e:	bf08      	it	eq
 800d640:	4298      	cmpeq	r0, r3
 800d642:	d3d5      	bcc.n	800d5f0 <pow+0x90>
 800d644:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800d648:	428c      	cmp	r4, r1
 800d64a:	bf08      	it	eq
 800d64c:	4283      	cmpeq	r3, r0
 800d64e:	d1cf      	bne.n	800d5f0 <pow+0x90>
 800d650:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800d654:	49b5      	ldr	r1, [pc, #724]	; (800d92c <pow+0x3cc>)
 800d656:	2000      	movs	r0, #0
 800d658:	428c      	cmp	r4, r1
 800d65a:	bf08      	it	eq
 800d65c:	4283      	cmpeq	r3, r0
 800d65e:	f000 822c 	beq.w	800daba <pow+0x55a>
 800d662:	49b3      	ldr	r1, [pc, #716]	; (800d930 <pow+0x3d0>)
 800d664:	f04f 30ff 	mov.w	r0, #4294967295
 800d668:	42a1      	cmp	r1, r4
 800d66a:	bf08      	it	eq
 800d66c:	4298      	cmpeq	r0, r3
 800d66e:	ea6f 0307 	mvn.w	r3, r7
 800d672:	bf34      	ite	cc
 800d674:	2201      	movcc	r2, #1
 800d676:	2200      	movcs	r2, #0
 800d678:	0fdb      	lsrs	r3, r3, #31
 800d67a:	429a      	cmp	r2, r3
 800d67c:	f040 821a 	bne.w	800dab4 <pow+0x554>
 800d680:	ed9d 7b00 	vldr	d7, [sp]
 800d684:	ee27 0b07 	vmul.f64	d0, d7, d7
 800d688:	e7b8      	b.n	800d5fc <pow+0x9c>
 800d68a:	1923      	adds	r3, r4, r4
 800d68c:	9308      	str	r3, [sp, #32]
 800d68e:	eb45 0305 	adc.w	r3, r5, r5
 800d692:	9309      	str	r3, [sp, #36]	; 0x24
 800d694:	9b08      	ldr	r3, [sp, #32]
 800d696:	f113 33ff 	adds.w	r3, r3, #4294967295
 800d69a:	9310      	str	r3, [sp, #64]	; 0x40
 800d69c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d69e:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d6a2:	9311      	str	r3, [sp, #68]	; 0x44
 800d6a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d6a8:	4299      	cmp	r1, r3
 800d6aa:	bf08      	it	eq
 800d6ac:	4290      	cmpeq	r0, r2
 800d6ae:	d22d      	bcs.n	800d70c <pow+0x1ac>
 800d6b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d6b4:	2c00      	cmp	r4, #0
 800d6b6:	f175 0300 	sbcs.w	r3, r5, #0
 800d6ba:	ee27 0b07 	vmul.f64	d0, d7, d7
 800d6be:	da16      	bge.n	800d6ee <pow+0x18e>
 800d6c0:	4630      	mov	r0, r6
 800d6c2:	4639      	mov	r1, r7
 800d6c4:	f7ff ff16 	bl	800d4f4 <checkint>
 800d6c8:	2801      	cmp	r0, #1
 800d6ca:	d110      	bne.n	800d6ee <pow+0x18e>
 800d6cc:	eeb1 0b40 	vneg.f64	d0, d0
 800d6d0:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800d6d4:	4323      	orrs	r3, r4
 800d6d6:	d10c      	bne.n	800d6f2 <pow+0x192>
 800d6d8:	2e00      	cmp	r6, #0
 800d6da:	f177 0300 	sbcs.w	r3, r7, #0
 800d6de:	da8d      	bge.n	800d5fc <pow+0x9c>
 800d6e0:	b01b      	add	sp, #108	; 0x6c
 800d6e2:	ecbd 8b0a 	vpop	{d8-d12}
 800d6e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6ea:	f000 bb29 	b.w	800dd40 <__math_divzero>
 800d6ee:	2000      	movs	r0, #0
 800d6f0:	e7ee      	b.n	800d6d0 <pow+0x170>
 800d6f2:	2e00      	cmp	r6, #0
 800d6f4:	f177 0300 	sbcs.w	r3, r7, #0
 800d6f8:	da80      	bge.n	800d5fc <pow+0x9c>
 800d6fa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d6fe:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800d702:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800d706:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 800d70a:	e777      	b.n	800d5fc <pow+0x9c>
 800d70c:	2c00      	cmp	r4, #0
 800d70e:	f175 0300 	sbcs.w	r3, r5, #0
 800d712:	da35      	bge.n	800d780 <pow+0x220>
 800d714:	4630      	mov	r0, r6
 800d716:	4639      	mov	r1, r7
 800d718:	f7ff feec 	bl	800d4f4 <checkint>
 800d71c:	b940      	cbnz	r0, 800d730 <pow+0x1d0>
 800d71e:	ed9d 0b02 	vldr	d0, [sp, #8]
 800d722:	b01b      	add	sp, #108	; 0x6c
 800d724:	ecbd 8b0a 	vpop	{d8-d12}
 800d728:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d72c:	f000 bb20 	b.w	800dd70 <__math_invalid>
 800d730:	2801      	cmp	r0, #1
 800d732:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d736:	bf14      	ite	ne
 800d738:	2000      	movne	r0, #0
 800d73a:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800d73e:	461d      	mov	r5, r3
 800d740:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 800d744:	f3c8 030a 	ubfx	r3, r8, #0, #11
 800d748:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 800d74c:	2a7f      	cmp	r2, #127	; 0x7f
 800d74e:	d933      	bls.n	800d7b8 <pow+0x258>
 800d750:	4974      	ldr	r1, [pc, #464]	; (800d924 <pow+0x3c4>)
 800d752:	2000      	movs	r0, #0
 800d754:	428d      	cmp	r5, r1
 800d756:	bf08      	it	eq
 800d758:	4284      	cmpeq	r4, r0
 800d75a:	f000 81ae 	beq.w	800daba <pow+0x55a>
 800d75e:	f240 32bd 	movw	r2, #957	; 0x3bd
 800d762:	4293      	cmp	r3, r2
 800d764:	d80e      	bhi.n	800d784 <pow+0x224>
 800d766:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d76a:	ed9d 7b00 	vldr	d7, [sp]
 800d76e:	42a9      	cmp	r1, r5
 800d770:	bf08      	it	eq
 800d772:	42a0      	cmpeq	r0, r4
 800d774:	bf34      	ite	cc
 800d776:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 800d77a:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 800d77e:	e73d      	b.n	800d5fc <pow+0x9c>
 800d780:	2000      	movs	r0, #0
 800d782:	e7df      	b.n	800d744 <pow+0x1e4>
 800d784:	42a9      	cmp	r1, r5
 800d786:	bf08      	it	eq
 800d788:	42a0      	cmpeq	r0, r4
 800d78a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d78e:	bf2c      	ite	cs
 800d790:	2301      	movcs	r3, #1
 800d792:	2300      	movcc	r3, #0
 800d794:	4590      	cmp	r8, r2
 800d796:	bf8c      	ite	hi
 800d798:	f04f 0800 	movhi.w	r8, #0
 800d79c:	f04f 0801 	movls.w	r8, #1
 800d7a0:	4543      	cmp	r3, r8
 800d7a2:	f04f 0000 	mov.w	r0, #0
 800d7a6:	f000 80af 	beq.w	800d908 <pow+0x3a8>
 800d7aa:	b01b      	add	sp, #108	; 0x6c
 800d7ac:	ecbd 8b0a 	vpop	{d8-d12}
 800d7b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7b4:	f000 babc 	b.w	800dd30 <__math_oflow>
 800d7b8:	f1bc 0f00 	cmp.w	ip, #0
 800d7bc:	d10e      	bne.n	800d7dc <pow+0x27c>
 800d7be:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800d918 <pow+0x3b8>
 800d7c2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d7c6:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d7ca:	ec57 6b17 	vmov	r6, r7, d7
 800d7ce:	4b59      	ldr	r3, [pc, #356]	; (800d934 <pow+0x3d4>)
 800d7d0:	2100      	movs	r1, #0
 800d7d2:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800d7d6:	1874      	adds	r4, r6, r1
 800d7d8:	eb42 0503 	adc.w	r5, r2, r3
 800d7dc:	2300      	movs	r3, #0
 800d7de:	18e3      	adds	r3, r4, r3
 800d7e0:	4b55      	ldr	r3, [pc, #340]	; (800d938 <pow+0x3d8>)
 800d7e2:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800d7e6:	eb45 0303 	adc.w	r3, r5, r3
 800d7ea:	1519      	asrs	r1, r3, #20
 800d7ec:	ee03 1a10 	vmov	s6, r1
 800d7f0:	0d1e      	lsrs	r6, r3, #20
 800d7f2:	2100      	movs	r1, #0
 800d7f4:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800d7f8:	0536      	lsls	r6, r6, #20
 800d7fa:	1a63      	subs	r3, r4, r1
 800d7fc:	9312      	str	r3, [sp, #72]	; 0x48
 800d7fe:	eb65 0306 	sbc.w	r3, r5, r6
 800d802:	9313      	str	r3, [sp, #76]	; 0x4c
 800d804:	4b4d      	ldr	r3, [pc, #308]	; (800d93c <pow+0x3dc>)
 800d806:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 800d80a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d80e:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 800d812:	eea5 6b07 	vfma.f64	d6, d5, d7
 800d816:	ed93 7b00 	vldr	d7, [r3]
 800d81a:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 800d81e:	ed93 4b02 	vldr	d4, [r3, #8]
 800d822:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800d826:	eea3 5b07 	vfma.f64	d5, d3, d7
 800d82a:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 800d82e:	ee36 9b05 	vadd.f64	d9, d6, d5
 800d832:	ee35 5b49 	vsub.f64	d5, d5, d9
 800d836:	eea3 7b04 	vfma.f64	d7, d3, d4
 800d83a:	ed93 4b04 	vldr	d4, [r3, #16]
 800d83e:	ee35 5b06 	vadd.f64	d5, d5, d6
 800d842:	ee37 7b05 	vadd.f64	d7, d7, d5
 800d846:	ee26 4b04 	vmul.f64	d4, d6, d4
 800d84a:	ed93 3b08 	vldr	d3, [r3, #32]
 800d84e:	ee26 0b04 	vmul.f64	d0, d6, d4
 800d852:	eeb0 8b40 	vmov.f64	d8, d0
 800d856:	ee94 8b06 	vfnms.f64	d8, d4, d6
 800d85a:	ed93 4b06 	vldr	d4, [r3, #24]
 800d85e:	ee26 ab00 	vmul.f64	d10, d6, d0
 800d862:	ee39 1b00 	vadd.f64	d1, d9, d0
 800d866:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 800d86a:	eea6 4b03 	vfma.f64	d4, d6, d3
 800d86e:	ee39 9b41 	vsub.f64	d9, d9, d1
 800d872:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 800d876:	ee37 8b08 	vadd.f64	d8, d7, d8
 800d87a:	ee39 9b00 	vadd.f64	d9, d9, d0
 800d87e:	eea6 3b02 	vfma.f64	d3, d6, d2
 800d882:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800d886:	ee38 9b09 	vadd.f64	d9, d8, d9
 800d88a:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 800d88e:	eea6 2b0c 	vfma.f64	d2, d6, d12
 800d892:	ed9d 6b00 	vldr	d6, [sp]
 800d896:	eea0 3b02 	vfma.f64	d3, d0, d2
 800d89a:	eea0 4b03 	vfma.f64	d4, d0, d3
 800d89e:	eeaa 9b04 	vfma.f64	d9, d10, d4
 800d8a2:	ee31 7b09 	vadd.f64	d7, d1, d9
 800d8a6:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d8aa:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d8ae:	eeb0 3b46 	vmov.f64	d3, d6
 800d8b2:	ee31 1b47 	vsub.f64	d1, d1, d7
 800d8b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d8ba:	ee31 9b09 	vadd.f64	d9, d1, d9
 800d8be:	ed9d 6b00 	vldr	d6, [sp]
 800d8c2:	f3c3 570a 	ubfx	r7, r3, #20, #11
 800d8c6:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 800d8ca:	193c      	adds	r4, r7, r4
 800d8cc:	2c3e      	cmp	r4, #62	; 0x3e
 800d8ce:	ee96 3b07 	vfnms.f64	d3, d6, d7
 800d8d2:	eea6 3b09 	vfma.f64	d3, d6, d9
 800d8d6:	d934      	bls.n	800d942 <pow+0x3e2>
 800d8d8:	428c      	cmp	r4, r1
 800d8da:	da0d      	bge.n	800d8f8 <pow+0x398>
 800d8dc:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d8e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d8e4:	ee37 0b00 	vadd.f64	d0, d7, d0
 800d8e8:	2800      	cmp	r0, #0
 800d8ea:	f43f ae87 	beq.w	800d5fc <pow+0x9c>
 800d8ee:	eeb1 0b40 	vneg.f64	d0, d0
 800d8f2:	e683      	b.n	800d5fc <pow+0x9c>
 800d8f4:	2000      	movs	r0, #0
 800d8f6:	e771      	b.n	800d7dc <pow+0x27c>
 800d8f8:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 800d8fc:	d920      	bls.n	800d940 <pow+0x3e0>
 800d8fe:	2a00      	cmp	r2, #0
 800d900:	f173 0300 	sbcs.w	r3, r3, #0
 800d904:	f6bf af51 	bge.w	800d7aa <pow+0x24a>
 800d908:	b01b      	add	sp, #108	; 0x6c
 800d90a:	ecbd 8b0a 	vpop	{d8-d12}
 800d90e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d912:	f000 ba05 	b.w	800dd20 <__math_uflow>
 800d916:	bf00      	nop
 800d918:	00000000 	.word	0x00000000
 800d91c:	43300000 	.word	0x43300000
 800d920:	fff00000 	.word	0xfff00000
 800d924:	3ff00000 	.word	0x3ff00000
 800d928:	ffe00000 	.word	0xffe00000
 800d92c:	7fe00000 	.word	0x7fe00000
 800d930:	7fdfffff 	.word	0x7fdfffff
 800d934:	fcc00000 	.word	0xfcc00000
 800d938:	c0196aab 	.word	0xc0196aab
 800d93c:	0800e878 	.word	0x0800e878
 800d940:	460f      	mov	r7, r1
 800d942:	4e65      	ldr	r6, [pc, #404]	; (800dad8 <pow+0x578>)
 800d944:	ed9d 4b02 	vldr	d4, [sp, #8]
 800d948:	ed96 6b02 	vldr	d6, [r6, #8]
 800d94c:	ed96 7b00 	vldr	d7, [r6]
 800d950:	eeb0 5b46 	vmov.f64	d5, d6
 800d954:	eea4 5b07 	vfma.f64	d5, d4, d7
 800d958:	ed8d 5b00 	vstr	d5, [sp]
 800d95c:	ee35 6b46 	vsub.f64	d6, d5, d6
 800d960:	eeb0 5b44 	vmov.f64	d5, d4
 800d964:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d968:	ed96 7b04 	vldr	d7, [r6, #16]
 800d96c:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 800d970:	eea6 5b07 	vfma.f64	d5, d6, d7
 800d974:	eeb0 7b45 	vmov.f64	d7, d5
 800d978:	ed96 5b06 	vldr	d5, [r6, #24]
 800d97c:	1849      	adds	r1, r1, r1
 800d97e:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 800d982:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 800d986:	eea6 7b05 	vfma.f64	d7, d6, d5
 800d98a:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 800d98e:	ee33 3b07 	vadd.f64	d3, d3, d7
 800d992:	ee23 6b03 	vmul.f64	d6, d3, d3
 800d996:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 800d99a:	ed96 5b08 	vldr	d5, [r6, #32]
 800d99e:	ee33 7b07 	vadd.f64	d7, d3, d7
 800d9a2:	1814      	adds	r4, r2, r0
 800d9a4:	0365      	lsls	r5, r4, #13
 800d9a6:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 800d9aa:	eea3 5b04 	vfma.f64	d5, d3, d4
 800d9ae:	eea6 7b05 	vfma.f64	d7, d6, d5
 800d9b2:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 800d9b6:	ee26 6b06 	vmul.f64	d6, d6, d6
 800d9ba:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 800d9be:	2000      	movs	r0, #0
 800d9c0:	eb10 0a04 	adds.w	sl, r0, r4
 800d9c4:	eea3 5b04 	vfma.f64	d5, d3, d4
 800d9c8:	eb45 0b0c 	adc.w	fp, r5, ip
 800d9cc:	eea6 7b05 	vfma.f64	d7, d6, d5
 800d9d0:	2f00      	cmp	r7, #0
 800d9d2:	d16a      	bne.n	800daaa <pow+0x54a>
 800d9d4:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 800d9d8:	4639      	mov	r1, r7
 800d9da:	ea50 0301 	orrs.w	r3, r0, r1
 800d9de:	f04f 0300 	mov.w	r3, #0
 800d9e2:	d115      	bne.n	800da10 <pow+0x4b0>
 800d9e4:	eb1a 0303 	adds.w	r3, sl, r3
 800d9e8:	ee0b 3a10 	vmov	s22, r3
 800d9ec:	4b3b      	ldr	r3, [pc, #236]	; (800dadc <pow+0x57c>)
 800d9ee:	ed9f 0b34 	vldr	d0, [pc, #208]	; 800dac0 <pow+0x560>
 800d9f2:	eb4b 0303 	adc.w	r3, fp, r3
 800d9f6:	ee0b 3a90 	vmov	s23, r3
 800d9fa:	eea7 bb0b 	vfma.f64	d11, d7, d11
 800d9fe:	ee2b 0b00 	vmul.f64	d0, d11, d0
 800da02:	b01b      	add	sp, #108	; 0x6c
 800da04:	ecbd 8b0a 	vpop	{d8-d12}
 800da08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da0c:	f000 b9c8 	b.w	800dda0 <__math_check_oflow>
 800da10:	eb1a 0303 	adds.w	r3, sl, r3
 800da14:	930a      	str	r3, [sp, #40]	; 0x28
 800da16:	4b32      	ldr	r3, [pc, #200]	; (800dae0 <pow+0x580>)
 800da18:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800da1c:	eb4b 0303 	adc.w	r3, fp, r3
 800da20:	930b      	str	r3, [sp, #44]	; 0x2c
 800da22:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800da26:	ee27 6b05 	vmul.f64	d6, d7, d5
 800da2a:	ee35 7b06 	vadd.f64	d7, d5, d6
 800da2e:	eeb0 3bc7 	vabs.f64	d3, d7
 800da32:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800da36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da3a:	ed9f 0b23 	vldr	d0, [pc, #140]	; 800dac8 <pow+0x568>
 800da3e:	d52b      	bpl.n	800da98 <pow+0x538>
 800da40:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800da44:	ee35 5b47 	vsub.f64	d5, d5, d7
 800da48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da4c:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800da50:	ee35 6b06 	vadd.f64	d6, d5, d6
 800da54:	bf48      	it	mi
 800da56:	eeb0 4b43 	vmovmi.f64	d4, d3
 800da5a:	ee37 3b04 	vadd.f64	d3, d7, d4
 800da5e:	ee34 5b43 	vsub.f64	d5, d4, d3
 800da62:	ee35 7b07 	vadd.f64	d7, d5, d7
 800da66:	ee37 7b06 	vadd.f64	d7, d7, d6
 800da6a:	ee37 7b03 	vadd.f64	d7, d7, d3
 800da6e:	ee37 7b44 	vsub.f64	d7, d7, d4
 800da72:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800da76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da7a:	d105      	bne.n	800da88 <pow+0x528>
 800da7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800da7e:	463a      	mov	r2, r7
 800da80:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800da84:	ec43 2b17 	vmov	d7, r2, r3
 800da88:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 800da8c:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 800da90:	ee26 6b00 	vmul.f64	d6, d6, d0
 800da94:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 800da98:	ee27 0b00 	vmul.f64	d0, d7, d0
 800da9c:	b01b      	add	sp, #108	; 0x6c
 800da9e:	ecbd 8b0a 	vpop	{d8-d12}
 800daa2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daa6:	f000 b972 	b.w	800dd8e <__math_check_uflow>
 800daaa:	ec4b ab10 	vmov	d0, sl, fp
 800daae:	eea7 0b00 	vfma.f64	d0, d7, d0
 800dab2:	e5a3      	b.n	800d5fc <pow+0x9c>
 800dab4:	ed9f 0b06 	vldr	d0, [pc, #24]	; 800dad0 <pow+0x570>
 800dab8:	e5a0      	b.n	800d5fc <pow+0x9c>
 800daba:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800dabe:	e59d      	b.n	800d5fc <pow+0x9c>
 800dac0:	00000000 	.word	0x00000000
 800dac4:	7f000000 	.word	0x7f000000
 800dac8:	00000000 	.word	0x00000000
 800dacc:	00100000 	.word	0x00100000
	...
 800dad8:	0800f8f0 	.word	0x0800f8f0
 800dadc:	c0f00000 	.word	0xc0f00000
 800dae0:	3fe00000 	.word	0x3fe00000

0800dae4 <atan2>:
 800dae4:	f000 b82c 	b.w	800db40 <__ieee754_atan2>

0800dae8 <sqrt>:
 800dae8:	b508      	push	{r3, lr}
 800daea:	ed2d 8b04 	vpush	{d8-d9}
 800daee:	eeb0 8b40 	vmov.f64	d8, d0
 800daf2:	f000 f8f3 	bl	800dcdc <__ieee754_sqrt>
 800daf6:	4b10      	ldr	r3, [pc, #64]	; (800db38 <sqrt+0x50>)
 800daf8:	f993 3000 	ldrsb.w	r3, [r3]
 800dafc:	3301      	adds	r3, #1
 800dafe:	d011      	beq.n	800db24 <sqrt+0x3c>
 800db00:	eeb4 8b48 	vcmp.f64	d8, d8
 800db04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db08:	d60c      	bvs.n	800db24 <sqrt+0x3c>
 800db0a:	ed9f 9b09 	vldr	d9, [pc, #36]	; 800db30 <sqrt+0x48>
 800db0e:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800db12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db16:	d505      	bpl.n	800db24 <sqrt+0x3c>
 800db18:	f7fc ff26 	bl	800a968 <__errno>
 800db1c:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800db20:	2321      	movs	r3, #33	; 0x21
 800db22:	6003      	str	r3, [r0, #0]
 800db24:	ecbd 8b04 	vpop	{d8-d9}
 800db28:	bd08      	pop	{r3, pc}
 800db2a:	bf00      	nop
 800db2c:	f3af 8000 	nop.w
	...
 800db38:	240001e0 	.word	0x240001e0
 800db3c:	00000000 	.word	0x00000000

0800db40 <__ieee754_atan2>:
 800db40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db42:	ee11 6a10 	vmov	r6, s2
 800db46:	ee11 0a90 	vmov	r0, s3
 800db4a:	4273      	negs	r3, r6
 800db4c:	4f60      	ldr	r7, [pc, #384]	; (800dcd0 <__ieee754_atan2+0x190>)
 800db4e:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800db52:	4333      	orrs	r3, r6
 800db54:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800db58:	42bb      	cmp	r3, r7
 800db5a:	ed8d 0b00 	vstr	d0, [sp]
 800db5e:	d80b      	bhi.n	800db78 <__ieee754_atan2+0x38>
 800db60:	e9dd c500 	ldrd	ip, r5, [sp]
 800db64:	f1cc 0100 	rsb	r1, ip, #0
 800db68:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800db6c:	ea41 010c 	orr.w	r1, r1, ip
 800db70:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 800db74:	42b9      	cmp	r1, r7
 800db76:	d906      	bls.n	800db86 <__ieee754_atan2+0x46>
 800db78:	ed9d 7b00 	vldr	d7, [sp]
 800db7c:	ee37 7b01 	vadd.f64	d7, d7, d1
 800db80:	ed8d 7b00 	vstr	d7, [sp]
 800db84:	e054      	b.n	800dc30 <__ieee754_atan2+0xf0>
 800db86:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 800db8a:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 800db8e:	4331      	orrs	r1, r6
 800db90:	d104      	bne.n	800db9c <__ieee754_atan2+0x5c>
 800db92:	b003      	add	sp, #12
 800db94:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800db98:	f000 b916 	b.w	800ddc8 <atan>
 800db9c:	1784      	asrs	r4, r0, #30
 800db9e:	f004 0402 	and.w	r4, r4, #2
 800dba2:	ea53 010c 	orrs.w	r1, r3, ip
 800dba6:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 800dbaa:	d109      	bne.n	800dbc0 <__ieee754_atan2+0x80>
 800dbac:	2c02      	cmp	r4, #2
 800dbae:	d069      	beq.n	800dc84 <__ieee754_atan2+0x144>
 800dbb0:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800dc98 <__ieee754_atan2+0x158>
 800dbb4:	ed9d 6b00 	vldr	d6, [sp]
 800dbb8:	2c03      	cmp	r4, #3
 800dbba:	fe07 7b06 	vseleq.f64	d7, d7, d6
 800dbbe:	e7df      	b.n	800db80 <__ieee754_atan2+0x40>
 800dbc0:	ea52 0106 	orrs.w	r1, r2, r6
 800dbc4:	d107      	bne.n	800dbd6 <__ieee754_atan2+0x96>
 800dbc6:	ed9f 6b36 	vldr	d6, [pc, #216]	; 800dca0 <__ieee754_atan2+0x160>
 800dbca:	ed9f 7b37 	vldr	d7, [pc, #220]	; 800dca8 <__ieee754_atan2+0x168>
 800dbce:	2d00      	cmp	r5, #0
 800dbd0:	fe26 7b07 	vselge.f64	d7, d6, d7
 800dbd4:	e7d4      	b.n	800db80 <__ieee754_atan2+0x40>
 800dbd6:	42ba      	cmp	r2, r7
 800dbd8:	d10f      	bne.n	800dbfa <__ieee754_atan2+0xba>
 800dbda:	4293      	cmp	r3, r2
 800dbdc:	f104 34ff 	add.w	r4, r4, #4294967295
 800dbe0:	d107      	bne.n	800dbf2 <__ieee754_atan2+0xb2>
 800dbe2:	2c02      	cmp	r4, #2
 800dbe4:	d851      	bhi.n	800dc8a <__ieee754_atan2+0x14a>
 800dbe6:	4b3b      	ldr	r3, [pc, #236]	; (800dcd4 <__ieee754_atan2+0x194>)
 800dbe8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800dbec:	ed94 7b00 	vldr	d7, [r4]
 800dbf0:	e7c6      	b.n	800db80 <__ieee754_atan2+0x40>
 800dbf2:	2c02      	cmp	r4, #2
 800dbf4:	d84c      	bhi.n	800dc90 <__ieee754_atan2+0x150>
 800dbf6:	4b38      	ldr	r3, [pc, #224]	; (800dcd8 <__ieee754_atan2+0x198>)
 800dbf8:	e7f6      	b.n	800dbe8 <__ieee754_atan2+0xa8>
 800dbfa:	42bb      	cmp	r3, r7
 800dbfc:	d0e3      	beq.n	800dbc6 <__ieee754_atan2+0x86>
 800dbfe:	1a9b      	subs	r3, r3, r2
 800dc00:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800dc04:	ea4f 5223 	mov.w	r2, r3, asr #20
 800dc08:	da16      	bge.n	800dc38 <__ieee754_atan2+0xf8>
 800dc0a:	2800      	cmp	r0, #0
 800dc0c:	da01      	bge.n	800dc12 <__ieee754_atan2+0xd2>
 800dc0e:	323c      	adds	r2, #60	; 0x3c
 800dc10:	db17      	blt.n	800dc42 <__ieee754_atan2+0x102>
 800dc12:	ed9d 7b00 	vldr	d7, [sp]
 800dc16:	ee87 0b01 	vdiv.f64	d0, d7, d1
 800dc1a:	f000 f9cf 	bl	800dfbc <fabs>
 800dc1e:	f000 f8d3 	bl	800ddc8 <atan>
 800dc22:	ed8d 0b00 	vstr	d0, [sp]
 800dc26:	2c01      	cmp	r4, #1
 800dc28:	d00e      	beq.n	800dc48 <__ieee754_atan2+0x108>
 800dc2a:	2c02      	cmp	r4, #2
 800dc2c:	d014      	beq.n	800dc58 <__ieee754_atan2+0x118>
 800dc2e:	b9f4      	cbnz	r4, 800dc6e <__ieee754_atan2+0x12e>
 800dc30:	ed9d 0b00 	vldr	d0, [sp]
 800dc34:	b003      	add	sp, #12
 800dc36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc38:	ed9f 7b19 	vldr	d7, [pc, #100]	; 800dca0 <__ieee754_atan2+0x160>
 800dc3c:	ed8d 7b00 	vstr	d7, [sp]
 800dc40:	e7f1      	b.n	800dc26 <__ieee754_atan2+0xe6>
 800dc42:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 800dcb0 <__ieee754_atan2+0x170>
 800dc46:	e7f9      	b.n	800dc3c <__ieee754_atan2+0xfc>
 800dc48:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dc4c:	9901      	ldr	r1, [sp, #4]
 800dc4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dc52:	e9cd 2300 	strd	r2, r3, [sp]
 800dc56:	e7eb      	b.n	800dc30 <__ieee754_atan2+0xf0>
 800dc58:	ed9d 6b00 	vldr	d6, [sp]
 800dc5c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800dcb8 <__ieee754_atan2+0x178>
 800dc60:	ee36 7b47 	vsub.f64	d7, d6, d7
 800dc64:	ed9f 6b16 	vldr	d6, [pc, #88]	; 800dcc0 <__ieee754_atan2+0x180>
 800dc68:	ee36 7b47 	vsub.f64	d7, d6, d7
 800dc6c:	e788      	b.n	800db80 <__ieee754_atan2+0x40>
 800dc6e:	ed9d 6b00 	vldr	d6, [sp]
 800dc72:	ed9f 7b11 	vldr	d7, [pc, #68]	; 800dcb8 <__ieee754_atan2+0x178>
 800dc76:	ee36 7b47 	vsub.f64	d7, d6, d7
 800dc7a:	ed9f 6b11 	vldr	d6, [pc, #68]	; 800dcc0 <__ieee754_atan2+0x180>
 800dc7e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dc82:	e77d      	b.n	800db80 <__ieee754_atan2+0x40>
 800dc84:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800dcc0 <__ieee754_atan2+0x180>
 800dc88:	e77a      	b.n	800db80 <__ieee754_atan2+0x40>
 800dc8a:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800dcc8 <__ieee754_atan2+0x188>
 800dc8e:	e777      	b.n	800db80 <__ieee754_atan2+0x40>
 800dc90:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800dcb0 <__ieee754_atan2+0x170>
 800dc94:	e774      	b.n	800db80 <__ieee754_atan2+0x40>
 800dc96:	bf00      	nop
 800dc98:	54442d18 	.word	0x54442d18
 800dc9c:	c00921fb 	.word	0xc00921fb
 800dca0:	54442d18 	.word	0x54442d18
 800dca4:	3ff921fb 	.word	0x3ff921fb
 800dca8:	54442d18 	.word	0x54442d18
 800dcac:	bff921fb 	.word	0xbff921fb
	...
 800dcb8:	33145c07 	.word	0x33145c07
 800dcbc:	3ca1a626 	.word	0x3ca1a626
 800dcc0:	54442d18 	.word	0x54442d18
 800dcc4:	400921fb 	.word	0x400921fb
 800dcc8:	54442d18 	.word	0x54442d18
 800dccc:	3fe921fb 	.word	0x3fe921fb
 800dcd0:	7ff00000 	.word	0x7ff00000
 800dcd4:	0800f8c0 	.word	0x0800f8c0
 800dcd8:	0800f8d8 	.word	0x0800f8d8

0800dcdc <__ieee754_sqrt>:
 800dcdc:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800dce0:	4770      	bx	lr

0800dce2 <with_errno>:
 800dce2:	b513      	push	{r0, r1, r4, lr}
 800dce4:	4604      	mov	r4, r0
 800dce6:	ed8d 0b00 	vstr	d0, [sp]
 800dcea:	f7fc fe3d 	bl	800a968 <__errno>
 800dcee:	ed9d 0b00 	vldr	d0, [sp]
 800dcf2:	6004      	str	r4, [r0, #0]
 800dcf4:	b002      	add	sp, #8
 800dcf6:	bd10      	pop	{r4, pc}

0800dcf8 <xflow>:
 800dcf8:	b082      	sub	sp, #8
 800dcfa:	b158      	cbz	r0, 800dd14 <xflow+0x1c>
 800dcfc:	eeb1 7b40 	vneg.f64	d7, d0
 800dd00:	ed8d 7b00 	vstr	d7, [sp]
 800dd04:	ed9d 7b00 	vldr	d7, [sp]
 800dd08:	2022      	movs	r0, #34	; 0x22
 800dd0a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800dd0e:	b002      	add	sp, #8
 800dd10:	f7ff bfe7 	b.w	800dce2 <with_errno>
 800dd14:	eeb0 7b40 	vmov.f64	d7, d0
 800dd18:	e7f2      	b.n	800dd00 <xflow+0x8>
 800dd1a:	0000      	movs	r0, r0
 800dd1c:	0000      	movs	r0, r0
	...

0800dd20 <__math_uflow>:
 800dd20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dd28 <__math_uflow+0x8>
 800dd24:	f7ff bfe8 	b.w	800dcf8 <xflow>
 800dd28:	00000000 	.word	0x00000000
 800dd2c:	10000000 	.word	0x10000000

0800dd30 <__math_oflow>:
 800dd30:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dd38 <__math_oflow+0x8>
 800dd34:	f7ff bfe0 	b.w	800dcf8 <xflow>
 800dd38:	00000000 	.word	0x00000000
 800dd3c:	70000000 	.word	0x70000000

0800dd40 <__math_divzero>:
 800dd40:	b082      	sub	sp, #8
 800dd42:	2800      	cmp	r0, #0
 800dd44:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800dd48:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800dd4c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800dd50:	ed8d 7b00 	vstr	d7, [sp]
 800dd54:	ed9d 0b00 	vldr	d0, [sp]
 800dd58:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800dd68 <__math_divzero+0x28>
 800dd5c:	2022      	movs	r0, #34	; 0x22
 800dd5e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800dd62:	b002      	add	sp, #8
 800dd64:	f7ff bfbd 	b.w	800dce2 <with_errno>
	...

0800dd70 <__math_invalid>:
 800dd70:	eeb0 7b40 	vmov.f64	d7, d0
 800dd74:	eeb4 7b47 	vcmp.f64	d7, d7
 800dd78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd7c:	ee30 6b40 	vsub.f64	d6, d0, d0
 800dd80:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800dd84:	d602      	bvs.n	800dd8c <__math_invalid+0x1c>
 800dd86:	2021      	movs	r0, #33	; 0x21
 800dd88:	f7ff bfab 	b.w	800dce2 <with_errno>
 800dd8c:	4770      	bx	lr

0800dd8e <__math_check_uflow>:
 800dd8e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800dd92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd96:	d102      	bne.n	800dd9e <__math_check_uflow+0x10>
 800dd98:	2022      	movs	r0, #34	; 0x22
 800dd9a:	f7ff bfa2 	b.w	800dce2 <with_errno>
 800dd9e:	4770      	bx	lr

0800dda0 <__math_check_oflow>:
 800dda0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800ddc0 <__math_check_oflow+0x20>
 800dda4:	eeb0 7bc0 	vabs.f64	d7, d0
 800dda8:	eeb4 7b46 	vcmp.f64	d7, d6
 800ddac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddb0:	dd02      	ble.n	800ddb8 <__math_check_oflow+0x18>
 800ddb2:	2022      	movs	r0, #34	; 0x22
 800ddb4:	f7ff bf95 	b.w	800dce2 <with_errno>
 800ddb8:	4770      	bx	lr
 800ddba:	bf00      	nop
 800ddbc:	f3af 8000 	nop.w
 800ddc0:	ffffffff 	.word	0xffffffff
 800ddc4:	7fefffff 	.word	0x7fefffff

0800ddc8 <atan>:
 800ddc8:	b538      	push	{r3, r4, r5, lr}
 800ddca:	eeb0 7b40 	vmov.f64	d7, d0
 800ddce:	ee17 5a90 	vmov	r5, s15
 800ddd2:	4b73      	ldr	r3, [pc, #460]	; (800dfa0 <atan+0x1d8>)
 800ddd4:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800ddd8:	429c      	cmp	r4, r3
 800ddda:	dd13      	ble.n	800de04 <atan+0x3c>
 800dddc:	4b71      	ldr	r3, [pc, #452]	; (800dfa4 <atan+0x1dc>)
 800ddde:	429c      	cmp	r4, r3
 800dde0:	dc03      	bgt.n	800ddea <atan+0x22>
 800dde2:	d107      	bne.n	800ddf4 <atan+0x2c>
 800dde4:	ee10 3a10 	vmov	r3, s0
 800dde8:	b123      	cbz	r3, 800ddf4 <atan+0x2c>
 800ddea:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ddee:	eeb0 0b47 	vmov.f64	d0, d7
 800ddf2:	bd38      	pop	{r3, r4, r5, pc}
 800ddf4:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800df30 <atan+0x168>
 800ddf8:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 800df38 <atan+0x170>
 800ddfc:	2d00      	cmp	r5, #0
 800ddfe:	fe36 7b07 	vselgt.f64	d7, d6, d7
 800de02:	e7f4      	b.n	800ddee <atan+0x26>
 800de04:	4b68      	ldr	r3, [pc, #416]	; (800dfa8 <atan+0x1e0>)
 800de06:	429c      	cmp	r4, r3
 800de08:	dc11      	bgt.n	800de2e <atan+0x66>
 800de0a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800de0e:	429c      	cmp	r4, r3
 800de10:	dc0a      	bgt.n	800de28 <atan+0x60>
 800de12:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800de16:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 800df40 <atan+0x178>
 800de1a:	ee30 6b06 	vadd.f64	d6, d0, d6
 800de1e:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800de22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de26:	dce2      	bgt.n	800ddee <atan+0x26>
 800de28:	f04f 33ff 	mov.w	r3, #4294967295
 800de2c:	e013      	b.n	800de56 <atan+0x8e>
 800de2e:	f000 f8c5 	bl	800dfbc <fabs>
 800de32:	4b5e      	ldr	r3, [pc, #376]	; (800dfac <atan+0x1e4>)
 800de34:	429c      	cmp	r4, r3
 800de36:	dc4f      	bgt.n	800ded8 <atan+0x110>
 800de38:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800de3c:	429c      	cmp	r4, r3
 800de3e:	dc41      	bgt.n	800dec4 <atan+0xfc>
 800de40:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800de44:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800de48:	2300      	movs	r3, #0
 800de4a:	eea0 6b07 	vfma.f64	d6, d0, d7
 800de4e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800de52:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800de56:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800df48 <atan+0x180>
 800de5a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800de5e:	ee24 5b04 	vmul.f64	d5, d4, d4
 800de62:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800df50 <atan+0x188>
 800de66:	eea5 3b06 	vfma.f64	d3, d5, d6
 800de6a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800df58 <atan+0x190>
 800de6e:	eea3 6b05 	vfma.f64	d6, d3, d5
 800de72:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800df60 <atan+0x198>
 800de76:	eea6 3b05 	vfma.f64	d3, d6, d5
 800de7a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800df68 <atan+0x1a0>
 800de7e:	eea3 6b05 	vfma.f64	d6, d3, d5
 800de82:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800df70 <atan+0x1a8>
 800de86:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800df78 <atan+0x1b0>
 800de8a:	eea6 3b05 	vfma.f64	d3, d6, d5
 800de8e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800df80 <atan+0x1b8>
 800de92:	eea5 2b06 	vfma.f64	d2, d5, d6
 800de96:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800df88 <atan+0x1c0>
 800de9a:	eea2 6b05 	vfma.f64	d6, d2, d5
 800de9e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800df90 <atan+0x1c8>
 800dea2:	eea6 2b05 	vfma.f64	d2, d6, d5
 800dea6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800df98 <atan+0x1d0>
 800deaa:	1c5a      	adds	r2, r3, #1
 800deac:	eea2 6b05 	vfma.f64	d6, d2, d5
 800deb0:	ee26 6b05 	vmul.f64	d6, d6, d5
 800deb4:	eea3 6b04 	vfma.f64	d6, d3, d4
 800deb8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800debc:	d121      	bne.n	800df02 <atan+0x13a>
 800debe:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dec2:	e794      	b.n	800ddee <atan+0x26>
 800dec4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800dec8:	2301      	movs	r3, #1
 800deca:	ee30 6b47 	vsub.f64	d6, d0, d7
 800dece:	ee30 0b07 	vadd.f64	d0, d0, d7
 800ded2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800ded6:	e7be      	b.n	800de56 <atan+0x8e>
 800ded8:	4b35      	ldr	r3, [pc, #212]	; (800dfb0 <atan+0x1e8>)
 800deda:	429c      	cmp	r4, r3
 800dedc:	da0b      	bge.n	800def6 <atan+0x12e>
 800dede:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800dee2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800dee6:	ee30 5b47 	vsub.f64	d5, d0, d7
 800deea:	eea0 6b07 	vfma.f64	d6, d0, d7
 800deee:	2302      	movs	r3, #2
 800def0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800def4:	e7af      	b.n	800de56 <atan+0x8e>
 800def6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800defa:	2303      	movs	r3, #3
 800defc:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800df00:	e7a9      	b.n	800de56 <atan+0x8e>
 800df02:	4a2c      	ldr	r2, [pc, #176]	; (800dfb4 <atan+0x1ec>)
 800df04:	492c      	ldr	r1, [pc, #176]	; (800dfb8 <atan+0x1f0>)
 800df06:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800df0a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800df0e:	ed93 5b00 	vldr	d5, [r3]
 800df12:	ee36 6b45 	vsub.f64	d6, d6, d5
 800df16:	ee36 7b47 	vsub.f64	d7, d6, d7
 800df1a:	ed92 6b00 	vldr	d6, [r2]
 800df1e:	2d00      	cmp	r5, #0
 800df20:	ee36 7b47 	vsub.f64	d7, d6, d7
 800df24:	bfb8      	it	lt
 800df26:	eeb1 7b47 	vneglt.f64	d7, d7
 800df2a:	e760      	b.n	800ddee <atan+0x26>
 800df2c:	f3af 8000 	nop.w
 800df30:	54442d18 	.word	0x54442d18
 800df34:	3ff921fb 	.word	0x3ff921fb
 800df38:	54442d18 	.word	0x54442d18
 800df3c:	bff921fb 	.word	0xbff921fb
 800df40:	8800759c 	.word	0x8800759c
 800df44:	7e37e43c 	.word	0x7e37e43c
 800df48:	e322da11 	.word	0xe322da11
 800df4c:	3f90ad3a 	.word	0x3f90ad3a
 800df50:	24760deb 	.word	0x24760deb
 800df54:	3fa97b4b 	.word	0x3fa97b4b
 800df58:	a0d03d51 	.word	0xa0d03d51
 800df5c:	3fb10d66 	.word	0x3fb10d66
 800df60:	c54c206e 	.word	0xc54c206e
 800df64:	3fb745cd 	.word	0x3fb745cd
 800df68:	920083ff 	.word	0x920083ff
 800df6c:	3fc24924 	.word	0x3fc24924
 800df70:	5555550d 	.word	0x5555550d
 800df74:	3fd55555 	.word	0x3fd55555
 800df78:	52defd9a 	.word	0x52defd9a
 800df7c:	bfadde2d 	.word	0xbfadde2d
 800df80:	2c6a6c2f 	.word	0x2c6a6c2f
 800df84:	bfa2b444 	.word	0xbfa2b444
 800df88:	af749a6d 	.word	0xaf749a6d
 800df8c:	bfb3b0f2 	.word	0xbfb3b0f2
 800df90:	fe231671 	.word	0xfe231671
 800df94:	bfbc71c6 	.word	0xbfbc71c6
 800df98:	9998ebc4 	.word	0x9998ebc4
 800df9c:	bfc99999 	.word	0xbfc99999
 800dfa0:	440fffff 	.word	0x440fffff
 800dfa4:	7ff00000 	.word	0x7ff00000
 800dfa8:	3fdbffff 	.word	0x3fdbffff
 800dfac:	3ff2ffff 	.word	0x3ff2ffff
 800dfb0:	40038000 	.word	0x40038000
 800dfb4:	08010160 	.word	0x08010160
 800dfb8:	08010180 	.word	0x08010180

0800dfbc <fabs>:
 800dfbc:	ec51 0b10 	vmov	r0, r1, d0
 800dfc0:	ee10 2a10 	vmov	r2, s0
 800dfc4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dfc8:	ec43 2b10 	vmov	d0, r2, r3
 800dfcc:	4770      	bx	lr
	...

0800dfd0 <_getpid>:
 800dfd0:	4b02      	ldr	r3, [pc, #8]	; (800dfdc <_getpid+0xc>)
 800dfd2:	2258      	movs	r2, #88	; 0x58
 800dfd4:	601a      	str	r2, [r3, #0]
 800dfd6:	f04f 30ff 	mov.w	r0, #4294967295
 800dfda:	4770      	bx	lr
 800dfdc:	2400c710 	.word	0x2400c710

0800dfe0 <_kill>:
 800dfe0:	4b02      	ldr	r3, [pc, #8]	; (800dfec <_kill+0xc>)
 800dfe2:	2258      	movs	r2, #88	; 0x58
 800dfe4:	601a      	str	r2, [r3, #0]
 800dfe6:	f04f 30ff 	mov.w	r0, #4294967295
 800dfea:	4770      	bx	lr
 800dfec:	2400c710 	.word	0x2400c710

0800dff0 <_exit>:
 800dff0:	e7fe      	b.n	800dff0 <_exit>
	...

0800dff4 <_init>:
 800dff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dff6:	bf00      	nop
 800dff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dffa:	bc08      	pop	{r3}
 800dffc:	469e      	mov	lr, r3
 800dffe:	4770      	bx	lr

0800e000 <_fini>:
 800e000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e002:	bf00      	nop
 800e004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e006:	bc08      	pop	{r3}
 800e008:	469e      	mov	lr, r3
 800e00a:	4770      	bx	lr
