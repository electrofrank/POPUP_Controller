
0 - Main_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011c14  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000022e8  08011eb8  08011eb8  00021eb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080141a0  080141a0  000241a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080141a8  080141a8  000241a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080141ac  080141ac  000241ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e8  24000000  080141b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240001e8  08014398  000301e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000248  080143f8  00030248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c498  240002a8  08014458  000302a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2400c740  08014458  0003c740  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000302a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f592  00000000  00000000  000302d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000414f  00000000  00000000  0005f868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a00  00000000  00000000  000639b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018c8  00000000  00000000  000653b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ae48  00000000  00000000  00066c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001edf8  00000000  00000000  000a1ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001761e7  00000000  00000000  000c08c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00236aa7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a58  00000000  00000000  00236afc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  0023f554  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  0023f590  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002a8 	.word	0x240002a8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011e9c 	.word	0x08011e9c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002ac 	.word	0x240002ac
 80002dc:	08011e9c 	.word	0x08011e9c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a6 	b.w	8000a6c <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468c      	mov	ip, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	f040 8083 	bne.w	80008be <__udivmoddi4+0x116>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4617      	mov	r7, r2
 80007bc:	d947      	bls.n	800084e <__udivmoddi4+0xa6>
 80007be:	fab2 f282 	clz	r2, r2
 80007c2:	b142      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c4:	f1c2 0020 	rsb	r0, r2, #32
 80007c8:	fa24 f000 	lsr.w	r0, r4, r0
 80007cc:	4091      	lsls	r1, r2
 80007ce:	4097      	lsls	r7, r2
 80007d0:	ea40 0c01 	orr.w	ip, r0, r1
 80007d4:	4094      	lsls	r4, r2
 80007d6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80007da:	0c23      	lsrs	r3, r4, #16
 80007dc:	fbbc f6f8 	udiv	r6, ip, r8
 80007e0:	fa1f fe87 	uxth.w	lr, r7
 80007e4:	fb08 c116 	mls	r1, r8, r6, ip
 80007e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ec:	fb06 f10e 	mul.w	r1, r6, lr
 80007f0:	4299      	cmp	r1, r3
 80007f2:	d909      	bls.n	8000808 <__udivmoddi4+0x60>
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fa:	f080 8119 	bcs.w	8000a30 <__udivmoddi4+0x288>
 80007fe:	4299      	cmp	r1, r3
 8000800:	f240 8116 	bls.w	8000a30 <__udivmoddi4+0x288>
 8000804:	3e02      	subs	r6, #2
 8000806:	443b      	add	r3, r7
 8000808:	1a5b      	subs	r3, r3, r1
 800080a:	b2a4      	uxth	r4, r4
 800080c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000810:	fb08 3310 	mls	r3, r8, r0, r3
 8000814:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000818:	fb00 fe0e 	mul.w	lr, r0, lr
 800081c:	45a6      	cmp	lr, r4
 800081e:	d909      	bls.n	8000834 <__udivmoddi4+0x8c>
 8000820:	193c      	adds	r4, r7, r4
 8000822:	f100 33ff 	add.w	r3, r0, #4294967295
 8000826:	f080 8105 	bcs.w	8000a34 <__udivmoddi4+0x28c>
 800082a:	45a6      	cmp	lr, r4
 800082c:	f240 8102 	bls.w	8000a34 <__udivmoddi4+0x28c>
 8000830:	3802      	subs	r0, #2
 8000832:	443c      	add	r4, r7
 8000834:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000838:	eba4 040e 	sub.w	r4, r4, lr
 800083c:	2600      	movs	r6, #0
 800083e:	b11d      	cbz	r5, 8000848 <__udivmoddi4+0xa0>
 8000840:	40d4      	lsrs	r4, r2
 8000842:	2300      	movs	r3, #0
 8000844:	e9c5 4300 	strd	r4, r3, [r5]
 8000848:	4631      	mov	r1, r6
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	b902      	cbnz	r2, 8000852 <__udivmoddi4+0xaa>
 8000850:	deff      	udf	#255	; 0xff
 8000852:	fab2 f282 	clz	r2, r2
 8000856:	2a00      	cmp	r2, #0
 8000858:	d150      	bne.n	80008fc <__udivmoddi4+0x154>
 800085a:	1bcb      	subs	r3, r1, r7
 800085c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000860:	fa1f f887 	uxth.w	r8, r7
 8000864:	2601      	movs	r6, #1
 8000866:	fbb3 fcfe 	udiv	ip, r3, lr
 800086a:	0c21      	lsrs	r1, r4, #16
 800086c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000870:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000874:	fb08 f30c 	mul.w	r3, r8, ip
 8000878:	428b      	cmp	r3, r1
 800087a:	d907      	bls.n	800088c <__udivmoddi4+0xe4>
 800087c:	1879      	adds	r1, r7, r1
 800087e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000882:	d202      	bcs.n	800088a <__udivmoddi4+0xe2>
 8000884:	428b      	cmp	r3, r1
 8000886:	f200 80e9 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 800088a:	4684      	mov	ip, r0
 800088c:	1ac9      	subs	r1, r1, r3
 800088e:	b2a3      	uxth	r3, r4
 8000890:	fbb1 f0fe 	udiv	r0, r1, lr
 8000894:	fb0e 1110 	mls	r1, lr, r0, r1
 8000898:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800089c:	fb08 f800 	mul.w	r8, r8, r0
 80008a0:	45a0      	cmp	r8, r4
 80008a2:	d907      	bls.n	80008b4 <__udivmoddi4+0x10c>
 80008a4:	193c      	adds	r4, r7, r4
 80008a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80008aa:	d202      	bcs.n	80008b2 <__udivmoddi4+0x10a>
 80008ac:	45a0      	cmp	r8, r4
 80008ae:	f200 80d9 	bhi.w	8000a64 <__udivmoddi4+0x2bc>
 80008b2:	4618      	mov	r0, r3
 80008b4:	eba4 0408 	sub.w	r4, r4, r8
 80008b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008bc:	e7bf      	b.n	800083e <__udivmoddi4+0x96>
 80008be:	428b      	cmp	r3, r1
 80008c0:	d909      	bls.n	80008d6 <__udivmoddi4+0x12e>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	f000 80b1 	beq.w	8000a2a <__udivmoddi4+0x282>
 80008c8:	2600      	movs	r6, #0
 80008ca:	e9c5 0100 	strd	r0, r1, [r5]
 80008ce:	4630      	mov	r0, r6
 80008d0:	4631      	mov	r1, r6
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	fab3 f683 	clz	r6, r3
 80008da:	2e00      	cmp	r6, #0
 80008dc:	d14a      	bne.n	8000974 <__udivmoddi4+0x1cc>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d302      	bcc.n	80008e8 <__udivmoddi4+0x140>
 80008e2:	4282      	cmp	r2, r0
 80008e4:	f200 80b8 	bhi.w	8000a58 <__udivmoddi4+0x2b0>
 80008e8:	1a84      	subs	r4, r0, r2
 80008ea:	eb61 0103 	sbc.w	r1, r1, r3
 80008ee:	2001      	movs	r0, #1
 80008f0:	468c      	mov	ip, r1
 80008f2:	2d00      	cmp	r5, #0
 80008f4:	d0a8      	beq.n	8000848 <__udivmoddi4+0xa0>
 80008f6:	e9c5 4c00 	strd	r4, ip, [r5]
 80008fa:	e7a5      	b.n	8000848 <__udivmoddi4+0xa0>
 80008fc:	f1c2 0320 	rsb	r3, r2, #32
 8000900:	fa20 f603 	lsr.w	r6, r0, r3
 8000904:	4097      	lsls	r7, r2
 8000906:	fa01 f002 	lsl.w	r0, r1, r2
 800090a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800090e:	40d9      	lsrs	r1, r3
 8000910:	4330      	orrs	r0, r6
 8000912:	0c03      	lsrs	r3, r0, #16
 8000914:	fbb1 f6fe 	udiv	r6, r1, lr
 8000918:	fa1f f887 	uxth.w	r8, r7
 800091c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000920:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000924:	fb06 f108 	mul.w	r1, r6, r8
 8000928:	4299      	cmp	r1, r3
 800092a:	fa04 f402 	lsl.w	r4, r4, r2
 800092e:	d909      	bls.n	8000944 <__udivmoddi4+0x19c>
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	f106 3cff 	add.w	ip, r6, #4294967295
 8000936:	f080 808d 	bcs.w	8000a54 <__udivmoddi4+0x2ac>
 800093a:	4299      	cmp	r1, r3
 800093c:	f240 808a 	bls.w	8000a54 <__udivmoddi4+0x2ac>
 8000940:	3e02      	subs	r6, #2
 8000942:	443b      	add	r3, r7
 8000944:	1a5b      	subs	r3, r3, r1
 8000946:	b281      	uxth	r1, r0
 8000948:	fbb3 f0fe 	udiv	r0, r3, lr
 800094c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000950:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000954:	fb00 f308 	mul.w	r3, r0, r8
 8000958:	428b      	cmp	r3, r1
 800095a:	d907      	bls.n	800096c <__udivmoddi4+0x1c4>
 800095c:	1879      	adds	r1, r7, r1
 800095e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000962:	d273      	bcs.n	8000a4c <__udivmoddi4+0x2a4>
 8000964:	428b      	cmp	r3, r1
 8000966:	d971      	bls.n	8000a4c <__udivmoddi4+0x2a4>
 8000968:	3802      	subs	r0, #2
 800096a:	4439      	add	r1, r7
 800096c:	1acb      	subs	r3, r1, r3
 800096e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000972:	e778      	b.n	8000866 <__udivmoddi4+0xbe>
 8000974:	f1c6 0c20 	rsb	ip, r6, #32
 8000978:	fa03 f406 	lsl.w	r4, r3, r6
 800097c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000980:	431c      	orrs	r4, r3
 8000982:	fa20 f70c 	lsr.w	r7, r0, ip
 8000986:	fa01 f306 	lsl.w	r3, r1, r6
 800098a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800098e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000992:	431f      	orrs	r7, r3
 8000994:	0c3b      	lsrs	r3, r7, #16
 8000996:	fbb1 f9fe 	udiv	r9, r1, lr
 800099a:	fa1f f884 	uxth.w	r8, r4
 800099e:	fb0e 1119 	mls	r1, lr, r9, r1
 80009a2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80009a6:	fb09 fa08 	mul.w	sl, r9, r8
 80009aa:	458a      	cmp	sl, r1
 80009ac:	fa02 f206 	lsl.w	r2, r2, r6
 80009b0:	fa00 f306 	lsl.w	r3, r0, r6
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x220>
 80009b6:	1861      	adds	r1, r4, r1
 80009b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80009bc:	d248      	bcs.n	8000a50 <__udivmoddi4+0x2a8>
 80009be:	458a      	cmp	sl, r1
 80009c0:	d946      	bls.n	8000a50 <__udivmoddi4+0x2a8>
 80009c2:	f1a9 0902 	sub.w	r9, r9, #2
 80009c6:	4421      	add	r1, r4
 80009c8:	eba1 010a 	sub.w	r1, r1, sl
 80009cc:	b2bf      	uxth	r7, r7
 80009ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80009d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80009d6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80009da:	fb00 f808 	mul.w	r8, r0, r8
 80009de:	45b8      	cmp	r8, r7
 80009e0:	d907      	bls.n	80009f2 <__udivmoddi4+0x24a>
 80009e2:	19e7      	adds	r7, r4, r7
 80009e4:	f100 31ff 	add.w	r1, r0, #4294967295
 80009e8:	d22e      	bcs.n	8000a48 <__udivmoddi4+0x2a0>
 80009ea:	45b8      	cmp	r8, r7
 80009ec:	d92c      	bls.n	8000a48 <__udivmoddi4+0x2a0>
 80009ee:	3802      	subs	r0, #2
 80009f0:	4427      	add	r7, r4
 80009f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009f6:	eba7 0708 	sub.w	r7, r7, r8
 80009fa:	fba0 8902 	umull	r8, r9, r0, r2
 80009fe:	454f      	cmp	r7, r9
 8000a00:	46c6      	mov	lr, r8
 8000a02:	4649      	mov	r1, r9
 8000a04:	d31a      	bcc.n	8000a3c <__udivmoddi4+0x294>
 8000a06:	d017      	beq.n	8000a38 <__udivmoddi4+0x290>
 8000a08:	b15d      	cbz	r5, 8000a22 <__udivmoddi4+0x27a>
 8000a0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000a0e:	eb67 0701 	sbc.w	r7, r7, r1
 8000a12:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a16:	40f2      	lsrs	r2, r6
 8000a18:	ea4c 0202 	orr.w	r2, ip, r2
 8000a1c:	40f7      	lsrs	r7, r6
 8000a1e:	e9c5 2700 	strd	r2, r7, [r5]
 8000a22:	2600      	movs	r6, #0
 8000a24:	4631      	mov	r1, r6
 8000a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2a:	462e      	mov	r6, r5
 8000a2c:	4628      	mov	r0, r5
 8000a2e:	e70b      	b.n	8000848 <__udivmoddi4+0xa0>
 8000a30:	4606      	mov	r6, r0
 8000a32:	e6e9      	b.n	8000808 <__udivmoddi4+0x60>
 8000a34:	4618      	mov	r0, r3
 8000a36:	e6fd      	b.n	8000834 <__udivmoddi4+0x8c>
 8000a38:	4543      	cmp	r3, r8
 8000a3a:	d2e5      	bcs.n	8000a08 <__udivmoddi4+0x260>
 8000a3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a40:	eb69 0104 	sbc.w	r1, r9, r4
 8000a44:	3801      	subs	r0, #1
 8000a46:	e7df      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a48:	4608      	mov	r0, r1
 8000a4a:	e7d2      	b.n	80009f2 <__udivmoddi4+0x24a>
 8000a4c:	4660      	mov	r0, ip
 8000a4e:	e78d      	b.n	800096c <__udivmoddi4+0x1c4>
 8000a50:	4681      	mov	r9, r0
 8000a52:	e7b9      	b.n	80009c8 <__udivmoddi4+0x220>
 8000a54:	4666      	mov	r6, ip
 8000a56:	e775      	b.n	8000944 <__udivmoddi4+0x19c>
 8000a58:	4630      	mov	r0, r6
 8000a5a:	e74a      	b.n	80008f2 <__udivmoddi4+0x14a>
 8000a5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a60:	4439      	add	r1, r7
 8000a62:	e713      	b.n	800088c <__udivmoddi4+0xe4>
 8000a64:	3802      	subs	r0, #2
 8000a66:	443c      	add	r4, r7
 8000a68:	e724      	b.n	80008b4 <__udivmoddi4+0x10c>
 8000a6a:	bf00      	nop

08000a6c <__aeabi_idiv0>:
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a76:	f003 fb71 	bl	800415c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a7a:	f000 f8ed 	bl	8000c58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a7e:	f000 fb81 	bl	8001184 <MX_GPIO_Init>
  MX_ETH_Init();
 8000a82:	f000 f965 	bl	8000d50 <MX_ETH_Init>
  MX_FDCAN1_Init();
 8000a86:	f000 f9af 	bl	8000de8 <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 8000a8a:	f000 fafd 	bl	8001088 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a8e:	f000 fb47 	bl	8001120 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000a92:	f000 fa0d 	bl	8000eb0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a96:	f000 fa59 	bl	8000f4c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a9a:	f000 faa5 	bl	8000fe8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3);
 8000a9e:	4853      	ldr	r0, [pc, #332]	; (8000bec <main+0x17c>)
 8000aa0:	f002 feac 	bl	80037fc <RetargetInit>

  printf("POPUP Robot Main Controller V0.1\n\n");
 8000aa4:	4852      	ldr	r0, [pc, #328]	; (8000bf0 <main+0x180>)
 8000aa6:	f00c fea3 	bl	800d7f0 <puts>


  printf("CAN Register Configuring... \n");
 8000aaa:	4852      	ldr	r0, [pc, #328]	; (8000bf4 <main+0x184>)
 8000aac:	f00c fea0 	bl	800d7f0 <puts>

   CAN_RxFilter_Config();
 8000ab0:	f000 fc44 	bl	800133c <CAN_RxFilter_Config>
   CAN_TxHeader_Config();
 8000ab4:	f000 fc62 	bl	800137c <CAN_TxHeader_Config>

   if (   (HAL_FDCAN_Start(& hfdcan1)) == HAL_OK)   // l'ultimo argomento non ci interessa se usiamo la FIFO
 8000ab8:	484f      	ldr	r0, [pc, #316]	; (8000bf8 <main+0x188>)
 8000aba:	f005 f905 	bl	8005cc8 <HAL_FDCAN_Start>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d103      	bne.n	8000acc <main+0x5c>
 	  printf("CAN PHY started\n");
 8000ac4:	484d      	ldr	r0, [pc, #308]	; (8000bfc <main+0x18c>)
 8000ac6:	f00c fe93 	bl	800d7f0 <puts>
 8000aca:	e002      	b.n	8000ad2 <main+0x62>
   else {
	  printf("CAN PHY initialization error\n");
 8000acc:	484c      	ldr	r0, [pc, #304]	; (8000c00 <main+0x190>)
 8000ace:	f00c fe8f 	bl	800d7f0 <puts>
	  //while(1);

   }
   //HAL_FDCAN_ConfigInterruptLines(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, FDCAN_INTERRUPT_LINE0);
   if ( HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) == HAL_OK)   // l'ultimo argomento non ci interessa se usiamo la FIFO
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	4848      	ldr	r0, [pc, #288]	; (8000bf8 <main+0x188>)
 8000ad8:	f005 faea 	bl	80060b0 <HAL_FDCAN_ActivateNotification>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d102      	bne.n	8000ae8 <main+0x78>
 	  printf("CAN Configuring: DONE\n\n\n");
 8000ae2:	4848      	ldr	r0, [pc, #288]	; (8000c04 <main+0x194>)
 8000ae4:	f00c fe84 	bl	800d7f0 <puts>
   ////////////////////////////////////////////////////
   //assign controllers parameter


	//joint 2 position PID controller gain
	 pos_KP[1] = 5;
 8000ae8:	4b47      	ldr	r3, [pc, #284]	; (8000c08 <main+0x198>)
 8000aea:	4a48      	ldr	r2, [pc, #288]	; (8000c0c <main+0x19c>)
 8000aec:	605a      	str	r2, [r3, #4]
	 pos_KI[1] = 0.0;
 8000aee:	4b48      	ldr	r3, [pc, #288]	; (8000c10 <main+0x1a0>)
 8000af0:	f04f 0200 	mov.w	r2, #0
 8000af4:	605a      	str	r2, [r3, #4]
	 pos_KD[1] = 0;
 8000af6:	4b47      	ldr	r3, [pc, #284]	; (8000c14 <main+0x1a4>)
 8000af8:	f04f 0200 	mov.w	r2, #0
 8000afc:	605a      	str	r2, [r3, #4]
	//joint 2 speed PID controller gain
	 speed_KP[1] = 15;
 8000afe:	4b46      	ldr	r3, [pc, #280]	; (8000c18 <main+0x1a8>)
 8000b00:	4a46      	ldr	r2, [pc, #280]	; (8000c1c <main+0x1ac>)
 8000b02:	605a      	str	r2, [r3, #4]
	 speed_KI[1] = 0;
 8000b04:	4b46      	ldr	r3, [pc, #280]	; (8000c20 <main+0x1b0>)
 8000b06:	f04f 0200 	mov.w	r2, #0
 8000b0a:	605a      	str	r2, [r3, #4]
	 speed_KD[1] = 1;
 8000b0c:	4b45      	ldr	r3, [pc, #276]	; (8000c24 <main+0x1b4>)
 8000b0e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000b12:	605a      	str	r2, [r3, #4]


	//joint 3 position PID controller gain
	 pos_KP[2] = 5;
 8000b14:	4b3c      	ldr	r3, [pc, #240]	; (8000c08 <main+0x198>)
 8000b16:	4a3d      	ldr	r2, [pc, #244]	; (8000c0c <main+0x19c>)
 8000b18:	609a      	str	r2, [r3, #8]
	 pos_KI[2] = 0;
 8000b1a:	4b3d      	ldr	r3, [pc, #244]	; (8000c10 <main+0x1a0>)
 8000b1c:	f04f 0200 	mov.w	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
	 pos_KD[2] = 0;
 8000b22:	4b3c      	ldr	r3, [pc, #240]	; (8000c14 <main+0x1a4>)
 8000b24:	f04f 0200 	mov.w	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]

	//joint 3 speed PID controller gain
	 speed_KP[2] = 15;
 8000b2a:	4b3b      	ldr	r3, [pc, #236]	; (8000c18 <main+0x1a8>)
 8000b2c:	4a3b      	ldr	r2, [pc, #236]	; (8000c1c <main+0x1ac>)
 8000b2e:	609a      	str	r2, [r3, #8]
	 speed_KI[2] = 0;
 8000b30:	4b3b      	ldr	r3, [pc, #236]	; (8000c20 <main+0x1b0>)
 8000b32:	f04f 0200 	mov.w	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
	 speed_KD[2] = 1;
 8000b38:	4b3a      	ldr	r3, [pc, #232]	; (8000c24 <main+0x1b4>)
 8000b3a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000b3e:	609a      	str	r2, [r3, #8]

	/////////////////////////////////////
  //veryfy system status (link + sensors)
	POPUP_system_check();
 8000b40:	f002 fb98 	bl	8003274 <POPUP_system_check>
 //send calibration command to link boards
	POPUP_calibrate_link_sensors(11);
 8000b44:	200b      	movs	r0, #11
 8000b46:	f002 fd0f 	bl	8003568 <POPUP_calibrate_link_sensors>

  //activate motors
	POPUP_activate_motors();
 8000b4a:	f002 fc45 	bl	80033d8 <POPUP_activate_motors>


	printf("\nSystem Initialized\n\n");
 8000b4e:	4836      	ldr	r0, [pc, #216]	; (8000c28 <main+0x1b8>)
 8000b50:	f00c fe4e 	bl	800d7f0 <puts>

	HAL_Delay(1000);
 8000b54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b58:	f003 fb92 	bl	8004280 <HAL_Delay>

	printf("\Starting Homing Procedure\n");
 8000b5c:	4833      	ldr	r0, [pc, #204]	; (8000c2c <main+0x1bc>)
 8000b5e:	f00c fe47 	bl	800d7f0 <puts>

  //start controllers
  //homing
	 //POPUP_
	POPUP_homing();
 8000b62:	f002 fc63 	bl	800342c <POPUP_homing>
  //start loop


  //start controllers
  POPUP_start_controllers();
 8000b66:	f002 fc53 	bl	8003410 <POPUP_start_controllers>

  //start planned movement
  POPUP_start_plan();
 8000b6a:	f002 f965 	bl	8002e38 <POPUP_start_plan>


  //start print telemetry (received from simulink)
  TELEMETRY = 1;
 8000b6e:	4b30      	ldr	r3, [pc, #192]	; (8000c30 <main+0x1c0>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	 if(flag_pos_controller  == 1)
 8000b74:	4b2f      	ldr	r3, [pc, #188]	; (8000c34 <main+0x1c4>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d101      	bne.n	8000b80 <main+0x110>
		 PositionController();
 8000b7c:	f002 f970 	bl	8002e60 <PositionController>

	if(flag_speed_controller == 1) {
 8000b80:	4b2d      	ldr	r3, [pc, #180]	; (8000c38 <main+0x1c8>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d1f5      	bne.n	8000b74 <main+0x104>

		SpeedController();
 8000b88:	f002 fa60 	bl	800304c <SpeedController>

	  	CAN_TX_vesc_speed(-Joint_speed_target_planned[0]);
 8000b8c:	4b2b      	ldr	r3, [pc, #172]	; (8000c3c <main+0x1cc>)
 8000b8e:	edd3 7a00 	vldr	s15, [r3]
 8000b92:	eef1 7a67 	vneg.f32	s15, s15
 8000b96:	eeb0 0a67 	vmov.f32	s0, s15
 8000b9a:	f000 fe61 	bl	8001860 <CAN_TX_vesc_speed>

	  	if(TELEMETRY)
 8000b9e:	4b24      	ldr	r3, [pc, #144]	; (8000c30 <main+0x1c0>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d010      	beq.n	8000bc8 <main+0x158>
	  		//printf("%3.2f\n",actual_horiz_bend);
	  		//printf("%1.4f,%1.4f,%1.4f,%1.4f\n",Joint_target_planned[1],actualPos[1],Joint_speed_target_planned[1],actualSpeed[1]); //joint 2 position command and feedback
	  		printf("%1.4f,%3.2f\n",actualPos[2],actual_horiz_bend); //joint 2 position command and feedback
 8000ba6:	4b26      	ldr	r3, [pc, #152]	; (8000c40 <main+0x1d0>)
 8000ba8:	edd3 7a02 	vldr	s15, [r3, #8]
 8000bac:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000bb0:	4b24      	ldr	r3, [pc, #144]	; (8000c44 <main+0x1d4>)
 8000bb2:	edd3 7a00 	vldr	s15, [r3]
 8000bb6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bba:	ed8d 7b00 	vstr	d7, [sp]
 8000bbe:	ec53 2b16 	vmov	r2, r3, d6
 8000bc2:	4821      	ldr	r0, [pc, #132]	; (8000c48 <main+0x1d8>)
 8000bc4:	f00c fd8e 	bl	800d6e4 <iprintf>


	 	if(flag_traj_compl == 1) {
 8000bc8:	4b20      	ldr	r3, [pc, #128]	; (8000c4c <main+0x1dc>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d1d1      	bne.n	8000b74 <main+0x104>
	 			//printf("\n Planned Trajectory Completed\n");
	 			flag_traj_compl = 0;
 8000bd0:	4b1e      	ldr	r3, [pc, #120]	; (8000c4c <main+0x1dc>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
	 			//TELEMETRY = 0;
	 			POPUP_stop_plan();
 8000bd6:	f002 f939 	bl	8002e4c <POPUP_stop_plan>
	 			//printf("\nInsert new cartesian target\n");
	 			input_counter = 0;
 8000bda:	4b1d      	ldr	r3, [pc, #116]	; (8000c50 <main+0x1e0>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
	 			HAL_UART_Receive_IT (&huart3, UART3_rxBuffer, 4); //enable receive interrupt on uart
 8000be0:	2204      	movs	r2, #4
 8000be2:	491c      	ldr	r1, [pc, #112]	; (8000c54 <main+0x1e4>)
 8000be4:	4801      	ldr	r0, [pc, #4]	; (8000bec <main+0x17c>)
 8000be6:	f009 fd29 	bl	800a63c <HAL_UART_Receive_IT>
	 if(flag_pos_controller  == 1)
 8000bea:	e7c3      	b.n	8000b74 <main+0x104>
 8000bec:	240003bc 	.word	0x240003bc
 8000bf0:	08011eb8 	.word	0x08011eb8
 8000bf4:	08011edc 	.word	0x08011edc
 8000bf8:	2400095c 	.word	0x2400095c
 8000bfc:	08011efc 	.word	0x08011efc
 8000c00:	08011f0c 	.word	0x08011f0c
 8000c04:	08011f2c 	.word	0x08011f2c
 8000c08:	2400085c 	.word	0x2400085c
 8000c0c:	40a00000 	.word	0x40a00000
 8000c10:	24000a08 	.word	0x24000a08
 8000c14:	24000950 	.word	0x24000950
 8000c18:	24006950 	.word	0x24006950
 8000c1c:	41700000 	.word	0x41700000
 8000c20:	240008f0 	.word	0x240008f0
 8000c24:	24000908 	.word	0x24000908
 8000c28:	08011f44 	.word	0x08011f44
 8000c2c:	08011f5c 	.word	0x08011f5c
 8000c30:	240002c8 	.word	0x240002c8
 8000c34:	240002d4 	.word	0x240002d4
 8000c38:	240002d8 	.word	0x240002d8
 8000c3c:	24000920 	.word	0x24000920
 8000c40:	240067f8 	.word	0x240067f8
 8000c44:	240002dc 	.word	0x240002dc
 8000c48:	08011f78 	.word	0x08011f78
 8000c4c:	240002d0 	.word	0x240002d0
 8000c50:	240002f4 	.word	0x240002f4
 8000c54:	240002f0 	.word	0x240002f0

08000c58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b09c      	sub	sp, #112	; 0x70
 8000c5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c62:	224c      	movs	r2, #76	; 0x4c
 8000c64:	2100      	movs	r1, #0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f00b feee 	bl	800ca48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	2220      	movs	r2, #32
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f00b fee8 	bl	800ca48 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c78:	2002      	movs	r0, #2
 8000c7a:	f006 facd 	bl	8007218 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c7e:	2300      	movs	r3, #0
 8000c80:	603b      	str	r3, [r7, #0]
 8000c82:	4b31      	ldr	r3, [pc, #196]	; (8000d48 <SystemClock_Config+0xf0>)
 8000c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c86:	4a30      	ldr	r2, [pc, #192]	; (8000d48 <SystemClock_Config+0xf0>)
 8000c88:	f023 0301 	bic.w	r3, r3, #1
 8000c8c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c8e:	4b2e      	ldr	r3, [pc, #184]	; (8000d48 <SystemClock_Config+0xf0>)
 8000c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	4b2c      	ldr	r3, [pc, #176]	; (8000d4c <SystemClock_Config+0xf4>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ca0:	4a2a      	ldr	r2, [pc, #168]	; (8000d4c <SystemClock_Config+0xf4>)
 8000ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ca6:	6193      	str	r3, [r2, #24]
 8000ca8:	4b28      	ldr	r3, [pc, #160]	; (8000d4c <SystemClock_Config+0xf4>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cb4:	bf00      	nop
 8000cb6:	4b25      	ldr	r3, [pc, #148]	; (8000d4c <SystemClock_Config+0xf4>)
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cc2:	d1f8      	bne.n	8000cb6 <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cc8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000cda:	233c      	movs	r3, #60	; 0x3c
 8000cdc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000ce2:	2308      	movs	r3, #8
 8000ce4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000cea:	230c      	movs	r3, #12
 8000cec:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f006 fad6 	bl	80072ac <HAL_RCC_OscConfig>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000d06:	f002 fd73 	bl	80037f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0a:	233f      	movs	r3, #63	; 0x3f
 8000d0c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d16:	2308      	movs	r3, #8
 8000d18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d1e:	2340      	movs	r3, #64	; 0x40
 8000d20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d26:	2300      	movs	r3, #0
 8000d28:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	2102      	movs	r1, #2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f006 fecc 	bl	8007acc <HAL_RCC_ClockConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000d3a:	f002 fd59 	bl	80037f0 <Error_Handler>
  }
}
 8000d3e:	bf00      	nop
 8000d40:	3770      	adds	r7, #112	; 0x70
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	58000400 	.word	0x58000400
 8000d4c:	58024800 	.word	0x58024800

08000d50 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000d54:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <MX_ETH_Init+0x80>)
 8000d56:	4a1f      	ldr	r2, [pc, #124]	; (8000dd4 <MX_ETH_Init+0x84>)
 8000d58:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000d5a:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <MX_ETH_Init+0x88>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000d60:	4b1d      	ldr	r3, [pc, #116]	; (8000dd8 <MX_ETH_Init+0x88>)
 8000d62:	2280      	movs	r2, #128	; 0x80
 8000d64:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000d66:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <MX_ETH_Init+0x88>)
 8000d68:	22e1      	movs	r2, #225	; 0xe1
 8000d6a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <MX_ETH_Init+0x88>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000d72:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <MX_ETH_Init+0x88>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000d78:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <MX_ETH_Init+0x88>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000d7e:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <MX_ETH_Init+0x80>)
 8000d80:	4a15      	ldr	r2, [pc, #84]	; (8000dd8 <MX_ETH_Init+0x88>)
 8000d82:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <MX_ETH_Init+0x80>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000d8a:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <MX_ETH_Init+0x80>)
 8000d8c:	4a13      	ldr	r2, [pc, #76]	; (8000ddc <MX_ETH_Init+0x8c>)
 8000d8e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <MX_ETH_Init+0x80>)
 8000d92:	4a13      	ldr	r2, [pc, #76]	; (8000de0 <MX_ETH_Init+0x90>)
 8000d94:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <MX_ETH_Init+0x80>)
 8000d98:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000d9c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000d9e:	480c      	ldr	r0, [pc, #48]	; (8000dd0 <MX_ETH_Init+0x80>)
 8000da0:	f004 f924 	bl	8004fec <HAL_ETH_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000daa:	f002 fd21 	bl	80037f0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000dae:	2234      	movs	r2, #52	; 0x34
 8000db0:	2100      	movs	r1, #0
 8000db2:	480c      	ldr	r0, [pc, #48]	; (8000de4 <MX_ETH_Init+0x94>)
 8000db4:	f00b fe48 	bl	800ca48 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000db8:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <MX_ETH_Init+0x94>)
 8000dba:	2221      	movs	r2, #33	; 0x21
 8000dbc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <MX_ETH_Init+0x94>)
 8000dc0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000dc4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000dc6:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <MX_ETH_Init+0x94>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	24006894 	.word	0x24006894
 8000dd4:	40028000 	.word	0x40028000
 8000dd8:	24000304 	.word	0x24000304
 8000ddc:	24000248 	.word	0x24000248
 8000de0:	240001e8 	.word	0x240001e8
 8000de4:	2400691c 	.word	0x2400691c

08000de8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000dec:	4b2e      	ldr	r3, [pc, #184]	; (8000ea8 <MX_FDCAN1_Init+0xc0>)
 8000dee:	4a2f      	ldr	r2, [pc, #188]	; (8000eac <MX_FDCAN1_Init+0xc4>)
 8000df0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000df2:	4b2d      	ldr	r3, [pc, #180]	; (8000ea8 <MX_FDCAN1_Init+0xc0>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000df8:	4b2b      	ldr	r3, [pc, #172]	; (8000ea8 <MX_FDCAN1_Init+0xc0>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000dfe:	4b2a      	ldr	r3, [pc, #168]	; (8000ea8 <MX_FDCAN1_Init+0xc0>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000e04:	4b28      	ldr	r3, [pc, #160]	; (8000ea8 <MX_FDCAN1_Init+0xc0>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000e0a:	4b27      	ldr	r3, [pc, #156]	; (8000ea8 <MX_FDCAN1_Init+0xc0>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 8000e10:	4b25      	ldr	r3, [pc, #148]	; (8000ea8 <MX_FDCAN1_Init+0xc0>)
 8000e12:	2204      	movs	r2, #4
 8000e14:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000e16:	4b24      	ldr	r3, [pc, #144]	; (8000ea8 <MX_FDCAN1_Init+0xc0>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 12;
 8000e1c:	4b22      	ldr	r3, [pc, #136]	; (8000ea8 <MX_FDCAN1_Init+0xc0>)
 8000e1e:	220c      	movs	r2, #12
 8000e20:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000e22:	4b21      	ldr	r3, [pc, #132]	; (8000ea8 <MX_FDCAN1_Init+0xc0>)
 8000e24:	2202      	movs	r2, #2
 8000e26:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000e28:	4b1f      	ldr	r3, [pc, #124]	; (8000ea8 <MX_FDCAN1_Init+0xc0>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ea8 <MX_FDCAN1_Init+0xc0>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000e34:	4b1c      	ldr	r3, [pc, #112]	; (8000ea8 <MX_FDCAN1_Init+0xc0>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000e3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ea8 <MX_FDCAN1_Init+0xc0>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000e40:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <MX_FDCAN1_Init+0xc0>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000e46:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <MX_FDCAN1_Init+0xc0>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000e4c:	4b16      	ldr	r3, [pc, #88]	; (8000ea8 <MX_FDCAN1_Init+0xc0>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <MX_FDCAN1_Init+0xc0>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e58:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <MX_FDCAN1_Init+0xc0>)
 8000e5a:	2204      	movs	r2, #4
 8000e5c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 1;
 8000e5e:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <MX_FDCAN1_Init+0xc0>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e64:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <MX_FDCAN1_Init+0xc0>)
 8000e66:	2204      	movs	r2, #4
 8000e68:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <MX_FDCAN1_Init+0xc0>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e70:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <MX_FDCAN1_Init+0xc0>)
 8000e72:	2204      	movs	r2, #4
 8000e74:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000e76:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <MX_FDCAN1_Init+0xc0>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000e7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <MX_FDCAN1_Init+0xc0>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000e82:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <MX_FDCAN1_Init+0xc0>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e88:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <MX_FDCAN1_Init+0xc0>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <MX_FDCAN1_Init+0xc0>)
 8000e90:	2204      	movs	r2, #4
 8000e92:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000e94:	4804      	ldr	r0, [pc, #16]	; (8000ea8 <MX_FDCAN1_Init+0xc0>)
 8000e96:	f004 fcbf 	bl	8005818 <HAL_FDCAN_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000ea0:	f002 fca6 	bl	80037f0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	2400095c 	.word	0x2400095c
 8000eac:	4000a000 	.word	0x4000a000

08000eb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eb6:	f107 0310 	add.w	r3, r7, #16
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ece:	4b1e      	ldr	r3, [pc, #120]	; (8000f48 <MX_TIM2_Init+0x98>)
 8000ed0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ed4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 120 - 1;
 8000ed6:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <MX_TIM2_Init+0x98>)
 8000ed8:	2277      	movs	r2, #119	; 0x77
 8000eda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000edc:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <MX_TIM2_Init+0x98>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000 - 1;
 8000ee2:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <MX_TIM2_Init+0x98>)
 8000ee4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ee8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eea:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <MX_TIM2_Init+0x98>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef0:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <MX_TIM2_Init+0x98>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ef6:	4814      	ldr	r0, [pc, #80]	; (8000f48 <MX_TIM2_Init+0x98>)
 8000ef8:	f008 fcd6 	bl	80098a8 <HAL_TIM_Base_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f02:	f002 fc75 	bl	80037f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f0c:	f107 0310 	add.w	r3, r7, #16
 8000f10:	4619      	mov	r1, r3
 8000f12:	480d      	ldr	r0, [pc, #52]	; (8000f48 <MX_TIM2_Init+0x98>)
 8000f14:	f008 fede 	bl	8009cd4 <HAL_TIM_ConfigClockSource>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f1e:	f002 fc67 	bl	80037f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f22:	2300      	movs	r3, #0
 8000f24:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4806      	ldr	r0, [pc, #24]	; (8000f48 <MX_TIM2_Init+0x98>)
 8000f30:	f009 f924 	bl	800a17c <HAL_TIMEx_MasterConfigSynchronization>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f3a:	f002 fc59 	bl	80037f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f3e:	bf00      	nop
 8000f40:	3720      	adds	r7, #32
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	24006804 	.word	0x24006804

08000f4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f52:	f107 0310 	add.w	r3, r7, #16
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f6a:	4b1d      	ldr	r3, [pc, #116]	; (8000fe0 <MX_TIM3_Init+0x94>)
 8000f6c:	4a1d      	ldr	r2, [pc, #116]	; (8000fe4 <MX_TIM3_Init+0x98>)
 8000f6e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 120 - 1;
 8000f70:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <MX_TIM3_Init+0x94>)
 8000f72:	2277      	movs	r2, #119	; 0x77
 8000f74:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f76:	4b1a      	ldr	r3, [pc, #104]	; (8000fe0 <MX_TIM3_Init+0x94>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000 - 1;
 8000f7c:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <MX_TIM3_Init+0x94>)
 8000f7e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f82:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f84:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <MX_TIM3_Init+0x94>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f8a:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <MX_TIM3_Init+0x94>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f90:	4813      	ldr	r0, [pc, #76]	; (8000fe0 <MX_TIM3_Init+0x94>)
 8000f92:	f008 fc89 	bl	80098a8 <HAL_TIM_Base_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000f9c:	f002 fc28 	bl	80037f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fa6:	f107 0310 	add.w	r3, r7, #16
 8000faa:	4619      	mov	r1, r3
 8000fac:	480c      	ldr	r0, [pc, #48]	; (8000fe0 <MX_TIM3_Init+0x94>)
 8000fae:	f008 fe91 	bl	8009cd4 <HAL_TIM_ConfigClockSource>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000fb8:	f002 fc1a 	bl	80037f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_TIM3_Init+0x94>)
 8000fca:	f009 f8d7 	bl	800a17c <HAL_TIMEx_MasterConfigSynchronization>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000fd4:	f002 fc0c 	bl	80037f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fd8:	bf00      	nop
 8000fda:	3720      	adds	r7, #32
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	240008a4 	.word	0x240008a4
 8000fe4:	40000400 	.word	0x40000400

08000fe8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fee:	f107 0310 	add.w	r3, r7, #16
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001006:	4b1e      	ldr	r3, [pc, #120]	; (8001080 <MX_TIM4_Init+0x98>)
 8001008:	4a1e      	ldr	r2, [pc, #120]	; (8001084 <MX_TIM4_Init+0x9c>)
 800100a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1200 - 1;
 800100c:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <MX_TIM4_Init+0x98>)
 800100e:	f240 42af 	movw	r2, #1199	; 0x4af
 8001012:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001014:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <MX_TIM4_Init+0x98>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000 - 1;
 800101a:	4b19      	ldr	r3, [pc, #100]	; (8001080 <MX_TIM4_Init+0x98>)
 800101c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001020:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001022:	4b17      	ldr	r3, [pc, #92]	; (8001080 <MX_TIM4_Init+0x98>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001028:	4b15      	ldr	r3, [pc, #84]	; (8001080 <MX_TIM4_Init+0x98>)
 800102a:	2200      	movs	r2, #0
 800102c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800102e:	4814      	ldr	r0, [pc, #80]	; (8001080 <MX_TIM4_Init+0x98>)
 8001030:	f008 fc3a 	bl	80098a8 <HAL_TIM_Base_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800103a:	f002 fbd9 	bl	80037f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800103e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001042:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001044:	f107 0310 	add.w	r3, r7, #16
 8001048:	4619      	mov	r1, r3
 800104a:	480d      	ldr	r0, [pc, #52]	; (8001080 <MX_TIM4_Init+0x98>)
 800104c:	f008 fe42 	bl	8009cd4 <HAL_TIM_ConfigClockSource>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001056:	f002 fbcb 	bl	80037f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	4619      	mov	r1, r3
 8001066:	4806      	ldr	r0, [pc, #24]	; (8001080 <MX_TIM4_Init+0x98>)
 8001068:	f009 f888 	bl	800a17c <HAL_TIMEx_MasterConfigSynchronization>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001072:	f002 fbbd 	bl	80037f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	3720      	adds	r7, #32
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	24000364 	.word	0x24000364
 8001084:	40000800 	.word	0x40000800

08001088 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800108c:	4b22      	ldr	r3, [pc, #136]	; (8001118 <MX_USART3_UART_Init+0x90>)
 800108e:	4a23      	ldr	r2, [pc, #140]	; (800111c <MX_USART3_UART_Init+0x94>)
 8001090:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001092:	4b21      	ldr	r3, [pc, #132]	; (8001118 <MX_USART3_UART_Init+0x90>)
 8001094:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001098:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800109a:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <MX_USART3_UART_Init+0x90>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010a0:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <MX_USART3_UART_Init+0x90>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010a6:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <MX_USART3_UART_Init+0x90>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010ac:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <MX_USART3_UART_Init+0x90>)
 80010ae:	220c      	movs	r2, #12
 80010b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b2:	4b19      	ldr	r3, [pc, #100]	; (8001118 <MX_USART3_UART_Init+0x90>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b8:	4b17      	ldr	r3, [pc, #92]	; (8001118 <MX_USART3_UART_Init+0x90>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010be:	4b16      	ldr	r3, [pc, #88]	; (8001118 <MX_USART3_UART_Init+0x90>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010c4:	4b14      	ldr	r3, [pc, #80]	; (8001118 <MX_USART3_UART_Init+0x90>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ca:	4b13      	ldr	r3, [pc, #76]	; (8001118 <MX_USART3_UART_Init+0x90>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010d0:	4811      	ldr	r0, [pc, #68]	; (8001118 <MX_USART3_UART_Init+0x90>)
 80010d2:	f009 f8f9 	bl	800a2c8 <HAL_UART_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80010dc:	f002 fb88 	bl	80037f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010e0:	2100      	movs	r1, #0
 80010e2:	480d      	ldr	r0, [pc, #52]	; (8001118 <MX_USART3_UART_Init+0x90>)
 80010e4:	f00b f8eb 	bl	800c2be <HAL_UARTEx_SetTxFifoThreshold>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80010ee:	f002 fb7f 	bl	80037f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010f2:	2100      	movs	r1, #0
 80010f4:	4808      	ldr	r0, [pc, #32]	; (8001118 <MX_USART3_UART_Init+0x90>)
 80010f6:	f00b f920 	bl	800c33a <HAL_UARTEx_SetRxFifoThreshold>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001100:	f002 fb76 	bl	80037f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001104:	4804      	ldr	r0, [pc, #16]	; (8001118 <MX_USART3_UART_Init+0x90>)
 8001106:	f00b f8a1 	bl	800c24c <HAL_UARTEx_DisableFifoMode>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001110:	f002 fb6e 	bl	80037f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	240003bc 	.word	0x240003bc
 800111c:	40004800 	.word	0x40004800

08001120 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001124:	4b15      	ldr	r3, [pc, #84]	; (800117c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001126:	4a16      	ldr	r2, [pc, #88]	; (8001180 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001128:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800112c:	2209      	movs	r2, #9
 800112e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001132:	2202      	movs	r2, #2
 8001134:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800113e:	2202      	movs	r2, #2
 8001140:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001144:	2201      	movs	r2, #1
 8001146:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800114a:	2200      	movs	r2, #0
 800114c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800114e:	4b0b      	ldr	r3, [pc, #44]	; (800117c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001150:	2200      	movs	r2, #0
 8001152:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001154:	4b09      	ldr	r3, [pc, #36]	; (800117c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001156:	2201      	movs	r2, #1
 8001158:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800115c:	2201      	movs	r2, #1
 800115e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001162:	2200      	movs	r2, #0
 8001164:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001166:	4805      	ldr	r0, [pc, #20]	; (800117c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001168:	f005 ff0d 	bl	8006f86 <HAL_PCD_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001172:	f002 fb3d 	bl	80037f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	24000454 	.word	0x24000454
 8001180:	40080000 	.word	0x40080000

08001184 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08c      	sub	sp, #48	; 0x30
 8001188:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118a:	f107 031c 	add.w	r3, r7, #28
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
 8001198:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119a:	4b61      	ldr	r3, [pc, #388]	; (8001320 <MX_GPIO_Init+0x19c>)
 800119c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a0:	4a5f      	ldr	r2, [pc, #380]	; (8001320 <MX_GPIO_Init+0x19c>)
 80011a2:	f043 0304 	orr.w	r3, r3, #4
 80011a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011aa:	4b5d      	ldr	r3, [pc, #372]	; (8001320 <MX_GPIO_Init+0x19c>)
 80011ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b0:	f003 0304 	and.w	r3, r3, #4
 80011b4:	61bb      	str	r3, [r7, #24]
 80011b6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011b8:	4b59      	ldr	r3, [pc, #356]	; (8001320 <MX_GPIO_Init+0x19c>)
 80011ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011be:	4a58      	ldr	r2, [pc, #352]	; (8001320 <MX_GPIO_Init+0x19c>)
 80011c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011c8:	4b55      	ldr	r3, [pc, #340]	; (8001320 <MX_GPIO_Init+0x19c>)
 80011ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	4b52      	ldr	r3, [pc, #328]	; (8001320 <MX_GPIO_Init+0x19c>)
 80011d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011dc:	4a50      	ldr	r2, [pc, #320]	; (8001320 <MX_GPIO_Init+0x19c>)
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011e6:	4b4e      	ldr	r3, [pc, #312]	; (8001320 <MX_GPIO_Init+0x19c>)
 80011e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f4:	4b4a      	ldr	r3, [pc, #296]	; (8001320 <MX_GPIO_Init+0x19c>)
 80011f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011fa:	4a49      	ldr	r2, [pc, #292]	; (8001320 <MX_GPIO_Init+0x19c>)
 80011fc:	f043 0302 	orr.w	r3, r3, #2
 8001200:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001204:	4b46      	ldr	r3, [pc, #280]	; (8001320 <MX_GPIO_Init+0x19c>)
 8001206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001212:	4b43      	ldr	r3, [pc, #268]	; (8001320 <MX_GPIO_Init+0x19c>)
 8001214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001218:	4a41      	ldr	r2, [pc, #260]	; (8001320 <MX_GPIO_Init+0x19c>)
 800121a:	f043 0308 	orr.w	r3, r3, #8
 800121e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001222:	4b3f      	ldr	r3, [pc, #252]	; (8001320 <MX_GPIO_Init+0x19c>)
 8001224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001228:	f003 0308 	and.w	r3, r3, #8
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001230:	4b3b      	ldr	r3, [pc, #236]	; (8001320 <MX_GPIO_Init+0x19c>)
 8001232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001236:	4a3a      	ldr	r2, [pc, #232]	; (8001320 <MX_GPIO_Init+0x19c>)
 8001238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800123c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001240:	4b37      	ldr	r3, [pc, #220]	; (8001320 <MX_GPIO_Init+0x19c>)
 8001242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800124e:	4b34      	ldr	r3, [pc, #208]	; (8001320 <MX_GPIO_Init+0x19c>)
 8001250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001254:	4a32      	ldr	r2, [pc, #200]	; (8001320 <MX_GPIO_Init+0x19c>)
 8001256:	f043 0310 	orr.w	r3, r3, #16
 800125a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800125e:	4b30      	ldr	r3, [pc, #192]	; (8001320 <MX_GPIO_Init+0x19c>)
 8001260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001264:	f003 0310 	and.w	r3, r3, #16
 8001268:	603b      	str	r3, [r7, #0]
 800126a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	f244 0101 	movw	r1, #16385	; 0x4001
 8001272:	482c      	ldr	r0, [pc, #176]	; (8001324 <MX_GPIO_Init+0x1a0>)
 8001274:	f005 fe54 	bl	8006f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800127e:	482a      	ldr	r0, [pc, #168]	; (8001328 <MX_GPIO_Init+0x1a4>)
 8001280:	f005 fe4e 	bl	8006f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001284:	2200      	movs	r2, #0
 8001286:	2102      	movs	r1, #2
 8001288:	4828      	ldr	r0, [pc, #160]	; (800132c <MX_GPIO_Init+0x1a8>)
 800128a:	f005 fe49 	bl	8006f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800128e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001292:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001294:	2300      	movs	r3, #0
 8001296:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800129c:	f107 031c 	add.w	r3, r7, #28
 80012a0:	4619      	mov	r1, r3
 80012a2:	4823      	ldr	r0, [pc, #140]	; (8001330 <MX_GPIO_Init+0x1ac>)
 80012a4:	f005 fc8c 	bl	8006bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80012a8:	f244 0301 	movw	r3, #16385	; 0x4001
 80012ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ae:	2301      	movs	r3, #1
 80012b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ba:	f107 031c 	add.w	r3, r7, #28
 80012be:	4619      	mov	r1, r3
 80012c0:	4818      	ldr	r0, [pc, #96]	; (8001324 <MX_GPIO_Init+0x1a0>)
 80012c2:	f005 fc7d 	bl	8006bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80012c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80012d8:	f107 031c 	add.w	r3, r7, #28
 80012dc:	4619      	mov	r1, r3
 80012de:	4812      	ldr	r0, [pc, #72]	; (8001328 <MX_GPIO_Init+0x1a4>)
 80012e0:	f005 fc6e 	bl	8006bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80012e4:	2380      	movs	r3, #128	; 0x80
 80012e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <MX_GPIO_Init+0x1b0>)
 80012ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80012f0:	f107 031c 	add.w	r3, r7, #28
 80012f4:	4619      	mov	r1, r3
 80012f6:	4810      	ldr	r0, [pc, #64]	; (8001338 <MX_GPIO_Init+0x1b4>)
 80012f8:	f005 fc62 	bl	8006bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012fc:	2302      	movs	r3, #2
 80012fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001300:	2301      	movs	r3, #1
 8001302:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001308:	2300      	movs	r3, #0
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	4619      	mov	r1, r3
 8001312:	4806      	ldr	r0, [pc, #24]	; (800132c <MX_GPIO_Init+0x1a8>)
 8001314:	f005 fc54 	bl	8006bc0 <HAL_GPIO_Init>

}
 8001318:	bf00      	nop
 800131a:	3730      	adds	r7, #48	; 0x30
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	58024400 	.word	0x58024400
 8001324:	58020400 	.word	0x58020400
 8001328:	58020c00 	.word	0x58020c00
 800132c:	58021000 	.word	0x58021000
 8001330:	58020800 	.word	0x58020800
 8001334:	11110000 	.word	0x11110000
 8001338:	58021800 	.word	0x58021800

0800133c <CAN_RxFilter_Config>:

/* USER CODE BEGIN 4 */
void CAN_RxFilter_Config(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  sFilterConfig.FilterIndex = 0;
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <CAN_RxFilter_Config+0x38>)
 8001342:	2200      	movs	r2, #0
 8001344:	605a      	str	r2, [r3, #4]
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8001346:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <CAN_RxFilter_Config+0x38>)
 8001348:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800134c:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <CAN_RxFilter_Config+0x38>)
 8001350:	2202      	movs	r2, #2
 8001352:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0 ;
 8001354:	4b07      	ldr	r3, [pc, #28]	; (8001374 <CAN_RxFilter_Config+0x38>)
 8001356:	2201      	movs	r2, #1
 8001358:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterID1 = 0x00000000;
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <CAN_RxFilter_Config+0x38>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterID2 = 0x00000000;  // mask => allow id from 0x00000150 to 0x0000015F
 8001360:	4b04      	ldr	r3, [pc, #16]	; (8001374 <CAN_RxFilter_Config+0x38>)
 8001362:	2200      	movs	r2, #0
 8001364:	615a      	str	r2, [r3, #20]

  HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
 8001366:	4903      	ldr	r1, [pc, #12]	; (8001374 <CAN_RxFilter_Config+0x38>)
 8001368:	4803      	ldr	r0, [pc, #12]	; (8001378 <CAN_RxFilter_Config+0x3c>)
 800136a:	f004 fc37 	bl	8005bdc <HAL_FDCAN_ConfigFilter>

  //HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);

}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	24000318 	.word	0x24000318
 8001378:	2400095c 	.word	0x2400095c

0800137c <CAN_TxHeader_Config>:

void CAN_TxHeader_Config(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
 pTxHeader.Identifier = 0x00000140;
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <CAN_TxHeader_Config+0x4c>)
 8001382:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001386:	601a      	str	r2, [r3, #0]
 pTxHeader.IdType = FDCAN_EXTENDED_ID;                // specifies extended id
 8001388:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <CAN_TxHeader_Config+0x4c>)
 800138a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800138e:	605a      	str	r2, [r3, #4]
 pTxHeader.TxFrameType = FDCAN_DATA_FRAME ;           // frame type
 8001390:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <CAN_TxHeader_Config+0x4c>)
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
 pTxHeader.DataLength = FDCAN_DLC_BYTES_4;            // specifies frame length
 8001396:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <CAN_TxHeader_Config+0x4c>)
 8001398:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800139c:	60da      	str	r2, [r3, #12]
 pTxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800139e:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <CAN_TxHeader_Config+0x4c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
 pTxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <CAN_TxHeader_Config+0x4c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	615a      	str	r2, [r3, #20]
 pTxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <CAN_TxHeader_Config+0x4c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
 pTxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80013b0:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <CAN_TxHeader_Config+0x4c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]
 pTxHeader.MessageMarker = 0;
 80013b6:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <CAN_TxHeader_Config+0x4c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	621a      	str	r2, [r3, #32]
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	24000880 	.word	0x24000880

080013cc <HAL_FDCAN_RxFifo0Callback>:


void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]

	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d02d      	beq.n	800143c <HAL_FDCAN_RxFifo0Callback+0x70>
	{
		if (HAL_FDCAN_GetRxMessage(&hfdcan1,FDCAN_RX_FIFO0, &pRxHeader, CAN_rx_buffer) == HAL_OK) {
 80013e0:	4b18      	ldr	r3, [pc, #96]	; (8001444 <HAL_FDCAN_RxFifo0Callback+0x78>)
 80013e2:	4a19      	ldr	r2, [pc, #100]	; (8001448 <HAL_FDCAN_RxFifo0Callback+0x7c>)
 80013e4:	2140      	movs	r1, #64	; 0x40
 80013e6:	4819      	ldr	r0, [pc, #100]	; (800144c <HAL_FDCAN_RxFifo0Callback+0x80>)
 80013e8:	f004 fcf4 	bl	8005dd4 <HAL_FDCAN_GetRxMessage>
		}

	if((pRxHeader.Identifier == 0)) //feedback from motor (position, speed)
 80013ec:	4b16      	ldr	r3, [pc, #88]	; (8001448 <HAL_FDCAN_RxFifo0Callback+0x7c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d105      	bne.n	8001400 <HAL_FDCAN_RxFifo0Callback+0x34>
		      {
		unpack_motor_FB();
 80013f4:	f000 f86a 	bl	80014cc <unpack_motor_FB>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // yellow led
 80013f8:	2102      	movs	r1, #2
 80013fa:	4815      	ldr	r0, [pc, #84]	; (8001450 <HAL_FDCAN_RxFifo0Callback+0x84>)
 80013fc:	f005 fda9 	bl	8006f52 <HAL_GPIO_TogglePin>

		      }

	if((pRxHeader.Identifier == LINK_BOARD_FB_MSG_ID)) //feedback from link data board (bending estimate)
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <HAL_FDCAN_RxFifo0Callback+0x7c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b06      	cmp	r3, #6
 8001406:	d105      	bne.n	8001414 <HAL_FDCAN_RxFifo0Callback+0x48>
		      {
		unpack_link_FB();
 8001408:	f000 f8e2 	bl	80015d0 <unpack_link_FB>
		HAL_GPIO_TogglePin(GPIOB, LD1_Pin); // green led
 800140c:	2101      	movs	r1, #1
 800140e:	4811      	ldr	r0, [pc, #68]	; (8001454 <HAL_FDCAN_RxFifo0Callback+0x88>)
 8001410:	f005 fd9f 	bl	8006f52 <HAL_GPIO_TogglePin>

		      }
	if((pRxHeader.Identifier == LINK_BOARD_STATUS_MSG_ID)) //status message with id 20 (DEC)
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <HAL_FDCAN_RxFifo0Callback+0x7c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b14      	cmp	r3, #20
 800141a:	d101      	bne.n	8001420 <HAL_FDCAN_RxFifo0Callback+0x54>
		      {
		unpack_link_STATUS();
 800141c:	f000 f95a 	bl	80016d4 <unpack_link_STATUS>
		      }
	if((pRxHeader.Identifier == LINK_BOARD_CALIBRATION_CHECK_MSG_ID)) //status message with id 20 (DEC)
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <HAL_FDCAN_RxFifo0Callback+0x7c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b28      	cmp	r3, #40	; 0x28
 8001426:	d101      	bne.n	800142c <HAL_FDCAN_RxFifo0Callback+0x60>
		      {
		unpack_link_CAL_CHECK();
 8001428:	f000 f9a0 	bl	800176c <unpack_link_CAL_CHECK>
		      }
	if((pRxHeader.Identifier == 2305)) //status message from vesc
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <HAL_FDCAN_RxFifo0Callback+0x7c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f640 1201 	movw	r2, #2305	; 0x901
 8001434:	4293      	cmp	r3, r2
 8001436:	d101      	bne.n	800143c <HAL_FDCAN_RxFifo0Callback+0x70>
		      {
		unpack_vesc_FB();
 8001438:	f000 f80e 	bl	8001458 <unpack_vesc_FB>
		      }
	//    for(int i = 0; i < pRxHeader.DataLength; i++)
	//  printf("CAN_BUFF_RX[%d]: %d\n",i,CAN_rx_buffer[i]);

	}
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	2400035c 	.word	0x2400035c
 8001448:	24006858 	.word	0x24006858
 800144c:	2400095c 	.word	0x2400095c
 8001450:	58021000 	.word	0x58021000
 8001454:	58020400 	.word	0x58020400

08001458 <unpack_vesc_FB>:

void unpack_vesc_FB() {
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0

	  uint32_t rpm = ((CAN_rx_buffer[0] << 24) +(CAN_rx_buffer[1] << 16) + (CAN_rx_buffer[2] << 8) + CAN_rx_buffer[3])/14;
 800145e:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <unpack_vesc_FB+0x68>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	061a      	lsls	r2, r3, #24
 8001464:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <unpack_vesc_FB+0x68>)
 8001466:	785b      	ldrb	r3, [r3, #1]
 8001468:	041b      	lsls	r3, r3, #16
 800146a:	441a      	add	r2, r3
 800146c:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <unpack_vesc_FB+0x68>)
 800146e:	789b      	ldrb	r3, [r3, #2]
 8001470:	021b      	lsls	r3, r3, #8
 8001472:	4413      	add	r3, r2
 8001474:	4a12      	ldr	r2, [pc, #72]	; (80014c0 <unpack_vesc_FB+0x68>)
 8001476:	78d2      	ldrb	r2, [r2, #3]
 8001478:	4413      	add	r3, r2
 800147a:	4a12      	ldr	r2, [pc, #72]	; (80014c4 <unpack_vesc_FB+0x6c>)
 800147c:	fb82 1203 	smull	r1, r2, r2, r3
 8001480:	441a      	add	r2, r3
 8001482:	10d2      	asrs	r2, r2, #3
 8001484:	17db      	asrs	r3, r3, #31
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	607b      	str	r3, [r7, #4]

	  float mot1_speed = (float)(rpm/1120.0); //1120 = 14(pole-pair motor)*80 (gearbox reduction)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	ee07 3a90 	vmov	s15, r3
 8001490:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001494:	ed9f 5b08 	vldr	d5, [pc, #32]	; 80014b8 <unpack_vesc_FB+0x60>
 8001498:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800149c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014a0:	edc7 7a00 	vstr	s15, [r7]

	  actualSpeed[0] = mot1_speed;
 80014a4:	4a08      	ldr	r2, [pc, #32]	; (80014c8 <unpack_vesc_FB+0x70>)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	6013      	str	r3, [r2, #0]
	  //printf("Speed : %f rad/s \n",mot1_speed*0.10472 );

	  //printf("rpm : %d \n",rpm);

}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	00000000 	.word	0x00000000
 80014bc:	40918000 	.word	0x40918000
 80014c0:	2400035c 	.word	0x2400035c
 80014c4:	92492493 	.word	0x92492493
 80014c8:	240067e0 	.word	0x240067e0

080014cc <unpack_motor_FB>:

void unpack_motor_FB() {
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
  //if it is the first time execution for each motor i must set the status flag

  int motor_id = CAN_rx_buffer[0];
 80014d2:	4b38      	ldr	r3, [pc, #224]	; (80015b4 <unpack_motor_FB+0xe8>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	60fb      	str	r3, [r7, #12]

  int pos_int = CAN_rx_buffer[1] << 8 | CAN_rx_buffer[2];
 80014d8:	4b36      	ldr	r3, [pc, #216]	; (80015b4 <unpack_motor_FB+0xe8>)
 80014da:	785b      	ldrb	r3, [r3, #1]
 80014dc:	021b      	lsls	r3, r3, #8
 80014de:	4a35      	ldr	r2, [pc, #212]	; (80015b4 <unpack_motor_FB+0xe8>)
 80014e0:	7892      	ldrb	r2, [r2, #2]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	60bb      	str	r3, [r7, #8]

  int vel_int = CAN_rx_buffer[3] << 4 | CAN_rx_buffer[4] >> 4;
 80014e6:	4b33      	ldr	r3, [pc, #204]	; (80015b4 <unpack_motor_FB+0xe8>)
 80014e8:	78db      	ldrb	r3, [r3, #3]
 80014ea:	011b      	lsls	r3, r3, #4
 80014ec:	4a31      	ldr	r2, [pc, #196]	; (80015b4 <unpack_motor_FB+0xe8>)
 80014ee:	7912      	ldrb	r2, [r2, #4]
 80014f0:	0912      	lsrs	r2, r2, #4
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	4313      	orrs	r3, r2
 80014f6:	607b      	str	r3, [r7, #4]

  int current_int = (CAN_rx_buffer[4] & 0xF) << 8 | CAN_rx_buffer[5];
 80014f8:	4b2e      	ldr	r3, [pc, #184]	; (80015b4 <unpack_motor_FB+0xe8>)
 80014fa:	791b      	ldrb	r3, [r3, #4]
 80014fc:	021b      	lsls	r3, r3, #8
 80014fe:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001502:	4a2c      	ldr	r2, [pc, #176]	; (80015b4 <unpack_motor_FB+0xe8>)
 8001504:	7952      	ldrb	r2, [r2, #5]
 8001506:	4313      	orrs	r3, r2
 8001508:	603b      	str	r3, [r7, #0]


  actualPos[motor_id -1] = uint_to_float(pos_int, -P_MAX, P_MAX, 16);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	1e5c      	subs	r4, r3, #1
 800150e:	2110      	movs	r1, #16
 8001510:	eef2 0a09 	vmov.f32	s1, #41	; 0x41480000  12.5
 8001514:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 8001518:	68b8      	ldr	r0, [r7, #8]
 800151a:	f002 f8ef 	bl	80036fc <uint_to_float>
 800151e:	eef0 7a40 	vmov.f32	s15, s0
 8001522:	4a25      	ldr	r2, [pc, #148]	; (80015b8 <unpack_motor_FB+0xec>)
 8001524:	00a3      	lsls	r3, r4, #2
 8001526:	4413      	add	r3, r2
 8001528:	edc3 7a00 	vstr	s15, [r3]

  actualSpeed[motor_id -1] = uint_to_float(vel_int, -V_MAX, V_MAX, 12);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	1e5c      	subs	r4, r3, #1
 8001530:	210c      	movs	r1, #12
 8001532:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8001536:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f002 f8de 	bl	80036fc <uint_to_float>
 8001540:	eef0 7a40 	vmov.f32	s15, s0
 8001544:	4a1d      	ldr	r2, [pc, #116]	; (80015bc <unpack_motor_FB+0xf0>)
 8001546:	00a3      	lsls	r3, r4, #2
 8001548:	4413      	add	r3, r2
 800154a:	edc3 7a00 	vstr	s15, [r3]

  actualCurr[motor_id -1] = uint_to_float(current_int, -T_MAX , T_MAX, 12);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	1e5c      	subs	r4, r3, #1
 8001552:	210c      	movs	r1, #12
 8001554:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80015c0 <unpack_motor_FB+0xf4>
 8001558:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 80015c4 <unpack_motor_FB+0xf8>
 800155c:	6838      	ldr	r0, [r7, #0]
 800155e:	f002 f8cd 	bl	80036fc <uint_to_float>
 8001562:	eef0 7a40 	vmov.f32	s15, s0
 8001566:	4a18      	ldr	r2, [pc, #96]	; (80015c8 <unpack_motor_FB+0xfc>)
 8001568:	00a3      	lsls	r3, r4, #2
 800156a:	4413      	add	r3, r2
 800156c:	edc3 7a00 	vstr	s15, [r3]


  if(motor_id == MOTOR1 && motor_status_flag[0] == 0)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d106      	bne.n	8001584 <unpack_motor_FB+0xb8>
 8001576:	4b15      	ldr	r3, [pc, #84]	; (80015cc <unpack_motor_FB+0x100>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d102      	bne.n	8001584 <unpack_motor_FB+0xb8>
	  motor_status_flag[0] = 1;
 800157e:	4b13      	ldr	r3, [pc, #76]	; (80015cc <unpack_motor_FB+0x100>)
 8001580:	2201      	movs	r2, #1
 8001582:	601a      	str	r2, [r3, #0]

  if(motor_id == MOTOR2 && motor_status_flag[1] == 0)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2b02      	cmp	r3, #2
 8001588:	d106      	bne.n	8001598 <unpack_motor_FB+0xcc>
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <unpack_motor_FB+0x100>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d102      	bne.n	8001598 <unpack_motor_FB+0xcc>
	  motor_status_flag[1] = 1;
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <unpack_motor_FB+0x100>)
 8001594:	2201      	movs	r2, #1
 8001596:	605a      	str	r2, [r3, #4]

  if(motor_id == MOTOR3 && motor_status_flag[2] == 0)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2b03      	cmp	r3, #3
 800159c:	d106      	bne.n	80015ac <unpack_motor_FB+0xe0>
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <unpack_motor_FB+0x100>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d102      	bne.n	80015ac <unpack_motor_FB+0xe0>
	  motor_status_flag[2] = 1;
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <unpack_motor_FB+0x100>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	609a      	str	r2, [r3, #8]


  if (MOTOR_FB_DEBUG) {
    printf("CAN_ID: %2d - Pos[rad]: %8f - Vel[rad/s]: %10f - Torque[Nm]: %8f \n",motor_id,actualPos[motor_id],actualSpeed[motor_id],actualCurr[motor_id]);
  	  }
}
 80015ac:	bf00      	nop
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd90      	pop	{r4, r7, pc}
 80015b4:	2400035c 	.word	0x2400035c
 80015b8:	240067f8 	.word	0x240067f8
 80015bc:	240067e0 	.word	0x240067e0
 80015c0:	42400000 	.word	0x42400000
 80015c4:	c2400000 	.word	0xc2400000
 80015c8:	240009fc 	.word	0x240009fc
 80015cc:	24000344 	.word	0x24000344

080015d0 <unpack_link_FB>:

void unpack_link_FB() {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af04      	add	r7, sp, #16

  int link_id = CAN_rx_buffer[0];
 80015d6:	4b35      	ldr	r3, [pc, #212]	; (80016ac <unpack_link_FB+0xdc>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	60fb      	str	r3, [r7, #12]

  int bend_horiz_int = CAN_rx_buffer[1] << 8 | CAN_rx_buffer[2]; //16 bit
 80015dc:	4b33      	ldr	r3, [pc, #204]	; (80016ac <unpack_link_FB+0xdc>)
 80015de:	785b      	ldrb	r3, [r3, #1]
 80015e0:	021b      	lsls	r3, r3, #8
 80015e2:	4a32      	ldr	r2, [pc, #200]	; (80016ac <unpack_link_FB+0xdc>)
 80015e4:	7892      	ldrb	r2, [r2, #2]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	60bb      	str	r3, [r7, #8]

  int bend_vert_int = CAN_rx_buffer[3] << 8 | CAN_rx_buffer[4];
 80015ea:	4b30      	ldr	r3, [pc, #192]	; (80016ac <unpack_link_FB+0xdc>)
 80015ec:	78db      	ldrb	r3, [r3, #3]
 80015ee:	021b      	lsls	r3, r3, #8
 80015f0:	4a2e      	ldr	r2, [pc, #184]	; (80016ac <unpack_link_FB+0xdc>)
 80015f2:	7912      	ldrb	r2, [r2, #4]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	607b      	str	r3, [r7, #4]

  int pressure_int = CAN_rx_buffer[5] << 8 | CAN_rx_buffer[6];
 80015f8:	4b2c      	ldr	r3, [pc, #176]	; (80016ac <unpack_link_FB+0xdc>)
 80015fa:	795b      	ldrb	r3, [r3, #5]
 80015fc:	021b      	lsls	r3, r3, #8
 80015fe:	4a2b      	ldr	r2, [pc, #172]	; (80016ac <unpack_link_FB+0xdc>)
 8001600:	7992      	ldrb	r2, [r2, #6]
 8001602:	4313      	orrs	r3, r2
 8001604:	603b      	str	r3, [r7, #0]



actual_horiz_bend = uint_to_float(bend_horiz_int, -90, 90, 16);
 8001606:	2110      	movs	r1, #16
 8001608:	eddf 0a29 	vldr	s1, [pc, #164]	; 80016b0 <unpack_link_FB+0xe0>
 800160c:	ed9f 0a29 	vldr	s0, [pc, #164]	; 80016b4 <unpack_link_FB+0xe4>
 8001610:	68b8      	ldr	r0, [r7, #8]
 8001612:	f002 f873 	bl	80036fc <uint_to_float>
 8001616:	eef0 7a40 	vmov.f32	s15, s0
 800161a:	4b27      	ldr	r3, [pc, #156]	; (80016b8 <unpack_link_FB+0xe8>)
 800161c:	edc3 7a00 	vstr	s15, [r3]

actual_vert_bend =  uint_to_float(bend_vert_int, -90, 90, 16);
 8001620:	2110      	movs	r1, #16
 8001622:	eddf 0a23 	vldr	s1, [pc, #140]	; 80016b0 <unpack_link_FB+0xe0>
 8001626:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80016b4 <unpack_link_FB+0xe4>
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f002 f866 	bl	80036fc <uint_to_float>
 8001630:	eef0 7a40 	vmov.f32	s15, s0
 8001634:	4b21      	ldr	r3, [pc, #132]	; (80016bc <unpack_link_FB+0xec>)
 8001636:	edc3 7a00 	vstr	s15, [r3]

pressure = uint_to_float(pressure_int, 0, 2, 16);
 800163a:	2110      	movs	r1, #16
 800163c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001640:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 80016c0 <unpack_link_FB+0xf0>
 8001644:	6838      	ldr	r0, [r7, #0]
 8001646:	f002 f859 	bl	80036fc <uint_to_float>
 800164a:	eef0 7a40 	vmov.f32	s15, s0
 800164e:	4b1d      	ldr	r3, [pc, #116]	; (80016c4 <unpack_link_FB+0xf4>)
 8001650:	edc3 7a00 	vstr	s15, [r3]

link_status_flag[link_id - 10] = CAN_rx_buffer[5]; //
 8001654:	4b15      	ldr	r3, [pc, #84]	; (80016ac <unpack_link_FB+0xdc>)
 8001656:	795a      	ldrb	r2, [r3, #5]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	3b0a      	subs	r3, #10
 800165c:	4611      	mov	r1, r2
 800165e:	4a1a      	ldr	r2, [pc, #104]	; (80016c8 <unpack_link_FB+0xf8>)
 8001660:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

  if (LINK_FB_DEBUG) {
 8001664:	4b19      	ldr	r3, [pc, #100]	; (80016cc <unpack_link_FB+0xfc>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d01a      	beq.n	80016a2 <unpack_link_FB+0xd2>
    printf("%d - %2.1f - %2.1f - %f\n",link_id - 9,actual_horiz_bend,actual_vert_bend,pressure);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f1a3 0109 	sub.w	r1, r3, #9
 8001672:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <unpack_link_FB+0xe8>)
 8001674:	edd3 7a00 	vldr	s15, [r3]
 8001678:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <unpack_link_FB+0xec>)
 800167e:	edd3 7a00 	vldr	s15, [r3]
 8001682:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001686:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <unpack_link_FB+0xf4>)
 8001688:	edd3 6a00 	vldr	s13, [r3]
 800168c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001690:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001694:	ed8d 7b00 	vstr	d7, [sp]
 8001698:	ec53 2b15 	vmov	r2, r3, d5
 800169c:	480c      	ldr	r0, [pc, #48]	; (80016d0 <unpack_link_FB+0x100>)
 800169e:	f00c f821 	bl	800d6e4 <iprintf>
  }
}
 80016a2:	bf00      	nop
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	2400035c 	.word	0x2400035c
 80016b0:	42b40000 	.word	0x42b40000
 80016b4:	c2b40000 	.word	0xc2b40000
 80016b8:	240002dc 	.word	0x240002dc
 80016bc:	240002e0 	.word	0x240002e0
 80016c0:	00000000 	.word	0x00000000
 80016c4:	240002e4 	.word	0x240002e4
 80016c8:	24006880 	.word	0x24006880
 80016cc:	240002c4 	.word	0x240002c4
 80016d0:	08011f88 	.word	0x08011f88

080016d4 <unpack_link_STATUS>:

void unpack_link_STATUS() {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08a      	sub	sp, #40	; 0x28
 80016d8:	af04      	add	r7, sp, #16

	  int link_id = CAN_rx_buffer[0];
 80016da:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <unpack_link_STATUS+0x84>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	617b      	str	r3, [r7, #20]

	  int imu_status = CAN_rx_buffer[1];
 80016e0:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <unpack_link_STATUS+0x84>)
 80016e2:	785b      	ldrb	r3, [r3, #1]
 80016e4:	613b      	str	r3, [r7, #16]

	  int adc_status = CAN_rx_buffer[2];
 80016e6:	4b1c      	ldr	r3, [pc, #112]	; (8001758 <unpack_link_STATUS+0x84>)
 80016e8:	789b      	ldrb	r3, [r3, #2]
 80016ea:	60fb      	str	r3, [r7, #12]

	  int pressure_int = CAN_rx_buffer[3] << 8 | CAN_rx_buffer[4];
 80016ec:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <unpack_link_STATUS+0x84>)
 80016ee:	78db      	ldrb	r3, [r3, #3]
 80016f0:	021b      	lsls	r3, r3, #8
 80016f2:	4a19      	ldr	r2, [pc, #100]	; (8001758 <unpack_link_STATUS+0x84>)
 80016f4:	7912      	ldrb	r2, [r2, #4]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	60bb      	str	r3, [r7, #8]

	  float pressure =  uint_to_float(pressure_int, 0, 2, 16);
 80016fa:	2110      	movs	r1, #16
 80016fc:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001700:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800175c <unpack_link_STATUS+0x88>
 8001704:	68b8      	ldr	r0, [r7, #8]
 8001706:	f001 fff9 	bl	80036fc <uint_to_float>
 800170a:	ed87 0a01 	vstr	s0, [r7, #4]

	link_status_flag[link_id - 10] = imu_status*adc_status; //
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	3b0a      	subs	r3, #10
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	68f9      	ldr	r1, [r7, #12]
 8001716:	fb01 f202 	mul.w	r2, r1, r2
 800171a:	4911      	ldr	r1, [pc, #68]	; (8001760 <unpack_link_STATUS+0x8c>)
 800171c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	  if (LINK_FB_DEBUG) {
 8001720:	4b10      	ldr	r3, [pc, #64]	; (8001764 <unpack_link_STATUS+0x90>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d013      	beq.n	8001750 <unpack_link_STATUS+0x7c>
	    printf("LINK_ID: %d - Link Pressure: %1.2f - IMU_Status: %d - ADC_Status: %d - System Status: &d \n",link_id,pressure,imu_status,adc_status,link_status_flag[link_id - 10]);
 8001728:	edd7 7a01 	vldr	s15, [r7, #4]
 800172c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	3b0a      	subs	r3, #10
 8001734:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <unpack_link_STATUS+0x8c>)
 8001736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173a:	9302      	str	r3, [sp, #8]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	9301      	str	r3, [sp, #4]
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	ec53 2b17 	vmov	r2, r3, d7
 8001748:	6979      	ldr	r1, [r7, #20]
 800174a:	4807      	ldr	r0, [pc, #28]	; (8001768 <unpack_link_STATUS+0x94>)
 800174c:	f00b ffca 	bl	800d6e4 <iprintf>
	  }

}
 8001750:	bf00      	nop
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	2400035c 	.word	0x2400035c
 800175c:	00000000 	.word	0x00000000
 8001760:	24006880 	.word	0x24006880
 8001764:	240002c4 	.word	0x240002c4
 8001768:	08011fa4 	.word	0x08011fa4

0800176c <unpack_link_CAL_CHECK>:

void unpack_link_CAL_CHECK() {
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0


	  int link_id = CAN_rx_buffer[0];
 8001772:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <unpack_link_CAL_CHECK+0x44>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	607b      	str	r3, [r7, #4]

	  int cal_check = CAN_rx_buffer[1];
 8001778:	4b0d      	ldr	r3, [pc, #52]	; (80017b0 <unpack_link_CAL_CHECK+0x44>)
 800177a:	785b      	ldrb	r3, [r3, #1]
 800177c:	603b      	str	r3, [r7, #0]

	link_cal_check[link_id - 10] = cal_check; //
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3b0a      	subs	r3, #10
 8001782:	490c      	ldr	r1, [pc, #48]	; (80017b4 <unpack_link_CAL_CHECK+0x48>)
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	  if (LINK_FB_DEBUG) {
 800178a:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <unpack_link_CAL_CHECK+0x4c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d009      	beq.n	80017a6 <unpack_link_CAL_CHECK+0x3a>
	    printf("LINK_ID: %d - Calibration Status: &d \n",link_id,link_cal_check[link_id - 10]);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3b0a      	subs	r3, #10
 8001796:	4a07      	ldr	r2, [pc, #28]	; (80017b4 <unpack_link_CAL_CHECK+0x48>)
 8001798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800179c:	461a      	mov	r2, r3
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	4806      	ldr	r0, [pc, #24]	; (80017bc <unpack_link_CAL_CHECK+0x50>)
 80017a2:	f00b ff9f 	bl	800d6e4 <iprintf>
	  }

}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	2400035c 	.word	0x2400035c
 80017b4:	24006850 	.word	0x24006850
 80017b8:	240002c4 	.word	0x240002c4
 80017bc:	08012000 	.word	0x08012000

080017c0 <CAN_TX_link_board_status_check>:

void CAN_TX_link_board_status_check(int id) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	     pTxHeader.Identifier = 0x30;							  //status check message id
 80017c8:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <CAN_TX_link_board_status_check+0x44>)
 80017ca:	2230      	movs	r2, #48	; 0x30
 80017cc:	601a      	str	r2, [r3, #0]
		 pTxHeader.IdType = FDCAN_STANDARD_ID;                // specifies extended id
 80017ce:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <CAN_TX_link_board_status_check+0x44>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	605a      	str	r2, [r3, #4]
		 pTxHeader.TxFrameType = FDCAN_DATA_FRAME ;           // frame type
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <CAN_TX_link_board_status_check+0x44>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
		 pTxHeader.DataLength = FDCAN_DLC_BYTES_2;
 80017da:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <CAN_TX_link_board_status_check+0x44>)
 80017dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017e0:	60da      	str	r2, [r3, #12]

		 CAN_tx_buffer[0] = id;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <CAN_TX_link_board_status_check+0x48>)
 80017e8:	701a      	strb	r2, [r3, #0]
		 CAN_tx_buffer[1] = 1;
 80017ea:	4b07      	ldr	r3, [pc, #28]	; (8001808 <CAN_TX_link_board_status_check+0x48>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	705a      	strb	r2, [r3, #1]

 		  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &pTxHeader, CAN_tx_buffer) == HAL_OK) {
 80017f0:	4a05      	ldr	r2, [pc, #20]	; (8001808 <CAN_TX_link_board_status_check+0x48>)
 80017f2:	4904      	ldr	r1, [pc, #16]	; (8001804 <CAN_TX_link_board_status_check+0x44>)
 80017f4:	4805      	ldr	r0, [pc, #20]	; (800180c <CAN_TX_link_board_status_check+0x4c>)
 80017f6:	f004 fa92 	bl	8005d1e <HAL_FDCAN_AddMessageToTxFifoQ>
 			  //HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 		  }

}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	24000880 	.word	0x24000880
 8001808:	2400044c 	.word	0x2400044c
 800180c:	2400095c 	.word	0x2400095c

08001810 <CAN_TX_link_board_calibration>:

void CAN_TX_link_board_calibration(int id) {
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	     pTxHeader.Identifier = 0x32;							  //status check message id
 8001818:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <CAN_TX_link_board_calibration+0x44>)
 800181a:	2232      	movs	r2, #50	; 0x32
 800181c:	601a      	str	r2, [r3, #0]
		 pTxHeader.IdType = FDCAN_STANDARD_ID;                // specifies extended id
 800181e:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <CAN_TX_link_board_calibration+0x44>)
 8001820:	2200      	movs	r2, #0
 8001822:	605a      	str	r2, [r3, #4]
		 pTxHeader.TxFrameType = FDCAN_DATA_FRAME ;           // frame type
 8001824:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <CAN_TX_link_board_calibration+0x44>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
		 pTxHeader.DataLength = FDCAN_DLC_BYTES_2;
 800182a:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <CAN_TX_link_board_calibration+0x44>)
 800182c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001830:	60da      	str	r2, [r3, #12]

		 CAN_tx_buffer[0] = id;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4b08      	ldr	r3, [pc, #32]	; (8001858 <CAN_TX_link_board_calibration+0x48>)
 8001838:	701a      	strb	r2, [r3, #0]
		 CAN_tx_buffer[1] = 1;
 800183a:	4b07      	ldr	r3, [pc, #28]	; (8001858 <CAN_TX_link_board_calibration+0x48>)
 800183c:	2201      	movs	r2, #1
 800183e:	705a      	strb	r2, [r3, #1]

 		  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &pTxHeader, CAN_tx_buffer) == HAL_OK) {
 8001840:	4a05      	ldr	r2, [pc, #20]	; (8001858 <CAN_TX_link_board_calibration+0x48>)
 8001842:	4904      	ldr	r1, [pc, #16]	; (8001854 <CAN_TX_link_board_calibration+0x44>)
 8001844:	4805      	ldr	r0, [pc, #20]	; (800185c <CAN_TX_link_board_calibration+0x4c>)
 8001846:	f004 fa6a 	bl	8005d1e <HAL_FDCAN_AddMessageToTxFifoQ>
 			  //HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 		  }

}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	24000880 	.word	0x24000880
 8001858:	2400044c 	.word	0x2400044c
 800185c:	2400095c 	.word	0x2400095c

08001860 <CAN_TX_vesc_speed>:

void CAN_TX_vesc_speed(float speed) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	ed87 0a01 	vstr	s0, [r7, #4]
	//vesc id is 1

	float s = speed;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	60fb      	str	r3, [r7, #12]

	 pTxHeader.IdType = FDCAN_EXTENDED_ID;                // specifies extended id
 800186e:	4b24      	ldr	r3, [pc, #144]	; (8001900 <CAN_TX_vesc_speed+0xa0>)
 8001870:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001874:	605a      	str	r2, [r3, #4]

    pTxHeader.Identifier = 0x00000301;
 8001876:	4b22      	ldr	r3, [pc, #136]	; (8001900 <CAN_TX_vesc_speed+0xa0>)
 8001878:	f240 3201 	movw	r2, #769	; 0x301
 800187c:	601a      	str	r2, [r3, #0]
    //status check message id
	 pTxHeader.TxFrameType = FDCAN_DATA_FRAME ;           // frame type
 800187e:	4b20      	ldr	r3, [pc, #128]	; (8001900 <CAN_TX_vesc_speed+0xa0>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
	 pTxHeader.DataLength = FDCAN_DLC_BYTES_4;
 8001884:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <CAN_TX_vesc_speed+0xa0>)
 8001886:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800188a:	60da      	str	r2, [r3, #12]

	 //take speed argument (rad/s)
	 //convert to ERPM
	 int erpm =(int)((s*9.5463*21.0*80.0)); //(rad/s)*(RPM_con)*(pole-pair)*(reduction);
 800188c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001890:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001894:	ed9f 6b16 	vldr	d6, [pc, #88]	; 80018f0 <CAN_TX_vesc_speed+0x90>
 8001898:	ee27 7b06 	vmul.f64	d7, d7, d6
 800189c:	eeb3 6b05 	vmov.f64	d6, #53	; 0x41a80000  21.0
 80018a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80018a4:	ed9f 6b14 	vldr	d6, [pc, #80]	; 80018f8 <CAN_TX_vesc_speed+0x98>
 80018a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80018ac:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80018b0:	ee17 3a90 	vmov	r3, s15
 80018b4:	60bb      	str	r3, [r7, #8]


		 CAN_tx_buffer[0] = erpm >> 24;
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	161b      	asrs	r3, r3, #24
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	4b11      	ldr	r3, [pc, #68]	; (8001904 <CAN_TX_vesc_speed+0xa4>)
 80018be:	701a      	strb	r2, [r3, #0]
		 CAN_tx_buffer[1] = erpm >> 16;
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	141b      	asrs	r3, r3, #16
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <CAN_TX_vesc_speed+0xa4>)
 80018c8:	705a      	strb	r2, [r3, #1]
		 CAN_tx_buffer[2] = erpm >> 8;
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	121b      	asrs	r3, r3, #8
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <CAN_TX_vesc_speed+0xa4>)
 80018d2:	709a      	strb	r2, [r3, #2]
		 CAN_tx_buffer[3] = erpm;
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <CAN_TX_vesc_speed+0xa4>)
 80018da:	70da      	strb	r2, [r3, #3]


	 if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &pTxHeader, CAN_tx_buffer) == HAL_OK) {
 80018dc:	4a09      	ldr	r2, [pc, #36]	; (8001904 <CAN_TX_vesc_speed+0xa4>)
 80018de:	4908      	ldr	r1, [pc, #32]	; (8001900 <CAN_TX_vesc_speed+0xa0>)
 80018e0:	4809      	ldr	r0, [pc, #36]	; (8001908 <CAN_TX_vesc_speed+0xa8>)
 80018e2:	f004 fa1c 	bl	8005d1e <HAL_FDCAN_AddMessageToTxFifoQ>
		  //HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
	  }
}
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	a2339c0f 	.word	0xa2339c0f
 80018f4:	402317b4 	.word	0x402317b4
 80018f8:	00000000 	.word	0x00000000
 80018fc:	40540000 	.word	0x40540000
 8001900:	24000880 	.word	0x24000880
 8001904:	2400044c 	.word	0x2400044c
 8001908:	2400095c 	.word	0x2400095c

0800190c <ActivateMotor>:

void ActivateMotor(int id) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]

	pTxHeader.Identifier = id;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a1b      	ldr	r2, [pc, #108]	; (8001984 <ActivateMotor+0x78>)
 8001918:	6013      	str	r3, [r2, #0]
	pTxHeader.IdType = FDCAN_STANDARD_ID;                // specifies extended id
 800191a:	4b1a      	ldr	r3, [pc, #104]	; (8001984 <ActivateMotor+0x78>)
 800191c:	2200      	movs	r2, #0
 800191e:	605a      	str	r2, [r3, #4]
	 pTxHeader.TxFrameType = FDCAN_DATA_FRAME ;           // frame type
 8001920:	4b18      	ldr	r3, [pc, #96]	; (8001984 <ActivateMotor+0x78>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
	 pTxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001926:	4b17      	ldr	r3, [pc, #92]	; (8001984 <ActivateMotor+0x78>)
 8001928:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800192c:	60da      	str	r2, [r3, #12]

		  		CAN_tx_buffer[0] = 0XFF;
 800192e:	4b16      	ldr	r3, [pc, #88]	; (8001988 <ActivateMotor+0x7c>)
 8001930:	22ff      	movs	r2, #255	; 0xff
 8001932:	701a      	strb	r2, [r3, #0]
		  		CAN_tx_buffer[1] = 0XFF;
 8001934:	4b14      	ldr	r3, [pc, #80]	; (8001988 <ActivateMotor+0x7c>)
 8001936:	22ff      	movs	r2, #255	; 0xff
 8001938:	705a      	strb	r2, [r3, #1]
		  		CAN_tx_buffer[2] = 0XFF;
 800193a:	4b13      	ldr	r3, [pc, #76]	; (8001988 <ActivateMotor+0x7c>)
 800193c:	22ff      	movs	r2, #255	; 0xff
 800193e:	709a      	strb	r2, [r3, #2]
		  		CAN_tx_buffer[3] = 0XFF;
 8001940:	4b11      	ldr	r3, [pc, #68]	; (8001988 <ActivateMotor+0x7c>)
 8001942:	22ff      	movs	r2, #255	; 0xff
 8001944:	70da      	strb	r2, [r3, #3]
		  		CAN_tx_buffer[4] = 0XFF;
 8001946:	4b10      	ldr	r3, [pc, #64]	; (8001988 <ActivateMotor+0x7c>)
 8001948:	22ff      	movs	r2, #255	; 0xff
 800194a:	711a      	strb	r2, [r3, #4]
		  		CAN_tx_buffer[5] = 0XFF;
 800194c:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <ActivateMotor+0x7c>)
 800194e:	22ff      	movs	r2, #255	; 0xff
 8001950:	715a      	strb	r2, [r3, #5]
		  		CAN_tx_buffer[6] = 0XFF;
 8001952:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <ActivateMotor+0x7c>)
 8001954:	22ff      	movs	r2, #255	; 0xff
 8001956:	719a      	strb	r2, [r3, #6]
		  		CAN_tx_buffer[7] = 0XFC;
 8001958:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <ActivateMotor+0x7c>)
 800195a:	22fc      	movs	r2, #252	; 0xfc
 800195c:	71da      	strb	r2, [r3, #7]

		  		  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &pTxHeader, CAN_tx_buffer) == HAL_OK) {
 800195e:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <ActivateMotor+0x7c>)
 8001960:	4908      	ldr	r1, [pc, #32]	; (8001984 <ActivateMotor+0x78>)
 8001962:	480a      	ldr	r0, [pc, #40]	; (800198c <ActivateMotor+0x80>)
 8001964:	f004 f9db 	bl	8005d1e <HAL_FDCAN_AddMessageToTxFifoQ>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d105      	bne.n	800197a <ActivateMotor+0x6e>
		  			  //HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
		  			 printf("Motor %lu Activated \n",pTxHeader.Identifier);
 800196e:	4b05      	ldr	r3, [pc, #20]	; (8001984 <ActivateMotor+0x78>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4619      	mov	r1, r3
 8001974:	4806      	ldr	r0, [pc, #24]	; (8001990 <ActivateMotor+0x84>)
 8001976:	f00b feb5 	bl	800d6e4 <iprintf>
		  		  }
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	24000880 	.word	0x24000880
 8001988:	2400044c 	.word	0x2400044c
 800198c:	2400095c 	.word	0x2400095c
 8001990:	08012028 	.word	0x08012028

08001994 <DeactivateMotor>:

void DeactivateMotor(int id) {
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]

	pTxHeader.Identifier = id;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a16      	ldr	r2, [pc, #88]	; (80019f8 <DeactivateMotor+0x64>)
 80019a0:	6013      	str	r3, [r2, #0]
	pTxHeader.IdType = FDCAN_STANDARD_ID;                // specifies extended id
 80019a2:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <DeactivateMotor+0x64>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	605a      	str	r2, [r3, #4]
	 pTxHeader.TxFrameType = FDCAN_DATA_FRAME ;           // frame type
 80019a8:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <DeactivateMotor+0x64>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
	 pTxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80019ae:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <DeactivateMotor+0x64>)
 80019b0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80019b4:	60da      	str	r2, [r3, #12]

		  		CAN_tx_buffer[0] = 0XFF;
 80019b6:	4b11      	ldr	r3, [pc, #68]	; (80019fc <DeactivateMotor+0x68>)
 80019b8:	22ff      	movs	r2, #255	; 0xff
 80019ba:	701a      	strb	r2, [r3, #0]
		  		CAN_tx_buffer[1] = 0XFF;
 80019bc:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <DeactivateMotor+0x68>)
 80019be:	22ff      	movs	r2, #255	; 0xff
 80019c0:	705a      	strb	r2, [r3, #1]
		  		CAN_tx_buffer[2] = 0XFF;
 80019c2:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <DeactivateMotor+0x68>)
 80019c4:	22ff      	movs	r2, #255	; 0xff
 80019c6:	709a      	strb	r2, [r3, #2]
		  		CAN_tx_buffer[3] = 0XFF;
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <DeactivateMotor+0x68>)
 80019ca:	22ff      	movs	r2, #255	; 0xff
 80019cc:	70da      	strb	r2, [r3, #3]
		  		CAN_tx_buffer[4] = 0XFF;
 80019ce:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <DeactivateMotor+0x68>)
 80019d0:	22ff      	movs	r2, #255	; 0xff
 80019d2:	711a      	strb	r2, [r3, #4]
		  		CAN_tx_buffer[5] = 0XFF;
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <DeactivateMotor+0x68>)
 80019d6:	22ff      	movs	r2, #255	; 0xff
 80019d8:	715a      	strb	r2, [r3, #5]
		  		CAN_tx_buffer[6] = 0XFF;
 80019da:	4b08      	ldr	r3, [pc, #32]	; (80019fc <DeactivateMotor+0x68>)
 80019dc:	22ff      	movs	r2, #255	; 0xff
 80019de:	719a      	strb	r2, [r3, #6]
		  		CAN_tx_buffer[7] = 0XFD;
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <DeactivateMotor+0x68>)
 80019e2:	22fd      	movs	r2, #253	; 0xfd
 80019e4:	71da      	strb	r2, [r3, #7]

		  		  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &pTxHeader, CAN_tx_buffer) == HAL_OK) {
 80019e6:	4a05      	ldr	r2, [pc, #20]	; (80019fc <DeactivateMotor+0x68>)
 80019e8:	4903      	ldr	r1, [pc, #12]	; (80019f8 <DeactivateMotor+0x64>)
 80019ea:	4805      	ldr	r0, [pc, #20]	; (8001a00 <DeactivateMotor+0x6c>)
 80019ec:	f004 f997 	bl	8005d1e <HAL_FDCAN_AddMessageToTxFifoQ>
		  			  //HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
		  			  //printf("Motor %lu Activated \n",pTxHeader.Identifier);
		  		  }
}
 80019f0:	bf00      	nop
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	24000880 	.word	0x24000880
 80019fc:	2400044c 	.word	0x2400044c
 8001a00:	2400095c 	.word	0x2400095c

08001a04 <SendTorque>:

void SendTorque(int id, float u) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08c      	sub	sp, #48	; 0x30
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	ed87 0a00 	vstr	s0, [r7]

	  float p_des = 0;
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	62fb      	str	r3, [r7, #44]	; 0x2c
	  float v_des = 0;
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	62bb      	str	r3, [r7, #40]	; 0x28
	  float t_ff = u; //Consigliato copiare la variabile in una variabile locale
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24

	  float KP = 0;
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	623b      	str	r3, [r7, #32]
	  float KD = 0;
 8001a26:	f04f 0300 	mov.w	r3, #0
 8001a2a:	61fb      	str	r3, [r7, #28]

	  // Il motore vuole la posizione in 16 bit e la velocità in 12 bit
	  int p_int = float_to_uint(p_des, -P_MAX, P_MAX, 16);
 8001a2c:	2010      	movs	r0, #16
 8001a2e:	eeb2 1a09 	vmov.f32	s2, #41	; 0x41480000  12.5
 8001a32:	eefa 0a09 	vmov.f32	s1, #169	; 0xc1480000 -12.5
 8001a36:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8001a3a:	f001 fe91 	bl	8003760 <float_to_uint>
 8001a3e:	61b8      	str	r0, [r7, #24]
	  int v_int = float_to_uint(v_des, -V_MAX, V_MAX, 12);
 8001a40:	200c      	movs	r0, #12
 8001a42:	eeb1 1a08 	vmov.f32	s2, #24	; 0x40c00000  6.0
 8001a46:	eef9 0a08 	vmov.f32	s1, #152	; 0xc0c00000 -6.0
 8001a4a:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8001a4e:	f001 fe87 	bl	8003760 <float_to_uint>
 8001a52:	6178      	str	r0, [r7, #20]

	  int kp_int = float_to_uint(KP, 0, Kp_MAX, 12);
 8001a54:	200c      	movs	r0, #12
 8001a56:	ed9f 1a32 	vldr	s2, [pc, #200]	; 8001b20 <SendTorque+0x11c>
 8001a5a:	eddf 0a32 	vldr	s1, [pc, #200]	; 8001b24 <SendTorque+0x120>
 8001a5e:	ed97 0a08 	vldr	s0, [r7, #32]
 8001a62:	f001 fe7d 	bl	8003760 <float_to_uint>
 8001a66:	6138      	str	r0, [r7, #16]
	  int kd_int = float_to_uint(KD, 0, Kd_MAX, 12);
 8001a68:	200c      	movs	r0, #12
 8001a6a:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 8001b28 <SendTorque+0x124>
 8001a6e:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8001b24 <SendTorque+0x120>
 8001a72:	ed97 0a07 	vldr	s0, [r7, #28]
 8001a76:	f001 fe73 	bl	8003760 <float_to_uint>
 8001a7a:	60f8      	str	r0, [r7, #12]

	  int t_int = float_to_uint(t_ff, -T_MAX, T_MAX, 12);
 8001a7c:	200c      	movs	r0, #12
 8001a7e:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 8001b2c <SendTorque+0x128>
 8001a82:	eddf 0a2b 	vldr	s1, [pc, #172]	; 8001b30 <SendTorque+0x12c>
 8001a86:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001a8a:	f001 fe69 	bl	8003760 <float_to_uint>
 8001a8e:	60b8      	str	r0, [r7, #8]

	  pTxHeader.Identifier = id;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a28      	ldr	r2, [pc, #160]	; (8001b34 <SendTorque+0x130>)
 8001a94:	6013      	str	r3, [r2, #0]
	  // Usa il tasto declaration per controllare le varie possibilità
	  pTxHeader.IdType = FDCAN_STANDARD_ID;                // specifies id, usiamo un ID standard
 8001a96:	4b27      	ldr	r3, [pc, #156]	; (8001b34 <SendTorque+0x130>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	605a      	str	r2, [r3, #4]
	  pTxHeader.TxFrameType = FDCAN_DATA_FRAME ;           // frame type
 8001a9c:	4b25      	ldr	r3, [pc, #148]	; (8001b34 <SendTorque+0x130>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
	  pTxHeader.DataLength = FDCAN_DLC_BYTES_8;            // 8 byte
 8001aa2:	4b24      	ldr	r3, [pc, #144]	; (8001b34 <SendTorque+0x130>)
 8001aa4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001aa8:	60da      	str	r2, [r3, #12]

	  CAN_tx_buffer[0] = p_int >> 8; //pos 8H
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	121b      	asrs	r3, r3, #8
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <SendTorque+0x134>)
 8001ab2:	701a      	strb	r2, [r3, #0]
	  CAN_tx_buffer[1] = p_int & 0xFF; //pos 8L FF sono tutti elementi pari a 1
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	4b1f      	ldr	r3, [pc, #124]	; (8001b38 <SendTorque+0x134>)
 8001aba:	705a      	strb	r2, [r3, #1]
// Maschera
// Vedi datasheet motore
	  CAN_tx_buffer[2] = v_int >> 4; // speed 8H
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	111b      	asrs	r3, r3, #4
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <SendTorque+0x134>)
 8001ac4:	709a      	strb	r2, [r3, #2]
	  CAN_tx_buffer[3] = ((v_int & 0xF) << 4) | (kp_int >> 8) ; //speed 4L KP 8H
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	011b      	lsls	r3, r3, #4
 8001aca:	b25a      	sxtb	r2, r3
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	121b      	asrs	r3, r3, #8
 8001ad0:	b25b      	sxtb	r3, r3
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	b25b      	sxtb	r3, r3
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	4b17      	ldr	r3, [pc, #92]	; (8001b38 <SendTorque+0x134>)
 8001ada:	70da      	strb	r2, [r3, #3]

	  CAN_tx_buffer[4] = kp_int & 0xFF; // KP 8L
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <SendTorque+0x134>)
 8001ae2:	711a      	strb	r2, [r3, #4]

	  CAN_tx_buffer[5] = kd_int >> 4; // kd 8H
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	111b      	asrs	r3, r3, #4
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <SendTorque+0x134>)
 8001aec:	715a      	strb	r2, [r3, #5]

	  CAN_tx_buffer[6] = ((kd_int & 0xF) << 4) | (t_int >> 8) ;   // KP 4L  Torque $H
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	011b      	lsls	r3, r3, #4
 8001af2:	b25a      	sxtb	r2, r3
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	121b      	asrs	r3, r3, #8
 8001af8:	b25b      	sxtb	r3, r3
 8001afa:	4313      	orrs	r3, r2
 8001afc:	b25b      	sxtb	r3, r3
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <SendTorque+0x134>)
 8001b02:	719a      	strb	r2, [r3, #6]

	  CAN_tx_buffer[7] = t_int & 0xFF; // torque 8L
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <SendTorque+0x134>)
 8001b0a:	71da      	strb	r2, [r3, #7]


	  // La & mi serve per puntare all'indirizzo di memoria
	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &pTxHeader, CAN_tx_buffer) == HAL_OK) {
 8001b0c:	4a0a      	ldr	r2, [pc, #40]	; (8001b38 <SendTorque+0x134>)
 8001b0e:	4909      	ldr	r1, [pc, #36]	; (8001b34 <SendTorque+0x130>)
 8001b10:	480a      	ldr	r0, [pc, #40]	; (8001b3c <SendTorque+0x138>)
 8001b12:	f004 f904 	bl	8005d1e <HAL_FDCAN_AddMessageToTxFifoQ>

		  }
	  //else
	  //printf("Error sending command to Motor %d\n",id);
}
 8001b16:	bf00      	nop
 8001b18:	3730      	adds	r7, #48	; 0x30
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	43fa0000 	.word	0x43fa0000
 8001b24:	00000000 	.word	0x00000000
 8001b28:	447a0000 	.word	0x447a0000
 8001b2c:	42400000 	.word	0x42400000
 8001b30:	c2400000 	.word	0xc2400000
 8001b34:	24000880 	.word	0x24000880
 8001b38:	2400044c 	.word	0x2400044c
 8001b3c:	2400095c 	.word	0x2400095c

08001b40 <InverseKinematic>:

void InverseKinematic(float EE_target[3], int Mode)


{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b094      	sub	sp, #80	; 0x50
 8001b44:	af04      	add	r7, sp, #16
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]

  //LOCAL VARIABLE
  float X = EE_target[0];
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  float Y = EE_target[1];
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	63bb      	str	r3, [r7, #56]	; 0x38
  float Z = EE_target[2];
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	637b      	str	r3, [r7, #52]	; 0x34

  float Xsquare = pow(X, 2);
 8001b5c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001b60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b64:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001b68:	eeb0 0b47 	vmov.f64	d0, d7
 8001b6c:	f00f fc4c 	bl	8011408 <pow>
 8001b70:	eeb0 7b40 	vmov.f64	d7, d0
 8001b74:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b78:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  float Ysquare = pow(Y, 2);
 8001b7c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001b80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b84:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001b88:	eeb0 0b47 	vmov.f64	d0, d7
 8001b8c:	f00f fc3c 	bl	8011408 <pow>
 8001b90:	eeb0 7b40 	vmov.f64	d7, d0
 8001b94:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b98:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  float Zsquare = pow(Z, 2);
 8001b9c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001ba0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ba4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001ba8:	eeb0 0b47 	vmov.f64	d0, d7
 8001bac:	f00f fc2c 	bl	8011408 <pow>
 8001bb0:	eeb0 7b40 	vmov.f64	d7, d0
 8001bb4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001bb8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

  float K = sqrt(Xsquare + Ysquare - OFFsquare);
 8001bbc:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001bc0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bc8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001bcc:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8001c20 <InverseKinematic+0xe0>
 8001bd0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001bd4:	eeb0 0b47 	vmov.f64	d0, d7
 8001bd8:	f00f feda 	bl	8011990 <sqrt>
 8001bdc:	eeb0 7b40 	vmov.f64	d7, d0
 8001be0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001be4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  float Ksquare = pow(K, 2);
 8001be8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001bec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001bf0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001bf4:	eeb0 0b47 	vmov.f64	d0, d7
 8001bf8:	f00f fc06 	bl	8011408 <pow>
 8001bfc:	eeb0 7b40 	vmov.f64	d7, d0
 8001c00:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c04:	edc7 7a08 	vstr	s15, [r7, #32]
  float c3, s3_p, c1, s1,s3_m;

  if (Z < 0)
 8001c08:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001c0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c14:	d50a      	bpl.n	8001c2c <InverseKinematic+0xec>
  {
    printf("Z must be > 0\n");
 8001c16:	4804      	ldr	r0, [pc, #16]	; (8001c28 <InverseKinematic+0xe8>)
 8001c18:	f00b fdea 	bl	800d7f0 <puts>
        return;
 8001c1c:	f000 bd5c 	b.w	80026d8 <InverseKinematic+0xb98>
 8001c20:	487fcb92 	.word	0x487fcb92
 8001c24:	3f8d7dbf 	.word	0x3f8d7dbf
 8001c28:	08012040 	.word	0x08012040
  }

  //compute cosine of joint 3
  c3 = (Xsquare + Ysquare + Zsquare - L1square - L2square - OFFsquare) / (2 * L1 * L2);
 8001c2c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001c30:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001c34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c38:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001c3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c44:	ed9f 6bfa 	vldr	d6, [pc, #1000]	; 8002030 <InverseKinematic+0x4f0>
 8001c48:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c4c:	ed9f 6bfa 	vldr	d6, [pc, #1000]	; 8002038 <InverseKinematic+0x4f8>
 8001c50:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c54:	ed9f 6bfa 	vldr	d6, [pc, #1000]	; 8002040 <InverseKinematic+0x500>
 8001c58:	ee37 6b46 	vsub.f64	d6, d7, d6
 8001c5c:	ed9f 5bfa 	vldr	d5, [pc, #1000]	; 8002048 <InverseKinematic+0x508>
 8001c60:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001c64:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c68:	edc7 7a07 	vstr	s15, [r7, #28]

  if (c3 < 1 && c3 > -1)
 8001c6c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c7c:	f140 8527 	bpl.w	80026ce <InverseKinematic+0xb8e>
 8001c80:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c84:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001c88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c90:	f340 851d 	ble.w	80026ce <InverseKinematic+0xb8e>
  	  { // if requested point is part of WS

	  if (X >= 0 && Y > 0 && Mode == 1)
 8001c94:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001c98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca0:	f2c0 80eb 	blt.w	8001e7a <InverseKinematic+0x33a>
 8001ca4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001ca8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb0:	f340 80e3 	ble.w	8001e7a <InverseKinematic+0x33a>
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	f040 80df 	bne.w	8001e7a <InverseKinematic+0x33a>
	  	  {
      s3_p = sqrt(1 - pow(c3, 2));
 8001cbc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cc0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cc4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001cc8:	eeb0 0b47 	vmov.f64	d0, d7
 8001ccc:	f00f fb9c 	bl	8011408 <pow>
 8001cd0:	eeb0 7b40 	vmov.f64	d7, d0
 8001cd4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001cd8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001cdc:	eeb0 0b47 	vmov.f64	d0, d7
 8001ce0:	f00f fe56 	bl	8011990 <sqrt>
 8001ce4:	eeb0 7b40 	vmov.f64	d7, d0
 8001ce8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cec:	edc7 7a06 	vstr	s15, [r7, #24]

      Joint_target[2] = atan2(s3_p, c3);; //joint 3
 8001cf0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cf4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cf8:	edd7 6a07 	vldr	s13, [r7, #28]
 8001cfc:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001d00:	eeb0 1b46 	vmov.f64	d1, d6
 8001d04:	eeb0 0b47 	vmov.f64	d0, d7
 8001d08:	f00f fe40 	bl	801198c <atan2>
 8001d0c:	eeb0 7b40 	vmov.f64	d7, d0
 8001d10:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d14:	4bd4      	ldr	r3, [pc, #848]	; (8002068 <InverseKinematic+0x528>)
 8001d16:	edc3 7a02 	vstr	s15, [r3, #8]
      Joint_target[1] = atan2((L1 + L2 * c3) * Z + L2 * s3_p * K, -(L1 + L2 * c3) * K + L2 * s3_p * Z);
 8001d1a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d22:	ed9f 6bcb 	vldr	d6, [pc, #812]	; 8002050 <InverseKinematic+0x510>
 8001d26:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d2a:	ed9f 6bcb 	vldr	d6, [pc, #812]	; 8002058 <InverseKinematic+0x518>
 8001d2e:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001d32:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001d36:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d3a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001d3e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d42:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d46:	ed9f 5bc2 	vldr	d5, [pc, #776]	; 8002050 <InverseKinematic+0x510>
 8001d4a:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001d4e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d52:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d56:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001d5a:	ee36 4b07 	vadd.f64	d4, d6, d7
 8001d5e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d62:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d66:	ed9f 6bba 	vldr	d6, [pc, #744]	; 8002050 <InverseKinematic+0x510>
 8001d6a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d6e:	ed9f 6bba 	vldr	d6, [pc, #744]	; 8002058 <InverseKinematic+0x518>
 8001d72:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001d76:	eeb1 6b47 	vneg.f64	d6, d7
 8001d7a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d82:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001d86:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d8a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d8e:	ed9f 5bb0 	vldr	d5, [pc, #704]	; 8002050 <InverseKinematic+0x510>
 8001d92:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001d96:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001d9a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d9e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001da2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001da6:	eeb0 1b47 	vmov.f64	d1, d7
 8001daa:	eeb0 0b44 	vmov.f64	d0, d4
 8001dae:	f00f fded 	bl	801198c <atan2>
 8001db2:	eeb0 7b40 	vmov.f64	d7, d0
 8001db6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001dba:	4bab      	ldr	r3, [pc, #684]	; (8002068 <InverseKinematic+0x528>)
 8001dbc:	edc3 7a01 	vstr	s15, [r3, #4]

      c1 = (X / K + (Y * OFF) / Ksquare) / (1 + (OFFsquare) / Ksquare);
 8001dc0:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8001dc4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001dc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dcc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001dd0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001dd4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001dd8:	ed9f 5ba1 	vldr	d5, [pc, #644]	; 8002060 <InverseKinematic+0x520>
 8001ddc:	ee27 4b05 	vmul.f64	d4, d7, d5
 8001de0:	edd7 7a08 	vldr	s15, [r7, #32]
 8001de4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001de8:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001dec:	ee36 5b07 	vadd.f64	d5, d6, d7
 8001df0:	edd7 7a08 	vldr	s15, [r7, #32]
 8001df4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001df8:	ed9f 4b91 	vldr	d4, [pc, #580]	; 8002040 <InverseKinematic+0x500>
 8001dfc:	ee84 7b06 	vdiv.f64	d7, d4, d6
 8001e00:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001e04:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001e08:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001e0c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e10:	edc7 7a05 	vstr	s15, [r7, #20]
      s1 = sqrt(1 - pow(c1, 2));
 8001e14:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e1c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001e20:	eeb0 0b47 	vmov.f64	d0, d7
 8001e24:	f00f faf0 	bl	8011408 <pow>
 8001e28:	eeb0 7b40 	vmov.f64	d7, d0
 8001e2c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001e30:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001e34:	eeb0 0b47 	vmov.f64	d0, d7
 8001e38:	f00f fdaa 	bl	8011990 <sqrt>
 8001e3c:	eeb0 7b40 	vmov.f64	d7, d0
 8001e40:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e44:	edc7 7a04 	vstr	s15, [r7, #16]
      Joint_target[0] = atan2(-s1, -c1);
 8001e48:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e4c:	eef1 7a67 	vneg.f32	s15, s15
 8001e50:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e54:	edd7 6a05 	vldr	s13, [r7, #20]
 8001e58:	eef1 6a66 	vneg.f32	s13, s13
 8001e5c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001e60:	eeb0 1b46 	vmov.f64	d1, d6
 8001e64:	eeb0 0b47 	vmov.f64	d0, d7
 8001e68:	f00f fd90 	bl	801198c <atan2>
 8001e6c:	eeb0 7b40 	vmov.f64	d7, d0
 8001e70:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e74:	4b7c      	ldr	r3, [pc, #496]	; (8002068 <InverseKinematic+0x528>)
 8001e76:	edc3 7a00 	vstr	s15, [r3]
	  	  }

	  if (X >= 0 && Y > 0 && Mode == 0)
 8001e7a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001e7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e86:	f2c0 8112 	blt.w	80020ae <InverseKinematic+0x56e>
 8001e8a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001e8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e96:	f340 810a 	ble.w	80020ae <InverseKinematic+0x56e>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f040 8106 	bne.w	80020ae <InverseKinematic+0x56e>
	  	  {
      s3_p = sqrt(1 - pow(c3, 2));
 8001ea2:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ea6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001eaa:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001eae:	eeb0 0b47 	vmov.f64	d0, d7
 8001eb2:	f00f faa9 	bl	8011408 <pow>
 8001eb6:	eeb0 7b40 	vmov.f64	d7, d0
 8001eba:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001ebe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001ec2:	eeb0 0b47 	vmov.f64	d0, d7
 8001ec6:	f00f fd63 	bl	8011990 <sqrt>
 8001eca:	eeb0 7b40 	vmov.f64	d7, d0
 8001ece:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ed2:	edc7 7a06 	vstr	s15, [r7, #24]

      Joint_target[2] = atan2(-s3_p, c3); //joint 3
 8001ed6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001eda:	eef1 7a67 	vneg.f32	s15, s15
 8001ede:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ee2:	edd7 6a07 	vldr	s13, [r7, #28]
 8001ee6:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001eea:	eeb0 1b46 	vmov.f64	d1, d6
 8001eee:	eeb0 0b47 	vmov.f64	d0, d7
 8001ef2:	f00f fd4b 	bl	801198c <atan2>
 8001ef6:	eeb0 7b40 	vmov.f64	d7, d0
 8001efa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001efe:	4b5a      	ldr	r3, [pc, #360]	; (8002068 <InverseKinematic+0x528>)
 8001f00:	edc3 7a02 	vstr	s15, [r3, #8]
      Joint_target[1] = atan2((L1 + L2 * c3) * Z + L2 * -s3_p * K, -(L1 + L2 * c3) * K + L2 * -s3_p * Z);
 8001f04:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f08:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f0c:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8002050 <InverseKinematic+0x510>
 8001f10:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f14:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8002058 <InverseKinematic+0x518>
 8001f18:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001f1c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f24:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001f28:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f2c:	eef1 7a67 	vneg.f32	s15, s15
 8001f30:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f34:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8002050 <InverseKinematic+0x510>
 8001f38:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001f3c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001f40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f44:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001f48:	ee36 4b07 	vadd.f64	d4, d6, d7
 8001f4c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f50:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f54:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8002050 <InverseKinematic+0x510>
 8001f58:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f5c:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8002058 <InverseKinematic+0x518>
 8001f60:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001f64:	eeb1 6b47 	vneg.f64	d6, d7
 8001f68:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001f6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f70:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001f74:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f78:	eef1 7a67 	vneg.f32	s15, s15
 8001f7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f80:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8002050 <InverseKinematic+0x510>
 8001f84:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001f88:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f90:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001f94:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001f98:	eeb0 1b47 	vmov.f64	d1, d7
 8001f9c:	eeb0 0b44 	vmov.f64	d0, d4
 8001fa0:	f00f fcf4 	bl	801198c <atan2>
 8001fa4:	eeb0 7b40 	vmov.f64	d7, d0
 8001fa8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001fac:	4b2e      	ldr	r3, [pc, #184]	; (8002068 <InverseKinematic+0x528>)
 8001fae:	edc3 7a01 	vstr	s15, [r3, #4]

      c1 = (X / K + (Y * OFF) / Ksquare) / (1 + (OFFsquare) / Ksquare);
 8001fb2:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8001fb6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001fba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fbe:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001fc2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001fc6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001fca:	ed9f 5b25 	vldr	d5, [pc, #148]	; 8002060 <InverseKinematic+0x520>
 8001fce:	ee27 4b05 	vmul.f64	d4, d7, d5
 8001fd2:	edd7 7a08 	vldr	s15, [r7, #32]
 8001fd6:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001fda:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001fde:	ee36 5b07 	vadd.f64	d5, d6, d7
 8001fe2:	edd7 7a08 	vldr	s15, [r7, #32]
 8001fe6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001fea:	ed9f 4b15 	vldr	d4, [pc, #84]	; 8002040 <InverseKinematic+0x500>
 8001fee:	ee84 7b06 	vdiv.f64	d7, d4, d6
 8001ff2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001ff6:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001ffa:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001ffe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002002:	edc7 7a05 	vstr	s15, [r7, #20]
      s1 = sqrt(1 - pow(c1, 2));
 8002006:	edd7 7a05 	vldr	s15, [r7, #20]
 800200a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800200e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002012:	eeb0 0b47 	vmov.f64	d0, d7
 8002016:	f00f f9f7 	bl	8011408 <pow>
 800201a:	eeb0 7b40 	vmov.f64	d7, d0
 800201e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002022:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002026:	eeb0 0b47 	vmov.f64	d0, d7
 800202a:	e01f      	b.n	800206c <InverseKinematic+0x52c>
 800202c:	f3af 8000 	nop.w
 8002030:	c9eecbfb 	.word	0xc9eecbfb
 8002034:	3fe1c2c3 	.word	0x3fe1c2c3
 8002038:	7e28240b 	.word	0x7e28240b
 800203c:	3fe4398c 	.word	0x3fe4398c
 8002040:	487fcb92 	.word	0x487fcb92
 8002044:	3f8d7dbf 	.word	0x3f8d7dbf
 8002048:	b367a0f9 	.word	0xb367a0f9
 800204c:	3ff2f3ea 	.word	0x3ff2f3ea
 8002050:	d70a3d71 	.word	0xd70a3d71
 8002054:	3fe970a3 	.word	0x3fe970a3
 8002058:	3d70a3d7 	.word	0x3d70a3d7
 800205c:	3fe7d70a 	.word	0x3fe7d70a
 8002060:	eb851eb8 	.word	0xeb851eb8
 8002064:	3fbeb851 	.word	0x3fbeb851
 8002068:	24006888 	.word	0x24006888
 800206c:	f00f fc90 	bl	8011990 <sqrt>
 8002070:	eeb0 7b40 	vmov.f64	d7, d0
 8002074:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002078:	edc7 7a04 	vstr	s15, [r7, #16]
      Joint_target[0] = atan2(-s1, -c1);
 800207c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002080:	eef1 7a67 	vneg.f32	s15, s15
 8002084:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002088:	edd7 6a05 	vldr	s13, [r7, #20]
 800208c:	eef1 6a66 	vneg.f32	s13, s13
 8002090:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002094:	eeb0 1b46 	vmov.f64	d1, d6
 8002098:	eeb0 0b47 	vmov.f64	d0, d7
 800209c:	f00f fc76 	bl	801198c <atan2>
 80020a0:	eeb0 7b40 	vmov.f64	d7, d0
 80020a4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80020a8:	4bf9      	ldr	r3, [pc, #996]	; (8002490 <InverseKinematic+0x950>)
 80020aa:	edc3 7a00 	vstr	s15, [r3]
	  	  }

	  if (X <= 0 && Y >= 0 && Mode == 1)
 80020ae:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80020b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ba:	f200 80eb 	bhi.w	8002294 <InverseKinematic+0x754>
 80020be:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80020c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ca:	f2c0 80e3 	blt.w	8002294 <InverseKinematic+0x754>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	f040 80df 	bne.w	8002294 <InverseKinematic+0x754>
	  	  {
    

      s3_p = sqrt(1 - pow(c3, 2));
 80020d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80020da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80020de:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80020e2:	eeb0 0b47 	vmov.f64	d0, d7
 80020e6:	f00f f98f 	bl	8011408 <pow>
 80020ea:	eeb0 7b40 	vmov.f64	d7, d0
 80020ee:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80020f2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80020f6:	eeb0 0b47 	vmov.f64	d0, d7
 80020fa:	f00f fc49 	bl	8011990 <sqrt>
 80020fe:	eeb0 7b40 	vmov.f64	d7, d0
 8002102:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002106:	edc7 7a06 	vstr	s15, [r7, #24]

      Joint_target[2] = atan2(s3_p, c3); //joint 3
 800210a:	edd7 7a06 	vldr	s15, [r7, #24]
 800210e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002112:	edd7 6a07 	vldr	s13, [r7, #28]
 8002116:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800211a:	eeb0 1b46 	vmov.f64	d1, d6
 800211e:	eeb0 0b47 	vmov.f64	d0, d7
 8002122:	f00f fc33 	bl	801198c <atan2>
 8002126:	eeb0 7b40 	vmov.f64	d7, d0
 800212a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800212e:	4bd8      	ldr	r3, [pc, #864]	; (8002490 <InverseKinematic+0x950>)
 8002130:	edc3 7a02 	vstr	s15, [r3, #8]

      Joint_target[1] = atan2((L1 + L2 * c3) * Z + L2 * s3_p * K, -(L1 + L2 * c3) * K + L2 * s3_p * Z);
 8002134:	edd7 7a07 	vldr	s15, [r7, #28]
 8002138:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800213c:	ed9f 6bcc 	vldr	d6, [pc, #816]	; 8002470 <InverseKinematic+0x930>
 8002140:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002144:	ed9f 6bcc 	vldr	d6, [pc, #816]	; 8002478 <InverseKinematic+0x938>
 8002148:	ee37 6b06 	vadd.f64	d6, d7, d6
 800214c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002150:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002154:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002158:	edd7 7a06 	vldr	s15, [r7, #24]
 800215c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002160:	ed9f 5bc3 	vldr	d5, [pc, #780]	; 8002470 <InverseKinematic+0x930>
 8002164:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002168:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800216c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002170:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002174:	ee36 4b07 	vadd.f64	d4, d6, d7
 8002178:	edd7 7a07 	vldr	s15, [r7, #28]
 800217c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002180:	ed9f 6bbb 	vldr	d6, [pc, #748]	; 8002470 <InverseKinematic+0x930>
 8002184:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002188:	ed9f 6bbb 	vldr	d6, [pc, #748]	; 8002478 <InverseKinematic+0x938>
 800218c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002190:	eeb1 6b47 	vneg.f64	d6, d7
 8002194:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002198:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800219c:	ee26 6b07 	vmul.f64	d6, d6, d7
 80021a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80021a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021a8:	ed9f 5bb1 	vldr	d5, [pc, #708]	; 8002470 <InverseKinematic+0x930>
 80021ac:	ee27 5b05 	vmul.f64	d5, d7, d5
 80021b0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80021b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021b8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80021bc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80021c0:	eeb0 1b47 	vmov.f64	d1, d7
 80021c4:	eeb0 0b44 	vmov.f64	d0, d4
 80021c8:	f00f fbe0 	bl	801198c <atan2>
 80021cc:	eeb0 7b40 	vmov.f64	d7, d0
 80021d0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80021d4:	4bae      	ldr	r3, [pc, #696]	; (8002490 <InverseKinematic+0x950>)
 80021d6:	edc3 7a01 	vstr	s15, [r3, #4]

      c1 = (X / K + (Y * OFF) / Ksquare) / (1 + (OFFsquare) / Ksquare);
 80021da:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80021de:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80021e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021e6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80021ea:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80021ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021f2:	ed9f 5ba3 	vldr	d5, [pc, #652]	; 8002480 <InverseKinematic+0x940>
 80021f6:	ee27 4b05 	vmul.f64	d4, d7, d5
 80021fa:	edd7 7a08 	vldr	s15, [r7, #32]
 80021fe:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002202:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8002206:	ee36 5b07 	vadd.f64	d5, d6, d7
 800220a:	edd7 7a08 	vldr	s15, [r7, #32]
 800220e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002212:	ed9f 4b9d 	vldr	d4, [pc, #628]	; 8002488 <InverseKinematic+0x948>
 8002216:	ee84 7b06 	vdiv.f64	d7, d4, d6
 800221a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800221e:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002222:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002226:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800222a:	edc7 7a05 	vstr	s15, [r7, #20]
      s1 = sqrt(1 - pow(c1, 2));
 800222e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002232:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002236:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800223a:	eeb0 0b47 	vmov.f64	d0, d7
 800223e:	f00f f8e3 	bl	8011408 <pow>
 8002242:	eeb0 7b40 	vmov.f64	d7, d0
 8002246:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800224a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800224e:	eeb0 0b47 	vmov.f64	d0, d7
 8002252:	f00f fb9d 	bl	8011990 <sqrt>
 8002256:	eeb0 7b40 	vmov.f64	d7, d0
 800225a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800225e:	edc7 7a04 	vstr	s15, [r7, #16]

      Joint_target[0] = atan2(-s1, -c1);
 8002262:	edd7 7a04 	vldr	s15, [r7, #16]
 8002266:	eef1 7a67 	vneg.f32	s15, s15
 800226a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800226e:	edd7 6a05 	vldr	s13, [r7, #20]
 8002272:	eef1 6a66 	vneg.f32	s13, s13
 8002276:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800227a:	eeb0 1b46 	vmov.f64	d1, d6
 800227e:	eeb0 0b47 	vmov.f64	d0, d7
 8002282:	f00f fb83 	bl	801198c <atan2>
 8002286:	eeb0 7b40 	vmov.f64	d7, d0
 800228a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800228e:	4b80      	ldr	r3, [pc, #512]	; (8002490 <InverseKinematic+0x950>)
 8002290:	edc3 7a00 	vstr	s15, [r3]
	  	  }

	  if(X <= 0 && Y >= 0 && Mode == 0) {
 8002294:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002298:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800229c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a0:	f200 8105 	bhi.w	80024ae <InverseKinematic+0x96e>
 80022a4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80022a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b0:	f2c0 80fd 	blt.w	80024ae <InverseKinematic+0x96e>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f040 80f9 	bne.w	80024ae <InverseKinematic+0x96e>
    
      s3_p = sqrt(1 - pow(c3, 2));
 80022bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80022c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022c4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80022c8:	eeb0 0b47 	vmov.f64	d0, d7
 80022cc:	f00f f89c 	bl	8011408 <pow>
 80022d0:	eeb0 7b40 	vmov.f64	d7, d0
 80022d4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80022d8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80022dc:	eeb0 0b47 	vmov.f64	d0, d7
 80022e0:	f00f fb56 	bl	8011990 <sqrt>
 80022e4:	eeb0 7b40 	vmov.f64	d7, d0
 80022e8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80022ec:	edc7 7a06 	vstr	s15, [r7, #24]

      Joint_target[2] = atan2(-s3_p, c3);
 80022f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80022f4:	eef1 7a67 	vneg.f32	s15, s15
 80022f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8002300:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002304:	eeb0 1b46 	vmov.f64	d1, d6
 8002308:	eeb0 0b47 	vmov.f64	d0, d7
 800230c:	f00f fb3e 	bl	801198c <atan2>
 8002310:	eeb0 7b40 	vmov.f64	d7, d0
 8002314:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002318:	4b5d      	ldr	r3, [pc, #372]	; (8002490 <InverseKinematic+0x950>)
 800231a:	edc3 7a02 	vstr	s15, [r3, #8]

      Joint_target[1] = atan2((L1 + L2 * c3) * Z + L2 * -s3_p * K, -(L1 + L2 * c3) * K + L2 * -s3_p * Z);
 800231e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002322:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002326:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8002470 <InverseKinematic+0x930>
 800232a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800232e:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8002478 <InverseKinematic+0x938>
 8002332:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002336:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800233a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800233e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002342:	edd7 7a06 	vldr	s15, [r7, #24]
 8002346:	eef1 7a67 	vneg.f32	s15, s15
 800234a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800234e:	ed9f 5b48 	vldr	d5, [pc, #288]	; 8002470 <InverseKinematic+0x930>
 8002352:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002356:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800235a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800235e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002362:	ee36 4b07 	vadd.f64	d4, d6, d7
 8002366:	edd7 7a07 	vldr	s15, [r7, #28]
 800236a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800236e:	ed9f 6b40 	vldr	d6, [pc, #256]	; 8002470 <InverseKinematic+0x930>
 8002372:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002376:	ed9f 6b40 	vldr	d6, [pc, #256]	; 8002478 <InverseKinematic+0x938>
 800237a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800237e:	eeb1 6b47 	vneg.f64	d6, d7
 8002382:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002386:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800238a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800238e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002392:	eef1 7a67 	vneg.f32	s15, s15
 8002396:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800239a:	ed9f 5b35 	vldr	d5, [pc, #212]	; 8002470 <InverseKinematic+0x930>
 800239e:	ee27 5b05 	vmul.f64	d5, d7, d5
 80023a2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80023a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80023aa:	ee25 7b07 	vmul.f64	d7, d5, d7
 80023ae:	ee36 7b07 	vadd.f64	d7, d6, d7
 80023b2:	eeb0 1b47 	vmov.f64	d1, d7
 80023b6:	eeb0 0b44 	vmov.f64	d0, d4
 80023ba:	f00f fae7 	bl	801198c <atan2>
 80023be:	eeb0 7b40 	vmov.f64	d7, d0
 80023c2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80023c6:	4b32      	ldr	r3, [pc, #200]	; (8002490 <InverseKinematic+0x950>)
 80023c8:	edc3 7a01 	vstr	s15, [r3, #4]

      c1 = (X / K + (Y * OFF) / Ksquare) / (1 + (OFFsquare) / Ksquare);
 80023cc:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80023d0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80023d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023d8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80023dc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80023e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80023e4:	ed9f 5b26 	vldr	d5, [pc, #152]	; 8002480 <InverseKinematic+0x940>
 80023e8:	ee27 4b05 	vmul.f64	d4, d7, d5
 80023ec:	edd7 7a08 	vldr	s15, [r7, #32]
 80023f0:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80023f4:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80023f8:	ee36 5b07 	vadd.f64	d5, d6, d7
 80023fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8002400:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002404:	ed9f 4b20 	vldr	d4, [pc, #128]	; 8002488 <InverseKinematic+0x948>
 8002408:	ee84 7b06 	vdiv.f64	d7, d4, d6
 800240c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002410:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002414:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002418:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800241c:	edc7 7a05 	vstr	s15, [r7, #20]
      s1 = sqrt(1 - pow(c1, 2));
 8002420:	edd7 7a05 	vldr	s15, [r7, #20]
 8002424:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002428:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800242c:	eeb0 0b47 	vmov.f64	d0, d7
 8002430:	f00e ffea 	bl	8011408 <pow>
 8002434:	eeb0 7b40 	vmov.f64	d7, d0
 8002438:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800243c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002440:	eeb0 0b47 	vmov.f64	d0, d7
 8002444:	f00f faa4 	bl	8011990 <sqrt>
 8002448:	eeb0 7b40 	vmov.f64	d7, d0
 800244c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002450:	edc7 7a04 	vstr	s15, [r7, #16]

      Joint_target[0] = atan2(-s1, -c1);
 8002454:	edd7 7a04 	vldr	s15, [r7, #16]
 8002458:	eef1 7a67 	vneg.f32	s15, s15
 800245c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002460:	edd7 6a05 	vldr	s13, [r7, #20]
 8002464:	eef1 6a66 	vneg.f32	s13, s13
 8002468:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800246c:	e012      	b.n	8002494 <InverseKinematic+0x954>
 800246e:	bf00      	nop
 8002470:	d70a3d71 	.word	0xd70a3d71
 8002474:	3fe970a3 	.word	0x3fe970a3
 8002478:	3d70a3d7 	.word	0x3d70a3d7
 800247c:	3fe7d70a 	.word	0x3fe7d70a
 8002480:	eb851eb8 	.word	0xeb851eb8
 8002484:	3fbeb851 	.word	0x3fbeb851
 8002488:	487fcb92 	.word	0x487fcb92
 800248c:	3f8d7dbf 	.word	0x3f8d7dbf
 8002490:	24006888 	.word	0x24006888
 8002494:	eeb0 1b46 	vmov.f64	d1, d6
 8002498:	eeb0 0b47 	vmov.f64	d0, d7
 800249c:	f00f fa76 	bl	801198c <atan2>
 80024a0:	eeb0 7b40 	vmov.f64	d7, d0
 80024a4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80024a8:	4b97      	ldr	r3, [pc, #604]	; (8002708 <InverseKinematic+0xbc8>)
 80024aa:	edc3 7a00 	vstr	s15, [r3]
    }

	  if(X >= 0 && Y <= 0 && Mode == 1)
 80024ae:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80024b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ba:	f2c0 810c 	blt.w	80026d6 <InverseKinematic+0xb96>
 80024be:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80024c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ca:	d900      	bls.n	80024ce <InverseKinematic+0x98e>
 80024cc:	e103      	b.n	80026d6 <InverseKinematic+0xb96>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	f040 8100 	bne.w	80026d6 <InverseKinematic+0xb96>
	  {
		  s3_m = -sqrt(1-(c3*c3));
 80024d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80024da:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80024de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80024e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024ea:	eeb0 0b47 	vmov.f64	d0, d7
 80024ee:	f00f fa4f 	bl	8011990 <sqrt>
 80024f2:	eeb0 7b40 	vmov.f64	d7, d0
 80024f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80024fa:	eef1 7a67 	vneg.f32	s15, s15
 80024fe:	edc7 7a03 	vstr	s15, [r7, #12]

	  Joint_target[2]= atan2(s3_m,c3);
 8002502:	edd7 7a03 	vldr	s15, [r7, #12]
 8002506:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800250a:	edd7 6a07 	vldr	s13, [r7, #28]
 800250e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002512:	eeb0 1b46 	vmov.f64	d1, d6
 8002516:	eeb0 0b47 	vmov.f64	d0, d7
 800251a:	f00f fa37 	bl	801198c <atan2>
 800251e:	eeb0 7b40 	vmov.f64	d7, d0
 8002522:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002526:	4b78      	ldr	r3, [pc, #480]	; (8002708 <InverseKinematic+0xbc8>)
 8002528:	edc3 7a02 	vstr	s15, [r3, #8]

	  Joint_target[1] = atan2((L1 + L2*c3)*Z - L2*s3_m*K , (L1 + L2*c3)*K + L2*s3_m*Z);
 800252c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002530:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002534:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80026e0 <InverseKinematic+0xba0>
 8002538:	ee27 7b06 	vmul.f64	d7, d7, d6
 800253c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80026e8 <InverseKinematic+0xba8>
 8002540:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002544:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002548:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800254c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002550:	edd7 7a03 	vldr	s15, [r7, #12]
 8002554:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002558:	ed9f 5b61 	vldr	d5, [pc, #388]	; 80026e0 <InverseKinematic+0xba0>
 800255c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002560:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002564:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002568:	ee25 7b07 	vmul.f64	d7, d5, d7
 800256c:	ee36 4b47 	vsub.f64	d4, d6, d7
 8002570:	edd7 7a07 	vldr	s15, [r7, #28]
 8002574:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002578:	ed9f 6b59 	vldr	d6, [pc, #356]	; 80026e0 <InverseKinematic+0xba0>
 800257c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002580:	ed9f 6b59 	vldr	d6, [pc, #356]	; 80026e8 <InverseKinematic+0xba8>
 8002584:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002588:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800258c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002590:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002594:	edd7 7a03 	vldr	s15, [r7, #12]
 8002598:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800259c:	ed9f 5b50 	vldr	d5, [pc, #320]	; 80026e0 <InverseKinematic+0xba0>
 80025a0:	ee27 5b05 	vmul.f64	d5, d7, d5
 80025a4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80025a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025ac:	ee25 7b07 	vmul.f64	d7, d5, d7
 80025b0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80025b4:	eeb0 1b47 	vmov.f64	d1, d7
 80025b8:	eeb0 0b44 	vmov.f64	d0, d4
 80025bc:	f00f f9e6 	bl	801198c <atan2>
 80025c0:	eeb0 7b40 	vmov.f64	d7, d0
 80025c4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80025c8:	4b4f      	ldr	r3, [pc, #316]	; (8002708 <InverseKinematic+0xbc8>)
 80025ca:	edc3 7a01 	vstr	s15, [r3, #4]

	            float K_m = -Ksquare;
 80025ce:	edd7 7a08 	vldr	s15, [r7, #32]
 80025d2:	eef1 7a67 	vneg.f32	s15, s15
 80025d6:	edc7 7a02 	vstr	s15, [r7, #8]

	           c1 = (X/-K + (Y*OFF)/(K_m*K_m)) / (1+(OFFsquare)/(K_m*K_m));
 80025da:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80025de:	eef1 6a67 	vneg.f32	s13, s15
 80025e2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80025e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025ea:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80025ee:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80025f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025f6:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 80026f0 <InverseKinematic+0xbb0>
 80025fa:	ee27 4b05 	vmul.f64	d4, d7, d5
 80025fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8002602:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002606:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800260a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800260e:	ee36 5b07 	vadd.f64	d5, d6, d7
 8002612:	edd7 7a02 	vldr	s15, [r7, #8]
 8002616:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800261a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800261e:	ed9f 4b36 	vldr	d4, [pc, #216]	; 80026f8 <InverseKinematic+0xbb8>
 8002622:	ee84 7b06 	vdiv.f64	d7, d4, d6
 8002626:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800262a:	ee37 6b06 	vadd.f64	d6, d7, d6
 800262e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002632:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002636:	edc7 7a05 	vstr	s15, [r7, #20]

	            s1= sqrt(1-pow(c1,2));
 800263a:	edd7 7a05 	vldr	s15, [r7, #20]
 800263e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002642:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002646:	eeb0 0b47 	vmov.f64	d0, d7
 800264a:	f00e fedd 	bl	8011408 <pow>
 800264e:	eeb0 7b40 	vmov.f64	d7, d0
 8002652:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002656:	ee36 7b47 	vsub.f64	d7, d6, d7
 800265a:	eeb0 0b47 	vmov.f64	d0, d7
 800265e:	f00f f997 	bl	8011990 <sqrt>
 8002662:	eeb0 7b40 	vmov.f64	d7, d0
 8002666:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800266a:	edc7 7a04 	vstr	s15, [r7, #16]

	  Joint_target[0] = atan2(s1,c1) - 3.1415;
 800266e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002672:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002676:	edd7 6a05 	vldr	s13, [r7, #20]
 800267a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800267e:	eeb0 1b46 	vmov.f64	d1, d6
 8002682:	eeb0 0b47 	vmov.f64	d0, d7
 8002686:	f00f f981 	bl	801198c <atan2>
 800268a:	eeb0 7b40 	vmov.f64	d7, d0
 800268e:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8002700 <InverseKinematic+0xbc0>
 8002692:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002696:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800269a:	4b1b      	ldr	r3, [pc, #108]	; (8002708 <InverseKinematic+0xbc8>)
 800269c:	edc3 7a00 	vstr	s15, [r3]

	  printf("%f %f %f\n",c1,s1,Joint_target[0]);
 80026a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80026a4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80026a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80026ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026b0:	4b15      	ldr	r3, [pc, #84]	; (8002708 <InverseKinematic+0xbc8>)
 80026b2:	edd3 6a00 	vldr	s13, [r3]
 80026b6:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80026ba:	ed8d 6b02 	vstr	d6, [sp, #8]
 80026be:	ed8d 7b00 	vstr	d7, [sp]
 80026c2:	ec53 2b15 	vmov	r2, r3, d5
 80026c6:	4811      	ldr	r0, [pc, #68]	; (800270c <InverseKinematic+0xbcc>)
 80026c8:	f00b f80c 	bl	800d6e4 <iprintf>
	  if(X >= 0 && Y <= 0 && Mode == 1)
 80026cc:	e003      	b.n	80026d6 <InverseKinematic+0xb96>
	  }
  }
  else
  {
	  printf("Requested target is not part of reachable workspace\n");
 80026ce:	4810      	ldr	r0, [pc, #64]	; (8002710 <InverseKinematic+0xbd0>)
 80026d0:	f00b f88e 	bl	800d7f0 <puts>
 80026d4:	e000      	b.n	80026d8 <InverseKinematic+0xb98>
	  if(X >= 0 && Y <= 0 && Mode == 1)
 80026d6:	bf00      	nop

  }
}
 80026d8:	3740      	adds	r7, #64	; 0x40
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	d70a3d71 	.word	0xd70a3d71
 80026e4:	3fe970a3 	.word	0x3fe970a3
 80026e8:	3d70a3d7 	.word	0x3d70a3d7
 80026ec:	3fe7d70a 	.word	0x3fe7d70a
 80026f0:	eb851eb8 	.word	0xeb851eb8
 80026f4:	3fbeb851 	.word	0x3fbeb851
 80026f8:	487fcb92 	.word	0x487fcb92
 80026fc:	3f8d7dbf 	.word	0x3f8d7dbf
 8002700:	c083126f 	.word	0xc083126f
 8002704:	400921ca 	.word	0x400921ca
 8002708:	24006888 	.word	0x24006888
 800270c:	08012050 	.word	0x08012050
 8002710:	0801205c 	.word	0x0801205c

08002714 <TrajectorPlanner>:
// joint space trjector planener


void TrajectorPlanner(float q0[3], float qf[3], float t)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	ed2d 8b04 	vpush	{d8-d9}
 800271a:	b0a8      	sub	sp, #160	; 0xa0
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	ed87 0a01 	vstr	s0, [r7, #4]
  // q0 initial pose
  // qf final pose
  // t trajector time (steps)
  float Ts = 0.1; //time division step
 8002726:	4bf2      	ldr	r3, [pc, #968]	; (8002af0 <TrajectorPlanner+0x3dc>)
 8002728:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

  float t_step = 0; //used as counter
 800272c:	f04f 0300 	mov.w	r3, #0
 8002730:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  int counter = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  float Ns = t/Ts; //Number of step;
 800273a:	edd7 6a01 	vldr	s13, [r7, #4]
 800273e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002742:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002746:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c

  if(Ns > 2000) //max 20s planning at 0.1 Ts
 800274a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800274e:	ed9f 7ae9 	vldr	s14, [pc, #932]	; 8002af4 <TrajectorPlanner+0x3e0>
 8002752:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800275a:	dd03      	ble.n	8002764 <TrajectorPlanner+0x50>
	  {
	  printf("Ns cannot be higher than 2000");
 800275c:	48e6      	ldr	r0, [pc, #920]	; (8002af8 <TrajectorPlanner+0x3e4>)
 800275e:	f00a ffc1 	bl	800d6e4 <iprintf>
 8002762:	e305      	b.n	8002d70 <TrajectorPlanner+0x65c>
  float a5[3];

  //from t i must create an array with n elements

  // fifth order polynomial interpolation function
  for (int i = 0; i < 3; i++) // execute for all the joint
 8002764:	2300      	movs	r3, #0
 8002766:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800276a:	e2fc      	b.n	8002d66 <TrajectorPlanner+0x652>
  {
    qd0[i] = 0;
 800276c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002776:	4413      	add	r3, r2
 8002778:	3b20      	subs	r3, #32
 800277a:	f04f 0200 	mov.w	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
    qdd0[i] = 0;
 8002780:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800278a:	4413      	add	r3, r2
 800278c:	3b38      	subs	r3, #56	; 0x38
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	601a      	str	r2, [r3, #0]

    qdf[i] = 0;
 8002794:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800279e:	4413      	add	r3, r2
 80027a0:	3b2c      	subs	r3, #44	; 0x2c
 80027a2:	f04f 0200 	mov.w	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
    qddf[i] = 0;
 80027a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80027b2:	4413      	add	r3, r2
 80027b4:	3b44      	subs	r3, #68	; 0x44
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
  
    a0[i] = q0[i];
 80027bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	4413      	add	r3, r2
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80027d2:	440b      	add	r3, r1
 80027d4:	3b50      	subs	r3, #80	; 0x50
 80027d6:	601a      	str	r2, [r3, #0]
    a1[i] = qd0[i];
 80027d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80027e2:	4413      	add	r3, r2
 80027e4:	3b20      	subs	r3, #32
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80027f2:	440b      	add	r3, r1
 80027f4:	3b5c      	subs	r3, #92	; 0x5c
 80027f6:	601a      	str	r2, [r3, #0]
    a2[i] = 0.5 * qdd0[i];
 80027f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002802:	4413      	add	r3, r2
 8002804:	3b38      	subs	r3, #56	; 0x38
 8002806:	edd3 7a00 	vldr	s15, [r3]
 800280a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800280e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002812:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800281c:	4413      	add	r3, r2
 800281e:	3b68      	subs	r3, #104	; 0x68
 8002820:	edc3 7a00 	vstr	s15, [r3]

    //execute FOR to compute time value of joint
    a3[i] = (1 / (2 * pow(t, 3))) * (20 * (qf[i] - q0[i]) - (8 * qdf[i] + 12 * qd0[i]) * t - (3 * qddf[i] - qdd0[i]) * (t * t));
 8002824:	edd7 7a01 	vldr	s15, [r7, #4]
 8002828:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800282c:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8002830:	eeb0 0b47 	vmov.f64	d0, d7
 8002834:	f00e fde8 	bl	8011408 <pow>
 8002838:	eeb0 7b40 	vmov.f64	d7, d0
 800283c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002840:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002844:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002848:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	4413      	add	r3, r2
 8002852:	ed93 7a00 	vldr	s14, [r3]
 8002856:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	4413      	add	r3, r2
 8002860:	edd3 7a00 	vldr	s15, [r3]
 8002864:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002868:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800286c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002870:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800287a:	4413      	add	r3, r2
 800287c:	3b2c      	subs	r3, #44	; 0x2c
 800287e:	edd3 7a00 	vldr	s15, [r3]
 8002882:	eef2 5a00 	vmov.f32	s11, #32	; 0x41000000  8.0
 8002886:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800288a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002894:	4413      	add	r3, r2
 8002896:	3b20      	subs	r3, #32
 8002898:	edd3 7a00 	vldr	s15, [r3]
 800289c:	eeb2 5a08 	vmov.f32	s10, #40	; 0x41400000  12.0
 80028a0:	ee67 7a85 	vmul.f32	s15, s15, s10
 80028a4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80028a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80028ac:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80028b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80028be:	4413      	add	r3, r2
 80028c0:	3b44      	subs	r3, #68	; 0x44
 80028c2:	edd3 7a00 	vldr	s15, [r3]
 80028c6:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 80028ca:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80028ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80028d8:	4413      	add	r3, r2
 80028da:	3b38      	subs	r3, #56	; 0x38
 80028dc:	edd3 7a00 	vldr	s15, [r3]
 80028e0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80028e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80028e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028ec:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80028f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80028f8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80028fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002900:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800290a:	4413      	add	r3, r2
 800290c:	3b74      	subs	r3, #116	; 0x74
 800290e:	edc3 7a00 	vstr	s15, [r3]

    a4[i] = (1 / (2 * pow(t, 4))) * (30 * (q0[i] - qf[i]) + (14 * qdf[i] + 16 * qd0[i]) * t + (3 * qddf[i] - 2 * qdd0[i]) * t * t);
 8002912:	edd7 7a01 	vldr	s15, [r7, #4]
 8002916:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800291a:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 800291e:	eeb0 0b47 	vmov.f64	d0, d7
 8002922:	f00e fd71 	bl	8011408 <pow>
 8002926:	eeb0 7b40 	vmov.f64	d7, d0
 800292a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800292e:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002932:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002936:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	4413      	add	r3, r2
 8002940:	ed93 7a00 	vldr	s14, [r3]
 8002944:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	4413      	add	r3, r2
 800294e:	edd3 7a00 	vldr	s15, [r3]
 8002952:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002956:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800295a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800295e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002968:	4413      	add	r3, r2
 800296a:	3b2c      	subs	r3, #44	; 0x2c
 800296c:	edd3 7a00 	vldr	s15, [r3]
 8002970:	eef2 5a0c 	vmov.f32	s11, #44	; 0x41600000  14.0
 8002974:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8002978:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002982:	4413      	add	r3, r2
 8002984:	3b20      	subs	r3, #32
 8002986:	edd3 7a00 	vldr	s15, [r3]
 800298a:	eeb3 5a00 	vmov.f32	s10, #48	; 0x41800000  16.0
 800298e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8002992:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8002996:	edd7 7a01 	vldr	s15, [r7, #4]
 800299a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800299e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80029ac:	4413      	add	r3, r2
 80029ae:	3b44      	subs	r3, #68	; 0x44
 80029b0:	edd3 7a00 	vldr	s15, [r3]
 80029b4:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 80029b8:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80029bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80029c6:	4413      	add	r3, r2
 80029c8:	3b38      	subs	r3, #56	; 0x38
 80029ca:	edd3 7a00 	vldr	s15, [r3]
 80029ce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80029d2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80029d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80029da:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80029de:	edd7 7a01 	vldr	s15, [r7, #4]
 80029e2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80029e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80029ee:	ee26 7b07 	vmul.f64	d7, d6, d7
 80029f2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80029f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002a00:	4413      	add	r3, r2
 8002a02:	3b80      	subs	r3, #128	; 0x80
 8002a04:	edc3 7a00 	vstr	s15, [r3]

    a5[i] = (1 / (2 * pow(t, 5))) * (12 * (qf[i] - q0[i]) - 6 * (qdf[i] + qd0[i]) * t - (qddf[i] - qdd0[i]) * (t * t));
 8002a08:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a0c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a10:	eeb1 1b04 	vmov.f64	d1, #20	; 0x40a00000  5.0
 8002a14:	eeb0 0b47 	vmov.f64	d0, d7
 8002a18:	f00e fcf6 	bl	8011408 <pow>
 8002a1c:	eeb0 7b40 	vmov.f64	d7, d0
 8002a20:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002a24:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002a28:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002a2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	4413      	add	r3, r2
 8002a36:	ed93 7a00 	vldr	s14, [r3]
 8002a3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	4413      	add	r3, r2
 8002a44:	edd3 7a00 	vldr	s15, [r3]
 8002a48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a4c:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8002a50:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002a5e:	4413      	add	r3, r2
 8002a60:	3b2c      	subs	r3, #44	; 0x2c
 8002a62:	edd3 5a00 	vldr	s11, [r3]
 8002a66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002a70:	4413      	add	r3, r2
 8002a72:	3b20      	subs	r3, #32
 8002a74:	edd3 7a00 	vldr	s15, [r3]
 8002a78:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8002a7c:	eef1 5a08 	vmov.f32	s11, #24	; 0x40c00000  6.0
 8002a80:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8002a84:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a88:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002a8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3b44      	subs	r3, #68	; 0x44
 8002a9e:	edd3 5a00 	vldr	s11, [r3]
 8002aa2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002aac:	4413      	add	r3, r2
 8002aae:	3b38      	subs	r3, #56	; 0x38
 8002ab0:	edd3 7a00 	vldr	s15, [r3]
 8002ab4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002ab8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002abc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002ac0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002ac4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ac8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002acc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002ad0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002ad4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002ade:	4413      	add	r3, r2
 8002ae0:	3b8c      	subs	r3, #140	; 0x8c
 8002ae2:	edc3 7a00 	vstr	s15, [r3]

    for(counter = 0; counter < Ns+1; counter++ ) {
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002aec:	e124      	b.n	8002d38 <TrajectorPlanner+0x624>
 8002aee:	bf00      	nop
 8002af0:	3dcccccd 	.word	0x3dcccccd
 8002af4:	44fa0000 	.word	0x44fa0000
 8002af8:	08012090 	.word	0x08012090
    t_step = counter*Ts;
 8002afc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b00:	ee07 3a90 	vmov	s15, r3
 8002b04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b08:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002b0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b10:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90

    Joint_target_plan[counter][i] = a0[i] + a1[i] * t_step + a2[i] * t_step * t_step + a3[i] * pow(t_step, 3) + a4[i] * pow(t_step, 4) + a5[i] * pow(t_step, 5);
 8002b14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002b1e:	4413      	add	r3, r2
 8002b20:	3b50      	subs	r3, #80	; 0x50
 8002b22:	ed93 7a00 	vldr	s14, [r3]
 8002b26:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002b30:	4413      	add	r3, r2
 8002b32:	3b5c      	subs	r3, #92	; 0x5c
 8002b34:	edd3 6a00 	vldr	s13, [r3]
 8002b38:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002b3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002b4e:	4413      	add	r3, r2
 8002b50:	3b68      	subs	r3, #104	; 0x68
 8002b52:	edd3 6a00 	vldr	s13, [r3]
 8002b56:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002b5a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002b5e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002b62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b6a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002b6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002b78:	4413      	add	r3, r2
 8002b7a:	3b74      	subs	r3, #116	; 0x74
 8002b7c:	edd3 7a00 	vldr	s15, [r3]
 8002b80:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002b84:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002b88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b8c:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8002b90:	eeb0 0b47 	vmov.f64	d0, d7
 8002b94:	f00e fc38 	bl	8011408 <pow>
 8002b98:	eeb0 7b40 	vmov.f64	d7, d0
 8002b9c:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002ba0:	ee38 8b07 	vadd.f64	d8, d8, d7
 8002ba4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002bae:	4413      	add	r3, r2
 8002bb0:	3b80      	subs	r3, #128	; 0x80
 8002bb2:	edd3 7a00 	vldr	s15, [r3]
 8002bb6:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002bba:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002bbe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002bc2:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 8002bc6:	eeb0 0b47 	vmov.f64	d0, d7
 8002bca:	f00e fc1d 	bl	8011408 <pow>
 8002bce:	eeb0 7b40 	vmov.f64	d7, d0
 8002bd2:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002bd6:	ee38 8b07 	vadd.f64	d8, d8, d7
 8002bda:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002be4:	4413      	add	r3, r2
 8002be6:	3b8c      	subs	r3, #140	; 0x8c
 8002be8:	edd3 7a00 	vldr	s15, [r3]
 8002bec:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002bf0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002bf4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002bf8:	eeb1 1b04 	vmov.f64	d1, #20	; 0x40a00000  5.0
 8002bfc:	eeb0 0b47 	vmov.f64	d0, d7
 8002c00:	f00e fc02 	bl	8011408 <pow>
 8002c04:	eeb0 7b40 	vmov.f64	d7, d0
 8002c08:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002c0c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002c10:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002c14:	4959      	ldr	r1, [pc, #356]	; (8002d7c <TrajectorPlanner+0x668>)
 8002c16:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	4413      	add	r3, r2
 8002c20:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	edc3 7a00 	vstr	s15, [r3]

    Joint_speed_target_plan[counter][i] = a1[i] + 2 * a2[i] * t_step + 3 * a3[i] * t_step * t_step + 4 * a4[i] * pow(t_step, 3) + 5 * a5[i] * pow(t_step, 4);
 8002c2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002c38:	4413      	add	r3, r2
 8002c3a:	3b5c      	subs	r3, #92	; 0x5c
 8002c3c:	ed93 7a00 	vldr	s14, [r3]
 8002c40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3b68      	subs	r3, #104	; 0x68
 8002c4e:	edd3 7a00 	vldr	s15, [r3]
 8002c52:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002c56:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002c5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3b74      	subs	r3, #116	; 0x74
 8002c70:	edd3 7a00 	vldr	s15, [r3]
 8002c74:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002c78:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002c7c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002c80:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c84:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002c88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c90:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002c94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3b80      	subs	r3, #128	; 0x80
 8002ca2:	edd3 7a00 	vldr	s15, [r3]
 8002ca6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002caa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cae:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002cb2:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002cb6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002cba:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8002cbe:	eeb0 0b47 	vmov.f64	d0, d7
 8002cc2:	f00e fba1 	bl	8011408 <pow>
 8002cc6:	eeb0 7b40 	vmov.f64	d7, d0
 8002cca:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002cce:	ee38 8b07 	vadd.f64	d8, d8, d7
 8002cd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002cdc:	4413      	add	r3, r2
 8002cde:	3b8c      	subs	r3, #140	; 0x8c
 8002ce0:	edd3 7a00 	vldr	s15, [r3]
 8002ce4:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002ce8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cec:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002cf0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002cf4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002cf8:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 8002cfc:	eeb0 0b47 	vmov.f64	d0, d7
 8002d00:	f00e fb82 	bl	8011408 <pow>
 8002d04:	eeb0 7b40 	vmov.f64	d7, d0
 8002d08:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002d0c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002d10:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002d14:	491a      	ldr	r1, [pc, #104]	; (8002d80 <TrajectorPlanner+0x66c>)
 8002d16:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	4413      	add	r3, r2
 8002d20:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002d24:	4413      	add	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	edc3 7a00 	vstr	s15, [r3]
    for(counter = 0; counter < Ns+1; counter++ ) {
 8002d2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d32:	3301      	adds	r3, #1
 8002d34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d3c:	ee07 3a90 	vmov	s15, r3
 8002d40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d44:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002d48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d58:	f53f aed0 	bmi.w	8002afc <TrajectorPlanner+0x3e8>
  for (int i = 0; i < 3; i++) // execute for all the joint
 8002d5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d60:	3301      	adds	r3, #1
 8002d62:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	f77f acfe 	ble.w	800276c <TrajectorPlanner+0x58>
    //float qdd_quintic = 2 * a2[i] + 6 * a3[i] * t + 12 * a4[i] * t * t + 20 * a5[i] * pow(t, 3);


    
  }
}
 8002d70:	37a0      	adds	r7, #160	; 0xa0
 8002d72:	46bd      	mov	sp, r7
 8002d74:	ecbd 8b04 	vpop	{d8-d9}
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	24006968 	.word	0x24006968
 8002d80:	24000a20 	.word	0x24000a20

08002d84 <plan_step>:

void plan_step() {
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
	//every time is called, increment
	plan_counter++;
 8002d8a:	4b24      	ldr	r3, [pc, #144]	; (8002e1c <plan_step+0x98>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	4a22      	ldr	r2, [pc, #136]	; (8002e1c <plan_step+0x98>)
 8002d92:	6013      	str	r3, [r2, #0]
	if(plan_counter < 101) {
 8002d94:	4b21      	ldr	r3, [pc, #132]	; (8002e1c <plan_step+0x98>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b64      	cmp	r3, #100	; 0x64
 8002d9a:	dc32      	bgt.n	8002e02 <plan_step+0x7e>
	  for(int m = 0; m<3; m++) {
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	607b      	str	r3, [r7, #4]
 8002da0:	e02b      	b.n	8002dfa <plan_step+0x76>
		  Joint_target_planned[m] = Joint_target_plan[plan_counter][m];
 8002da2:	4b1e      	ldr	r3, [pc, #120]	; (8002e1c <plan_step+0x98>)
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	491e      	ldr	r1, [pc, #120]	; (8002e20 <plan_step+0x9c>)
 8002da8:	4613      	mov	r3, r2
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	4413      	add	r3, r2
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	4413      	add	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	491a      	ldr	r1, [pc, #104]	; (8002e24 <plan_step+0xa0>)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	601a      	str	r2, [r3, #0]
		  Joint_speed_target_planned[m] =  Joint_speed_target_plan[plan_counter][0];
 8002dc2:	4b16      	ldr	r3, [pc, #88]	; (8002e1c <plan_step+0x98>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	4918      	ldr	r1, [pc, #96]	; (8002e28 <plan_step+0xa4>)
 8002dc8:	4613      	mov	r3, r2
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	4413      	add	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	4915      	ldr	r1, [pc, #84]	; (8002e2c <plan_step+0xa8>)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	440b      	add	r3, r1
 8002ddc:	601a      	str	r2, [r3, #0]

		  actualPos[0] = Joint_target_plan[plan_counter][0];
 8002dde:	4b0f      	ldr	r3, [pc, #60]	; (8002e1c <plan_step+0x98>)
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	490f      	ldr	r1, [pc, #60]	; (8002e20 <plan_step+0x9c>)
 8002de4:	4613      	mov	r3, r2
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	4413      	add	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a0f      	ldr	r2, [pc, #60]	; (8002e30 <plan_step+0xac>)
 8002df2:	6013      	str	r3, [r2, #0]
	  for(int m = 0; m<3; m++) {
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3301      	adds	r3, #1
 8002df8:	607b      	str	r3, [r7, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	ddd0      	ble.n	8002da2 <plan_step+0x1e>
	else {
		plan_counter = 0;
		flag_traj_compl = 1;
	}

}
 8002e00:	e005      	b.n	8002e0e <plan_step+0x8a>
		plan_counter = 0;
 8002e02:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <plan_step+0x98>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
		flag_traj_compl = 1;
 8002e08:	4b0a      	ldr	r3, [pc, #40]	; (8002e34 <plan_step+0xb0>)
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	240002cc 	.word	0x240002cc
 8002e20:	24006968 	.word	0x24006968
 8002e24:	24000938 	.word	0x24000938
 8002e28:	24000a20 	.word	0x24000a20
 8002e2c:	24000920 	.word	0x24000920
 8002e30:	240067f8 	.word	0x240067f8
 8002e34:	240002d0 	.word	0x240002d0

08002e38 <POPUP_start_plan>:

void POPUP_start_plan() {
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
	//start timers base
	HAL_TIM_Base_Start_IT(&htim4);
 8002e3c:	4802      	ldr	r0, [pc, #8]	; (8002e48 <POPUP_start_plan+0x10>)
 8002e3e:	f006 fd8b 	bl	8009958 <HAL_TIM_Base_Start_IT>

}
 8002e42:	bf00      	nop
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	24000364 	.word	0x24000364

08002e4c <POPUP_stop_plan>:

void POPUP_stop_plan() {
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
	//start timers base
	HAL_TIM_Base_Stop_IT(&htim4);
 8002e50:	4802      	ldr	r0, [pc, #8]	; (8002e5c <POPUP_stop_plan+0x10>)
 8002e52:	f006 fdf1 	bl	8009a38 <HAL_TIM_Base_Stop_IT>

}
 8002e56:	bf00      	nop
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	24000364 	.word	0x24000364

08002e60 <PositionController>:

void PositionController() {
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
//executed at 100 Hz
	for(int i = 1; i< 3; i++) {
 8002e66:	2301      	movs	r3, #1
 8002e68:	607b      	str	r3, [r7, #4]
 8002e6a:	e0c3      	b.n	8002ff4 <PositionController+0x194>

	  pos_previous_error[i] = pos_error[i];
 8002e6c:	4a68      	ldr	r2, [pc, #416]	; (8003010 <PositionController+0x1b0>)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	4967      	ldr	r1, [pc, #412]	; (8003014 <PositionController+0x1b4>)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	601a      	str	r2, [r3, #0]

	  pos_error[i] = Joint_target_planned[i] - actualPos[i];
 8002e80:	4a65      	ldr	r2, [pc, #404]	; (8003018 <PositionController+0x1b8>)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	ed93 7a00 	vldr	s14, [r3]
 8002e8c:	4a63      	ldr	r2, [pc, #396]	; (800301c <PositionController+0x1bc>)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	edd3 7a00 	vldr	s15, [r3]
 8002e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e9c:	4a5c      	ldr	r2, [pc, #368]	; (8003010 <PositionController+0x1b0>)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	edc3 7a00 	vstr	s15, [r3]

	  pos_integral[i] = pos_integral[i] + pos_error[i];
 8002ea8:	4a5d      	ldr	r2, [pc, #372]	; (8003020 <PositionController+0x1c0>)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	ed93 7a00 	vldr	s14, [r3]
 8002eb4:	4a56      	ldr	r2, [pc, #344]	; (8003010 <PositionController+0x1b0>)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	edd3 7a00 	vldr	s15, [r3]
 8002ec0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ec4:	4a56      	ldr	r2, [pc, #344]	; (8003020 <PositionController+0x1c0>)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	edc3 7a00 	vstr	s15, [r3]

	  pos_derivative[i] = pos_error[i] - pos_previous_error[i];
 8002ed0:	4a4f      	ldr	r2, [pc, #316]	; (8003010 <PositionController+0x1b0>)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	ed93 7a00 	vldr	s14, [r3]
 8002edc:	4a4d      	ldr	r2, [pc, #308]	; (8003014 <PositionController+0x1b4>)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4413      	add	r3, r2
 8002ee4:	edd3 7a00 	vldr	s15, [r3]
 8002ee8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eec:	4a4d      	ldr	r2, [pc, #308]	; (8003024 <PositionController+0x1c4>)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	edc3 7a00 	vstr	s15, [r3]

	  //anti windup
	  if (pos_integral[i] > MAX_INTEGRAL_ERROR || pos_integral[i] < -MAX_INTEGRAL_ERROR) pos_integral[i] = 0;
 8002ef8:	4a49      	ldr	r2, [pc, #292]	; (8003020 <PositionController+0x1c0>)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	edd3 7a00 	vldr	s15, [r3]
 8002f04:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8003028 <PositionController+0x1c8>
 8002f08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f10:	dc0c      	bgt.n	8002f2c <PositionController+0xcc>
 8002f12:	4a43      	ldr	r2, [pc, #268]	; (8003020 <PositionController+0x1c0>)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	edd3 7a00 	vldr	s15, [r3]
 8002f1e:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800302c <PositionController+0x1cc>
 8002f22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f2a:	d506      	bpl.n	8002f3a <PositionController+0xda>
 8002f2c:	4a3c      	ldr	r2, [pc, #240]	; (8003020 <PositionController+0x1c0>)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]

	  pos_command[i] = pos_KP[i] * pos_error[i] + pos_KI[i] * pos_integral[i] + pos_KD[i] * pos_derivative[i];
 8002f3a:	4a3d      	ldr	r2, [pc, #244]	; (8003030 <PositionController+0x1d0>)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4413      	add	r3, r2
 8002f42:	ed93 7a00 	vldr	s14, [r3]
 8002f46:	4a32      	ldr	r2, [pc, #200]	; (8003010 <PositionController+0x1b0>)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	edd3 7a00 	vldr	s15, [r3]
 8002f52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f56:	4a37      	ldr	r2, [pc, #220]	; (8003034 <PositionController+0x1d4>)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	edd3 6a00 	vldr	s13, [r3]
 8002f62:	4a2f      	ldr	r2, [pc, #188]	; (8003020 <PositionController+0x1c0>)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	edd3 7a00 	vldr	s15, [r3]
 8002f6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f76:	4a30      	ldr	r2, [pc, #192]	; (8003038 <PositionController+0x1d8>)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	edd3 6a00 	vldr	s13, [r3]
 8002f82:	4a28      	ldr	r2, [pc, #160]	; (8003024 <PositionController+0x1c4>)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	edd3 7a00 	vldr	s15, [r3]
 8002f8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f96:	4a29      	ldr	r2, [pc, #164]	; (800303c <PositionController+0x1dc>)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4413      	add	r3, r2
 8002f9e:	edc3 7a00 	vstr	s15, [r3]
	  //apply limit
	  if (pos_command[i] < - V_MAX) pos_command[i] = -V_MAX;
 8002fa2:	4a26      	ldr	r2, [pc, #152]	; (800303c <PositionController+0x1dc>)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	edd3 7a00 	vldr	s15, [r3]
 8002fae:	eeb9 7a08 	vmov.f32	s14, #152	; 0xc0c00000 -6.0
 8002fb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fba:	d505      	bpl.n	8002fc8 <PositionController+0x168>
 8002fbc:	4a1f      	ldr	r2, [pc, #124]	; (800303c <PositionController+0x1dc>)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	4a1e      	ldr	r2, [pc, #120]	; (8003040 <PositionController+0x1e0>)
 8002fc6:	601a      	str	r2, [r3, #0]

	  if (pos_command[i] > V_MAX)   pos_command[i] = V_MAX;
 8002fc8:	4a1c      	ldr	r2, [pc, #112]	; (800303c <PositionController+0x1dc>)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	edd3 7a00 	vldr	s15, [r3]
 8002fd4:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002fd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fe0:	dd05      	ble.n	8002fee <PositionController+0x18e>
 8002fe2:	4a16      	ldr	r2, [pc, #88]	; (800303c <PositionController+0x1dc>)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	4a16      	ldr	r2, [pc, #88]	; (8003044 <PositionController+0x1e4>)
 8002fec:	601a      	str	r2, [r3, #0]
	for(int i = 1; i< 3; i++) {
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	607b      	str	r3, [r7, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	f77f af38 	ble.w	8002e6c <PositionController+0xc>

	  }

	}

	flag_pos_controller = 0;
 8002ffc:	4b12      	ldr	r3, [pc, #72]	; (8003048 <PositionController+0x1e8>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	2400092c 	.word	0x2400092c
 8003014:	24000944 	.word	0x24000944
 8003018:	24000938 	.word	0x24000938
 800301c:	240067f8 	.word	0x240067f8
 8003020:	24000a14 	.word	0x24000a14
 8003024:	24000914 	.word	0x24000914
 8003028:	447a0000 	.word	0x447a0000
 800302c:	c47a0000 	.word	0xc47a0000
 8003030:	2400085c 	.word	0x2400085c
 8003034:	24000a08 	.word	0x24000a08
 8003038:	24000950 	.word	0x24000950
 800303c:	240003b0 	.word	0x240003b0
 8003040:	c0c00000 	.word	0xc0c00000
 8003044:	40c00000 	.word	0x40c00000
 8003048:	240002d4 	.word	0x240002d4

0800304c <SpeedController>:

void SpeedController() {
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
//executed at 1000 Hz
	for(int i = 1; i< 3; i++) {
 8003052:	2301      	movs	r3, #1
 8003054:	607b      	str	r3, [r7, #4]
 8003056:	e0dd      	b.n	8003214 <SpeedController+0x1c8>
		Joint_speed_target[i] = pos_command[i];
 8003058:	4a74      	ldr	r2, [pc, #464]	; (800322c <SpeedController+0x1e0>)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4413      	add	r3, r2
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	4973      	ldr	r1, [pc, #460]	; (8003230 <SpeedController+0x1e4>)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	440b      	add	r3, r1
 800306a:	601a      	str	r2, [r3, #0]

	  speed_previous_error[i] = speed_error[i];
 800306c:	4a71      	ldr	r2, [pc, #452]	; (8003234 <SpeedController+0x1e8>)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	4970      	ldr	r1, [pc, #448]	; (8003238 <SpeedController+0x1ec>)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	601a      	str	r2, [r3, #0]

	  speed_error[i] = Joint_speed_target[i] - actualSpeed[i];
 8003080:	4a6b      	ldr	r2, [pc, #428]	; (8003230 <SpeedController+0x1e4>)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	ed93 7a00 	vldr	s14, [r3]
 800308c:	4a6b      	ldr	r2, [pc, #428]	; (800323c <SpeedController+0x1f0>)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	edd3 7a00 	vldr	s15, [r3]
 8003098:	ee77 7a67 	vsub.f32	s15, s14, s15
 800309c:	4a65      	ldr	r2, [pc, #404]	; (8003234 <SpeedController+0x1e8>)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	edc3 7a00 	vstr	s15, [r3]

	  speed_integral[i] = speed_integral[i] + speed_error[i];
 80030a8:	4a65      	ldr	r2, [pc, #404]	; (8003240 <SpeedController+0x1f4>)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	ed93 7a00 	vldr	s14, [r3]
 80030b4:	4a5f      	ldr	r2, [pc, #380]	; (8003234 <SpeedController+0x1e8>)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	edd3 7a00 	vldr	s15, [r3]
 80030c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030c4:	4a5e      	ldr	r2, [pc, #376]	; (8003240 <SpeedController+0x1f4>)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	edc3 7a00 	vstr	s15, [r3]

	  speed_derivative[i] = speed_error[i] - speed_previous_error[i];
 80030d0:	4a58      	ldr	r2, [pc, #352]	; (8003234 <SpeedController+0x1e8>)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4413      	add	r3, r2
 80030d8:	ed93 7a00 	vldr	s14, [r3]
 80030dc:	4a56      	ldr	r2, [pc, #344]	; (8003238 <SpeedController+0x1ec>)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	edd3 7a00 	vldr	s15, [r3]
 80030e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030ec:	4a55      	ldr	r2, [pc, #340]	; (8003244 <SpeedController+0x1f8>)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	edc3 7a00 	vstr	s15, [r3]

	  //anti windup
	  if (speed_integral[i] > MAX_INTEGRAL_ERROR || speed_integral[i] < -MAX_INTEGRAL_ERROR) speed_integral[i] = 0;
 80030f8:	4a51      	ldr	r2, [pc, #324]	; (8003240 <SpeedController+0x1f4>)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	edd3 7a00 	vldr	s15, [r3]
 8003104:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8003248 <SpeedController+0x1fc>
 8003108:	eef4 7ac7 	vcmpe.f32	s15, s14
 800310c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003110:	dc0c      	bgt.n	800312c <SpeedController+0xe0>
 8003112:	4a4b      	ldr	r2, [pc, #300]	; (8003240 <SpeedController+0x1f4>)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4413      	add	r3, r2
 800311a:	edd3 7a00 	vldr	s15, [r3]
 800311e:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800324c <SpeedController+0x200>
 8003122:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800312a:	d506      	bpl.n	800313a <SpeedController+0xee>
 800312c:	4a44      	ldr	r2, [pc, #272]	; (8003240 <SpeedController+0x1f4>)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	f04f 0200 	mov.w	r2, #0
 8003138:	601a      	str	r2, [r3, #0]

	  speed_command[i] = speed_KP[i] * speed_error[i] + speed_KI[i] * speed_integral[i] + speed_KD[i] * speed_derivative[i];
 800313a:	4a45      	ldr	r2, [pc, #276]	; (8003250 <SpeedController+0x204>)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	ed93 7a00 	vldr	s14, [r3]
 8003146:	4a3b      	ldr	r2, [pc, #236]	; (8003234 <SpeedController+0x1e8>)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	edd3 7a00 	vldr	s15, [r3]
 8003152:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003156:	4a3f      	ldr	r2, [pc, #252]	; (8003254 <SpeedController+0x208>)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	edd3 6a00 	vldr	s13, [r3]
 8003162:	4a37      	ldr	r2, [pc, #220]	; (8003240 <SpeedController+0x1f4>)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	edd3 7a00 	vldr	s15, [r3]
 800316e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003172:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003176:	4a38      	ldr	r2, [pc, #224]	; (8003258 <SpeedController+0x20c>)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	edd3 6a00 	vldr	s13, [r3]
 8003182:	4a30      	ldr	r2, [pc, #192]	; (8003244 <SpeedController+0x1f8>)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	edd3 7a00 	vldr	s15, [r3]
 800318e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003196:	4a31      	ldr	r2, [pc, #196]	; (800325c <SpeedController+0x210>)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	edc3 7a00 	vstr	s15, [r3]
	  //apply limit
	  if (speed_command[i] < - T_MAX) speed_command[i] = -T_MAX;
 80031a2:	4a2e      	ldr	r2, [pc, #184]	; (800325c <SpeedController+0x210>)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	edd3 7a00 	vldr	s15, [r3]
 80031ae:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8003260 <SpeedController+0x214>
 80031b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ba:	d505      	bpl.n	80031c8 <SpeedController+0x17c>
 80031bc:	4a27      	ldr	r2, [pc, #156]	; (800325c <SpeedController+0x210>)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4413      	add	r3, r2
 80031c4:	4a27      	ldr	r2, [pc, #156]	; (8003264 <SpeedController+0x218>)
 80031c6:	601a      	str	r2, [r3, #0]

	  if (speed_command[i] > T_MAX)   speed_command[i] = T_MAX;
 80031c8:	4a24      	ldr	r2, [pc, #144]	; (800325c <SpeedController+0x210>)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	edd3 7a00 	vldr	s15, [r3]
 80031d4:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8003268 <SpeedController+0x21c>
 80031d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e0:	dd05      	ble.n	80031ee <SpeedController+0x1a2>
 80031e2:	4a1e      	ldr	r2, [pc, #120]	; (800325c <SpeedController+0x210>)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	4a20      	ldr	r2, [pc, #128]	; (800326c <SpeedController+0x220>)
 80031ec:	601a      	str	r2, [r3, #0]
	  if(SPEED_CONTROLLER_DEBUG) {
		//printf("SPEED\\ MOT_ID: %d - Target: %f - Actual: %f - Error: %f - Command: %f\n",i+1,Joint_speed_target[i],actualSpeed[i],speed_error[i],speed_command[i]);

	  }

	  SendTorque(i+1, speed_command[i]); //i+1 perche i motori sono 1,2,3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	491a      	ldr	r1, [pc, #104]	; (800325c <SpeedController+0x210>)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	edd3 7a00 	vldr	s15, [r3]
 80031fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003202:	4610      	mov	r0, r2
 8003204:	f7fe fbfe 	bl	8001a04 <SendTorque>

	  HAL_Delay(1);
 8003208:	2001      	movs	r0, #1
 800320a:	f001 f839 	bl	8004280 <HAL_Delay>
	for(int i = 1; i< 3; i++) {
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3301      	adds	r3, #1
 8003212:	607b      	str	r3, [r7, #4]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b02      	cmp	r3, #2
 8003218:	f77f af1e 	ble.w	8003058 <SpeedController+0xc>
	}
	flag_speed_controller = 0;
 800321c:	4b14      	ldr	r3, [pc, #80]	; (8003270 <SpeedController+0x224>)
 800321e:	2200      	movs	r2, #0
 8003220:	601a      	str	r2, [r3, #0]

}
 8003222:	bf00      	nop
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	240003b0 	.word	0x240003b0
 8003230:	24000350 	.word	0x24000350
 8003234:	24000874 	.word	0x24000874
 8003238:	240008fc 	.word	0x240008fc
 800323c:	240067e0 	.word	0x240067e0
 8003240:	2400695c 	.word	0x2400695c
 8003244:	240067ec 	.word	0x240067ec
 8003248:	447a0000 	.word	0x447a0000
 800324c:	c47a0000 	.word	0xc47a0000
 8003250:	24006950 	.word	0x24006950
 8003254:	240008f0 	.word	0x240008f0
 8003258:	24000908 	.word	0x24000908
 800325c:	24000338 	.word	0x24000338
 8003260:	c2400000 	.word	0xc2400000
 8003264:	c2400000 	.word	0xc2400000
 8003268:	42400000 	.word	0x42400000
 800326c:	42400000 	.word	0x42400000
 8003270:	240002d8 	.word	0x240002d8

08003274 <POPUP_system_check>:
 * 2 - send system_status request to link board (x2)
 * -- link board answer with its id in frame 0 and the status of sensors in other frame
 *
 *
 */
void POPUP_system_check() {
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
	//start procedure
	//moto
	printf("System check started..\n");
 800327a:	484a      	ldr	r0, [pc, #296]	; (80033a4 <POPUP_system_check+0x130>)
 800327c:	f00a fab8 	bl	800d7f0 <puts>


	HAL_GPIO_WritePin(GPIOB,LD3_Pin, SET); // red led on
 8003280:	2201      	movs	r2, #1
 8003282:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003286:	4848      	ldr	r0, [pc, #288]	; (80033a8 <POPUP_system_check+0x134>)
 8003288:	f003 fe4a 	bl	8006f20 <HAL_GPIO_WritePin>

	int i = 0;
 800328c:	2300      	movs	r3, #0
 800328e:	607b      	str	r3, [r7, #4]

	for(i = 1; i<3; i++) {
 8003290:	2301      	movs	r3, #1
 8003292:	607b      	str	r3, [r7, #4]
 8003294:	e023      	b.n	80032de <POPUP_system_check+0x6a>
		DeactivateMotor(i+1);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	3301      	adds	r3, #1
 800329a:	4618      	mov	r0, r3
 800329c:	f7fe fb7a 	bl	8001994 <DeactivateMotor>
		while(motor_status_flag[i] == 0)
 80032a0:	e00e      	b.n	80032c0 <POPUP_system_check+0x4c>
			{
				printf("Motor %d not found\n",i+1);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3301      	adds	r3, #1
 80032a6:	4619      	mov	r1, r3
 80032a8:	4840      	ldr	r0, [pc, #256]	; (80033ac <POPUP_system_check+0x138>)
 80032aa:	f00a fa1b 	bl	800d6e4 <iprintf>
				HAL_Delay(1000);
 80032ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032b2:	f000 ffe5 	bl	8004280 <HAL_Delay>
				DeactivateMotor(i+1);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	3301      	adds	r3, #1
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fe fb6a 	bl	8001994 <DeactivateMotor>
		while(motor_status_flag[i] == 0)
 80032c0:	4a3b      	ldr	r2, [pc, #236]	; (80033b0 <POPUP_system_check+0x13c>)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0ea      	beq.n	80032a2 <POPUP_system_check+0x2e>
			}
		printf("Motor %d found\n",i+1);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3301      	adds	r3, #1
 80032d0:	4619      	mov	r1, r3
 80032d2:	4838      	ldr	r0, [pc, #224]	; (80033b4 <POPUP_system_check+0x140>)
 80032d4:	f00a fa06 	bl	800d6e4 <iprintf>
	for(i = 1; i<3; i++) {
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3301      	adds	r3, #1
 80032dc:	607b      	str	r3, [r7, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	ddd8      	ble.n	8003296 <POPUP_system_check+0x22>


	//link board status check
	//2 link board should be found

	for(i = 1; i < 2; i++) {
 80032e4:	2301      	movs	r3, #1
 80032e6:	607b      	str	r3, [r7, #4]
 80032e8:	e03e      	b.n	8003368 <POPUP_system_check+0xf4>
	while(link_status_flag[i] == 0) {
		printf("Link Board %d not found\n",i+1);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3301      	adds	r3, #1
 80032ee:	4619      	mov	r1, r3
 80032f0:	4831      	ldr	r0, [pc, #196]	; (80033b8 <POPUP_system_check+0x144>)
 80032f2:	f00a f9f7 	bl	800d6e4 <iprintf>
		HAL_Delay(1000);
 80032f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032fa:	f000 ffc1 	bl	8004280 <HAL_Delay>
	while(link_status_flag[i] == 0) {
 80032fe:	4a2f      	ldr	r2, [pc, #188]	; (80033bc <POPUP_system_check+0x148>)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0ef      	beq.n	80032ea <POPUP_system_check+0x76>
	}
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, RESET);
 800330a:	2200      	movs	r2, #0
 800330c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003310:	4825      	ldr	r0, [pc, #148]	; (80033a8 <POPUP_system_check+0x134>)
 8003312:	f003 fe05 	bl	8006f20 <HAL_GPIO_WritePin>

	if (link_status_flag[i] == 1) printf("Link %d Sensor OK\n",i+1);
 8003316:	4a29      	ldr	r2, [pc, #164]	; (80033bc <POPUP_system_check+0x148>)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d106      	bne.n	8003330 <POPUP_system_check+0xbc>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	3301      	adds	r3, #1
 8003326:	4619      	mov	r1, r3
 8003328:	4825      	ldr	r0, [pc, #148]	; (80033c0 <POPUP_system_check+0x14c>)
 800332a:	f00a f9db 	bl	800d6e4 <iprintf>
 800332e:	e018      	b.n	8003362 <POPUP_system_check+0xee>
    else if (link_status_flag[i] == 4) printf("Link Board %d IMUs error\n",i+1);
 8003330:	4a22      	ldr	r2, [pc, #136]	; (80033bc <POPUP_system_check+0x148>)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003338:	2b04      	cmp	r3, #4
 800333a:	d106      	bne.n	800334a <POPUP_system_check+0xd6>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3301      	adds	r3, #1
 8003340:	4619      	mov	r1, r3
 8003342:	4820      	ldr	r0, [pc, #128]	; (80033c4 <POPUP_system_check+0x150>)
 8003344:	f00a f9ce 	bl	800d6e4 <iprintf>
 8003348:	e00b      	b.n	8003362 <POPUP_system_check+0xee>
    else if (link_status_flag[i] == 2) printf("Link Board %d RBS_ADC error\n",i+1);
 800334a:	4a1c      	ldr	r2, [pc, #112]	; (80033bc <POPUP_system_check+0x148>)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003352:	2b02      	cmp	r3, #2
 8003354:	d105      	bne.n	8003362 <POPUP_system_check+0xee>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3301      	adds	r3, #1
 800335a:	4619      	mov	r1, r3
 800335c:	481a      	ldr	r0, [pc, #104]	; (80033c8 <POPUP_system_check+0x154>)
 800335e:	f00a f9c1 	bl	800d6e4 <iprintf>
	for(i = 1; i < 2; i++) {
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3301      	adds	r3, #1
 8003366:	607b      	str	r3, [r7, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b01      	cmp	r3, #1
 800336c:	ddc7      	ble.n	80032fe <POPUP_system_check+0x8a>
	}
	//sent status check command
	if(link_status_flag[0] == 1) {
 800336e:	4b13      	ldr	r3, [pc, #76]	; (80033bc <POPUP_system_check+0x148>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d105      	bne.n	8003382 <POPUP_system_check+0x10e>
	CAN_TX_link_board_status_check(10); //send status check to link board 1
 8003376:	200a      	movs	r0, #10
 8003378:	f7fe fa22 	bl	80017c0 <CAN_TX_link_board_status_check>
	printf("sent status check to link board 1\n");
 800337c:	4813      	ldr	r0, [pc, #76]	; (80033cc <POPUP_system_check+0x158>)
 800337e:	f00a fa37 	bl	800d7f0 <puts>
	}

	if(link_status_flag[1] == 1) {
 8003382:	4b0e      	ldr	r3, [pc, #56]	; (80033bc <POPUP_system_check+0x148>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d105      	bne.n	8003396 <POPUP_system_check+0x122>
	CAN_TX_link_board_status_check(11); //send status check to link board 1
 800338a:	200b      	movs	r0, #11
 800338c:	f7fe fa18 	bl	80017c0 <CAN_TX_link_board_status_check>
	printf("sent status check to link board 2\n");
 8003390:	480f      	ldr	r0, [pc, #60]	; (80033d0 <POPUP_system_check+0x15c>)
 8003392:	f00a fa2d 	bl	800d7f0 <puts>
	}

	printf("\nSystem check completed\n\n\n");
 8003396:	480f      	ldr	r0, [pc, #60]	; (80033d4 <POPUP_system_check+0x160>)
 8003398:	f00a fa2a 	bl	800d7f0 <puts>

}
 800339c:	bf00      	nop
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	080120b0 	.word	0x080120b0
 80033a8:	58020400 	.word	0x58020400
 80033ac:	080120c8 	.word	0x080120c8
 80033b0:	24000344 	.word	0x24000344
 80033b4:	080120dc 	.word	0x080120dc
 80033b8:	080120ec 	.word	0x080120ec
 80033bc:	24006880 	.word	0x24006880
 80033c0:	08012108 	.word	0x08012108
 80033c4:	0801211c 	.word	0x0801211c
 80033c8:	08012138 	.word	0x08012138
 80033cc:	08012158 	.word	0x08012158
 80033d0:	0801217c 	.word	0x0801217c
 80033d4:	080121a0 	.word	0x080121a0

080033d8 <POPUP_activate_motors>:

void POPUP_activate_motors() {
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
	int i = 0;
 80033de:	2300      	movs	r3, #0
 80033e0:	607b      	str	r3, [r7, #4]
		for(i = 0; i<3; i++) {
 80033e2:	2300      	movs	r3, #0
 80033e4:	607b      	str	r3, [r7, #4]
 80033e6:	e00a      	b.n	80033fe <POPUP_activate_motors+0x26>
		ActivateMotor(i+1);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3301      	adds	r3, #1
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7fe fa8d 	bl	800190c <ActivateMotor>
		HAL_Delay(100);
 80033f2:	2064      	movs	r0, #100	; 0x64
 80033f4:	f000 ff44 	bl	8004280 <HAL_Delay>
		for(i = 0; i<3; i++) {
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3301      	adds	r3, #1
 80033fc:	607b      	str	r3, [r7, #4]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b02      	cmp	r3, #2
 8003402:	ddf1      	ble.n	80033e8 <POPUP_activate_motors+0x10>
	}
}
 8003404:	bf00      	nop
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
	...

08003410 <POPUP_start_controllers>:

void POPUP_start_controllers() {
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
	//start timers base
	HAL_TIM_Base_Start_IT(&htim2);
 8003414:	4803      	ldr	r0, [pc, #12]	; (8003424 <POPUP_start_controllers+0x14>)
 8003416:	f006 fa9f 	bl	8009958 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 800341a:	4803      	ldr	r0, [pc, #12]	; (8003428 <POPUP_start_controllers+0x18>)
 800341c:	f006 fa9c 	bl	8009958 <HAL_TIM_Base_Start_IT>

}
 8003420:	bf00      	nop
 8003422:	bd80      	pop	{r7, pc}
 8003424:	24006804 	.word	0x24006804
 8003428:	240008a4 	.word	0x240008a4

0800342c <POPUP_homing>:

void POPUP_homing() {
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af04      	add	r7, sp, #16

	 Cartesian_target[0] = 0.5; //X
 8003432:	4b41      	ldr	r3, [pc, #260]	; (8003538 <POPUP_homing+0x10c>)
 8003434:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8003438:	601a      	str	r2, [r3, #0]
	  Cartesian_target[1] = -0.1; //Y
 800343a:	4b3f      	ldr	r3, [pc, #252]	; (8003538 <POPUP_homing+0x10c>)
 800343c:	4a3f      	ldr	r2, [pc, #252]	; (800353c <POPUP_homing+0x110>)
 800343e:	605a      	str	r2, [r3, #4]
	  Cartesian_target[2] = 0.7; //Z
 8003440:	4b3d      	ldr	r3, [pc, #244]	; (8003538 <POPUP_homing+0x10c>)
 8003442:	4a3f      	ldr	r2, [pc, #252]	; (8003540 <POPUP_homing+0x114>)
 8003444:	609a      	str	r2, [r3, #8]

	  printf("Target = [ X: %f   Y: %f   Z: %f ]\n",Cartesian_target[0],Cartesian_target[1],Cartesian_target[2]);
 8003446:	4b3c      	ldr	r3, [pc, #240]	; (8003538 <POPUP_homing+0x10c>)
 8003448:	edd3 7a00 	vldr	s15, [r3]
 800344c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003450:	4b39      	ldr	r3, [pc, #228]	; (8003538 <POPUP_homing+0x10c>)
 8003452:	edd3 7a01 	vldr	s15, [r3, #4]
 8003456:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800345a:	4b37      	ldr	r3, [pc, #220]	; (8003538 <POPUP_homing+0x10c>)
 800345c:	edd3 6a02 	vldr	s13, [r3, #8]
 8003460:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8003464:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003468:	ed8d 7b00 	vstr	d7, [sp]
 800346c:	ec53 2b15 	vmov	r2, r3, d5
 8003470:	4834      	ldr	r0, [pc, #208]	; (8003544 <POPUP_homing+0x118>)
 8003472:	f00a f937 	bl	800d6e4 <iprintf>

	  InverseKinematic(Cartesian_target, 1); //Target[3] , Mode (elbow up,down)
 8003476:	2101      	movs	r1, #1
 8003478:	482f      	ldr	r0, [pc, #188]	; (8003538 <POPUP_homing+0x10c>)
 800347a:	f7fe fb61 	bl	8001b40 <InverseKinematic>

	  printf("Joint Target = [ q1: %f   q2: %f   q3: %f ]\n",Joint_target[0],Joint_target[1],Joint_target[2]);
 800347e:	4b32      	ldr	r3, [pc, #200]	; (8003548 <POPUP_homing+0x11c>)
 8003480:	edd3 7a00 	vldr	s15, [r3]
 8003484:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003488:	4b2f      	ldr	r3, [pc, #188]	; (8003548 <POPUP_homing+0x11c>)
 800348a:	edd3 7a01 	vldr	s15, [r3, #4]
 800348e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003492:	4b2d      	ldr	r3, [pc, #180]	; (8003548 <POPUP_homing+0x11c>)
 8003494:	edd3 6a02 	vldr	s13, [r3, #8]
 8003498:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800349c:	ed8d 6b02 	vstr	d6, [sp, #8]
 80034a0:	ed8d 7b00 	vstr	d7, [sp]
 80034a4:	ec53 2b15 	vmov	r2, r3, d5
 80034a8:	4828      	ldr	r0, [pc, #160]	; (800354c <POPUP_homing+0x120>)
 80034aa:	f00a f91b 	bl	800d6e4 <iprintf>
	  printf("Actual Joint position = [ q1: %f   q2: %f  q3: %f ]\n",actualPos[0],actualPos[1],actualPos[2]);
 80034ae:	4b28      	ldr	r3, [pc, #160]	; (8003550 <POPUP_homing+0x124>)
 80034b0:	edd3 7a00 	vldr	s15, [r3]
 80034b4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80034b8:	4b25      	ldr	r3, [pc, #148]	; (8003550 <POPUP_homing+0x124>)
 80034ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80034be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80034c2:	4b23      	ldr	r3, [pc, #140]	; (8003550 <POPUP_homing+0x124>)
 80034c4:	edd3 6a02 	vldr	s13, [r3, #8]
 80034c8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80034cc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80034d0:	ed8d 7b00 	vstr	d7, [sp]
 80034d4:	ec53 2b15 	vmov	r2, r3, d5
 80034d8:	481e      	ldr	r0, [pc, #120]	; (8003554 <POPUP_homing+0x128>)
 80034da:	f00a f903 	bl	800d6e4 <iprintf>
	  Joint_target[2] = -Joint_target[2];
 80034de:	4b1a      	ldr	r3, [pc, #104]	; (8003548 <POPUP_homing+0x11c>)
 80034e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80034e4:	eef1 7a67 	vneg.f32	s15, s15
 80034e8:	4b17      	ldr	r3, [pc, #92]	; (8003548 <POPUP_homing+0x11c>)
 80034ea:	edc3 7a02 	vstr	s15, [r3, #8]
	  printf("\nStarting trajectory planner...\n");
 80034ee:	481a      	ldr	r0, [pc, #104]	; (8003558 <POPUP_homing+0x12c>)
 80034f0:	f00a f97e 	bl	800d7f0 <puts>

	  TrajectorPlanner(actualPos, Joint_target, 10);
 80034f4:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80034f8:	4913      	ldr	r1, [pc, #76]	; (8003548 <POPUP_homing+0x11c>)
 80034fa:	4815      	ldr	r0, [pc, #84]	; (8003550 <POPUP_homing+0x124>)
 80034fc:	f7ff f90a 	bl	8002714 <TrajectorPlanner>

	  printf("trajectory planning completed.\n");
 8003500:	4816      	ldr	r0, [pc, #88]	; (800355c <POPUP_homing+0x130>)
 8003502:	f00a f975 	bl	800d7f0 <puts>
			  printf("\n\n");
		  	  }
	  }

	  //assign the first planned variable to the position controller input
	  for(int m = 0; m<3; m++) {
 8003506:	2300      	movs	r3, #0
 8003508:	607b      	str	r3, [r7, #4]
 800350a:	e00c      	b.n	8003526 <POPUP_homing+0xfa>
		  Joint_target_planned[m] = Joint_target_plan[0][m];
 800350c:	4a14      	ldr	r2, [pc, #80]	; (8003560 <POPUP_homing+0x134>)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	4913      	ldr	r1, [pc, #76]	; (8003564 <POPUP_homing+0x138>)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	601a      	str	r2, [r3, #0]
	  for(int m = 0; m<3; m++) {
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3301      	adds	r3, #1
 8003524:	607b      	str	r3, [r7, #4]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b02      	cmp	r3, #2
 800352a:	ddef      	ble.n	800350c <POPUP_homing+0xe0>
	  }
}
 800352c:	bf00      	nop
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	24000868 	.word	0x24000868
 800353c:	bdcccccd 	.word	0xbdcccccd
 8003540:	3f333333 	.word	0x3f333333
 8003544:	080121bc 	.word	0x080121bc
 8003548:	24006888 	.word	0x24006888
 800354c:	080121e0 	.word	0x080121e0
 8003550:	240067f8 	.word	0x240067f8
 8003554:	08012210 	.word	0x08012210
 8003558:	08012248 	.word	0x08012248
 800355c:	08012268 	.word	0x08012268
 8003560:	24006968 	.word	0x24006968
 8003564:	24000938 	.word	0x24000938

08003568 <POPUP_calibrate_link_sensors>:

void POPUP_calibrate_link_sensors(int id) {
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
	HAL_Delay(1000);
 8003570:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003574:	f000 fe84 	bl	8004280 <HAL_Delay>
	CAN_TX_link_board_calibration(id); //send status check to link board 1
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7fe f949 	bl	8001810 <CAN_TX_link_board_calibration>
	printf("sent calibration command to link board %d\n\n",(id - 9));
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	3b09      	subs	r3, #9
 8003582:	4619      	mov	r1, r3
 8003584:	480d      	ldr	r0, [pc, #52]	; (80035bc <POPUP_calibrate_link_sensors+0x54>)
 8003586:	f00a f8ad 	bl	800d6e4 <iprintf>
	//wait calibration check from link board
    while(link_cal_check[id - 10] == 0) {
 800358a:	e006      	b.n	800359a <POPUP_calibrate_link_sensors+0x32>
    	printf("Waiting calibration check from link board\n");
 800358c:	480c      	ldr	r0, [pc, #48]	; (80035c0 <POPUP_calibrate_link_sensors+0x58>)
 800358e:	f00a f92f 	bl	800d7f0 <puts>
    	HAL_Delay(1000);
 8003592:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003596:	f000 fe73 	bl	8004280 <HAL_Delay>
    while(link_cal_check[id - 10] == 0) {
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3b0a      	subs	r3, #10
 800359e:	4a09      	ldr	r2, [pc, #36]	; (80035c4 <POPUP_calibrate_link_sensors+0x5c>)
 80035a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0f1      	beq.n	800358c <POPUP_calibrate_link_sensors+0x24>
    }
    printf("Calibration check received from link board %d\n",(id - 9));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	3b09      	subs	r3, #9
 80035ac:	4619      	mov	r1, r3
 80035ae:	4806      	ldr	r0, [pc, #24]	; (80035c8 <POPUP_calibrate_link_sensors+0x60>)
 80035b0:	f00a f898 	bl	800d6e4 <iprintf>
}
 80035b4:	bf00      	nop
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	08012288 	.word	0x08012288
 80035c0:	080122b4 	.word	0x080122b4
 80035c4:	24006850 	.word	0x24006850
 80035c8:	080122e0 	.word	0x080122e0

080035cc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this callback and toggle LED
	if (htim == &htim2) {
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a12      	ldr	r2, [pc, #72]	; (8003620 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d109      	bne.n	80035f0 <HAL_TIM_PeriodElapsedCallback+0x24>
		if(input_flag == 0)
 80035dc:	4b11      	ldr	r3, [pc, #68]	; (8003624 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d103      	bne.n	80035ec <HAL_TIM_PeriodElapsedCallback+0x20>
		flag_speed_controller = 1;
 80035e4:	4b10      	ldr	r3, [pc, #64]	; (8003628 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80035e6:	2201      	movs	r2, #1
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	e001      	b.n	80035f0 <HAL_TIM_PeriodElapsedCallback+0x24>
		else
		SpeedController();
 80035ec:	f7ff fd2e 	bl	800304c <SpeedController>
	}
	if (htim == &htim3) {
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a0e      	ldr	r2, [pc, #56]	; (800362c <HAL_TIM_PeriodElapsedCallback+0x60>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d109      	bne.n	800360c <HAL_TIM_PeriodElapsedCallback+0x40>
		if(input_flag == 0)
 80035f8:	4b0a      	ldr	r3, [pc, #40]	; (8003624 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d103      	bne.n	8003608 <HAL_TIM_PeriodElapsedCallback+0x3c>
		flag_pos_controller = 1;
 8003600:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003602:	2201      	movs	r2, #1
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	e001      	b.n	800360c <HAL_TIM_PeriodElapsedCallback+0x40>
		else
		PositionController();
 8003608:	f7ff fc2a 	bl	8002e60 <PositionController>
	}

	if (htim == &htim4) {
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a09      	ldr	r2, [pc, #36]	; (8003634 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d101      	bne.n	8003618 <HAL_TIM_PeriodElapsedCallback+0x4c>
		plan_step();
 8003614:	f7ff fbb6 	bl	8002d84 <plan_step>
	}

}
 8003618:	bf00      	nop
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	24006804 	.word	0x24006804
 8003624:	240002ec 	.word	0x240002ec
 8003628:	240002d8 	.word	0x240002d8
 800362c:	240008a4 	.word	0x240008a4
 8003630:	240002d4 	.word	0x240002d4
 8003634:	24000364 	.word	0x24000364

08003638 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
	//UART3_rxBuffer[3] = "\0" ;
	input_counter++;
 8003640:	4b24      	ldr	r3, [pc, #144]	; (80036d4 <HAL_UART_RxCpltCallback+0x9c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	3301      	adds	r3, #1
 8003646:	4a23      	ldr	r2, [pc, #140]	; (80036d4 <HAL_UART_RxCpltCallback+0x9c>)
 8003648:	6013      	str	r3, [r2, #0]

	int xx = (int) atoi ((const char *) UART3_rxBuffer) ;
 800364a:	4823      	ldr	r0, [pc, #140]	; (80036d8 <HAL_UART_RxCpltCallback+0xa0>)
 800364c:	f009 f9c0 	bl	800c9d0 <atoi>
 8003650:	60b8      	str	r0, [r7, #8]

	//this callback is activate when new input has to be inseterd
	if(input_counter == 1) {//inserted X
 8003652:	4b20      	ldr	r3, [pc, #128]	; (80036d4 <HAL_UART_RxCpltCallback+0x9c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d108      	bne.n	800366c <HAL_UART_RxCpltCallback+0x34>
		temp_x = xx;
 800365a:	4a20      	ldr	r2, [pc, #128]	; (80036dc <HAL_UART_RxCpltCallback+0xa4>)
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	6013      	str	r3, [r2, #0]
		printf("X: %d\n",temp_x);
 8003660:	4b1e      	ldr	r3, [pc, #120]	; (80036dc <HAL_UART_RxCpltCallback+0xa4>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4619      	mov	r1, r3
 8003666:	481e      	ldr	r0, [pc, #120]	; (80036e0 <HAL_UART_RxCpltCallback+0xa8>)
 8003668:	f00a f83c 	bl	800d6e4 <iprintf>
	}

	if(input_counter == 2) {//inserted y
 800366c:	4b19      	ldr	r3, [pc, #100]	; (80036d4 <HAL_UART_RxCpltCallback+0x9c>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b02      	cmp	r3, #2
 8003672:	d108      	bne.n	8003686 <HAL_UART_RxCpltCallback+0x4e>
			temp_y = xx;
 8003674:	4a1b      	ldr	r2, [pc, #108]	; (80036e4 <HAL_UART_RxCpltCallback+0xac>)
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	6013      	str	r3, [r2, #0]
			printf("Y: %d\n",temp_y);
 800367a:	4b1a      	ldr	r3, [pc, #104]	; (80036e4 <HAL_UART_RxCpltCallback+0xac>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4619      	mov	r1, r3
 8003680:	4819      	ldr	r0, [pc, #100]	; (80036e8 <HAL_UART_RxCpltCallback+0xb0>)
 8003682:	f00a f82f 	bl	800d6e4 <iprintf>
	}

	if(input_counter == 3) {//inserted z
 8003686:	4b13      	ldr	r3, [pc, #76]	; (80036d4 <HAL_UART_RxCpltCallback+0x9c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2b03      	cmp	r3, #3
 800368c:	d10b      	bne.n	80036a6 <HAL_UART_RxCpltCallback+0x6e>
				temp_z = xx;
 800368e:	4a17      	ldr	r2, [pc, #92]	; (80036ec <HAL_UART_RxCpltCallback+0xb4>)
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	6013      	str	r3, [r2, #0]
				printf("Z: %d\n",temp_z);
 8003694:	4b15      	ldr	r3, [pc, #84]	; (80036ec <HAL_UART_RxCpltCallback+0xb4>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4619      	mov	r1, r3
 800369a:	4815      	ldr	r0, [pc, #84]	; (80036f0 <HAL_UART_RxCpltCallback+0xb8>)
 800369c:	f00a f822 	bl	800d6e4 <iprintf>
				flag_wait_new_input = 1;
 80036a0:	4b14      	ldr	r3, [pc, #80]	; (80036f4 <HAL_UART_RxCpltCallback+0xbc>)
 80036a2:	2201      	movs	r2, #1
 80036a4:	601a      	str	r2, [r3, #0]

	}

	for(int i = 0; i< 4; i++) {
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]
 80036aa:	e007      	b.n	80036bc <HAL_UART_RxCpltCallback+0x84>
	UART3_rxBuffer[i] = 0;
 80036ac:	4a0a      	ldr	r2, [pc, #40]	; (80036d8 <HAL_UART_RxCpltCallback+0xa0>)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4413      	add	r3, r2
 80036b2:	2200      	movs	r2, #0
 80036b4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i< 4; i++) {
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	3301      	adds	r3, #1
 80036ba:	60fb      	str	r3, [r7, #12]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2b03      	cmp	r3, #3
 80036c0:	ddf4      	ble.n	80036ac <HAL_UART_RxCpltCallback+0x74>
	}

	HAL_UART_Receive_IT(&huart3, UART3_rxBuffer, 4);
 80036c2:	2204      	movs	r2, #4
 80036c4:	4904      	ldr	r1, [pc, #16]	; (80036d8 <HAL_UART_RxCpltCallback+0xa0>)
 80036c6:	480c      	ldr	r0, [pc, #48]	; (80036f8 <HAL_UART_RxCpltCallback+0xc0>)
 80036c8:	f006 ffb8 	bl	800a63c <HAL_UART_Receive_IT>

}
 80036cc:	bf00      	nop
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	240002f4 	.word	0x240002f4
 80036d8:	240002f0 	.word	0x240002f0
 80036dc:	240002f8 	.word	0x240002f8
 80036e0:	08012310 	.word	0x08012310
 80036e4:	240002fc 	.word	0x240002fc
 80036e8:	08012318 	.word	0x08012318
 80036ec:	24000300 	.word	0x24000300
 80036f0:	08012320 	.word	0x08012320
 80036f4:	240002e8 	.word	0x240002e8
 80036f8:	240003bc 	.word	0x240003bc

080036fc <uint_to_float>:


float uint_to_float( int x_int , float x_min , float x_max , int bits) {
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	ed87 0a02 	vstr	s0, [r7, #8]
 8003708:	edc7 0a01 	vstr	s1, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]

  float span = x_max - x_min;
 800370e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003712:	edd7 7a02 	vldr	s15, [r7, #8]
 8003716:	ee77 7a67 	vsub.f32	s15, s14, s15
 800371a:	edc7 7a05 	vstr	s15, [r7, #20]
  float offset = x_min;
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	613b      	str	r3, [r7, #16]

  return ((float)x_int) * span / ((float)((1 << bits) - 1)) + offset;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	ee07 3a90 	vmov	s15, r3
 8003728:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800372c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003730:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003734:	2201      	movs	r2, #1
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	3b01      	subs	r3, #1
 800373e:	ee07 3a90 	vmov	s15, r3
 8003742:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800374a:	edd7 7a04 	vldr	s15, [r7, #16]
 800374e:	ee77 7a27 	vadd.f32	s15, s14, s15

}
 8003752:	eeb0 0a67 	vmov.f32	s0, s15
 8003756:	371c      	adds	r7, #28
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <float_to_uint>:

int float_to_uint(float x, float x_min , float x_max, unsigned int bits) {
 8003760:	b480      	push	{r7}
 8003762:	b087      	sub	sp, #28
 8003764:	af00      	add	r7, sp, #0
 8003766:	ed87 0a03 	vstr	s0, [r7, #12]
 800376a:	edc7 0a02 	vstr	s1, [r7, #8]
 800376e:	ed87 1a01 	vstr	s2, [r7, #4]
 8003772:	6038      	str	r0, [r7, #0]

  float span = x_max - x_min;
 8003774:	ed97 7a01 	vldr	s14, [r7, #4]
 8003778:	edd7 7a02 	vldr	s15, [r7, #8]
 800377c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003780:	edc7 7a05 	vstr	s15, [r7, #20]
  if (x < x_min) x = x_min;
 8003784:	ed97 7a03 	vldr	s14, [r7, #12]
 8003788:	edd7 7a02 	vldr	s15, [r7, #8]
 800378c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003794:	d502      	bpl.n	800379c <float_to_uint+0x3c>
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	e00a      	b.n	80037b2 <float_to_uint+0x52>
  else if (x > x_max ) x = x_max;
 800379c:	ed97 7a03 	vldr	s14, [r7, #12]
 80037a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80037a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ac:	dd01      	ble.n	80037b2 <float_to_uint+0x52>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	60fb      	str	r3, [r7, #12]

  return (int)((x - x_min) * ((float)((1 << bits) - 1) / span));
 80037b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80037b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80037ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80037be:	2201      	movs	r2, #1
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	fa02 f303 	lsl.w	r3, r2, r3
 80037c6:	3b01      	subs	r3, #1
 80037c8:	ee07 3a90 	vmov	s15, r3
 80037cc:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80037d0:	edd7 6a05 	vldr	s13, [r7, #20]
 80037d4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80037d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037e0:	ee17 3a90 	vmov	r3, s15

}
 80037e4:	4618      	mov	r0, r3
 80037e6:	371c      	adds	r7, #28
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037f4:	b672      	cpsid	i
}
 80037f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037f8:	e7fe      	b.n	80037f8 <Error_Handler+0x8>
	...

080037fc <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8003804:	4a07      	ldr	r2, [pc, #28]	; (8003824 <RetargetInit+0x28>)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800380a:	4b07      	ldr	r3, [pc, #28]	; (8003828 <RetargetInit+0x2c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6898      	ldr	r0, [r3, #8]
 8003810:	2300      	movs	r3, #0
 8003812:	2202      	movs	r2, #2
 8003814:	2100      	movs	r1, #0
 8003816:	f009 fff3 	bl	800d800 <setvbuf>
}
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	2400c728 	.word	0x2400c728
 8003828:	24000010 	.word	0x24000010

0800382c <_isatty>:

int _isatty(int fd) {
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	db04      	blt.n	8003844 <_isatty+0x18>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b02      	cmp	r3, #2
 800383e:	dc01      	bgt.n	8003844 <_isatty+0x18>
    return 1;
 8003840:	2301      	movs	r3, #1
 8003842:	e005      	b.n	8003850 <_isatty+0x24>

  errno = EBADF;
 8003844:	f009 f8c8 	bl	800c9d8 <__errno>
 8003848:	4603      	mov	r3, r0
 800384a:	2209      	movs	r2, #9
 800384c:	601a      	str	r2, [r3, #0]
  return 0;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <_write>:

int _write(int fd, char* ptr, int len) {
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d002      	beq.n	8003870 <_write+0x18>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2b02      	cmp	r3, #2
 800386e:	d111      	bne.n	8003894 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8003870:	4b0e      	ldr	r3, [pc, #56]	; (80038ac <_write+0x54>)
 8003872:	6818      	ldr	r0, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	b29a      	uxth	r2, r3
 8003878:	f04f 33ff 	mov.w	r3, #4294967295
 800387c:	68b9      	ldr	r1, [r7, #8]
 800387e:	f006 fd73 	bl	800a368 <HAL_UART_Transmit>
 8003882:	4603      	mov	r3, r0
 8003884:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003886:	7dfb      	ldrb	r3, [r7, #23]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <_write+0x38>
      return len;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	e008      	b.n	80038a2 <_write+0x4a>
    else
      return EIO;
 8003890:	2305      	movs	r3, #5
 8003892:	e006      	b.n	80038a2 <_write+0x4a>
  }
  errno = EBADF;
 8003894:	f009 f8a0 	bl	800c9d8 <__errno>
 8003898:	4603      	mov	r3, r0
 800389a:	2209      	movs	r2, #9
 800389c:	601a      	str	r2, [r3, #0]
  return -1;
 800389e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3718      	adds	r7, #24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	2400c728 	.word	0x2400c728

080038b0 <_close>:

int _close(int fd) {
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	db04      	blt.n	80038c8 <_close+0x18>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	dc01      	bgt.n	80038c8 <_close+0x18>
    return 0;
 80038c4:	2300      	movs	r3, #0
 80038c6:	e006      	b.n	80038d6 <_close+0x26>

  errno = EBADF;
 80038c8:	f009 f886 	bl	800c9d8 <__errno>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2209      	movs	r2, #9
 80038d0:	601a      	str	r2, [r3, #0]
  return -1;
 80038d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80038de:	b580      	push	{r7, lr}
 80038e0:	b084      	sub	sp, #16
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	60f8      	str	r0, [r7, #12]
 80038e6:	60b9      	str	r1, [r7, #8]
 80038e8:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80038ea:	f009 f875 	bl	800c9d8 <__errno>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2209      	movs	r2, #9
 80038f2:	601a      	str	r2, [r3, #0]
  return -1;
 80038f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <_read>:

int _read(int fd, char* ptr, int len) {
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d110      	bne.n	8003934 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8003912:	4b0e      	ldr	r3, [pc, #56]	; (800394c <_read+0x4c>)
 8003914:	6818      	ldr	r0, [r3, #0]
 8003916:	f04f 33ff 	mov.w	r3, #4294967295
 800391a:	2201      	movs	r2, #1
 800391c:	68b9      	ldr	r1, [r7, #8]
 800391e:	f006 fdb9 	bl	800a494 <HAL_UART_Receive>
 8003922:	4603      	mov	r3, r0
 8003924:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003926:	7dfb      	ldrb	r3, [r7, #23]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <_read+0x30>
      return 1;
 800392c:	2301      	movs	r3, #1
 800392e:	e008      	b.n	8003942 <_read+0x42>
    else
      return EIO;
 8003930:	2305      	movs	r3, #5
 8003932:	e006      	b.n	8003942 <_read+0x42>
  }
  errno = EBADF;
 8003934:	f009 f850 	bl	800c9d8 <__errno>
 8003938:	4603      	mov	r3, r0
 800393a:	2209      	movs	r2, #9
 800393c:	601a      	str	r2, [r3, #0]
  return -1;
 800393e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003942:	4618      	mov	r0, r3
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	2400c728 	.word	0x2400c728

08003950 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	db08      	blt.n	8003972 <_fstat+0x22>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b02      	cmp	r3, #2
 8003964:	dc05      	bgt.n	8003972 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800396c:	605a      	str	r2, [r3, #4]
    return 0;
 800396e:	2300      	movs	r3, #0
 8003970:	e005      	b.n	800397e <_fstat+0x2e>
  }

  errno = EBADF;
 8003972:	f009 f831 	bl	800c9d8 <__errno>
 8003976:	4603      	mov	r3, r0
 8003978:	2209      	movs	r2, #9
 800397a:	601a      	str	r2, [r3, #0]
  return 0;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800398e:	4b0a      	ldr	r3, [pc, #40]	; (80039b8 <HAL_MspInit+0x30>)
 8003990:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003994:	4a08      	ldr	r2, [pc, #32]	; (80039b8 <HAL_MspInit+0x30>)
 8003996:	f043 0302 	orr.w	r3, r3, #2
 800399a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800399e:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <HAL_MspInit+0x30>)
 80039a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	607b      	str	r3, [r7, #4]
 80039aa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	58024400 	.word	0x58024400

080039bc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b08e      	sub	sp, #56	; 0x38
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	605a      	str	r2, [r3, #4]
 80039ce:	609a      	str	r2, [r3, #8]
 80039d0:	60da      	str	r2, [r3, #12]
 80039d2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a59      	ldr	r2, [pc, #356]	; (8003b40 <HAL_ETH_MspInit+0x184>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	f040 80ab 	bne.w	8003b36 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80039e0:	4b58      	ldr	r3, [pc, #352]	; (8003b44 <HAL_ETH_MspInit+0x188>)
 80039e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80039e6:	4a57      	ldr	r2, [pc, #348]	; (8003b44 <HAL_ETH_MspInit+0x188>)
 80039e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ec:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80039f0:	4b54      	ldr	r3, [pc, #336]	; (8003b44 <HAL_ETH_MspInit+0x188>)
 80039f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80039f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039fa:	623b      	str	r3, [r7, #32]
 80039fc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80039fe:	4b51      	ldr	r3, [pc, #324]	; (8003b44 <HAL_ETH_MspInit+0x188>)
 8003a00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003a04:	4a4f      	ldr	r2, [pc, #316]	; (8003b44 <HAL_ETH_MspInit+0x188>)
 8003a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a0a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003a0e:	4b4d      	ldr	r3, [pc, #308]	; (8003b44 <HAL_ETH_MspInit+0x188>)
 8003a10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a18:	61fb      	str	r3, [r7, #28]
 8003a1a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8003a1c:	4b49      	ldr	r3, [pc, #292]	; (8003b44 <HAL_ETH_MspInit+0x188>)
 8003a1e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003a22:	4a48      	ldr	r2, [pc, #288]	; (8003b44 <HAL_ETH_MspInit+0x188>)
 8003a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a28:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003a2c:	4b45      	ldr	r3, [pc, #276]	; (8003b44 <HAL_ETH_MspInit+0x188>)
 8003a2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a36:	61bb      	str	r3, [r7, #24]
 8003a38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a3a:	4b42      	ldr	r3, [pc, #264]	; (8003b44 <HAL_ETH_MspInit+0x188>)
 8003a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a40:	4a40      	ldr	r2, [pc, #256]	; (8003b44 <HAL_ETH_MspInit+0x188>)
 8003a42:	f043 0304 	orr.w	r3, r3, #4
 8003a46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a4a:	4b3e      	ldr	r3, [pc, #248]	; (8003b44 <HAL_ETH_MspInit+0x188>)
 8003a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a50:	f003 0304 	and.w	r3, r3, #4
 8003a54:	617b      	str	r3, [r7, #20]
 8003a56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a58:	4b3a      	ldr	r3, [pc, #232]	; (8003b44 <HAL_ETH_MspInit+0x188>)
 8003a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a5e:	4a39      	ldr	r2, [pc, #228]	; (8003b44 <HAL_ETH_MspInit+0x188>)
 8003a60:	f043 0301 	orr.w	r3, r3, #1
 8003a64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a68:	4b36      	ldr	r3, [pc, #216]	; (8003b44 <HAL_ETH_MspInit+0x188>)
 8003a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	613b      	str	r3, [r7, #16]
 8003a74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a76:	4b33      	ldr	r3, [pc, #204]	; (8003b44 <HAL_ETH_MspInit+0x188>)
 8003a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a7c:	4a31      	ldr	r2, [pc, #196]	; (8003b44 <HAL_ETH_MspInit+0x188>)
 8003a7e:	f043 0302 	orr.w	r3, r3, #2
 8003a82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a86:	4b2f      	ldr	r3, [pc, #188]	; (8003b44 <HAL_ETH_MspInit+0x188>)
 8003a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a94:	4b2b      	ldr	r3, [pc, #172]	; (8003b44 <HAL_ETH_MspInit+0x188>)
 8003a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a9a:	4a2a      	ldr	r2, [pc, #168]	; (8003b44 <HAL_ETH_MspInit+0x188>)
 8003a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003aa4:	4b27      	ldr	r3, [pc, #156]	; (8003b44 <HAL_ETH_MspInit+0x188>)
 8003aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aae:	60bb      	str	r3, [r7, #8]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003ab2:	2332      	movs	r3, #50	; 0x32
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ac2:	230b      	movs	r3, #11
 8003ac4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003aca:	4619      	mov	r1, r3
 8003acc:	481e      	ldr	r0, [pc, #120]	; (8003b48 <HAL_ETH_MspInit+0x18c>)
 8003ace:	f003 f877 	bl	8006bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003ad2:	2386      	movs	r3, #134	; 0x86
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ada:	2300      	movs	r3, #0
 8003adc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ae2:	230b      	movs	r3, #11
 8003ae4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003aea:	4619      	mov	r1, r3
 8003aec:	4817      	ldr	r0, [pc, #92]	; (8003b4c <HAL_ETH_MspInit+0x190>)
 8003aee:	f003 f867 	bl	8006bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003af2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003af6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af8:	2302      	movs	r3, #2
 8003afa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afc:	2300      	movs	r3, #0
 8003afe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b00:	2300      	movs	r3, #0
 8003b02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003b04:	230b      	movs	r3, #11
 8003b06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4810      	ldr	r0, [pc, #64]	; (8003b50 <HAL_ETH_MspInit+0x194>)
 8003b10:	f003 f856 	bl	8006bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8003b14:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003b18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b22:	2300      	movs	r3, #0
 8003b24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003b26:	230b      	movs	r3, #11
 8003b28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b2e:	4619      	mov	r1, r3
 8003b30:	4808      	ldr	r0, [pc, #32]	; (8003b54 <HAL_ETH_MspInit+0x198>)
 8003b32:	f003 f845 	bl	8006bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8003b36:	bf00      	nop
 8003b38:	3738      	adds	r7, #56	; 0x38
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40028000 	.word	0x40028000
 8003b44:	58024400 	.word	0x58024400
 8003b48:	58020800 	.word	0x58020800
 8003b4c:	58020000 	.word	0x58020000
 8003b50:	58020400 	.word	0x58020400
 8003b54:	58021800 	.word	0x58021800

08003b58 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b0b8      	sub	sp, #224	; 0xe0
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	605a      	str	r2, [r3, #4]
 8003b6a:	609a      	str	r2, [r3, #8]
 8003b6c:	60da      	str	r2, [r3, #12]
 8003b6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b70:	f107 0310 	add.w	r3, r7, #16
 8003b74:	22bc      	movs	r2, #188	; 0xbc
 8003b76:	2100      	movs	r1, #0
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f008 ff65 	bl	800ca48 <memset>
  if(hfdcan->Instance==FDCAN1)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a29      	ldr	r2, [pc, #164]	; (8003c28 <HAL_FDCAN_MspInit+0xd0>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d14a      	bne.n	8003c1e <HAL_FDCAN_MspInit+0xc6>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003b88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b8c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8003b8e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003b92:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b94:	f107 0310 	add.w	r3, r7, #16
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f004 fb23 	bl	80081e4 <HAL_RCCEx_PeriphCLKConfig>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8003ba4:	f7ff fe24 	bl	80037f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8003ba8:	4b20      	ldr	r3, [pc, #128]	; (8003c2c <HAL_FDCAN_MspInit+0xd4>)
 8003baa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003bae:	4a1f      	ldr	r2, [pc, #124]	; (8003c2c <HAL_FDCAN_MspInit+0xd4>)
 8003bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bb4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003bb8:	4b1c      	ldr	r3, [pc, #112]	; (8003c2c <HAL_FDCAN_MspInit+0xd4>)
 8003bba:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bc6:	4b19      	ldr	r3, [pc, #100]	; (8003c2c <HAL_FDCAN_MspInit+0xd4>)
 8003bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bcc:	4a17      	ldr	r2, [pc, #92]	; (8003c2c <HAL_FDCAN_MspInit+0xd4>)
 8003bce:	f043 0308 	orr.w	r3, r3, #8
 8003bd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003bd6:	4b15      	ldr	r3, [pc, #84]	; (8003c2c <HAL_FDCAN_MspInit+0xd4>)
 8003bd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bdc:	f003 0308 	and.w	r3, r3, #8
 8003be0:	60bb      	str	r3, [r7, #8]
 8003be2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003be4:	2303      	movs	r3, #3
 8003be6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bea:	2302      	movs	r3, #2
 8003bec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003bfc:	2309      	movs	r3, #9
 8003bfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c02:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003c06:	4619      	mov	r1, r3
 8003c08:	4809      	ldr	r0, [pc, #36]	; (8003c30 <HAL_FDCAN_MspInit+0xd8>)
 8003c0a:	f002 ffd9 	bl	8006bc0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8003c0e:	2200      	movs	r2, #0
 8003c10:	2100      	movs	r1, #0
 8003c12:	2013      	movs	r0, #19
 8003c14:	f000 fc53 	bl	80044be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8003c18:	2013      	movs	r0, #19
 8003c1a:	f000 fc6a 	bl	80044f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8003c1e:	bf00      	nop
 8003c20:	37e0      	adds	r7, #224	; 0xe0
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	4000a000 	.word	0x4000a000
 8003c2c:	58024400 	.word	0x58024400
 8003c30:	58020c00 	.word	0x58020c00

08003c34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c44:	d117      	bne.n	8003c76 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c46:	4b2a      	ldr	r3, [pc, #168]	; (8003cf0 <HAL_TIM_Base_MspInit+0xbc>)
 8003c48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c4c:	4a28      	ldr	r2, [pc, #160]	; (8003cf0 <HAL_TIM_Base_MspInit+0xbc>)
 8003c4e:	f043 0301 	orr.w	r3, r3, #1
 8003c52:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003c56:	4b26      	ldr	r3, [pc, #152]	; (8003cf0 <HAL_TIM_Base_MspInit+0xbc>)
 8003c58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	617b      	str	r3, [r7, #20]
 8003c62:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8003c64:	2200      	movs	r2, #0
 8003c66:	2101      	movs	r1, #1
 8003c68:	201c      	movs	r0, #28
 8003c6a:	f000 fc28 	bl	80044be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003c6e:	201c      	movs	r0, #28
 8003c70:	f000 fc3f 	bl	80044f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003c74:	e038      	b.n	8003ce8 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM3)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a1e      	ldr	r2, [pc, #120]	; (8003cf4 <HAL_TIM_Base_MspInit+0xc0>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d117      	bne.n	8003cb0 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c80:	4b1b      	ldr	r3, [pc, #108]	; (8003cf0 <HAL_TIM_Base_MspInit+0xbc>)
 8003c82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c86:	4a1a      	ldr	r2, [pc, #104]	; (8003cf0 <HAL_TIM_Base_MspInit+0xbc>)
 8003c88:	f043 0302 	orr.w	r3, r3, #2
 8003c8c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003c90:	4b17      	ldr	r3, [pc, #92]	; (8003cf0 <HAL_TIM_Base_MspInit+0xbc>)
 8003c92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	613b      	str	r3, [r7, #16]
 8003c9c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	201d      	movs	r0, #29
 8003ca4:	f000 fc0b 	bl	80044be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003ca8:	201d      	movs	r0, #29
 8003caa:	f000 fc22 	bl	80044f2 <HAL_NVIC_EnableIRQ>
}
 8003cae:	e01b      	b.n	8003ce8 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM4)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a10      	ldr	r2, [pc, #64]	; (8003cf8 <HAL_TIM_Base_MspInit+0xc4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d116      	bne.n	8003ce8 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003cba:	4b0d      	ldr	r3, [pc, #52]	; (8003cf0 <HAL_TIM_Base_MspInit+0xbc>)
 8003cbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003cc0:	4a0b      	ldr	r2, [pc, #44]	; (8003cf0 <HAL_TIM_Base_MspInit+0xbc>)
 8003cc2:	f043 0304 	orr.w	r3, r3, #4
 8003cc6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003cca:	4b09      	ldr	r3, [pc, #36]	; (8003cf0 <HAL_TIM_Base_MspInit+0xbc>)
 8003ccc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8003cd8:	2200      	movs	r2, #0
 8003cda:	2102      	movs	r1, #2
 8003cdc:	201e      	movs	r0, #30
 8003cde:	f000 fbee 	bl	80044be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003ce2:	201e      	movs	r0, #30
 8003ce4:	f000 fc05 	bl	80044f2 <HAL_NVIC_EnableIRQ>
}
 8003ce8:	bf00      	nop
 8003cea:	3718      	adds	r7, #24
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	58024400 	.word	0x58024400
 8003cf4:	40000400 	.word	0x40000400
 8003cf8:	40000800 	.word	0x40000800

08003cfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b0b8      	sub	sp, #224	; 0xe0
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d04:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	605a      	str	r2, [r3, #4]
 8003d0e:	609a      	str	r2, [r3, #8]
 8003d10:	60da      	str	r2, [r3, #12]
 8003d12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003d14:	f107 0310 	add.w	r3, r7, #16
 8003d18:	22bc      	movs	r2, #188	; 0xbc
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f008 fe93 	bl	800ca48 <memset>
  if(huart->Instance==USART3)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a29      	ldr	r2, [pc, #164]	; (8003dcc <HAL_UART_MspInit+0xd0>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d14a      	bne.n	8003dc2 <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003d30:	2300      	movs	r3, #0
 8003d32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d36:	f107 0310 	add.w	r3, r7, #16
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f004 fa52 	bl	80081e4 <HAL_RCCEx_PeriphCLKConfig>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003d46:	f7ff fd53 	bl	80037f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003d4a:	4b21      	ldr	r3, [pc, #132]	; (8003dd0 <HAL_UART_MspInit+0xd4>)
 8003d4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d50:	4a1f      	ldr	r2, [pc, #124]	; (8003dd0 <HAL_UART_MspInit+0xd4>)
 8003d52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d56:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003d5a:	4b1d      	ldr	r3, [pc, #116]	; (8003dd0 <HAL_UART_MspInit+0xd4>)
 8003d5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d64:	60fb      	str	r3, [r7, #12]
 8003d66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d68:	4b19      	ldr	r3, [pc, #100]	; (8003dd0 <HAL_UART_MspInit+0xd4>)
 8003d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d6e:	4a18      	ldr	r2, [pc, #96]	; (8003dd0 <HAL_UART_MspInit+0xd4>)
 8003d70:	f043 0308 	orr.w	r3, r3, #8
 8003d74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d78:	4b15      	ldr	r3, [pc, #84]	; (8003dd0 <HAL_UART_MspInit+0xd4>)
 8003d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d7e:	f003 0308 	and.w	r3, r3, #8
 8003d82:	60bb      	str	r3, [r7, #8]
 8003d84:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003d86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003d8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d8e:	2302      	movs	r3, #2
 8003d90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d94:	2300      	movs	r3, #0
 8003d96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003da0:	2307      	movs	r3, #7
 8003da2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003da6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003daa:	4619      	mov	r1, r3
 8003dac:	4809      	ldr	r0, [pc, #36]	; (8003dd4 <HAL_UART_MspInit+0xd8>)
 8003dae:	f002 ff07 	bl	8006bc0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8003db2:	2200      	movs	r2, #0
 8003db4:	2101      	movs	r1, #1
 8003db6:	2027      	movs	r0, #39	; 0x27
 8003db8:	f000 fb81 	bl	80044be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003dbc:	2027      	movs	r0, #39	; 0x27
 8003dbe:	f000 fb98 	bl	80044f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003dc2:	bf00      	nop
 8003dc4:	37e0      	adds	r7, #224	; 0xe0
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	40004800 	.word	0x40004800
 8003dd0:	58024400 	.word	0x58024400
 8003dd4:	58020c00 	.word	0x58020c00

08003dd8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b0b8      	sub	sp, #224	; 0xe0
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	605a      	str	r2, [r3, #4]
 8003dea:	609a      	str	r2, [r3, #8]
 8003dec:	60da      	str	r2, [r3, #12]
 8003dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003df0:	f107 0310 	add.w	r3, r7, #16
 8003df4:	22bc      	movs	r2, #188	; 0xbc
 8003df6:	2100      	movs	r1, #0
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f008 fe25 	bl	800ca48 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a2f      	ldr	r2, [pc, #188]	; (8003ec0 <HAL_PCD_MspInit+0xe8>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d156      	bne.n	8003eb6 <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003e08:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003e0c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8003e0e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003e12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e16:	f107 0310 	add.w	r3, r7, #16
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f004 f9e2 	bl	80081e4 <HAL_RCCEx_PeriphCLKConfig>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8003e26:	f7ff fce3 	bl	80037f0 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8003e2a:	f003 fa2f 	bl	800728c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e2e:	4b25      	ldr	r3, [pc, #148]	; (8003ec4 <HAL_PCD_MspInit+0xec>)
 8003e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e34:	4a23      	ldr	r2, [pc, #140]	; (8003ec4 <HAL_PCD_MspInit+0xec>)
 8003e36:	f043 0301 	orr.w	r3, r3, #1
 8003e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e3e:	4b21      	ldr	r3, [pc, #132]	; (8003ec4 <HAL_PCD_MspInit+0xec>)
 8003e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	60fb      	str	r3, [r7, #12]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8003e4c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8003e50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e54:	2302      	movs	r3, #2
 8003e56:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e60:	2300      	movs	r3, #0
 8003e62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8003e66:	230a      	movs	r3, #10
 8003e68:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e6c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003e70:	4619      	mov	r1, r3
 8003e72:	4815      	ldr	r0, [pc, #84]	; (8003ec8 <HAL_PCD_MspInit+0xf0>)
 8003e74:	f002 fea4 	bl	8006bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003e78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e80:	2300      	movs	r3, #0
 8003e82:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e86:	2300      	movs	r3, #0
 8003e88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e8c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003e90:	4619      	mov	r1, r3
 8003e92:	480d      	ldr	r0, [pc, #52]	; (8003ec8 <HAL_PCD_MspInit+0xf0>)
 8003e94:	f002 fe94 	bl	8006bc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003e98:	4b0a      	ldr	r3, [pc, #40]	; (8003ec4 <HAL_PCD_MspInit+0xec>)
 8003e9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003e9e:	4a09      	ldr	r2, [pc, #36]	; (8003ec4 <HAL_PCD_MspInit+0xec>)
 8003ea0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ea4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003ea8:	4b06      	ldr	r3, [pc, #24]	; (8003ec4 <HAL_PCD_MspInit+0xec>)
 8003eaa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003eae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eb2:	60bb      	str	r3, [r7, #8]
 8003eb4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003eb6:	bf00      	nop
 8003eb8:	37e0      	adds	r7, #224	; 0xe0
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	40080000 	.word	0x40080000
 8003ec4:	58024400 	.word	0x58024400
 8003ec8:	58020000 	.word	0x58020000

08003ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ed0:	e7fe      	b.n	8003ed0 <NMI_Handler+0x4>

08003ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ed6:	e7fe      	b.n	8003ed6 <HardFault_Handler+0x4>

08003ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003edc:	e7fe      	b.n	8003edc <MemManage_Handler+0x4>

08003ede <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ee2:	e7fe      	b.n	8003ee2 <BusFault_Handler+0x4>

08003ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ee8:	e7fe      	b.n	8003ee8 <UsageFault_Handler+0x4>

08003eea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003eea:	b480      	push	{r7}
 8003eec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003eee:	bf00      	nop
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003efc:	bf00      	nop
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f06:	b480      	push	{r7}
 8003f08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f0a:	bf00      	nop
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f18:	f000 f992 	bl	8004240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f1c:	bf00      	nop
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8003f24:	4802      	ldr	r0, [pc, #8]	; (8003f30 <FDCAN1_IT0_IRQHandler+0x10>)
 8003f26:	f002 f93d 	bl	80061a4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8003f2a:	bf00      	nop
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	2400095c 	.word	0x2400095c

08003f34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003f38:	4802      	ldr	r0, [pc, #8]	; (8003f44 <TIM2_IRQHandler+0x10>)
 8003f3a:	f005 fdac 	bl	8009a96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003f3e:	bf00      	nop
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	24006804 	.word	0x24006804

08003f48 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003f4c:	4802      	ldr	r0, [pc, #8]	; (8003f58 <TIM3_IRQHandler+0x10>)
 8003f4e:	f005 fda2 	bl	8009a96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003f52:	bf00      	nop
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	240008a4 	.word	0x240008a4

08003f5c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003f60:	4802      	ldr	r0, [pc, #8]	; (8003f6c <TIM4_IRQHandler+0x10>)
 8003f62:	f005 fd98 	bl	8009a96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003f66:	bf00      	nop
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	24000364 	.word	0x24000364

08003f70 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003f74:	4802      	ldr	r0, [pc, #8]	; (8003f80 <USART3_IRQHandler+0x10>)
 8003f76:	f006 fba7 	bl	800a6c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003f7a:	bf00      	nop
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	240003bc 	.word	0x240003bc

08003f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f8c:	4a14      	ldr	r2, [pc, #80]	; (8003fe0 <_sbrk+0x5c>)
 8003f8e:	4b15      	ldr	r3, [pc, #84]	; (8003fe4 <_sbrk+0x60>)
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f98:	4b13      	ldr	r3, [pc, #76]	; (8003fe8 <_sbrk+0x64>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d102      	bne.n	8003fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003fa0:	4b11      	ldr	r3, [pc, #68]	; (8003fe8 <_sbrk+0x64>)
 8003fa2:	4a12      	ldr	r2, [pc, #72]	; (8003fec <_sbrk+0x68>)
 8003fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003fa6:	4b10      	ldr	r3, [pc, #64]	; (8003fe8 <_sbrk+0x64>)
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4413      	add	r3, r2
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d207      	bcs.n	8003fc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003fb4:	f008 fd10 	bl	800c9d8 <__errno>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	220c      	movs	r2, #12
 8003fbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc2:	e009      	b.n	8003fd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003fc4:	4b08      	ldr	r3, [pc, #32]	; (8003fe8 <_sbrk+0x64>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003fca:	4b07      	ldr	r3, [pc, #28]	; (8003fe8 <_sbrk+0x64>)
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	4a05      	ldr	r2, [pc, #20]	; (8003fe8 <_sbrk+0x64>)
 8003fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3718      	adds	r7, #24
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	24080000 	.word	0x24080000
 8003fe4:	00000400 	.word	0x00000400
 8003fe8:	2400030c 	.word	0x2400030c
 8003fec:	2400c740 	.word	0x2400c740

08003ff0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003ff4:	4b39      	ldr	r3, [pc, #228]	; (80040dc <SystemInit+0xec>)
 8003ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffa:	4a38      	ldr	r2, [pc, #224]	; (80040dc <SystemInit+0xec>)
 8003ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004000:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004004:	4b36      	ldr	r3, [pc, #216]	; (80040e0 <SystemInit+0xf0>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 030f 	and.w	r3, r3, #15
 800400c:	2b06      	cmp	r3, #6
 800400e:	d807      	bhi.n	8004020 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004010:	4b33      	ldr	r3, [pc, #204]	; (80040e0 <SystemInit+0xf0>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f023 030f 	bic.w	r3, r3, #15
 8004018:	4a31      	ldr	r2, [pc, #196]	; (80040e0 <SystemInit+0xf0>)
 800401a:	f043 0307 	orr.w	r3, r3, #7
 800401e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004020:	4b30      	ldr	r3, [pc, #192]	; (80040e4 <SystemInit+0xf4>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a2f      	ldr	r2, [pc, #188]	; (80040e4 <SystemInit+0xf4>)
 8004026:	f043 0301 	orr.w	r3, r3, #1
 800402a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800402c:	4b2d      	ldr	r3, [pc, #180]	; (80040e4 <SystemInit+0xf4>)
 800402e:	2200      	movs	r2, #0
 8004030:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004032:	4b2c      	ldr	r3, [pc, #176]	; (80040e4 <SystemInit+0xf4>)
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	492b      	ldr	r1, [pc, #172]	; (80040e4 <SystemInit+0xf4>)
 8004038:	4b2b      	ldr	r3, [pc, #172]	; (80040e8 <SystemInit+0xf8>)
 800403a:	4013      	ands	r3, r2
 800403c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800403e:	4b28      	ldr	r3, [pc, #160]	; (80040e0 <SystemInit+0xf0>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0308 	and.w	r3, r3, #8
 8004046:	2b00      	cmp	r3, #0
 8004048:	d007      	beq.n	800405a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800404a:	4b25      	ldr	r3, [pc, #148]	; (80040e0 <SystemInit+0xf0>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f023 030f 	bic.w	r3, r3, #15
 8004052:	4a23      	ldr	r2, [pc, #140]	; (80040e0 <SystemInit+0xf0>)
 8004054:	f043 0307 	orr.w	r3, r3, #7
 8004058:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800405a:	4b22      	ldr	r3, [pc, #136]	; (80040e4 <SystemInit+0xf4>)
 800405c:	2200      	movs	r2, #0
 800405e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004060:	4b20      	ldr	r3, [pc, #128]	; (80040e4 <SystemInit+0xf4>)
 8004062:	2200      	movs	r2, #0
 8004064:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004066:	4b1f      	ldr	r3, [pc, #124]	; (80040e4 <SystemInit+0xf4>)
 8004068:	2200      	movs	r2, #0
 800406a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800406c:	4b1d      	ldr	r3, [pc, #116]	; (80040e4 <SystemInit+0xf4>)
 800406e:	4a1f      	ldr	r2, [pc, #124]	; (80040ec <SystemInit+0xfc>)
 8004070:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004072:	4b1c      	ldr	r3, [pc, #112]	; (80040e4 <SystemInit+0xf4>)
 8004074:	4a1e      	ldr	r2, [pc, #120]	; (80040f0 <SystemInit+0x100>)
 8004076:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004078:	4b1a      	ldr	r3, [pc, #104]	; (80040e4 <SystemInit+0xf4>)
 800407a:	4a1e      	ldr	r2, [pc, #120]	; (80040f4 <SystemInit+0x104>)
 800407c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800407e:	4b19      	ldr	r3, [pc, #100]	; (80040e4 <SystemInit+0xf4>)
 8004080:	2200      	movs	r2, #0
 8004082:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004084:	4b17      	ldr	r3, [pc, #92]	; (80040e4 <SystemInit+0xf4>)
 8004086:	4a1b      	ldr	r2, [pc, #108]	; (80040f4 <SystemInit+0x104>)
 8004088:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800408a:	4b16      	ldr	r3, [pc, #88]	; (80040e4 <SystemInit+0xf4>)
 800408c:	2200      	movs	r2, #0
 800408e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004090:	4b14      	ldr	r3, [pc, #80]	; (80040e4 <SystemInit+0xf4>)
 8004092:	4a18      	ldr	r2, [pc, #96]	; (80040f4 <SystemInit+0x104>)
 8004094:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004096:	4b13      	ldr	r3, [pc, #76]	; (80040e4 <SystemInit+0xf4>)
 8004098:	2200      	movs	r2, #0
 800409a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800409c:	4b11      	ldr	r3, [pc, #68]	; (80040e4 <SystemInit+0xf4>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a10      	ldr	r2, [pc, #64]	; (80040e4 <SystemInit+0xf4>)
 80040a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80040a8:	4b0e      	ldr	r3, [pc, #56]	; (80040e4 <SystemInit+0xf4>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80040ae:	4b12      	ldr	r3, [pc, #72]	; (80040f8 <SystemInit+0x108>)
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	4b12      	ldr	r3, [pc, #72]	; (80040fc <SystemInit+0x10c>)
 80040b4:	4013      	ands	r3, r2
 80040b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040ba:	d202      	bcs.n	80040c2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80040bc:	4b10      	ldr	r3, [pc, #64]	; (8004100 <SystemInit+0x110>)
 80040be:	2201      	movs	r2, #1
 80040c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80040c2:	4b10      	ldr	r3, [pc, #64]	; (8004104 <SystemInit+0x114>)
 80040c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80040c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80040ca:	4b04      	ldr	r3, [pc, #16]	; (80040dc <SystemInit+0xec>)
 80040cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80040d0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80040d2:	bf00      	nop
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr
 80040dc:	e000ed00 	.word	0xe000ed00
 80040e0:	52002000 	.word	0x52002000
 80040e4:	58024400 	.word	0x58024400
 80040e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80040ec:	02020200 	.word	0x02020200
 80040f0:	01ff0000 	.word	0x01ff0000
 80040f4:	01010280 	.word	0x01010280
 80040f8:	5c001000 	.word	0x5c001000
 80040fc:	ffff0000 	.word	0xffff0000
 8004100:	51008108 	.word	0x51008108
 8004104:	52004000 	.word	0x52004000

08004108 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004108:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004140 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800410c:	f7ff ff70 	bl	8003ff0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004110:	480c      	ldr	r0, [pc, #48]	; (8004144 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004112:	490d      	ldr	r1, [pc, #52]	; (8004148 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004114:	4a0d      	ldr	r2, [pc, #52]	; (800414c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004118:	e002      	b.n	8004120 <LoopCopyDataInit>

0800411a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800411a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800411c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800411e:	3304      	adds	r3, #4

08004120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004124:	d3f9      	bcc.n	800411a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004126:	4a0a      	ldr	r2, [pc, #40]	; (8004150 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004128:	4c0a      	ldr	r4, [pc, #40]	; (8004154 <LoopFillZerobss+0x22>)
  movs r3, #0
 800412a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800412c:	e001      	b.n	8004132 <LoopFillZerobss>

0800412e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800412e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004130:	3204      	adds	r2, #4

08004132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004134:	d3fb      	bcc.n	800412e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004136:	f008 fc55 	bl	800c9e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800413a:	f7fc fc99 	bl	8000a70 <main>
  bx  lr
 800413e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004140:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004144:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004148:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 800414c:	080141b0 	.word	0x080141b0
  ldr r2, =_sbss
 8004150:	240002a8 	.word	0x240002a8
  ldr r4, =_ebss
 8004154:	2400c740 	.word	0x2400c740

08004158 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004158:	e7fe      	b.n	8004158 <ADC3_IRQHandler>
	...

0800415c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004162:	2003      	movs	r0, #3
 8004164:	f000 f9a0 	bl	80044a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004168:	f003 fe66 	bl	8007e38 <HAL_RCC_GetSysClockFreq>
 800416c:	4602      	mov	r2, r0
 800416e:	4b15      	ldr	r3, [pc, #84]	; (80041c4 <HAL_Init+0x68>)
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	0a1b      	lsrs	r3, r3, #8
 8004174:	f003 030f 	and.w	r3, r3, #15
 8004178:	4913      	ldr	r1, [pc, #76]	; (80041c8 <HAL_Init+0x6c>)
 800417a:	5ccb      	ldrb	r3, [r1, r3]
 800417c:	f003 031f 	and.w	r3, r3, #31
 8004180:	fa22 f303 	lsr.w	r3, r2, r3
 8004184:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004186:	4b0f      	ldr	r3, [pc, #60]	; (80041c4 <HAL_Init+0x68>)
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	f003 030f 	and.w	r3, r3, #15
 800418e:	4a0e      	ldr	r2, [pc, #56]	; (80041c8 <HAL_Init+0x6c>)
 8004190:	5cd3      	ldrb	r3, [r2, r3]
 8004192:	f003 031f 	and.w	r3, r3, #31
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	fa22 f303 	lsr.w	r3, r2, r3
 800419c:	4a0b      	ldr	r2, [pc, #44]	; (80041cc <HAL_Init+0x70>)
 800419e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80041a0:	4a0b      	ldr	r2, [pc, #44]	; (80041d0 <HAL_Init+0x74>)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80041a6:	2000      	movs	r0, #0
 80041a8:	f000 f814 	bl	80041d4 <HAL_InitTick>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e002      	b.n	80041bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80041b6:	f7ff fbe7 	bl	8003988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	58024400 	.word	0x58024400
 80041c8:	08012374 	.word	0x08012374
 80041cc:	24000004 	.word	0x24000004
 80041d0:	24000000 	.word	0x24000000

080041d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80041dc:	4b15      	ldr	r3, [pc, #84]	; (8004234 <HAL_InitTick+0x60>)
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e021      	b.n	800422c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80041e8:	4b13      	ldr	r3, [pc, #76]	; (8004238 <HAL_InitTick+0x64>)
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	4b11      	ldr	r3, [pc, #68]	; (8004234 <HAL_InitTick+0x60>)
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	4619      	mov	r1, r3
 80041f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80041fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 f985 	bl	800450e <HAL_SYSTICK_Config>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e00e      	b.n	800422c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b0f      	cmp	r3, #15
 8004212:	d80a      	bhi.n	800422a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004214:	2200      	movs	r2, #0
 8004216:	6879      	ldr	r1, [r7, #4]
 8004218:	f04f 30ff 	mov.w	r0, #4294967295
 800421c:	f000 f94f 	bl	80044be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004220:	4a06      	ldr	r2, [pc, #24]	; (800423c <HAL_InitTick+0x68>)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	e000      	b.n	800422c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
}
 800422c:	4618      	mov	r0, r3
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	2400000c 	.word	0x2400000c
 8004238:	24000000 	.word	0x24000000
 800423c:	24000008 	.word	0x24000008

08004240 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004244:	4b06      	ldr	r3, [pc, #24]	; (8004260 <HAL_IncTick+0x20>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	461a      	mov	r2, r3
 800424a:	4b06      	ldr	r3, [pc, #24]	; (8004264 <HAL_IncTick+0x24>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4413      	add	r3, r2
 8004250:	4a04      	ldr	r2, [pc, #16]	; (8004264 <HAL_IncTick+0x24>)
 8004252:	6013      	str	r3, [r2, #0]
}
 8004254:	bf00      	nop
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	2400000c 	.word	0x2400000c
 8004264:	2400c72c 	.word	0x2400c72c

08004268 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  return uwTick;
 800426c:	4b03      	ldr	r3, [pc, #12]	; (800427c <HAL_GetTick+0x14>)
 800426e:	681b      	ldr	r3, [r3, #0]
}
 8004270:	4618      	mov	r0, r3
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	2400c72c 	.word	0x2400c72c

08004280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004288:	f7ff ffee 	bl	8004268 <HAL_GetTick>
 800428c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004298:	d005      	beq.n	80042a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800429a:	4b0a      	ldr	r3, [pc, #40]	; (80042c4 <HAL_Delay+0x44>)
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	461a      	mov	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4413      	add	r3, r2
 80042a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80042a6:	bf00      	nop
 80042a8:	f7ff ffde 	bl	8004268 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d8f7      	bhi.n	80042a8 <HAL_Delay+0x28>
  {
  }
}
 80042b8:	bf00      	nop
 80042ba:	bf00      	nop
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	2400000c 	.word	0x2400000c

080042c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80042cc:	4b03      	ldr	r3, [pc, #12]	; (80042dc <HAL_GetREVID+0x14>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	0c1b      	lsrs	r3, r3, #16
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	5c001000 	.word	0x5c001000

080042e0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80042e8:	4b06      	ldr	r3, [pc, #24]	; (8004304 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80042f0:	4904      	ldr	r1, [pc, #16]	; (8004304 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	604b      	str	r3, [r1, #4]
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	58000400 	.word	0x58000400

08004308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004318:	4b0b      	ldr	r3, [pc, #44]	; (8004348 <__NVIC_SetPriorityGrouping+0x40>)
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004324:	4013      	ands	r3, r2
 8004326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004330:	4b06      	ldr	r3, [pc, #24]	; (800434c <__NVIC_SetPriorityGrouping+0x44>)
 8004332:	4313      	orrs	r3, r2
 8004334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004336:	4a04      	ldr	r2, [pc, #16]	; (8004348 <__NVIC_SetPriorityGrouping+0x40>)
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	60d3      	str	r3, [r2, #12]
}
 800433c:	bf00      	nop
 800433e:	3714      	adds	r7, #20
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	e000ed00 	.word	0xe000ed00
 800434c:	05fa0000 	.word	0x05fa0000

08004350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004354:	4b04      	ldr	r3, [pc, #16]	; (8004368 <__NVIC_GetPriorityGrouping+0x18>)
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	0a1b      	lsrs	r3, r3, #8
 800435a:	f003 0307 	and.w	r3, r3, #7
}
 800435e:	4618      	mov	r0, r3
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	e000ed00 	.word	0xe000ed00

0800436c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	4603      	mov	r3, r0
 8004374:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800437a:	2b00      	cmp	r3, #0
 800437c:	db0b      	blt.n	8004396 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800437e:	88fb      	ldrh	r3, [r7, #6]
 8004380:	f003 021f 	and.w	r2, r3, #31
 8004384:	4907      	ldr	r1, [pc, #28]	; (80043a4 <__NVIC_EnableIRQ+0x38>)
 8004386:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800438a:	095b      	lsrs	r3, r3, #5
 800438c:	2001      	movs	r0, #1
 800438e:	fa00 f202 	lsl.w	r2, r0, r2
 8004392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004396:	bf00      	nop
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	e000e100 	.word	0xe000e100

080043a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	4603      	mov	r3, r0
 80043b0:	6039      	str	r1, [r7, #0]
 80043b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80043b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	db0a      	blt.n	80043d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	490c      	ldr	r1, [pc, #48]	; (80043f4 <__NVIC_SetPriority+0x4c>)
 80043c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043c6:	0112      	lsls	r2, r2, #4
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	440b      	add	r3, r1
 80043cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043d0:	e00a      	b.n	80043e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	4908      	ldr	r1, [pc, #32]	; (80043f8 <__NVIC_SetPriority+0x50>)
 80043d8:	88fb      	ldrh	r3, [r7, #6]
 80043da:	f003 030f 	and.w	r3, r3, #15
 80043de:	3b04      	subs	r3, #4
 80043e0:	0112      	lsls	r2, r2, #4
 80043e2:	b2d2      	uxtb	r2, r2
 80043e4:	440b      	add	r3, r1
 80043e6:	761a      	strb	r2, [r3, #24]
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	e000e100 	.word	0xe000e100
 80043f8:	e000ed00 	.word	0xe000ed00

080043fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b089      	sub	sp, #36	; 0x24
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f003 0307 	and.w	r3, r3, #7
 800440e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	f1c3 0307 	rsb	r3, r3, #7
 8004416:	2b04      	cmp	r3, #4
 8004418:	bf28      	it	cs
 800441a:	2304      	movcs	r3, #4
 800441c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	3304      	adds	r3, #4
 8004422:	2b06      	cmp	r3, #6
 8004424:	d902      	bls.n	800442c <NVIC_EncodePriority+0x30>
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	3b03      	subs	r3, #3
 800442a:	e000      	b.n	800442e <NVIC_EncodePriority+0x32>
 800442c:	2300      	movs	r3, #0
 800442e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004430:	f04f 32ff 	mov.w	r2, #4294967295
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	fa02 f303 	lsl.w	r3, r2, r3
 800443a:	43da      	mvns	r2, r3
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	401a      	ands	r2, r3
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004444:	f04f 31ff 	mov.w	r1, #4294967295
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	fa01 f303 	lsl.w	r3, r1, r3
 800444e:	43d9      	mvns	r1, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004454:	4313      	orrs	r3, r2
         );
}
 8004456:	4618      	mov	r0, r3
 8004458:	3724      	adds	r7, #36	; 0x24
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
	...

08004464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	3b01      	subs	r3, #1
 8004470:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004474:	d301      	bcc.n	800447a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004476:	2301      	movs	r3, #1
 8004478:	e00f      	b.n	800449a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800447a:	4a0a      	ldr	r2, [pc, #40]	; (80044a4 <SysTick_Config+0x40>)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3b01      	subs	r3, #1
 8004480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004482:	210f      	movs	r1, #15
 8004484:	f04f 30ff 	mov.w	r0, #4294967295
 8004488:	f7ff ff8e 	bl	80043a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800448c:	4b05      	ldr	r3, [pc, #20]	; (80044a4 <SysTick_Config+0x40>)
 800448e:	2200      	movs	r2, #0
 8004490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004492:	4b04      	ldr	r3, [pc, #16]	; (80044a4 <SysTick_Config+0x40>)
 8004494:	2207      	movs	r2, #7
 8004496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	e000e010 	.word	0xe000e010

080044a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f7ff ff29 	bl	8004308 <__NVIC_SetPriorityGrouping>
}
 80044b6:	bf00      	nop
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b086      	sub	sp, #24
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	4603      	mov	r3, r0
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	607a      	str	r2, [r7, #4]
 80044ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80044cc:	f7ff ff40 	bl	8004350 <__NVIC_GetPriorityGrouping>
 80044d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	68b9      	ldr	r1, [r7, #8]
 80044d6:	6978      	ldr	r0, [r7, #20]
 80044d8:	f7ff ff90 	bl	80043fc <NVIC_EncodePriority>
 80044dc:	4602      	mov	r2, r0
 80044de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80044e2:	4611      	mov	r1, r2
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7ff ff5f 	bl	80043a8 <__NVIC_SetPriority>
}
 80044ea:	bf00      	nop
 80044ec:	3718      	adds	r7, #24
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b082      	sub	sp, #8
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	4603      	mov	r3, r0
 80044fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004500:	4618      	mov	r0, r3
 8004502:	f7ff ff33 	bl	800436c <__NVIC_EnableIRQ>
}
 8004506:	bf00      	nop
 8004508:	3708      	adds	r7, #8
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b082      	sub	sp, #8
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7ff ffa4 	bl	8004464 <SysTick_Config>
 800451c:	4603      	mov	r3, r0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
	...

08004528 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004530:	f7ff fe9a 	bl	8004268 <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e2dc      	b.n	8004afa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d008      	beq.n	800455e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2280      	movs	r2, #128	; 0x80
 8004550:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e2cd      	b.n	8004afa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a76      	ldr	r2, [pc, #472]	; (800473c <HAL_DMA_Abort+0x214>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d04a      	beq.n	80045fe <HAL_DMA_Abort+0xd6>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a74      	ldr	r2, [pc, #464]	; (8004740 <HAL_DMA_Abort+0x218>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d045      	beq.n	80045fe <HAL_DMA_Abort+0xd6>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a73      	ldr	r2, [pc, #460]	; (8004744 <HAL_DMA_Abort+0x21c>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d040      	beq.n	80045fe <HAL_DMA_Abort+0xd6>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a71      	ldr	r2, [pc, #452]	; (8004748 <HAL_DMA_Abort+0x220>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d03b      	beq.n	80045fe <HAL_DMA_Abort+0xd6>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a70      	ldr	r2, [pc, #448]	; (800474c <HAL_DMA_Abort+0x224>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d036      	beq.n	80045fe <HAL_DMA_Abort+0xd6>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a6e      	ldr	r2, [pc, #440]	; (8004750 <HAL_DMA_Abort+0x228>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d031      	beq.n	80045fe <HAL_DMA_Abort+0xd6>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a6d      	ldr	r2, [pc, #436]	; (8004754 <HAL_DMA_Abort+0x22c>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d02c      	beq.n	80045fe <HAL_DMA_Abort+0xd6>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a6b      	ldr	r2, [pc, #428]	; (8004758 <HAL_DMA_Abort+0x230>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d027      	beq.n	80045fe <HAL_DMA_Abort+0xd6>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a6a      	ldr	r2, [pc, #424]	; (800475c <HAL_DMA_Abort+0x234>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d022      	beq.n	80045fe <HAL_DMA_Abort+0xd6>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a68      	ldr	r2, [pc, #416]	; (8004760 <HAL_DMA_Abort+0x238>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d01d      	beq.n	80045fe <HAL_DMA_Abort+0xd6>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a67      	ldr	r2, [pc, #412]	; (8004764 <HAL_DMA_Abort+0x23c>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d018      	beq.n	80045fe <HAL_DMA_Abort+0xd6>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a65      	ldr	r2, [pc, #404]	; (8004768 <HAL_DMA_Abort+0x240>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d013      	beq.n	80045fe <HAL_DMA_Abort+0xd6>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a64      	ldr	r2, [pc, #400]	; (800476c <HAL_DMA_Abort+0x244>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d00e      	beq.n	80045fe <HAL_DMA_Abort+0xd6>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a62      	ldr	r2, [pc, #392]	; (8004770 <HAL_DMA_Abort+0x248>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d009      	beq.n	80045fe <HAL_DMA_Abort+0xd6>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a61      	ldr	r2, [pc, #388]	; (8004774 <HAL_DMA_Abort+0x24c>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d004      	beq.n	80045fe <HAL_DMA_Abort+0xd6>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a5f      	ldr	r2, [pc, #380]	; (8004778 <HAL_DMA_Abort+0x250>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d101      	bne.n	8004602 <HAL_DMA_Abort+0xda>
 80045fe:	2301      	movs	r3, #1
 8004600:	e000      	b.n	8004604 <HAL_DMA_Abort+0xdc>
 8004602:	2300      	movs	r3, #0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d013      	beq.n	8004630 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 021e 	bic.w	r2, r2, #30
 8004616:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	695a      	ldr	r2, [r3, #20]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004626:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	617b      	str	r3, [r7, #20]
 800462e:	e00a      	b.n	8004646 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 020e 	bic.w	r2, r2, #14
 800463e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a3c      	ldr	r2, [pc, #240]	; (800473c <HAL_DMA_Abort+0x214>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d072      	beq.n	8004736 <HAL_DMA_Abort+0x20e>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a3a      	ldr	r2, [pc, #232]	; (8004740 <HAL_DMA_Abort+0x218>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d06d      	beq.n	8004736 <HAL_DMA_Abort+0x20e>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a39      	ldr	r2, [pc, #228]	; (8004744 <HAL_DMA_Abort+0x21c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d068      	beq.n	8004736 <HAL_DMA_Abort+0x20e>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a37      	ldr	r2, [pc, #220]	; (8004748 <HAL_DMA_Abort+0x220>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d063      	beq.n	8004736 <HAL_DMA_Abort+0x20e>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a36      	ldr	r2, [pc, #216]	; (800474c <HAL_DMA_Abort+0x224>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d05e      	beq.n	8004736 <HAL_DMA_Abort+0x20e>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a34      	ldr	r2, [pc, #208]	; (8004750 <HAL_DMA_Abort+0x228>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d059      	beq.n	8004736 <HAL_DMA_Abort+0x20e>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a33      	ldr	r2, [pc, #204]	; (8004754 <HAL_DMA_Abort+0x22c>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d054      	beq.n	8004736 <HAL_DMA_Abort+0x20e>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a31      	ldr	r2, [pc, #196]	; (8004758 <HAL_DMA_Abort+0x230>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d04f      	beq.n	8004736 <HAL_DMA_Abort+0x20e>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a30      	ldr	r2, [pc, #192]	; (800475c <HAL_DMA_Abort+0x234>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d04a      	beq.n	8004736 <HAL_DMA_Abort+0x20e>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a2e      	ldr	r2, [pc, #184]	; (8004760 <HAL_DMA_Abort+0x238>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d045      	beq.n	8004736 <HAL_DMA_Abort+0x20e>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a2d      	ldr	r2, [pc, #180]	; (8004764 <HAL_DMA_Abort+0x23c>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d040      	beq.n	8004736 <HAL_DMA_Abort+0x20e>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a2b      	ldr	r2, [pc, #172]	; (8004768 <HAL_DMA_Abort+0x240>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d03b      	beq.n	8004736 <HAL_DMA_Abort+0x20e>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a2a      	ldr	r2, [pc, #168]	; (800476c <HAL_DMA_Abort+0x244>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d036      	beq.n	8004736 <HAL_DMA_Abort+0x20e>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a28      	ldr	r2, [pc, #160]	; (8004770 <HAL_DMA_Abort+0x248>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d031      	beq.n	8004736 <HAL_DMA_Abort+0x20e>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a27      	ldr	r2, [pc, #156]	; (8004774 <HAL_DMA_Abort+0x24c>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d02c      	beq.n	8004736 <HAL_DMA_Abort+0x20e>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a25      	ldr	r2, [pc, #148]	; (8004778 <HAL_DMA_Abort+0x250>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d027      	beq.n	8004736 <HAL_DMA_Abort+0x20e>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a24      	ldr	r2, [pc, #144]	; (800477c <HAL_DMA_Abort+0x254>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d022      	beq.n	8004736 <HAL_DMA_Abort+0x20e>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a22      	ldr	r2, [pc, #136]	; (8004780 <HAL_DMA_Abort+0x258>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d01d      	beq.n	8004736 <HAL_DMA_Abort+0x20e>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a21      	ldr	r2, [pc, #132]	; (8004784 <HAL_DMA_Abort+0x25c>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d018      	beq.n	8004736 <HAL_DMA_Abort+0x20e>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a1f      	ldr	r2, [pc, #124]	; (8004788 <HAL_DMA_Abort+0x260>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d013      	beq.n	8004736 <HAL_DMA_Abort+0x20e>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a1e      	ldr	r2, [pc, #120]	; (800478c <HAL_DMA_Abort+0x264>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d00e      	beq.n	8004736 <HAL_DMA_Abort+0x20e>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a1c      	ldr	r2, [pc, #112]	; (8004790 <HAL_DMA_Abort+0x268>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d009      	beq.n	8004736 <HAL_DMA_Abort+0x20e>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a1b      	ldr	r2, [pc, #108]	; (8004794 <HAL_DMA_Abort+0x26c>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d004      	beq.n	8004736 <HAL_DMA_Abort+0x20e>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a19      	ldr	r2, [pc, #100]	; (8004798 <HAL_DMA_Abort+0x270>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d132      	bne.n	800479c <HAL_DMA_Abort+0x274>
 8004736:	2301      	movs	r3, #1
 8004738:	e031      	b.n	800479e <HAL_DMA_Abort+0x276>
 800473a:	bf00      	nop
 800473c:	40020010 	.word	0x40020010
 8004740:	40020028 	.word	0x40020028
 8004744:	40020040 	.word	0x40020040
 8004748:	40020058 	.word	0x40020058
 800474c:	40020070 	.word	0x40020070
 8004750:	40020088 	.word	0x40020088
 8004754:	400200a0 	.word	0x400200a0
 8004758:	400200b8 	.word	0x400200b8
 800475c:	40020410 	.word	0x40020410
 8004760:	40020428 	.word	0x40020428
 8004764:	40020440 	.word	0x40020440
 8004768:	40020458 	.word	0x40020458
 800476c:	40020470 	.word	0x40020470
 8004770:	40020488 	.word	0x40020488
 8004774:	400204a0 	.word	0x400204a0
 8004778:	400204b8 	.word	0x400204b8
 800477c:	58025408 	.word	0x58025408
 8004780:	5802541c 	.word	0x5802541c
 8004784:	58025430 	.word	0x58025430
 8004788:	58025444 	.word	0x58025444
 800478c:	58025458 	.word	0x58025458
 8004790:	5802546c 	.word	0x5802546c
 8004794:	58025480 	.word	0x58025480
 8004798:	58025494 	.word	0x58025494
 800479c:	2300      	movs	r3, #0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d007      	beq.n	80047b2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a6d      	ldr	r2, [pc, #436]	; (800496c <HAL_DMA_Abort+0x444>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d04a      	beq.n	8004852 <HAL_DMA_Abort+0x32a>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a6b      	ldr	r2, [pc, #428]	; (8004970 <HAL_DMA_Abort+0x448>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d045      	beq.n	8004852 <HAL_DMA_Abort+0x32a>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a6a      	ldr	r2, [pc, #424]	; (8004974 <HAL_DMA_Abort+0x44c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d040      	beq.n	8004852 <HAL_DMA_Abort+0x32a>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a68      	ldr	r2, [pc, #416]	; (8004978 <HAL_DMA_Abort+0x450>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d03b      	beq.n	8004852 <HAL_DMA_Abort+0x32a>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a67      	ldr	r2, [pc, #412]	; (800497c <HAL_DMA_Abort+0x454>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d036      	beq.n	8004852 <HAL_DMA_Abort+0x32a>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a65      	ldr	r2, [pc, #404]	; (8004980 <HAL_DMA_Abort+0x458>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d031      	beq.n	8004852 <HAL_DMA_Abort+0x32a>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a64      	ldr	r2, [pc, #400]	; (8004984 <HAL_DMA_Abort+0x45c>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d02c      	beq.n	8004852 <HAL_DMA_Abort+0x32a>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a62      	ldr	r2, [pc, #392]	; (8004988 <HAL_DMA_Abort+0x460>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d027      	beq.n	8004852 <HAL_DMA_Abort+0x32a>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a61      	ldr	r2, [pc, #388]	; (800498c <HAL_DMA_Abort+0x464>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d022      	beq.n	8004852 <HAL_DMA_Abort+0x32a>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a5f      	ldr	r2, [pc, #380]	; (8004990 <HAL_DMA_Abort+0x468>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d01d      	beq.n	8004852 <HAL_DMA_Abort+0x32a>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a5e      	ldr	r2, [pc, #376]	; (8004994 <HAL_DMA_Abort+0x46c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d018      	beq.n	8004852 <HAL_DMA_Abort+0x32a>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a5c      	ldr	r2, [pc, #368]	; (8004998 <HAL_DMA_Abort+0x470>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d013      	beq.n	8004852 <HAL_DMA_Abort+0x32a>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a5b      	ldr	r2, [pc, #364]	; (800499c <HAL_DMA_Abort+0x474>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d00e      	beq.n	8004852 <HAL_DMA_Abort+0x32a>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a59      	ldr	r2, [pc, #356]	; (80049a0 <HAL_DMA_Abort+0x478>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d009      	beq.n	8004852 <HAL_DMA_Abort+0x32a>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a58      	ldr	r2, [pc, #352]	; (80049a4 <HAL_DMA_Abort+0x47c>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d004      	beq.n	8004852 <HAL_DMA_Abort+0x32a>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a56      	ldr	r2, [pc, #344]	; (80049a8 <HAL_DMA_Abort+0x480>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d108      	bne.n	8004864 <HAL_DMA_Abort+0x33c>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 0201 	bic.w	r2, r2, #1
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	e007      	b.n	8004874 <HAL_DMA_Abort+0x34c>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 0201 	bic.w	r2, r2, #1
 8004872:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004874:	e013      	b.n	800489e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004876:	f7ff fcf7 	bl	8004268 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b05      	cmp	r3, #5
 8004882:	d90c      	bls.n	800489e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2220      	movs	r2, #32
 8004888:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2203      	movs	r2, #3
 8004896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e12d      	b.n	8004afa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1e5      	bne.n	8004876 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a2f      	ldr	r2, [pc, #188]	; (800496c <HAL_DMA_Abort+0x444>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d04a      	beq.n	800494a <HAL_DMA_Abort+0x422>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a2d      	ldr	r2, [pc, #180]	; (8004970 <HAL_DMA_Abort+0x448>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d045      	beq.n	800494a <HAL_DMA_Abort+0x422>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a2c      	ldr	r2, [pc, #176]	; (8004974 <HAL_DMA_Abort+0x44c>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d040      	beq.n	800494a <HAL_DMA_Abort+0x422>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a2a      	ldr	r2, [pc, #168]	; (8004978 <HAL_DMA_Abort+0x450>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d03b      	beq.n	800494a <HAL_DMA_Abort+0x422>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a29      	ldr	r2, [pc, #164]	; (800497c <HAL_DMA_Abort+0x454>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d036      	beq.n	800494a <HAL_DMA_Abort+0x422>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a27      	ldr	r2, [pc, #156]	; (8004980 <HAL_DMA_Abort+0x458>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d031      	beq.n	800494a <HAL_DMA_Abort+0x422>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a26      	ldr	r2, [pc, #152]	; (8004984 <HAL_DMA_Abort+0x45c>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d02c      	beq.n	800494a <HAL_DMA_Abort+0x422>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a24      	ldr	r2, [pc, #144]	; (8004988 <HAL_DMA_Abort+0x460>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d027      	beq.n	800494a <HAL_DMA_Abort+0x422>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a23      	ldr	r2, [pc, #140]	; (800498c <HAL_DMA_Abort+0x464>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d022      	beq.n	800494a <HAL_DMA_Abort+0x422>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a21      	ldr	r2, [pc, #132]	; (8004990 <HAL_DMA_Abort+0x468>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d01d      	beq.n	800494a <HAL_DMA_Abort+0x422>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a20      	ldr	r2, [pc, #128]	; (8004994 <HAL_DMA_Abort+0x46c>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d018      	beq.n	800494a <HAL_DMA_Abort+0x422>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a1e      	ldr	r2, [pc, #120]	; (8004998 <HAL_DMA_Abort+0x470>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d013      	beq.n	800494a <HAL_DMA_Abort+0x422>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a1d      	ldr	r2, [pc, #116]	; (800499c <HAL_DMA_Abort+0x474>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d00e      	beq.n	800494a <HAL_DMA_Abort+0x422>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a1b      	ldr	r2, [pc, #108]	; (80049a0 <HAL_DMA_Abort+0x478>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d009      	beq.n	800494a <HAL_DMA_Abort+0x422>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a1a      	ldr	r2, [pc, #104]	; (80049a4 <HAL_DMA_Abort+0x47c>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d004      	beq.n	800494a <HAL_DMA_Abort+0x422>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a18      	ldr	r2, [pc, #96]	; (80049a8 <HAL_DMA_Abort+0x480>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d101      	bne.n	800494e <HAL_DMA_Abort+0x426>
 800494a:	2301      	movs	r3, #1
 800494c:	e000      	b.n	8004950 <HAL_DMA_Abort+0x428>
 800494e:	2300      	movs	r3, #0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d02b      	beq.n	80049ac <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004958:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800495e:	f003 031f 	and.w	r3, r3, #31
 8004962:	223f      	movs	r2, #63	; 0x3f
 8004964:	409a      	lsls	r2, r3
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	609a      	str	r2, [r3, #8]
 800496a:	e02a      	b.n	80049c2 <HAL_DMA_Abort+0x49a>
 800496c:	40020010 	.word	0x40020010
 8004970:	40020028 	.word	0x40020028
 8004974:	40020040 	.word	0x40020040
 8004978:	40020058 	.word	0x40020058
 800497c:	40020070 	.word	0x40020070
 8004980:	40020088 	.word	0x40020088
 8004984:	400200a0 	.word	0x400200a0
 8004988:	400200b8 	.word	0x400200b8
 800498c:	40020410 	.word	0x40020410
 8004990:	40020428 	.word	0x40020428
 8004994:	40020440 	.word	0x40020440
 8004998:	40020458 	.word	0x40020458
 800499c:	40020470 	.word	0x40020470
 80049a0:	40020488 	.word	0x40020488
 80049a4:	400204a0 	.word	0x400204a0
 80049a8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b6:	f003 031f 	and.w	r3, r3, #31
 80049ba:	2201      	movs	r2, #1
 80049bc:	409a      	lsls	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a4f      	ldr	r2, [pc, #316]	; (8004b04 <HAL_DMA_Abort+0x5dc>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d072      	beq.n	8004ab2 <HAL_DMA_Abort+0x58a>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a4d      	ldr	r2, [pc, #308]	; (8004b08 <HAL_DMA_Abort+0x5e0>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d06d      	beq.n	8004ab2 <HAL_DMA_Abort+0x58a>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a4c      	ldr	r2, [pc, #304]	; (8004b0c <HAL_DMA_Abort+0x5e4>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d068      	beq.n	8004ab2 <HAL_DMA_Abort+0x58a>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a4a      	ldr	r2, [pc, #296]	; (8004b10 <HAL_DMA_Abort+0x5e8>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d063      	beq.n	8004ab2 <HAL_DMA_Abort+0x58a>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a49      	ldr	r2, [pc, #292]	; (8004b14 <HAL_DMA_Abort+0x5ec>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d05e      	beq.n	8004ab2 <HAL_DMA_Abort+0x58a>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a47      	ldr	r2, [pc, #284]	; (8004b18 <HAL_DMA_Abort+0x5f0>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d059      	beq.n	8004ab2 <HAL_DMA_Abort+0x58a>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a46      	ldr	r2, [pc, #280]	; (8004b1c <HAL_DMA_Abort+0x5f4>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d054      	beq.n	8004ab2 <HAL_DMA_Abort+0x58a>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a44      	ldr	r2, [pc, #272]	; (8004b20 <HAL_DMA_Abort+0x5f8>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d04f      	beq.n	8004ab2 <HAL_DMA_Abort+0x58a>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a43      	ldr	r2, [pc, #268]	; (8004b24 <HAL_DMA_Abort+0x5fc>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d04a      	beq.n	8004ab2 <HAL_DMA_Abort+0x58a>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a41      	ldr	r2, [pc, #260]	; (8004b28 <HAL_DMA_Abort+0x600>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d045      	beq.n	8004ab2 <HAL_DMA_Abort+0x58a>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a40      	ldr	r2, [pc, #256]	; (8004b2c <HAL_DMA_Abort+0x604>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d040      	beq.n	8004ab2 <HAL_DMA_Abort+0x58a>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a3e      	ldr	r2, [pc, #248]	; (8004b30 <HAL_DMA_Abort+0x608>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d03b      	beq.n	8004ab2 <HAL_DMA_Abort+0x58a>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a3d      	ldr	r2, [pc, #244]	; (8004b34 <HAL_DMA_Abort+0x60c>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d036      	beq.n	8004ab2 <HAL_DMA_Abort+0x58a>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a3b      	ldr	r2, [pc, #236]	; (8004b38 <HAL_DMA_Abort+0x610>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d031      	beq.n	8004ab2 <HAL_DMA_Abort+0x58a>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a3a      	ldr	r2, [pc, #232]	; (8004b3c <HAL_DMA_Abort+0x614>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d02c      	beq.n	8004ab2 <HAL_DMA_Abort+0x58a>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a38      	ldr	r2, [pc, #224]	; (8004b40 <HAL_DMA_Abort+0x618>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d027      	beq.n	8004ab2 <HAL_DMA_Abort+0x58a>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a37      	ldr	r2, [pc, #220]	; (8004b44 <HAL_DMA_Abort+0x61c>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d022      	beq.n	8004ab2 <HAL_DMA_Abort+0x58a>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a35      	ldr	r2, [pc, #212]	; (8004b48 <HAL_DMA_Abort+0x620>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d01d      	beq.n	8004ab2 <HAL_DMA_Abort+0x58a>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a34      	ldr	r2, [pc, #208]	; (8004b4c <HAL_DMA_Abort+0x624>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d018      	beq.n	8004ab2 <HAL_DMA_Abort+0x58a>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a32      	ldr	r2, [pc, #200]	; (8004b50 <HAL_DMA_Abort+0x628>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d013      	beq.n	8004ab2 <HAL_DMA_Abort+0x58a>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a31      	ldr	r2, [pc, #196]	; (8004b54 <HAL_DMA_Abort+0x62c>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d00e      	beq.n	8004ab2 <HAL_DMA_Abort+0x58a>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a2f      	ldr	r2, [pc, #188]	; (8004b58 <HAL_DMA_Abort+0x630>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d009      	beq.n	8004ab2 <HAL_DMA_Abort+0x58a>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a2e      	ldr	r2, [pc, #184]	; (8004b5c <HAL_DMA_Abort+0x634>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d004      	beq.n	8004ab2 <HAL_DMA_Abort+0x58a>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a2c      	ldr	r2, [pc, #176]	; (8004b60 <HAL_DMA_Abort+0x638>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d101      	bne.n	8004ab6 <HAL_DMA_Abort+0x58e>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e000      	b.n	8004ab8 <HAL_DMA_Abort+0x590>
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d015      	beq.n	8004ae8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004ac4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00c      	beq.n	8004ae8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ad8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004adc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004ae6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3718      	adds	r7, #24
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	40020010 	.word	0x40020010
 8004b08:	40020028 	.word	0x40020028
 8004b0c:	40020040 	.word	0x40020040
 8004b10:	40020058 	.word	0x40020058
 8004b14:	40020070 	.word	0x40020070
 8004b18:	40020088 	.word	0x40020088
 8004b1c:	400200a0 	.word	0x400200a0
 8004b20:	400200b8 	.word	0x400200b8
 8004b24:	40020410 	.word	0x40020410
 8004b28:	40020428 	.word	0x40020428
 8004b2c:	40020440 	.word	0x40020440
 8004b30:	40020458 	.word	0x40020458
 8004b34:	40020470 	.word	0x40020470
 8004b38:	40020488 	.word	0x40020488
 8004b3c:	400204a0 	.word	0x400204a0
 8004b40:	400204b8 	.word	0x400204b8
 8004b44:	58025408 	.word	0x58025408
 8004b48:	5802541c 	.word	0x5802541c
 8004b4c:	58025430 	.word	0x58025430
 8004b50:	58025444 	.word	0x58025444
 8004b54:	58025458 	.word	0x58025458
 8004b58:	5802546c 	.word	0x5802546c
 8004b5c:	58025480 	.word	0x58025480
 8004b60:	58025494 	.word	0x58025494

08004b64 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d101      	bne.n	8004b76 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e205      	b.n	8004f82 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d004      	beq.n	8004b8c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2280      	movs	r2, #128	; 0x80
 8004b86:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e1fa      	b.n	8004f82 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a8c      	ldr	r2, [pc, #560]	; (8004dc4 <HAL_DMA_Abort_IT+0x260>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d04a      	beq.n	8004c2c <HAL_DMA_Abort_IT+0xc8>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a8b      	ldr	r2, [pc, #556]	; (8004dc8 <HAL_DMA_Abort_IT+0x264>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d045      	beq.n	8004c2c <HAL_DMA_Abort_IT+0xc8>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a89      	ldr	r2, [pc, #548]	; (8004dcc <HAL_DMA_Abort_IT+0x268>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d040      	beq.n	8004c2c <HAL_DMA_Abort_IT+0xc8>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a88      	ldr	r2, [pc, #544]	; (8004dd0 <HAL_DMA_Abort_IT+0x26c>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d03b      	beq.n	8004c2c <HAL_DMA_Abort_IT+0xc8>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a86      	ldr	r2, [pc, #536]	; (8004dd4 <HAL_DMA_Abort_IT+0x270>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d036      	beq.n	8004c2c <HAL_DMA_Abort_IT+0xc8>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a85      	ldr	r2, [pc, #532]	; (8004dd8 <HAL_DMA_Abort_IT+0x274>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d031      	beq.n	8004c2c <HAL_DMA_Abort_IT+0xc8>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a83      	ldr	r2, [pc, #524]	; (8004ddc <HAL_DMA_Abort_IT+0x278>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d02c      	beq.n	8004c2c <HAL_DMA_Abort_IT+0xc8>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a82      	ldr	r2, [pc, #520]	; (8004de0 <HAL_DMA_Abort_IT+0x27c>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d027      	beq.n	8004c2c <HAL_DMA_Abort_IT+0xc8>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a80      	ldr	r2, [pc, #512]	; (8004de4 <HAL_DMA_Abort_IT+0x280>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d022      	beq.n	8004c2c <HAL_DMA_Abort_IT+0xc8>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a7f      	ldr	r2, [pc, #508]	; (8004de8 <HAL_DMA_Abort_IT+0x284>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d01d      	beq.n	8004c2c <HAL_DMA_Abort_IT+0xc8>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a7d      	ldr	r2, [pc, #500]	; (8004dec <HAL_DMA_Abort_IT+0x288>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d018      	beq.n	8004c2c <HAL_DMA_Abort_IT+0xc8>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a7c      	ldr	r2, [pc, #496]	; (8004df0 <HAL_DMA_Abort_IT+0x28c>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d013      	beq.n	8004c2c <HAL_DMA_Abort_IT+0xc8>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a7a      	ldr	r2, [pc, #488]	; (8004df4 <HAL_DMA_Abort_IT+0x290>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d00e      	beq.n	8004c2c <HAL_DMA_Abort_IT+0xc8>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a79      	ldr	r2, [pc, #484]	; (8004df8 <HAL_DMA_Abort_IT+0x294>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d009      	beq.n	8004c2c <HAL_DMA_Abort_IT+0xc8>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a77      	ldr	r2, [pc, #476]	; (8004dfc <HAL_DMA_Abort_IT+0x298>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d004      	beq.n	8004c2c <HAL_DMA_Abort_IT+0xc8>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a76      	ldr	r2, [pc, #472]	; (8004e00 <HAL_DMA_Abort_IT+0x29c>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d101      	bne.n	8004c30 <HAL_DMA_Abort_IT+0xcc>
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e000      	b.n	8004c32 <HAL_DMA_Abort_IT+0xce>
 8004c30:	2300      	movs	r3, #0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d065      	beq.n	8004d02 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2204      	movs	r2, #4
 8004c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a60      	ldr	r2, [pc, #384]	; (8004dc4 <HAL_DMA_Abort_IT+0x260>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d04a      	beq.n	8004cde <HAL_DMA_Abort_IT+0x17a>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a5e      	ldr	r2, [pc, #376]	; (8004dc8 <HAL_DMA_Abort_IT+0x264>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d045      	beq.n	8004cde <HAL_DMA_Abort_IT+0x17a>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a5d      	ldr	r2, [pc, #372]	; (8004dcc <HAL_DMA_Abort_IT+0x268>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d040      	beq.n	8004cde <HAL_DMA_Abort_IT+0x17a>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a5b      	ldr	r2, [pc, #364]	; (8004dd0 <HAL_DMA_Abort_IT+0x26c>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d03b      	beq.n	8004cde <HAL_DMA_Abort_IT+0x17a>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a5a      	ldr	r2, [pc, #360]	; (8004dd4 <HAL_DMA_Abort_IT+0x270>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d036      	beq.n	8004cde <HAL_DMA_Abort_IT+0x17a>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a58      	ldr	r2, [pc, #352]	; (8004dd8 <HAL_DMA_Abort_IT+0x274>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d031      	beq.n	8004cde <HAL_DMA_Abort_IT+0x17a>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a57      	ldr	r2, [pc, #348]	; (8004ddc <HAL_DMA_Abort_IT+0x278>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d02c      	beq.n	8004cde <HAL_DMA_Abort_IT+0x17a>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a55      	ldr	r2, [pc, #340]	; (8004de0 <HAL_DMA_Abort_IT+0x27c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d027      	beq.n	8004cde <HAL_DMA_Abort_IT+0x17a>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a54      	ldr	r2, [pc, #336]	; (8004de4 <HAL_DMA_Abort_IT+0x280>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d022      	beq.n	8004cde <HAL_DMA_Abort_IT+0x17a>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a52      	ldr	r2, [pc, #328]	; (8004de8 <HAL_DMA_Abort_IT+0x284>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d01d      	beq.n	8004cde <HAL_DMA_Abort_IT+0x17a>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a51      	ldr	r2, [pc, #324]	; (8004dec <HAL_DMA_Abort_IT+0x288>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d018      	beq.n	8004cde <HAL_DMA_Abort_IT+0x17a>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a4f      	ldr	r2, [pc, #316]	; (8004df0 <HAL_DMA_Abort_IT+0x28c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d013      	beq.n	8004cde <HAL_DMA_Abort_IT+0x17a>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a4e      	ldr	r2, [pc, #312]	; (8004df4 <HAL_DMA_Abort_IT+0x290>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d00e      	beq.n	8004cde <HAL_DMA_Abort_IT+0x17a>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a4c      	ldr	r2, [pc, #304]	; (8004df8 <HAL_DMA_Abort_IT+0x294>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d009      	beq.n	8004cde <HAL_DMA_Abort_IT+0x17a>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a4b      	ldr	r2, [pc, #300]	; (8004dfc <HAL_DMA_Abort_IT+0x298>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d004      	beq.n	8004cde <HAL_DMA_Abort_IT+0x17a>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a49      	ldr	r2, [pc, #292]	; (8004e00 <HAL_DMA_Abort_IT+0x29c>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d108      	bne.n	8004cf0 <HAL_DMA_Abort_IT+0x18c>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f022 0201 	bic.w	r2, r2, #1
 8004cec:	601a      	str	r2, [r3, #0]
 8004cee:	e147      	b.n	8004f80 <HAL_DMA_Abort_IT+0x41c>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 0201 	bic.w	r2, r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	e13e      	b.n	8004f80 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 020e 	bic.w	r2, r2, #14
 8004d10:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a2b      	ldr	r2, [pc, #172]	; (8004dc4 <HAL_DMA_Abort_IT+0x260>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d04a      	beq.n	8004db2 <HAL_DMA_Abort_IT+0x24e>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a29      	ldr	r2, [pc, #164]	; (8004dc8 <HAL_DMA_Abort_IT+0x264>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d045      	beq.n	8004db2 <HAL_DMA_Abort_IT+0x24e>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a28      	ldr	r2, [pc, #160]	; (8004dcc <HAL_DMA_Abort_IT+0x268>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d040      	beq.n	8004db2 <HAL_DMA_Abort_IT+0x24e>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a26      	ldr	r2, [pc, #152]	; (8004dd0 <HAL_DMA_Abort_IT+0x26c>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d03b      	beq.n	8004db2 <HAL_DMA_Abort_IT+0x24e>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a25      	ldr	r2, [pc, #148]	; (8004dd4 <HAL_DMA_Abort_IT+0x270>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d036      	beq.n	8004db2 <HAL_DMA_Abort_IT+0x24e>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a23      	ldr	r2, [pc, #140]	; (8004dd8 <HAL_DMA_Abort_IT+0x274>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d031      	beq.n	8004db2 <HAL_DMA_Abort_IT+0x24e>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a22      	ldr	r2, [pc, #136]	; (8004ddc <HAL_DMA_Abort_IT+0x278>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d02c      	beq.n	8004db2 <HAL_DMA_Abort_IT+0x24e>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a20      	ldr	r2, [pc, #128]	; (8004de0 <HAL_DMA_Abort_IT+0x27c>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d027      	beq.n	8004db2 <HAL_DMA_Abort_IT+0x24e>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a1f      	ldr	r2, [pc, #124]	; (8004de4 <HAL_DMA_Abort_IT+0x280>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d022      	beq.n	8004db2 <HAL_DMA_Abort_IT+0x24e>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a1d      	ldr	r2, [pc, #116]	; (8004de8 <HAL_DMA_Abort_IT+0x284>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d01d      	beq.n	8004db2 <HAL_DMA_Abort_IT+0x24e>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a1c      	ldr	r2, [pc, #112]	; (8004dec <HAL_DMA_Abort_IT+0x288>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d018      	beq.n	8004db2 <HAL_DMA_Abort_IT+0x24e>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a1a      	ldr	r2, [pc, #104]	; (8004df0 <HAL_DMA_Abort_IT+0x28c>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d013      	beq.n	8004db2 <HAL_DMA_Abort_IT+0x24e>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a19      	ldr	r2, [pc, #100]	; (8004df4 <HAL_DMA_Abort_IT+0x290>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d00e      	beq.n	8004db2 <HAL_DMA_Abort_IT+0x24e>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a17      	ldr	r2, [pc, #92]	; (8004df8 <HAL_DMA_Abort_IT+0x294>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d009      	beq.n	8004db2 <HAL_DMA_Abort_IT+0x24e>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a16      	ldr	r2, [pc, #88]	; (8004dfc <HAL_DMA_Abort_IT+0x298>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d004      	beq.n	8004db2 <HAL_DMA_Abort_IT+0x24e>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a14      	ldr	r2, [pc, #80]	; (8004e00 <HAL_DMA_Abort_IT+0x29c>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d128      	bne.n	8004e04 <HAL_DMA_Abort_IT+0x2a0>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 0201 	bic.w	r2, r2, #1
 8004dc0:	601a      	str	r2, [r3, #0]
 8004dc2:	e027      	b.n	8004e14 <HAL_DMA_Abort_IT+0x2b0>
 8004dc4:	40020010 	.word	0x40020010
 8004dc8:	40020028 	.word	0x40020028
 8004dcc:	40020040 	.word	0x40020040
 8004dd0:	40020058 	.word	0x40020058
 8004dd4:	40020070 	.word	0x40020070
 8004dd8:	40020088 	.word	0x40020088
 8004ddc:	400200a0 	.word	0x400200a0
 8004de0:	400200b8 	.word	0x400200b8
 8004de4:	40020410 	.word	0x40020410
 8004de8:	40020428 	.word	0x40020428
 8004dec:	40020440 	.word	0x40020440
 8004df0:	40020458 	.word	0x40020458
 8004df4:	40020470 	.word	0x40020470
 8004df8:	40020488 	.word	0x40020488
 8004dfc:	400204a0 	.word	0x400204a0
 8004e00:	400204b8 	.word	0x400204b8
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 0201 	bic.w	r2, r2, #1
 8004e12:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a5c      	ldr	r2, [pc, #368]	; (8004f8c <HAL_DMA_Abort_IT+0x428>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d072      	beq.n	8004f04 <HAL_DMA_Abort_IT+0x3a0>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a5b      	ldr	r2, [pc, #364]	; (8004f90 <HAL_DMA_Abort_IT+0x42c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d06d      	beq.n	8004f04 <HAL_DMA_Abort_IT+0x3a0>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a59      	ldr	r2, [pc, #356]	; (8004f94 <HAL_DMA_Abort_IT+0x430>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d068      	beq.n	8004f04 <HAL_DMA_Abort_IT+0x3a0>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a58      	ldr	r2, [pc, #352]	; (8004f98 <HAL_DMA_Abort_IT+0x434>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d063      	beq.n	8004f04 <HAL_DMA_Abort_IT+0x3a0>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a56      	ldr	r2, [pc, #344]	; (8004f9c <HAL_DMA_Abort_IT+0x438>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d05e      	beq.n	8004f04 <HAL_DMA_Abort_IT+0x3a0>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a55      	ldr	r2, [pc, #340]	; (8004fa0 <HAL_DMA_Abort_IT+0x43c>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d059      	beq.n	8004f04 <HAL_DMA_Abort_IT+0x3a0>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a53      	ldr	r2, [pc, #332]	; (8004fa4 <HAL_DMA_Abort_IT+0x440>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d054      	beq.n	8004f04 <HAL_DMA_Abort_IT+0x3a0>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a52      	ldr	r2, [pc, #328]	; (8004fa8 <HAL_DMA_Abort_IT+0x444>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d04f      	beq.n	8004f04 <HAL_DMA_Abort_IT+0x3a0>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a50      	ldr	r2, [pc, #320]	; (8004fac <HAL_DMA_Abort_IT+0x448>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d04a      	beq.n	8004f04 <HAL_DMA_Abort_IT+0x3a0>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a4f      	ldr	r2, [pc, #316]	; (8004fb0 <HAL_DMA_Abort_IT+0x44c>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d045      	beq.n	8004f04 <HAL_DMA_Abort_IT+0x3a0>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a4d      	ldr	r2, [pc, #308]	; (8004fb4 <HAL_DMA_Abort_IT+0x450>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d040      	beq.n	8004f04 <HAL_DMA_Abort_IT+0x3a0>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a4c      	ldr	r2, [pc, #304]	; (8004fb8 <HAL_DMA_Abort_IT+0x454>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d03b      	beq.n	8004f04 <HAL_DMA_Abort_IT+0x3a0>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a4a      	ldr	r2, [pc, #296]	; (8004fbc <HAL_DMA_Abort_IT+0x458>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d036      	beq.n	8004f04 <HAL_DMA_Abort_IT+0x3a0>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a49      	ldr	r2, [pc, #292]	; (8004fc0 <HAL_DMA_Abort_IT+0x45c>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d031      	beq.n	8004f04 <HAL_DMA_Abort_IT+0x3a0>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a47      	ldr	r2, [pc, #284]	; (8004fc4 <HAL_DMA_Abort_IT+0x460>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d02c      	beq.n	8004f04 <HAL_DMA_Abort_IT+0x3a0>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a46      	ldr	r2, [pc, #280]	; (8004fc8 <HAL_DMA_Abort_IT+0x464>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d027      	beq.n	8004f04 <HAL_DMA_Abort_IT+0x3a0>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a44      	ldr	r2, [pc, #272]	; (8004fcc <HAL_DMA_Abort_IT+0x468>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d022      	beq.n	8004f04 <HAL_DMA_Abort_IT+0x3a0>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a43      	ldr	r2, [pc, #268]	; (8004fd0 <HAL_DMA_Abort_IT+0x46c>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d01d      	beq.n	8004f04 <HAL_DMA_Abort_IT+0x3a0>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a41      	ldr	r2, [pc, #260]	; (8004fd4 <HAL_DMA_Abort_IT+0x470>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d018      	beq.n	8004f04 <HAL_DMA_Abort_IT+0x3a0>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a40      	ldr	r2, [pc, #256]	; (8004fd8 <HAL_DMA_Abort_IT+0x474>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d013      	beq.n	8004f04 <HAL_DMA_Abort_IT+0x3a0>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a3e      	ldr	r2, [pc, #248]	; (8004fdc <HAL_DMA_Abort_IT+0x478>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d00e      	beq.n	8004f04 <HAL_DMA_Abort_IT+0x3a0>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a3d      	ldr	r2, [pc, #244]	; (8004fe0 <HAL_DMA_Abort_IT+0x47c>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d009      	beq.n	8004f04 <HAL_DMA_Abort_IT+0x3a0>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a3b      	ldr	r2, [pc, #236]	; (8004fe4 <HAL_DMA_Abort_IT+0x480>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d004      	beq.n	8004f04 <HAL_DMA_Abort_IT+0x3a0>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a3a      	ldr	r2, [pc, #232]	; (8004fe8 <HAL_DMA_Abort_IT+0x484>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d101      	bne.n	8004f08 <HAL_DMA_Abort_IT+0x3a4>
 8004f04:	2301      	movs	r3, #1
 8004f06:	e000      	b.n	8004f0a <HAL_DMA_Abort_IT+0x3a6>
 8004f08:	2300      	movs	r3, #0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d028      	beq.n	8004f60 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f1c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f22:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f28:	f003 031f 	and.w	r3, r3, #31
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	409a      	lsls	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004f3c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00c      	beq.n	8004f60 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f54:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004f5e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d003      	beq.n	8004f80 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3710      	adds	r7, #16
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	40020010 	.word	0x40020010
 8004f90:	40020028 	.word	0x40020028
 8004f94:	40020040 	.word	0x40020040
 8004f98:	40020058 	.word	0x40020058
 8004f9c:	40020070 	.word	0x40020070
 8004fa0:	40020088 	.word	0x40020088
 8004fa4:	400200a0 	.word	0x400200a0
 8004fa8:	400200b8 	.word	0x400200b8
 8004fac:	40020410 	.word	0x40020410
 8004fb0:	40020428 	.word	0x40020428
 8004fb4:	40020440 	.word	0x40020440
 8004fb8:	40020458 	.word	0x40020458
 8004fbc:	40020470 	.word	0x40020470
 8004fc0:	40020488 	.word	0x40020488
 8004fc4:	400204a0 	.word	0x400204a0
 8004fc8:	400204b8 	.word	0x400204b8
 8004fcc:	58025408 	.word	0x58025408
 8004fd0:	5802541c 	.word	0x5802541c
 8004fd4:	58025430 	.word	0x58025430
 8004fd8:	58025444 	.word	0x58025444
 8004fdc:	58025458 	.word	0x58025458
 8004fe0:	5802546c 	.word	0x5802546c
 8004fe4:	58025480 	.word	0x58025480
 8004fe8:	58025494 	.word	0x58025494

08004fec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e0c6      	b.n	800518c <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005002:	2b00      	cmp	r3, #0
 8005004:	d102      	bne.n	800500c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7fe fcd8 	bl	80039bc <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2223      	movs	r2, #35	; 0x23
 8005010:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005012:	4b60      	ldr	r3, [pc, #384]	; (8005194 <HAL_ETH_Init+0x1a8>)
 8005014:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005018:	4a5e      	ldr	r2, [pc, #376]	; (8005194 <HAL_ETH_Init+0x1a8>)
 800501a:	f043 0302 	orr.w	r3, r3, #2
 800501e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005022:	4b5c      	ldr	r3, [pc, #368]	; (8005194 <HAL_ETH_Init+0x1a8>)
 8005024:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	60bb      	str	r3, [r7, #8]
 800502e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	7a1b      	ldrb	r3, [r3, #8]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d103      	bne.n	8005040 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005038:	2000      	movs	r0, #0
 800503a:	f7ff f951 	bl	80042e0 <HAL_SYSCFG_ETHInterfaceSelect>
 800503e:	e003      	b.n	8005048 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005040:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005044:	f7ff f94c 	bl	80042e0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f042 0201 	orr.w	r2, r2, #1
 800505a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800505e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005060:	f7ff f902 	bl	8004268 <HAL_GetTick>
 8005064:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005066:	e00f      	b.n	8005088 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8005068:	f7ff f8fe 	bl	8004268 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005076:	d907      	bls.n	8005088 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2204      	movs	r2, #4
 800507c:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	22e0      	movs	r2, #224	; 0xe0
 8005082:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e081      	b.n	800518c <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1e6      	bne.n	8005068 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 fac0 	bl	8005620 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80050a0:	f003 f844 	bl	800812c <HAL_RCC_GetHCLKFreq>
 80050a4:	4603      	mov	r3, r0
 80050a6:	4a3c      	ldr	r2, [pc, #240]	; (8005198 <HAL_ETH_Init+0x1ac>)
 80050a8:	fba2 2303 	umull	r2, r3, r2, r3
 80050ac:	0c9a      	lsrs	r2, r3, #18
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	3a01      	subs	r2, #1
 80050b4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 fa13 	bl	80054e4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80050d4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80050d8:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	f003 0303 	and.w	r3, r3, #3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d007      	beq.n	80050f6 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	22e0      	movs	r2, #224	; 0xe0
 80050f0:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e04a      	b.n	800518c <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	f241 1308 	movw	r3, #4360	; 0x1108
 80050fe:	4413      	add	r3, r2
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	4b26      	ldr	r3, [pc, #152]	; (800519c <HAL_ETH_Init+0x1b0>)
 8005104:	4013      	ands	r3, r2
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	6952      	ldr	r2, [r2, #20]
 800510a:	0052      	lsls	r2, r2, #1
 800510c:	6879      	ldr	r1, [r7, #4]
 800510e:	6809      	ldr	r1, [r1, #0]
 8005110:	431a      	orrs	r2, r3
 8005112:	f241 1308 	movw	r3, #4360	; 0x1108
 8005116:	440b      	add	r3, r1
 8005118:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 fad8 	bl	80056d0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 fb1c 	bl	800575e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	3305      	adds	r3, #5
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	021a      	lsls	r2, r3, #8
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	3304      	adds	r3, #4
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	4619      	mov	r1, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	430a      	orrs	r2, r1
 8005140:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	3303      	adds	r3, #3
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	061a      	lsls	r2, r3, #24
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	3302      	adds	r3, #2
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	041b      	lsls	r3, r3, #16
 8005158:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	3301      	adds	r3, #1
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005164:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005172:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005174:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2210      	movs	r2, #16
 8005182:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2210      	movs	r2, #16
 8005188:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	58024400 	.word	0x58024400
 8005198:	431bde83 	.word	0x431bde83
 800519c:	ffff8001 	.word	0xffff8001

080051a0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80051b2:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	791b      	ldrb	r3, [r3, #4]
 80051b8:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80051ba:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	7b1b      	ldrb	r3, [r3, #12]
 80051c0:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80051c2:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	7b5b      	ldrb	r3, [r3, #13]
 80051c8:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80051ca:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	7b9b      	ldrb	r3, [r3, #14]
 80051d0:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80051d2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	7bdb      	ldrb	r3, [r3, #15]
 80051d8:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80051da:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	7c12      	ldrb	r2, [r2, #16]
 80051e0:	2a00      	cmp	r2, #0
 80051e2:	d102      	bne.n	80051ea <ETH_SetMACConfig+0x4a>
 80051e4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80051e8:	e000      	b.n	80051ec <ETH_SetMACConfig+0x4c>
 80051ea:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80051ec:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	7c52      	ldrb	r2, [r2, #17]
 80051f2:	2a00      	cmp	r2, #0
 80051f4:	d102      	bne.n	80051fc <ETH_SetMACConfig+0x5c>
 80051f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80051fa:	e000      	b.n	80051fe <ETH_SetMACConfig+0x5e>
 80051fc:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80051fe:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	7c9b      	ldrb	r3, [r3, #18]
 8005204:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005206:	431a      	orrs	r2, r3
                                macconf->Speed |
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 800520c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8005212:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	7f1b      	ldrb	r3, [r3, #28]
 8005218:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800521a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	7f5b      	ldrb	r3, [r3, #29]
 8005220:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005222:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	7f92      	ldrb	r2, [r2, #30]
 8005228:	2a00      	cmp	r2, #0
 800522a:	d102      	bne.n	8005232 <ETH_SetMACConfig+0x92>
 800522c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005230:	e000      	b.n	8005234 <ETH_SetMACConfig+0x94>
 8005232:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005234:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	7fdb      	ldrb	r3, [r3, #31]
 800523a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800523c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800523e:	683a      	ldr	r2, [r7, #0]
 8005240:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005244:	2a00      	cmp	r2, #0
 8005246:	d102      	bne.n	800524e <ETH_SetMACConfig+0xae>
 8005248:	f44f 7280 	mov.w	r2, #256	; 0x100
 800524c:	e000      	b.n	8005250 <ETH_SetMACConfig+0xb0>
 800524e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005250:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8005256:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800525e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8005260:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8005266:	4313      	orrs	r3, r2
 8005268:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	4b56      	ldr	r3, [pc, #344]	; (80053cc <ETH_SetMACConfig+0x22c>)
 8005272:	4013      	ands	r3, r2
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	6812      	ldr	r2, [r2, #0]
 8005278:	68f9      	ldr	r1, [r7, #12]
 800527a:	430b      	orrs	r3, r1
 800527c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005282:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800528a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800528c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005294:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8005296:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800529e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80052a0:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80052a2:	683a      	ldr	r2, [r7, #0]
 80052a4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80052a8:	2a00      	cmp	r2, #0
 80052aa:	d102      	bne.n	80052b2 <ETH_SetMACConfig+0x112>
 80052ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80052b0:	e000      	b.n	80052b4 <ETH_SetMACConfig+0x114>
 80052b2:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80052b4:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80052ba:	4313      	orrs	r3, r2
 80052bc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	4b42      	ldr	r3, [pc, #264]	; (80053d0 <ETH_SetMACConfig+0x230>)
 80052c6:	4013      	ands	r3, r2
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	6812      	ldr	r2, [r2, #0]
 80052cc:	68f9      	ldr	r1, [r7, #12]
 80052ce:	430b      	orrs	r3, r1
 80052d0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052d8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68da      	ldr	r2, [r3, #12]
 80052e8:	4b3a      	ldr	r3, [pc, #232]	; (80053d4 <ETH_SetMACConfig+0x234>)
 80052ea:	4013      	ands	r3, r2
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	6812      	ldr	r2, [r2, #0]
 80052f0:	68f9      	ldr	r1, [r7, #12]
 80052f2:	430b      	orrs	r3, r1
 80052f4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80052fc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005302:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8005304:	683a      	ldr	r2, [r7, #0]
 8005306:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800530a:	2a00      	cmp	r2, #0
 800530c:	d101      	bne.n	8005312 <ETH_SetMACConfig+0x172>
 800530e:	2280      	movs	r2, #128	; 0x80
 8005310:	e000      	b.n	8005314 <ETH_SetMACConfig+0x174>
 8005312:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005314:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800531a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800531c:	4313      	orrs	r3, r2
 800531e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005326:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800532a:	4013      	ands	r3, r2
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	6812      	ldr	r2, [r2, #0]
 8005330:	68f9      	ldr	r1, [r7, #12]
 8005332:	430b      	orrs	r3, r1
 8005334:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800533c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005344:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005346:	4313      	orrs	r3, r2
 8005348:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005352:	f023 0103 	bic.w	r1, r3, #3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	430a      	orrs	r2, r1
 800535e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800536a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	430a      	orrs	r2, r1
 8005378:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005386:	2a00      	cmp	r2, #0
 8005388:	d101      	bne.n	800538e <ETH_SetMACConfig+0x1ee>
 800538a:	2240      	movs	r2, #64	; 0x40
 800538c:	e000      	b.n	8005390 <ETH_SetMACConfig+0x1f0>
 800538e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005390:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005398:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800539a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80053a2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80053b0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80053c0:	bf00      	nop
 80053c2:	3714      	adds	r7, #20
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr
 80053cc:	00048083 	.word	0x00048083
 80053d0:	c0f88000 	.word	0xc0f88000
 80053d4:	fffffef0 	.word	0xfffffef0

080053d8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	4b38      	ldr	r3, [pc, #224]	; (80054d0 <ETH_SetDMAConfig+0xf8>)
 80053ee:	4013      	ands	r3, r2
 80053f0:	683a      	ldr	r2, [r7, #0]
 80053f2:	6812      	ldr	r2, [r2, #0]
 80053f4:	6879      	ldr	r1, [r7, #4]
 80053f6:	6809      	ldr	r1, [r1, #0]
 80053f8:	431a      	orrs	r2, r3
 80053fa:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80053fe:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	791b      	ldrb	r3, [r3, #4]
 8005404:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800540a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	7b1b      	ldrb	r3, [r3, #12]
 8005410:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005412:	4313      	orrs	r3, r2
 8005414:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	f241 0304 	movw	r3, #4100	; 0x1004
 800541e:	4413      	add	r3, r2
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	4b2c      	ldr	r3, [pc, #176]	; (80054d4 <ETH_SetDMAConfig+0xfc>)
 8005424:	4013      	ands	r3, r2
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	6811      	ldr	r1, [r2, #0]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	431a      	orrs	r2, r3
 800542e:	f241 0304 	movw	r3, #4100	; 0x1004
 8005432:	440b      	add	r3, r1
 8005434:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	7b5b      	ldrb	r3, [r3, #13]
 800543a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005440:	4313      	orrs	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	4b22      	ldr	r3, [pc, #136]	; (80054d8 <ETH_SetDMAConfig+0x100>)
 8005450:	4013      	ands	r3, r2
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	6811      	ldr	r1, [r2, #0]
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	431a      	orrs	r2, r3
 800545a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800545e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	7d1b      	ldrb	r3, [r3, #20]
 8005468:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800546a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	7f5b      	ldrb	r3, [r3, #29]
 8005470:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005472:	4313      	orrs	r3, r2
 8005474:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	f241 1304 	movw	r3, #4356	; 0x1104
 800547e:	4413      	add	r3, r2
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	4b16      	ldr	r3, [pc, #88]	; (80054dc <ETH_SetDMAConfig+0x104>)
 8005484:	4013      	ands	r3, r2
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	6811      	ldr	r1, [r2, #0]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	431a      	orrs	r2, r3
 800548e:	f241 1304 	movw	r3, #4356	; 0x1104
 8005492:	440b      	add	r3, r1
 8005494:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	7f1b      	ldrb	r3, [r3, #28]
 800549a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80054a0:	4313      	orrs	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	f241 1308 	movw	r3, #4360	; 0x1108
 80054ac:	4413      	add	r3, r2
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	4b0b      	ldr	r3, [pc, #44]	; (80054e0 <ETH_SetDMAConfig+0x108>)
 80054b2:	4013      	ands	r3, r2
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	6811      	ldr	r1, [r2, #0]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	431a      	orrs	r2, r3
 80054bc:	f241 1308 	movw	r3, #4360	; 0x1108
 80054c0:	440b      	add	r3, r1
 80054c2:	601a      	str	r2, [r3, #0]
}
 80054c4:	bf00      	nop
 80054c6:	3714      	adds	r7, #20
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	ffff87fd 	.word	0xffff87fd
 80054d4:	ffff2ffe 	.word	0xffff2ffe
 80054d8:	fffec000 	.word	0xfffec000
 80054dc:	ffc0efef 	.word	0xffc0efef
 80054e0:	7fc0ffff 	.word	0x7fc0ffff

080054e4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b0a4      	sub	sp, #144	; 0x90
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80054ec:	2301      	movs	r3, #1
 80054ee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80054f2:	2300      	movs	r3, #0
 80054f4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80054f6:	2300      	movs	r3, #0
 80054f8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80054fc:	2300      	movs	r3, #0
 80054fe:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005502:	2301      	movs	r3, #1
 8005504:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005508:	2301      	movs	r3, #1
 800550a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800550e:	2301      	movs	r3, #1
 8005510:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005514:	2300      	movs	r3, #0
 8005516:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800551a:	2301      	movs	r3, #1
 800551c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005520:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005524:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005526:	2300      	movs	r3, #0
 8005528:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800552c:	2300      	movs	r3, #0
 800552e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005530:	2300      	movs	r3, #0
 8005532:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005536:	2300      	movs	r3, #0
 8005538:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800553c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005540:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005542:	2300      	movs	r3, #0
 8005544:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005548:	2300      	movs	r3, #0
 800554a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800554c:	2301      	movs	r3, #1
 800554e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005552:	2300      	movs	r3, #0
 8005554:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005558:	2300      	movs	r3, #0
 800555a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800555e:	2300      	movs	r3, #0
 8005560:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8005562:	2300      	movs	r3, #0
 8005564:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005566:	2300      	movs	r3, #0
 8005568:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800556a:	2300      	movs	r3, #0
 800556c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005570:	2300      	movs	r3, #0
 8005572:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005576:	2301      	movs	r3, #1
 8005578:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800557c:	2320      	movs	r3, #32
 800557e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005582:	2301      	movs	r3, #1
 8005584:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005588:	2300      	movs	r3, #0
 800558a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800558e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8005592:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005594:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005598:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800559a:	2300      	movs	r3, #0
 800559c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80055a0:	2302      	movs	r3, #2
 80055a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80055a6:	2300      	movs	r3, #0
 80055a8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80055ac:	2300      	movs	r3, #0
 80055ae:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80055b2:	2300      	movs	r3, #0
 80055b4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80055b8:	2301      	movs	r3, #1
 80055ba:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80055be:	2300      	movs	r3, #0
 80055c0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80055c2:	2301      	movs	r3, #1
 80055c4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80055c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80055cc:	4619      	mov	r1, r3
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7ff fde6 	bl	80051a0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80055d4:	2301      	movs	r3, #1
 80055d6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80055d8:	2301      	movs	r3, #1
 80055da:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80055dc:	2300      	movs	r3, #0
 80055de:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80055e0:	2300      	movs	r3, #0
 80055e2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80055e6:	2300      	movs	r3, #0
 80055e8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80055ea:	2300      	movs	r3, #0
 80055ec:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80055ee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80055f2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80055f4:	2300      	movs	r3, #0
 80055f6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80055f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80055fc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80055fe:	2300      	movs	r3, #0
 8005600:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8005604:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005608:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800560a:	f107 0308 	add.w	r3, r7, #8
 800560e:	4619      	mov	r1, r3
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f7ff fee1 	bl	80053d8 <ETH_SetDMAConfig>
}
 8005616:	bf00      	nop
 8005618:	3790      	adds	r7, #144	; 0x90
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
	...

08005620 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005630:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005638:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800563a:	f002 fd77 	bl	800812c <HAL_RCC_GetHCLKFreq>
 800563e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	4a1e      	ldr	r2, [pc, #120]	; (80056bc <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d908      	bls.n	800565a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	4a1d      	ldr	r2, [pc, #116]	; (80056c0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d804      	bhi.n	800565a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005656:	60fb      	str	r3, [r7, #12]
 8005658:	e027      	b.n	80056aa <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	4a18      	ldr	r2, [pc, #96]	; (80056c0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d908      	bls.n	8005674 <ETH_MAC_MDIO_ClkConfig+0x54>
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	4a17      	ldr	r2, [pc, #92]	; (80056c4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d204      	bcs.n	8005674 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005670:	60fb      	str	r3, [r7, #12]
 8005672:	e01a      	b.n	80056aa <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	4a13      	ldr	r2, [pc, #76]	; (80056c4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d303      	bcc.n	8005684 <ETH_MAC_MDIO_ClkConfig+0x64>
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	4a12      	ldr	r2, [pc, #72]	; (80056c8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d911      	bls.n	80056a8 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	4a10      	ldr	r2, [pc, #64]	; (80056c8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d908      	bls.n	800569e <ETH_MAC_MDIO_ClkConfig+0x7e>
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	4a0f      	ldr	r2, [pc, #60]	; (80056cc <ETH_MAC_MDIO_ClkConfig+0xac>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d804      	bhi.n	800569e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800569a:	60fb      	str	r3, [r7, #12]
 800569c:	e005      	b.n	80056aa <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80056a4:	60fb      	str	r3, [r7, #12]
 80056a6:	e000      	b.n	80056aa <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80056a8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80056b4:	bf00      	nop
 80056b6:	3710      	adds	r7, #16
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	01312cff 	.word	0x01312cff
 80056c0:	02160ebf 	.word	0x02160ebf
 80056c4:	03938700 	.word	0x03938700
 80056c8:	05f5e0ff 	.word	0x05f5e0ff
 80056cc:	08f0d17f 	.word	0x08f0d17f

080056d0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80056d8:	2300      	movs	r3, #0
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	e01d      	b.n	800571a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68d9      	ldr	r1, [r3, #12]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	4613      	mov	r3, r2
 80056e6:	005b      	lsls	r3, r3, #1
 80056e8:	4413      	add	r3, r2
 80056ea:	00db      	lsls	r3, r3, #3
 80056ec:	440b      	add	r3, r1
 80056ee:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	2200      	movs	r2, #0
 80056f4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	2200      	movs	r2, #0
 80056fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2200      	movs	r2, #0
 8005700:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	2200      	movs	r2, #0
 8005706:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005708:	68b9      	ldr	r1, [r7, #8]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	3206      	adds	r2, #6
 8005710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	3301      	adds	r3, #1
 8005718:	60fb      	str	r3, [r7, #12]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2b03      	cmp	r3, #3
 800571e:	d9de      	bls.n	80056de <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	f241 132c 	movw	r3, #4396	; 0x112c
 800572e:	4413      	add	r3, r2
 8005730:	2203      	movs	r2, #3
 8005732:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68d9      	ldr	r1, [r3, #12]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	f241 1314 	movw	r3, #4372	; 0x1114
 8005740:	4413      	add	r3, r2
 8005742:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	68da      	ldr	r2, [r3, #12]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005750:	601a      	str	r2, [r3, #0]
}
 8005752:	bf00      	nop
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800575e:	b480      	push	{r7}
 8005760:	b085      	sub	sp, #20
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005766:	2300      	movs	r3, #0
 8005768:	60fb      	str	r3, [r7, #12]
 800576a:	e024      	b.n	80057b6 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6919      	ldr	r1, [r3, #16]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	4613      	mov	r3, r2
 8005774:	005b      	lsls	r3, r3, #1
 8005776:	4413      	add	r3, r2
 8005778:	00db      	lsls	r3, r3, #3
 800577a:	440b      	add	r3, r1
 800577c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	2200      	movs	r2, #0
 8005782:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	2200      	movs	r2, #0
 8005788:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	2200      	movs	r2, #0
 800578e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	2200      	movs	r2, #0
 8005794:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	2200      	movs	r2, #0
 800579a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2200      	movs	r2, #0
 80057a0:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	6879      	ldr	r1, [r7, #4]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	3310      	adds	r3, #16
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	440b      	add	r3, r1
 80057ae:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	3301      	adds	r3, #1
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2b03      	cmp	r3, #3
 80057ba:	d9d7      	bls.n	800576c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	f241 1330 	movw	r3, #4400	; 0x1130
 80057e2:	4413      	add	r3, r2
 80057e4:	2203      	movs	r2, #3
 80057e6:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6919      	ldr	r1, [r3, #16]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	f241 131c 	movw	r3, #4380	; 0x111c
 80057f4:	4413      	add	r3, r2
 80057f6:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	f241 1328 	movw	r3, #4392	; 0x1128
 8005808:	4413      	add	r3, r2
 800580a:	6019      	str	r1, [r3, #0]
}
 800580c:	bf00      	nop
 800580e:	3714      	adds	r7, #20
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b098      	sub	sp, #96	; 0x60
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005820:	4a84      	ldr	r2, [pc, #528]	; (8005a34 <HAL_FDCAN_Init+0x21c>)
 8005822:	f107 030c 	add.w	r3, r7, #12
 8005826:	4611      	mov	r1, r2
 8005828:	224c      	movs	r2, #76	; 0x4c
 800582a:	4618      	mov	r0, r3
 800582c:	f007 f8fe 	bl	800ca2c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e1ca      	b.n	8005bd0 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a7e      	ldr	r2, [pc, #504]	; (8005a38 <HAL_FDCAN_Init+0x220>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d106      	bne.n	8005852 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800584c:	461a      	mov	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d106      	bne.n	800586c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7fe f976 	bl	8003b58 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	699a      	ldr	r2, [r3, #24]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f022 0210 	bic.w	r2, r2, #16
 800587a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800587c:	f7fe fcf4 	bl	8004268 <HAL_GetTick>
 8005880:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005882:	e014      	b.n	80058ae <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005884:	f7fe fcf0 	bl	8004268 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	2b0a      	cmp	r3, #10
 8005890:	d90d      	bls.n	80058ae <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005898:	f043 0201 	orr.w	r2, r3, #1
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2203      	movs	r2, #3
 80058a6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e190      	b.n	8005bd0 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	f003 0308 	and.w	r3, r3, #8
 80058b8:	2b08      	cmp	r3, #8
 80058ba:	d0e3      	beq.n	8005884 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	699a      	ldr	r2, [r3, #24]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f042 0201 	orr.w	r2, r2, #1
 80058ca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80058cc:	f7fe fccc 	bl	8004268 <HAL_GetTick>
 80058d0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80058d2:	e014      	b.n	80058fe <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80058d4:	f7fe fcc8 	bl	8004268 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	2b0a      	cmp	r3, #10
 80058e0:	d90d      	bls.n	80058fe <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058e8:	f043 0201 	orr.w	r2, r3, #1
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2203      	movs	r2, #3
 80058f6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e168      	b.n	8005bd0 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	699b      	ldr	r3, [r3, #24]
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	2b00      	cmp	r3, #0
 800590a:	d0e3      	beq.n	80058d4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	699a      	ldr	r2, [r3, #24]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f042 0202 	orr.w	r2, r2, #2
 800591a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	7c1b      	ldrb	r3, [r3, #16]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d108      	bne.n	8005936 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	699a      	ldr	r2, [r3, #24]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005932:	619a      	str	r2, [r3, #24]
 8005934:	e007      	b.n	8005946 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	699a      	ldr	r2, [r3, #24]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005944:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	7c5b      	ldrb	r3, [r3, #17]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d108      	bne.n	8005960 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	699a      	ldr	r2, [r3, #24]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800595c:	619a      	str	r2, [r3, #24]
 800595e:	e007      	b.n	8005970 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	699a      	ldr	r2, [r3, #24]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800596e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	7c9b      	ldrb	r3, [r3, #18]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d108      	bne.n	800598a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	699a      	ldr	r2, [r3, #24]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005986:	619a      	str	r2, [r3, #24]
 8005988:	e007      	b.n	800599a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	699a      	ldr	r2, [r3, #24]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005998:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689a      	ldr	r2, [r3, #8]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	430a      	orrs	r2, r1
 80059ae:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	699a      	ldr	r2, [r3, #24]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80059be:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	691a      	ldr	r2, [r3, #16]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f022 0210 	bic.w	r2, r2, #16
 80059ce:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d108      	bne.n	80059ea <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	699a      	ldr	r2, [r3, #24]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f042 0204 	orr.w	r2, r2, #4
 80059e6:	619a      	str	r2, [r3, #24]
 80059e8:	e030      	b.n	8005a4c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d02c      	beq.n	8005a4c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d020      	beq.n	8005a3c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	699a      	ldr	r2, [r3, #24]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a08:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	691a      	ldr	r2, [r3, #16]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f042 0210 	orr.w	r2, r2, #16
 8005a18:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	2b03      	cmp	r3, #3
 8005a20:	d114      	bne.n	8005a4c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	699a      	ldr	r2, [r3, #24]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f042 0220 	orr.w	r2, r2, #32
 8005a30:	619a      	str	r2, [r3, #24]
 8005a32:	e00b      	b.n	8005a4c <HAL_FDCAN_Init+0x234>
 8005a34:	08012328 	.word	0x08012328
 8005a38:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	699a      	ldr	r2, [r3, #24]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f042 0220 	orr.w	r2, r2, #32
 8005a4a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	3b01      	subs	r3, #1
 8005a52:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	69db      	ldr	r3, [r3, #28]
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a5c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005a64:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005a74:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a76:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a80:	d115      	bne.n	8005aae <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a86:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005a90:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a96:	3b01      	subs	r3, #1
 8005a98:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005a9a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005aaa:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005aac:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00a      	beq.n	8005acc <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ad4:	4413      	add	r3, r2
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d012      	beq.n	8005b00 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005ae2:	f023 0107 	bic.w	r1, r3, #7
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005af0:	4413      	add	r3, r2
 8005af2:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d012      	beq.n	8005b2e <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005b10:	f023 0107 	bic.w	r1, r3, #7
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005b1e:	4413      	add	r3, r2
 8005b20:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	430a      	orrs	r2, r1
 8005b2a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d013      	beq.n	8005b5e <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005b3e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005b52:	011a      	lsls	r2, r3, #4
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d013      	beq.n	8005b8e <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005b6e:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005b82:	021a      	lsls	r2, r3, #8
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a11      	ldr	r2, [pc, #68]	; (8005bd8 <HAL_FDCAN_Init+0x3c0>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d107      	bne.n	8005ba8 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	689a      	ldr	r2, [r3, #8]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f022 0203 	bic.w	r2, r2, #3
 8005ba6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 fdf9 	bl	80067b8 <FDCAN_CalcultateRamBlockAddresses>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8005bcc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3760      	adds	r7, #96	; 0x60
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	4000a000 	.word	0x4000a000

08005bdc <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b087      	sub	sp, #28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005bec:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005bee:	7bfb      	ldrb	r3, [r7, #15]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d002      	beq.n	8005bfa <HAL_FDCAN_ConfigFilter+0x1e>
 8005bf4:	7bfb      	ldrb	r3, [r7, #15]
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d157      	bne.n	8005caa <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d12b      	bne.n	8005c5a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	2b07      	cmp	r3, #7
 8005c08:	d10d      	bne.n	8005c26 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	69db      	ldr	r3, [r3, #28]
 8005c14:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8005c16:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005c1c:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8005c1e:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8005c22:	617b      	str	r3, [r7, #20]
 8005c24:	e00e      	b.n	8005c44 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005c32:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8005c3a:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005c40:	4313      	orrs	r3, r2
 8005c42:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	4413      	add	r3, r2
 8005c50:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	601a      	str	r2, [r3, #0]
 8005c58:	e025      	b.n	8005ca6 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	075a      	lsls	r2, r3, #29
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	2b07      	cmp	r3, #7
 8005c6e:	d103      	bne.n	8005c78 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	613b      	str	r3, [r7, #16]
 8005c76:	e006      	b.n	8005c86 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	079a      	lsls	r2, r3, #30
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	00db      	lsls	r3, r3, #3
 8005c90:	4413      	add	r3, r2
 8005c92:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	3304      	adds	r3, #4
 8005c9e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	e008      	b.n	8005cbc <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cb0:	f043 0202 	orr.w	r2, r3, #2
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
  }
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	371c      	adds	r7, #28
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d111      	bne.n	8005d00 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	699a      	ldr	r2, [r3, #24]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f022 0201 	bic.w	r2, r2, #1
 8005cf2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	e008      	b.n	8005d12 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d06:	f043 0204 	orr.w	r2, r3, #4
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
  }
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	370c      	adds	r7, #12
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr

08005d1e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b086      	sub	sp, #24
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	60f8      	str	r0, [r7, #12]
 8005d26:	60b9      	str	r1, [r7, #8]
 8005d28:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d141      	bne.n	8005dba <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005d3e:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d109      	bne.n	8005d5a <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d4c:	f043 0220 	orr.w	r2, r3, #32
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e038      	b.n	8005dcc <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005d62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d009      	beq.n	8005d7e <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e026      	b.n	8005dcc <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005d86:	0c1b      	lsrs	r3, r3, #16
 8005d88:	f003 031f 	and.w	r3, r3, #31
 8005d8c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	68b9      	ldr	r1, [r7, #8]
 8005d94:	68f8      	ldr	r0, [r7, #12]
 8005d96:	f000 fe95 	bl	8006ac4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2101      	movs	r1, #1
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	fa01 f202 	lsl.w	r2, r1, r2
 8005da6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005daa:	2201      	movs	r2, #1
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	409a      	lsls	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8005db6:	2300      	movs	r3, #0
 8005db8:	e008      	b.n	8005dcc <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005dc0:	f043 0208 	orr.w	r2, r3, #8
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
  }
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3718      	adds	r7, #24
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b08b      	sub	sp, #44	; 0x2c
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
 8005de0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8005de2:	2300      	movs	r3, #0
 8005de4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005dec:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8005dee:	7efb      	ldrb	r3, [r7, #27]
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	f040 814b 	bne.w	800608c <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	2b40      	cmp	r3, #64	; 0x40
 8005dfa:	d14d      	bne.n	8005e98 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005e04:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d109      	bne.n	8005e20 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e12:	f043 0220 	orr.w	r2, r3, #32
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e13e      	b.n	800609e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d109      	bne.n	8005e44 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e12c      	b.n	800609e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e4c:	0e1b      	lsrs	r3, r3, #24
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d10b      	bne.n	8005e6e <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005e5e:	0fdb      	lsrs	r3, r3, #31
 8005e60:	f003 0301 	and.w	r3, r3, #1
 8005e64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e68:	d101      	bne.n	8005e6e <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e76:	0a1b      	lsrs	r3, r3, #8
 8005e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e7c:	69fa      	ldr	r2, [r7, #28]
 8005e7e:	4413      	add	r3, r2
 8005e80:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e8a:	69f9      	ldr	r1, [r7, #28]
 8005e8c:	fb01 f303 	mul.w	r3, r1, r3
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	4413      	add	r3, r2
 8005e94:	627b      	str	r3, [r7, #36]	; 0x24
 8005e96:	e069      	b.n	8005f6c <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	2b41      	cmp	r3, #65	; 0x41
 8005e9c:	d14d      	bne.n	8005f3a <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ea6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d109      	bne.n	8005ec2 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005eb4:	f043 0220 	orr.w	r2, r3, #32
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e0ed      	b.n	800609e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005eca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d109      	bne.n	8005ee6 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ed8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e0db      	b.n	800609e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005eee:	0e1b      	lsrs	r3, r3, #24
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d10b      	bne.n	8005f10 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f00:	0fdb      	lsrs	r3, r3, #31
 8005f02:	f003 0301 	and.w	r3, r3, #1
 8005f06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f0a:	d101      	bne.n	8005f10 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005f18:	0a1b      	lsrs	r3, r3, #8
 8005f1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f1e:	69fa      	ldr	r2, [r7, #28]
 8005f20:	4413      	add	r3, r2
 8005f22:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f2c:	69f9      	ldr	r1, [r7, #28]
 8005f2e:	fb01 f303 	mul.w	r3, r1, r3
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	627b      	str	r3, [r7, #36]	; 0x24
 8005f38:	e018      	b.n	8005f6c <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d309      	bcc.n	8005f58 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f4a:	f043 0220 	orr.w	r2, r3, #32
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e0a2      	b.n	800609e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f60:	68b9      	ldr	r1, [r7, #8]
 8005f62:	fb01 f303 	mul.w	r3, r1, r3
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4413      	add	r3, r2
 8005f6a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d107      	bne.n	8005f90 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8005f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	0c9b      	lsrs	r3, r3, #18
 8005f86:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	601a      	str	r2, [r3, #0]
 8005f8e:	e005      	b.n	8005f9c <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb6:	3304      	adds	r3, #4
 8005fb8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	0e1b      	lsrs	r3, r3, #24
 8005fee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	0fda      	lsrs	r2, r3, #31
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006002:	3304      	adds	r3, #4
 8006004:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8006006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006008:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800600a:	2300      	movs	r3, #0
 800600c:	623b      	str	r3, [r7, #32]
 800600e:	e00a      	b.n	8006026 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	6a3b      	ldr	r3, [r7, #32]
 8006014:	441a      	add	r2, r3
 8006016:	6839      	ldr	r1, [r7, #0]
 8006018:	6a3b      	ldr	r3, [r7, #32]
 800601a:	440b      	add	r3, r1
 800601c:	7812      	ldrb	r2, [r2, #0]
 800601e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8006020:	6a3b      	ldr	r3, [r7, #32]
 8006022:	3301      	adds	r3, #1
 8006024:	623b      	str	r3, [r7, #32]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	0c1b      	lsrs	r3, r3, #16
 800602c:	4a1f      	ldr	r2, [pc, #124]	; (80060ac <HAL_FDCAN_GetRxMessage+0x2d8>)
 800602e:	5cd3      	ldrb	r3, [r2, r3]
 8006030:	461a      	mov	r2, r3
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	4293      	cmp	r3, r2
 8006036:	d3eb      	bcc.n	8006010 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	2b40      	cmp	r3, #64	; 0x40
 800603c:	d105      	bne.n	800604a <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	69fa      	ldr	r2, [r7, #28]
 8006044:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8006048:	e01e      	b.n	8006088 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	2b41      	cmp	r3, #65	; 0x41
 800604e:	d105      	bne.n	800605c <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	69fa      	ldr	r2, [r7, #28]
 8006056:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800605a:	e015      	b.n	8006088 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	2b1f      	cmp	r3, #31
 8006060:	d808      	bhi.n	8006074 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2101      	movs	r1, #1
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	fa01 f202 	lsl.w	r2, r1, r2
 800606e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8006072:	e009      	b.n	8006088 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	f003 021f 	and.w	r2, r3, #31
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2101      	movs	r1, #1
 8006080:	fa01 f202 	lsl.w	r2, r1, r2
 8006084:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8006088:	2300      	movs	r3, #0
 800608a:	e008      	b.n	800609e <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006092:	f043 0208 	orr.w	r2, r3, #8
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
  }
}
 800609e:	4618      	mov	r0, r3
 80060a0:	372c      	adds	r7, #44	; 0x2c
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	08012384 	.word	0x08012384

080060b0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b087      	sub	sp, #28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80060c2:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80060c4:	7dfb      	ldrb	r3, [r7, #23]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d002      	beq.n	80060d0 <HAL_FDCAN_ActivateNotification+0x20>
 80060ca:	7dfb      	ldrb	r3, [r7, #23]
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d155      	bne.n	800617c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	4013      	ands	r3, r2
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d108      	bne.n	80060f0 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f042 0201 	orr.w	r2, r2, #1
 80060ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80060ee:	e014      	b.n	800611a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	4013      	ands	r3, r2
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d108      	bne.n	8006112 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f042 0202 	orr.w	r2, r2, #2
 800610e:	65da      	str	r2, [r3, #92]	; 0x5c
 8006110:	e003      	b.n	800611a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2203      	movs	r2, #3
 8006118:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006120:	2b00      	cmp	r3, #0
 8006122:	d009      	beq.n	8006138 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	430a      	orrs	r2, r1
 8006134:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800613e:	2b00      	cmp	r3, #0
 8006140:	d009      	beq.n	8006156 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	430a      	orrs	r2, r1
 8006152:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	4b0f      	ldr	r3, [pc, #60]	; (800619c <HAL_FDCAN_ActivateNotification+0xec>)
 8006160:	4013      	ands	r3, r2
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	6812      	ldr	r2, [r2, #0]
 8006166:	430b      	orrs	r3, r1
 8006168:	6553      	str	r3, [r2, #84]	; 0x54
 800616a:	4b0d      	ldr	r3, [pc, #52]	; (80061a0 <HAL_FDCAN_ActivateNotification+0xf0>)
 800616c:	695a      	ldr	r2, [r3, #20]
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	0f9b      	lsrs	r3, r3, #30
 8006172:	490b      	ldr	r1, [pc, #44]	; (80061a0 <HAL_FDCAN_ActivateNotification+0xf0>)
 8006174:	4313      	orrs	r3, r2
 8006176:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8006178:	2300      	movs	r3, #0
 800617a:	e008      	b.n	800618e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006182:	f043 0202 	orr.w	r2, r3, #2
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
  }
}
 800618e:	4618      	mov	r0, r3
 8006190:	371c      	adds	r7, #28
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	3fcfffff 	.word	0x3fcfffff
 80061a0:	4000a800 	.word	0x4000a800

080061a4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b092      	sub	sp, #72	; 0x48
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80061ac:	4b90      	ldr	r3, [pc, #576]	; (80063f0 <HAL_FDCAN_IRQHandler+0x24c>)
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	079b      	lsls	r3, r3, #30
 80061b2:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80061b4:	4b8e      	ldr	r3, [pc, #568]	; (80063f0 <HAL_FDCAN_IRQHandler+0x24c>)
 80061b6:	695b      	ldr	r3, [r3, #20]
 80061b8:	079b      	lsls	r3, r3, #30
 80061ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061bc:	4013      	ands	r3, r2
 80061be:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061c6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80061ca:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061d4:	4013      	ands	r3, r2
 80061d6:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061de:	f003 030f 	and.w	r3, r3, #15
 80061e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061ec:	4013      	ands	r3, r2
 80061ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006202:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006204:	4013      	ands	r3, r2
 8006206:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800620e:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8006212:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800621a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800621c:	4013      	ands	r3, r2
 800621e:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006226:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 800622a:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006234:	4013      	ands	r3, r2
 8006236:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800623e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006242:	2b00      	cmp	r3, #0
 8006244:	d011      	beq.n	800626a <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800624c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00a      	beq.n	800626a <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f44f 7280 	mov.w	r2, #256	; 0x100
 800625c:	651a      	str	r2, [r3, #80]	; 0x50
 800625e:	4b64      	ldr	r3, [pc, #400]	; (80063f0 <HAL_FDCAN_IRQHandler+0x24c>)
 8006260:	2200      	movs	r2, #0
 8006262:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 fa5a 	bl	800671e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006274:	2b00      	cmp	r3, #0
 8006276:	d01e      	beq.n	80062b6 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800627e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006282:	2b00      	cmp	r3, #0
 8006284:	d017      	beq.n	80062b6 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800628e:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006298:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800629a:	4013      	ands	r3, r2
 800629c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80062a6:	651a      	str	r2, [r3, #80]	; 0x50
 80062a8:	4b51      	ldr	r3, [pc, #324]	; (80063f0 <HAL_FDCAN_IRQHandler+0x24c>)
 80062aa:	2200      	movs	r2, #0
 80062ac:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80062ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 fa0b 	bl	80066cc <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80062b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00d      	beq.n	80062d8 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80062c2:	4b4c      	ldr	r3, [pc, #304]	; (80063f4 <HAL_FDCAN_IRQHandler+0x250>)
 80062c4:	400b      	ands	r3, r1
 80062c6:	6513      	str	r3, [r2, #80]	; 0x50
 80062c8:	4a49      	ldr	r2, [pc, #292]	; (80063f0 <HAL_FDCAN_IRQHandler+0x24c>)
 80062ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062cc:	0f9b      	lsrs	r3, r3, #30
 80062ce:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80062d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f9c4 	bl	8006660 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80062d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00d      	beq.n	80062fa <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062e4:	4b43      	ldr	r3, [pc, #268]	; (80063f4 <HAL_FDCAN_IRQHandler+0x250>)
 80062e6:	400b      	ands	r3, r1
 80062e8:	6513      	str	r3, [r2, #80]	; 0x50
 80062ea:	4a41      	ldr	r2, [pc, #260]	; (80063f0 <HAL_FDCAN_IRQHandler+0x24c>)
 80062ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ee:	0f9b      	lsrs	r3, r3, #30
 80062f0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80062f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 f9be 	bl	8006676 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80062fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00d      	beq.n	800631c <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006306:	4b3b      	ldr	r3, [pc, #236]	; (80063f4 <HAL_FDCAN_IRQHandler+0x250>)
 8006308:	400b      	ands	r3, r1
 800630a:	6513      	str	r3, [r2, #80]	; 0x50
 800630c:	4a38      	ldr	r2, [pc, #224]	; (80063f0 <HAL_FDCAN_IRQHandler+0x24c>)
 800630e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006310:	0f9b      	lsrs	r3, r3, #30
 8006312:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006314:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f7fb f858 	bl	80013cc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800631c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00d      	beq.n	800633e <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006328:	4b32      	ldr	r3, [pc, #200]	; (80063f4 <HAL_FDCAN_IRQHandler+0x250>)
 800632a:	400b      	ands	r3, r1
 800632c:	6513      	str	r3, [r2, #80]	; 0x50
 800632e:	4a30      	ldr	r2, [pc, #192]	; (80063f0 <HAL_FDCAN_IRQHandler+0x24c>)
 8006330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006332:	0f9b      	lsrs	r3, r3, #30
 8006334:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006336:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 f9a7 	bl	800668c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006344:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006348:	2b00      	cmp	r3, #0
 800634a:	d011      	beq.n	8006370 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006352:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00a      	beq.n	8006370 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006362:	651a      	str	r2, [r3, #80]	; 0x50
 8006364:	4b22      	ldr	r3, [pc, #136]	; (80063f0 <HAL_FDCAN_IRQHandler+0x24c>)
 8006366:	2200      	movs	r2, #0
 8006368:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f999 	bl	80066a2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006376:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800637a:	2b00      	cmp	r3, #0
 800637c:	d01e      	beq.n	80063bc <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006384:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006388:	2b00      	cmp	r3, #0
 800638a:	d017      	beq.n	80063bc <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006394:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800639e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063a0:	4013      	ands	r3, r2
 80063a2:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063ac:	651a      	str	r2, [r3, #80]	; 0x50
 80063ae:	4b10      	ldr	r3, [pc, #64]	; (80063f0 <HAL_FDCAN_IRQHandler+0x24c>)
 80063b0:	2200      	movs	r2, #0
 80063b2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80063b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 f97d 	bl	80066b6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d016      	beq.n	80063f8 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00f      	beq.n	80063f8 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80063e0:	651a      	str	r2, [r3, #80]	; 0x50
 80063e2:	4b03      	ldr	r3, [pc, #12]	; (80063f0 <HAL_FDCAN_IRQHandler+0x24c>)
 80063e4:	2200      	movs	r2, #0
 80063e6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 f97a 	bl	80066e2 <HAL_FDCAN_RxBufferNewMessageCallback>
 80063ee:	e003      	b.n	80063f8 <HAL_FDCAN_IRQHandler+0x254>
 80063f0:	4000a800 	.word	0x4000a800
 80063f4:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d011      	beq.n	800642a <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800640c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00a      	beq.n	800642a <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800641c:	651a      	str	r2, [r3, #80]	; 0x50
 800641e:	4b8d      	ldr	r3, [pc, #564]	; (8006654 <HAL_FDCAN_IRQHandler+0x4b0>)
 8006420:	2200      	movs	r2, #0
 8006422:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f966 	bl	80066f6 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006430:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d011      	beq.n	800645c <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800643e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00a      	beq.n	800645c <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800644e:	651a      	str	r2, [r3, #80]	; 0x50
 8006450:	4b80      	ldr	r3, [pc, #512]	; (8006654 <HAL_FDCAN_IRQHandler+0x4b0>)
 8006452:	2200      	movs	r2, #0
 8006454:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f957 	bl	800670a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d016      	beq.n	8006498 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006474:	2b00      	cmp	r3, #0
 8006476:	d00f      	beq.n	8006498 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006480:	651a      	str	r2, [r3, #80]	; 0x50
 8006482:	4b74      	ldr	r3, [pc, #464]	; (8006654 <HAL_FDCAN_IRQHandler+0x4b0>)
 8006484:	2200      	movs	r2, #0
 8006486:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800648e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8006498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00d      	beq.n	80064ba <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064a4:	4b6c      	ldr	r3, [pc, #432]	; (8006658 <HAL_FDCAN_IRQHandler+0x4b4>)
 80064a6:	400b      	ands	r3, r1
 80064a8:	6513      	str	r3, [r2, #80]	; 0x50
 80064aa:	4a6a      	ldr	r2, [pc, #424]	; (8006654 <HAL_FDCAN_IRQHandler+0x4b0>)
 80064ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ae:	0f9b      	lsrs	r3, r3, #30
 80064b0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80064b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 f946 	bl	8006746 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80064ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d011      	beq.n	80064e4 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80064c6:	4b64      	ldr	r3, [pc, #400]	; (8006658 <HAL_FDCAN_IRQHandler+0x4b4>)
 80064c8:	400b      	ands	r3, r1
 80064ca:	6513      	str	r3, [r2, #80]	; 0x50
 80064cc:	4a61      	ldr	r2, [pc, #388]	; (8006654 <HAL_FDCAN_IRQHandler+0x4b0>)
 80064ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d0:	0f9b      	lsrs	r3, r3, #30
 80064d2:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80064da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064dc:	431a      	orrs	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a5c      	ldr	r2, [pc, #368]	; (800665c <HAL_FDCAN_IRQHandler+0x4b8>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	f040 80a6 	bne.w	800663c <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f003 0303 	and.w	r3, r3, #3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f000 809e 	beq.w	800663c <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	f003 030f 	and.w	r3, r3, #15
 800650a:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006514:	4013      	ands	r3, r2
 8006516:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006522:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652a:	6a3a      	ldr	r2, [r7, #32]
 800652c:	4013      	ands	r3, r2
 800652e:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	6a1b      	ldr	r3, [r3, #32]
 8006536:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800653a:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006542:	69fa      	ldr	r2, [r7, #28]
 8006544:	4013      	ands	r3, r2
 8006546:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	6a1b      	ldr	r3, [r3, #32]
 800654e:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8006552:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655a:	69ba      	ldr	r2, [r7, #24]
 800655c:	4013      	ands	r3, r2
 800655e:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 800656a:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	4013      	ands	r3, r2
 8006576:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657a:	2b00      	cmp	r3, #0
 800657c:	d007      	beq.n	800658e <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006584:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8006586:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 f8e7 	bl	800675c <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800658e:	6a3b      	ldr	r3, [r7, #32]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d007      	beq.n	80065a4 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	6a3a      	ldr	r2, [r7, #32]
 800659a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800659c:	6a39      	ldr	r1, [r7, #32]
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 f8e7 	bl	8006772 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d01b      	beq.n	80065ea <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	6a1b      	ldr	r3, [r3, #32]
 80065b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d014      	beq.n	80065ea <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c6:	0c1b      	lsrs	r3, r3, #16
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065d6:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	2240      	movs	r2, #64	; 0x40
 80065de:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	6939      	ldr	r1, [r7, #16]
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 f8cf 	bl	8006788 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d007      	beq.n	8006600 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	69fa      	ldr	r2, [r7, #28]
 80065f6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80065f8:	69f9      	ldr	r1, [r7, #28]
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f8d0 	bl	80067a0 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00b      	beq.n	800661e <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	69ba      	ldr	r2, [r7, #24]
 800660c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	431a      	orrs	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00b      	beq.n	800663c <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	431a      	orrs	r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006642:	2b00      	cmp	r3, #0
 8006644:	d002      	beq.n	800664c <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f873 	bl	8006732 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800664c:	bf00      	nop
 800664e:	3748      	adds	r7, #72	; 0x48
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	4000a800 	.word	0x4000a800
 8006658:	3fcfffff 	.word	0x3fcfffff
 800665c:	4000a000 	.word	0x4000a000

08006660 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800666a:	bf00      	nop
 800666c:	370c      	adds	r7, #12
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr

08006676 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8006676:	b480      	push	{r7}
 8006678:	b083      	sub	sp, #12
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
 800667e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8006696:	bf00      	nop
 8006698:	370c      	adds	r7, #12
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr

080066a2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80066a2:	b480      	push	{r7}
 80066a4:	b083      	sub	sp, #12
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80066aa:	bf00      	nop
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr

080066b6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b083      	sub	sp, #12
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
 80066be:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80066d6:	bf00      	nop
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b083      	sub	sp, #12
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80066ea:	bf00      	nop
 80066ec:	370c      	adds	r7, #12
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr

080066f6 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80066f6:	b480      	push	{r7}
 80066f8:	b083      	sub	sp, #12
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80066fe:	bf00      	nop
 8006700:	370c      	adds	r7, #12
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr

0800670a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800670a:	b480      	push	{r7}
 800670c:	b083      	sub	sp, #12
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006712:	bf00      	nop
 8006714:	370c      	adds	r7, #12
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr

0800671e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800671e:	b480      	push	{r7}
 8006720:	b083      	sub	sp, #12
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8006726:	bf00      	nop
 8006728:	370c      	adds	r7, #12
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr

08006732 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006732:	b480      	push	{r7}
 8006734:	b083      	sub	sp, #12
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800673a:	bf00      	nop
 800673c:	370c      	adds	r7, #12
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8006746:	b480      	push	{r7}
 8006748:	b083      	sub	sp, #12
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
 800674e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8006766:	bf00      	nop
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr

08006772 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8006772:	b480      	push	{r7}
 8006774:	b083      	sub	sp, #12
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
 800677a:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8006794:	bf00      	nop
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80067aa:	bf00      	nop
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
	...

080067b8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80067ce:	4ba7      	ldr	r3, [pc, #668]	; (8006a6c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80067d0:	4013      	ands	r3, r2
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	0091      	lsls	r1, r2, #2
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	6812      	ldr	r2, [r2, #0]
 80067da:	430b      	orrs	r3, r1
 80067dc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067e8:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f0:	041a      	lsls	r2, r3, #16
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	430a      	orrs	r2, r1
 80067f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	4413      	add	r3, r2
 8006804:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800680e:	4b97      	ldr	r3, [pc, #604]	; (8006a6c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006810:	4013      	ands	r3, r2
 8006812:	68ba      	ldr	r2, [r7, #8]
 8006814:	0091      	lsls	r1, r2, #2
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	6812      	ldr	r2, [r2, #0]
 800681a:	430b      	orrs	r3, r1
 800681c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006828:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006830:	041a      	lsls	r2, r3, #16
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	430a      	orrs	r2, r1
 8006838:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006840:	005b      	lsls	r3, r3, #1
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	4413      	add	r3, r2
 8006846:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006850:	4b86      	ldr	r3, [pc, #536]	; (8006a6c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006852:	4013      	ands	r3, r2
 8006854:	68ba      	ldr	r2, [r7, #8]
 8006856:	0091      	lsls	r1, r2, #2
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	6812      	ldr	r2, [r2, #0]
 800685c:	430b      	orrs	r3, r1
 800685e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800686a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006872:	041a      	lsls	r2, r3, #16
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	430a      	orrs	r2, r1
 800687a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006886:	fb02 f303 	mul.w	r3, r2, r3
 800688a:	68ba      	ldr	r2, [r7, #8]
 800688c:	4413      	add	r3, r2
 800688e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006898:	4b74      	ldr	r3, [pc, #464]	; (8006a6c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800689a:	4013      	ands	r3, r2
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	0091      	lsls	r1, r2, #2
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	6812      	ldr	r2, [r2, #0]
 80068a4:	430b      	orrs	r3, r1
 80068a6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068b2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ba:	041a      	lsls	r2, r3, #16
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	430a      	orrs	r2, r1
 80068c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80068ce:	fb02 f303 	mul.w	r3, r2, r3
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	4413      	add	r3, r2
 80068d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80068e0:	4b62      	ldr	r3, [pc, #392]	; (8006a6c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80068e2:	4013      	ands	r3, r2
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	0091      	lsls	r1, r2, #2
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	6812      	ldr	r2, [r2, #0]
 80068ec:	430b      	orrs	r3, r1
 80068ee:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80068fa:	fb02 f303 	mul.w	r3, r2, r3
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	4413      	add	r3, r2
 8006902:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800690c:	4b57      	ldr	r3, [pc, #348]	; (8006a6c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800690e:	4013      	ands	r3, r2
 8006910:	68ba      	ldr	r2, [r7, #8]
 8006912:	0091      	lsls	r1, r2, #2
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	6812      	ldr	r2, [r2, #0]
 8006918:	430b      	orrs	r3, r1
 800691a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006926:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800692e:	041a      	lsls	r2, r3, #16
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	430a      	orrs	r2, r1
 8006936:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800693e:	005b      	lsls	r3, r3, #1
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	4413      	add	r3, r2
 8006944:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800694e:	4b47      	ldr	r3, [pc, #284]	; (8006a6c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006950:	4013      	ands	r3, r2
 8006952:	68ba      	ldr	r2, [r7, #8]
 8006954:	0091      	lsls	r1, r2, #2
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	6812      	ldr	r2, [r2, #0]
 800695a:	430b      	orrs	r3, r1
 800695c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006968:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006970:	041a      	lsls	r2, r3, #16
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	430a      	orrs	r2, r1
 8006978:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006984:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800698c:	061a      	lsls	r2, r3, #24
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	430a      	orrs	r2, r1
 8006994:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800699c:	4b34      	ldr	r3, [pc, #208]	; (8006a70 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800699e:	4413      	add	r3, r2
 80069a0:	009a      	lsls	r2, r3, #2
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	441a      	add	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069be:	00db      	lsls	r3, r3, #3
 80069c0:	441a      	add	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ce:	6879      	ldr	r1, [r7, #4]
 80069d0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80069d2:	fb01 f303 	mul.w	r3, r1, r3
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	441a      	add	r2, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069e6:	6879      	ldr	r1, [r7, #4]
 80069e8:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80069ea:	fb01 f303 	mul.w	r3, r1, r3
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	441a      	add	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069fe:	6879      	ldr	r1, [r7, #4]
 8006a00:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8006a02:	fb01 f303 	mul.w	r3, r1, r3
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	441a      	add	r2, r3
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a1a:	00db      	lsls	r3, r3, #3
 8006a1c:	441a      	add	r2, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a2e:	6879      	ldr	r1, [r7, #4]
 8006a30:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006a32:	fb01 f303 	mul.w	r3, r1, r3
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	441a      	add	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a4a:	6879      	ldr	r1, [r7, #4]
 8006a4c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006a4e:	fb01 f303 	mul.w	r3, r1, r3
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	441a      	add	r2, r3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a62:	4a04      	ldr	r2, [pc, #16]	; (8006a74 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d915      	bls.n	8006a94 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006a68:	e006      	b.n	8006a78 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8006a6a:	bf00      	nop
 8006a6c:	ffff0003 	.word	0xffff0003
 8006a70:	10002b00 	.word	0x10002b00
 8006a74:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a7e:	f043 0220 	orr.w	r2, r3, #32
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2203      	movs	r2, #3
 8006a8c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e010      	b.n	8006ab6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a98:	60fb      	str	r3, [r7, #12]
 8006a9a:	e005      	b.n	8006aa8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	3304      	adds	r3, #4
 8006aa6:	60fb      	str	r3, [r7, #12]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d3f3      	bcc.n	8006a9c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3714      	adds	r7, #20
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop

08006ac4 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b089      	sub	sp, #36	; 0x24
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	607a      	str	r2, [r7, #4]
 8006ad0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d10a      	bne.n	8006af0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8006ae2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006aea:	4313      	orrs	r3, r2
 8006aec:	61fb      	str	r3, [r7, #28]
 8006aee:	e00a      	b.n	8006b06 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8006af8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8006afe:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006b00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b04:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8006b10:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8006b16:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006b1c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8006b22:	4313      	orrs	r3, r2
 8006b24:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b30:	6839      	ldr	r1, [r7, #0]
 8006b32:	fb01 f303 	mul.w	r3, r1, r3
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	4413      	add	r3, r2
 8006b3a:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	69fa      	ldr	r2, [r7, #28]
 8006b40:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	3304      	adds	r3, #4
 8006b46:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	3304      	adds	r3, #4
 8006b52:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8006b54:	2300      	movs	r3, #0
 8006b56:	617b      	str	r3, [r7, #20]
 8006b58:	e020      	b.n	8006b9c <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	3303      	adds	r3, #3
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	4413      	add	r3, r2
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	3302      	adds	r3, #2
 8006b6a:	6879      	ldr	r1, [r7, #4]
 8006b6c:	440b      	add	r3, r1
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8006b72:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	3301      	adds	r3, #1
 8006b78:	6879      	ldr	r1, [r7, #4]
 8006b7a:	440b      	add	r3, r1
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8006b80:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8006b82:	6879      	ldr	r1, [r7, #4]
 8006b84:	697a      	ldr	r2, [r7, #20]
 8006b86:	440a      	add	r2, r1
 8006b88:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8006b8a:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	3304      	adds	r3, #4
 8006b94:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	3304      	adds	r3, #4
 8006b9a:	617b      	str	r3, [r7, #20]
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	0c1b      	lsrs	r3, r3, #16
 8006ba2:	4a06      	ldr	r2, [pc, #24]	; (8006bbc <FDCAN_CopyMessageToRAM+0xf8>)
 8006ba4:	5cd3      	ldrb	r3, [r2, r3]
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d3d5      	bcc.n	8006b5a <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8006bae:	bf00      	nop
 8006bb0:	bf00      	nop
 8006bb2:	3724      	adds	r7, #36	; 0x24
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr
 8006bbc:	08012384 	.word	0x08012384

08006bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b089      	sub	sp, #36	; 0x24
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006bce:	4b89      	ldr	r3, [pc, #548]	; (8006df4 <HAL_GPIO_Init+0x234>)
 8006bd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006bd2:	e194      	b.n	8006efe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	2101      	movs	r1, #1
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8006be0:	4013      	ands	r3, r2
 8006be2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f000 8186 	beq.w	8006ef8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d00b      	beq.n	8006c0c <HAL_GPIO_Init+0x4c>
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d007      	beq.n	8006c0c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006c00:	2b11      	cmp	r3, #17
 8006c02:	d003      	beq.n	8006c0c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	2b12      	cmp	r3, #18
 8006c0a:	d130      	bne.n	8006c6e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	005b      	lsls	r3, r3, #1
 8006c16:	2203      	movs	r2, #3
 8006c18:	fa02 f303 	lsl.w	r3, r2, r3
 8006c1c:	43db      	mvns	r3, r3
 8006c1e:	69ba      	ldr	r2, [r7, #24]
 8006c20:	4013      	ands	r3, r2
 8006c22:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	68da      	ldr	r2, [r3, #12]
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	005b      	lsls	r3, r3, #1
 8006c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c30:	69ba      	ldr	r2, [r7, #24]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	69ba      	ldr	r2, [r7, #24]
 8006c3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006c42:	2201      	movs	r2, #1
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	fa02 f303 	lsl.w	r3, r2, r3
 8006c4a:	43db      	mvns	r3, r3
 8006c4c:	69ba      	ldr	r2, [r7, #24]
 8006c4e:	4013      	ands	r3, r2
 8006c50:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	091b      	lsrs	r3, r3, #4
 8006c58:	f003 0201 	and.w	r2, r3, #1
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c62:	69ba      	ldr	r2, [r7, #24]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	69ba      	ldr	r2, [r7, #24]
 8006c6c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	005b      	lsls	r3, r3, #1
 8006c78:	2203      	movs	r2, #3
 8006c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c7e:	43db      	mvns	r3, r3
 8006c80:	69ba      	ldr	r2, [r7, #24]
 8006c82:	4013      	ands	r3, r2
 8006c84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	689a      	ldr	r2, [r3, #8]
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	005b      	lsls	r3, r3, #1
 8006c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c92:	69ba      	ldr	r2, [r7, #24]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	69ba      	ldr	r2, [r7, #24]
 8006c9c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	2b02      	cmp	r3, #2
 8006ca4:	d003      	beq.n	8006cae <HAL_GPIO_Init+0xee>
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	2b12      	cmp	r3, #18
 8006cac:	d123      	bne.n	8006cf6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	08da      	lsrs	r2, r3, #3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	3208      	adds	r2, #8
 8006cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	f003 0307 	and.w	r3, r3, #7
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	220f      	movs	r2, #15
 8006cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cca:	43db      	mvns	r3, r3
 8006ccc:	69ba      	ldr	r2, [r7, #24]
 8006cce:	4013      	ands	r3, r2
 8006cd0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	691a      	ldr	r2, [r3, #16]
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	f003 0307 	and.w	r3, r3, #7
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce2:	69ba      	ldr	r2, [r7, #24]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	08da      	lsrs	r2, r3, #3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	3208      	adds	r2, #8
 8006cf0:	69b9      	ldr	r1, [r7, #24]
 8006cf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	005b      	lsls	r3, r3, #1
 8006d00:	2203      	movs	r2, #3
 8006d02:	fa02 f303 	lsl.w	r3, r2, r3
 8006d06:	43db      	mvns	r3, r3
 8006d08:	69ba      	ldr	r2, [r7, #24]
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	f003 0203 	and.w	r2, r3, #3
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	005b      	lsls	r3, r3, #1
 8006d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d1e:	69ba      	ldr	r2, [r7, #24]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	69ba      	ldr	r2, [r7, #24]
 8006d28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f000 80e0 	beq.w	8006ef8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d38:	4b2f      	ldr	r3, [pc, #188]	; (8006df8 <HAL_GPIO_Init+0x238>)
 8006d3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d3e:	4a2e      	ldr	r2, [pc, #184]	; (8006df8 <HAL_GPIO_Init+0x238>)
 8006d40:	f043 0302 	orr.w	r3, r3, #2
 8006d44:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006d48:	4b2b      	ldr	r3, [pc, #172]	; (8006df8 <HAL_GPIO_Init+0x238>)
 8006d4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d4e:	f003 0302 	and.w	r3, r3, #2
 8006d52:	60fb      	str	r3, [r7, #12]
 8006d54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006d56:	4a29      	ldr	r2, [pc, #164]	; (8006dfc <HAL_GPIO_Init+0x23c>)
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	089b      	lsrs	r3, r3, #2
 8006d5c:	3302      	adds	r3, #2
 8006d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	f003 0303 	and.w	r3, r3, #3
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	220f      	movs	r2, #15
 8006d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d72:	43db      	mvns	r3, r3
 8006d74:	69ba      	ldr	r2, [r7, #24]
 8006d76:	4013      	ands	r3, r2
 8006d78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a20      	ldr	r2, [pc, #128]	; (8006e00 <HAL_GPIO_Init+0x240>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d052      	beq.n	8006e28 <HAL_GPIO_Init+0x268>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a1f      	ldr	r2, [pc, #124]	; (8006e04 <HAL_GPIO_Init+0x244>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d031      	beq.n	8006dee <HAL_GPIO_Init+0x22e>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a1e      	ldr	r2, [pc, #120]	; (8006e08 <HAL_GPIO_Init+0x248>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d02b      	beq.n	8006dea <HAL_GPIO_Init+0x22a>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a1d      	ldr	r2, [pc, #116]	; (8006e0c <HAL_GPIO_Init+0x24c>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d025      	beq.n	8006de6 <HAL_GPIO_Init+0x226>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a1c      	ldr	r2, [pc, #112]	; (8006e10 <HAL_GPIO_Init+0x250>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d01f      	beq.n	8006de2 <HAL_GPIO_Init+0x222>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a1b      	ldr	r2, [pc, #108]	; (8006e14 <HAL_GPIO_Init+0x254>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d019      	beq.n	8006dde <HAL_GPIO_Init+0x21e>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a1a      	ldr	r2, [pc, #104]	; (8006e18 <HAL_GPIO_Init+0x258>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d013      	beq.n	8006dda <HAL_GPIO_Init+0x21a>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a19      	ldr	r2, [pc, #100]	; (8006e1c <HAL_GPIO_Init+0x25c>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d00d      	beq.n	8006dd6 <HAL_GPIO_Init+0x216>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a18      	ldr	r2, [pc, #96]	; (8006e20 <HAL_GPIO_Init+0x260>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d007      	beq.n	8006dd2 <HAL_GPIO_Init+0x212>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a17      	ldr	r2, [pc, #92]	; (8006e24 <HAL_GPIO_Init+0x264>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d101      	bne.n	8006dce <HAL_GPIO_Init+0x20e>
 8006dca:	2309      	movs	r3, #9
 8006dcc:	e02d      	b.n	8006e2a <HAL_GPIO_Init+0x26a>
 8006dce:	230a      	movs	r3, #10
 8006dd0:	e02b      	b.n	8006e2a <HAL_GPIO_Init+0x26a>
 8006dd2:	2308      	movs	r3, #8
 8006dd4:	e029      	b.n	8006e2a <HAL_GPIO_Init+0x26a>
 8006dd6:	2307      	movs	r3, #7
 8006dd8:	e027      	b.n	8006e2a <HAL_GPIO_Init+0x26a>
 8006dda:	2306      	movs	r3, #6
 8006ddc:	e025      	b.n	8006e2a <HAL_GPIO_Init+0x26a>
 8006dde:	2305      	movs	r3, #5
 8006de0:	e023      	b.n	8006e2a <HAL_GPIO_Init+0x26a>
 8006de2:	2304      	movs	r3, #4
 8006de4:	e021      	b.n	8006e2a <HAL_GPIO_Init+0x26a>
 8006de6:	2303      	movs	r3, #3
 8006de8:	e01f      	b.n	8006e2a <HAL_GPIO_Init+0x26a>
 8006dea:	2302      	movs	r3, #2
 8006dec:	e01d      	b.n	8006e2a <HAL_GPIO_Init+0x26a>
 8006dee:	2301      	movs	r3, #1
 8006df0:	e01b      	b.n	8006e2a <HAL_GPIO_Init+0x26a>
 8006df2:	bf00      	nop
 8006df4:	58000080 	.word	0x58000080
 8006df8:	58024400 	.word	0x58024400
 8006dfc:	58000400 	.word	0x58000400
 8006e00:	58020000 	.word	0x58020000
 8006e04:	58020400 	.word	0x58020400
 8006e08:	58020800 	.word	0x58020800
 8006e0c:	58020c00 	.word	0x58020c00
 8006e10:	58021000 	.word	0x58021000
 8006e14:	58021400 	.word	0x58021400
 8006e18:	58021800 	.word	0x58021800
 8006e1c:	58021c00 	.word	0x58021c00
 8006e20:	58022000 	.word	0x58022000
 8006e24:	58022400 	.word	0x58022400
 8006e28:	2300      	movs	r3, #0
 8006e2a:	69fa      	ldr	r2, [r7, #28]
 8006e2c:	f002 0203 	and.w	r2, r2, #3
 8006e30:	0092      	lsls	r2, r2, #2
 8006e32:	4093      	lsls	r3, r2
 8006e34:	69ba      	ldr	r2, [r7, #24]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006e3a:	4938      	ldr	r1, [pc, #224]	; (8006f1c <HAL_GPIO_Init+0x35c>)
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	089b      	lsrs	r3, r3, #2
 8006e40:	3302      	adds	r3, #2
 8006e42:	69ba      	ldr	r2, [r7, #24]
 8006e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	43db      	mvns	r3, r3
 8006e52:	69ba      	ldr	r2, [r7, #24]
 8006e54:	4013      	ands	r3, r2
 8006e56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d003      	beq.n	8006e6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006e64:	69ba      	ldr	r2, [r7, #24]
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	69ba      	ldr	r2, [r7, #24]
 8006e70:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	43db      	mvns	r3, r3
 8006e7c:	69ba      	ldr	r2, [r7, #24]
 8006e7e:	4013      	ands	r3, r2
 8006e80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d003      	beq.n	8006e96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006e8e:	69ba      	ldr	r2, [r7, #24]
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	69ba      	ldr	r2, [r7, #24]
 8006e9a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	43db      	mvns	r3, r3
 8006ea8:	69ba      	ldr	r2, [r7, #24]
 8006eaa:	4013      	ands	r3, r2
 8006eac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d003      	beq.n	8006ec2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8006eba:	69ba      	ldr	r2, [r7, #24]
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006ec2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	43db      	mvns	r3, r3
 8006ed6:	69ba      	ldr	r2, [r7, #24]
 8006ed8:	4013      	ands	r3, r2
 8006eda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d003      	beq.n	8006ef0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006ee8:	69ba      	ldr	r2, [r7, #24]
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006ef0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	3301      	adds	r3, #1
 8006efc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	fa22 f303 	lsr.w	r3, r2, r3
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f47f ae63 	bne.w	8006bd4 <HAL_GPIO_Init+0x14>
  }
}
 8006f0e:	bf00      	nop
 8006f10:	bf00      	nop
 8006f12:	3724      	adds	r7, #36	; 0x24
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr
 8006f1c:	58000400 	.word	0x58000400

08006f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	460b      	mov	r3, r1
 8006f2a:	807b      	strh	r3, [r7, #2]
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006f30:	787b      	ldrb	r3, [r7, #1]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d003      	beq.n	8006f3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006f36:	887a      	ldrh	r2, [r7, #2]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006f3c:	e003      	b.n	8006f46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006f3e:	887b      	ldrh	r3, [r7, #2]
 8006f40:	041a      	lsls	r2, r3, #16
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	619a      	str	r2, [r3, #24]
}
 8006f46:	bf00      	nop
 8006f48:	370c      	adds	r7, #12
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr

08006f52 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b085      	sub	sp, #20
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	695b      	ldr	r3, [r3, #20]
 8006f62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006f64:	887a      	ldrh	r2, [r7, #2]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	4013      	ands	r3, r2
 8006f6a:	041a      	lsls	r2, r3, #16
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	43d9      	mvns	r1, r3
 8006f70:	887b      	ldrh	r3, [r7, #2]
 8006f72:	400b      	ands	r3, r1
 8006f74:	431a      	orrs	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	619a      	str	r2, [r3, #24]
}
 8006f7a:	bf00      	nop
 8006f7c:	3714      	adds	r7, #20
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr

08006f86 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006f86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f88:	b08f      	sub	sp, #60	; 0x3c
 8006f8a:	af0a      	add	r7, sp, #40	; 0x28
 8006f8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d101      	bne.n	8006f98 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e116      	b.n	80071c6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d106      	bne.n	8006fb8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f7fc ff10 	bl	8003dd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2203      	movs	r2, #3
 8006fbc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d102      	bne.n	8006fd2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f005 faaa 	bl	800c530 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	603b      	str	r3, [r7, #0]
 8006fe2:	687e      	ldr	r6, [r7, #4]
 8006fe4:	466d      	mov	r5, sp
 8006fe6:	f106 0410 	add.w	r4, r6, #16
 8006fea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006fec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006fee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ff0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ff2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006ff6:	e885 0003 	stmia.w	r5, {r0, r1}
 8006ffa:	1d33      	adds	r3, r6, #4
 8006ffc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ffe:	6838      	ldr	r0, [r7, #0]
 8007000:	f005 fa28 	bl	800c454 <USB_CoreInit>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d005      	beq.n	8007016 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2202      	movs	r2, #2
 800700e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e0d7      	b.n	80071c6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2100      	movs	r1, #0
 800701c:	4618      	mov	r0, r3
 800701e:	f005 fa98 	bl	800c552 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007022:	2300      	movs	r3, #0
 8007024:	73fb      	strb	r3, [r7, #15]
 8007026:	e04a      	b.n	80070be <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007028:	7bfa      	ldrb	r2, [r7, #15]
 800702a:	6879      	ldr	r1, [r7, #4]
 800702c:	4613      	mov	r3, r2
 800702e:	00db      	lsls	r3, r3, #3
 8007030:	1a9b      	subs	r3, r3, r2
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	440b      	add	r3, r1
 8007036:	333d      	adds	r3, #61	; 0x3d
 8007038:	2201      	movs	r2, #1
 800703a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800703c:	7bfa      	ldrb	r2, [r7, #15]
 800703e:	6879      	ldr	r1, [r7, #4]
 8007040:	4613      	mov	r3, r2
 8007042:	00db      	lsls	r3, r3, #3
 8007044:	1a9b      	subs	r3, r3, r2
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	440b      	add	r3, r1
 800704a:	333c      	adds	r3, #60	; 0x3c
 800704c:	7bfa      	ldrb	r2, [r7, #15]
 800704e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007050:	7bfa      	ldrb	r2, [r7, #15]
 8007052:	7bfb      	ldrb	r3, [r7, #15]
 8007054:	b298      	uxth	r0, r3
 8007056:	6879      	ldr	r1, [r7, #4]
 8007058:	4613      	mov	r3, r2
 800705a:	00db      	lsls	r3, r3, #3
 800705c:	1a9b      	subs	r3, r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	440b      	add	r3, r1
 8007062:	3342      	adds	r3, #66	; 0x42
 8007064:	4602      	mov	r2, r0
 8007066:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007068:	7bfa      	ldrb	r2, [r7, #15]
 800706a:	6879      	ldr	r1, [r7, #4]
 800706c:	4613      	mov	r3, r2
 800706e:	00db      	lsls	r3, r3, #3
 8007070:	1a9b      	subs	r3, r3, r2
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	440b      	add	r3, r1
 8007076:	333f      	adds	r3, #63	; 0x3f
 8007078:	2200      	movs	r2, #0
 800707a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800707c:	7bfa      	ldrb	r2, [r7, #15]
 800707e:	6879      	ldr	r1, [r7, #4]
 8007080:	4613      	mov	r3, r2
 8007082:	00db      	lsls	r3, r3, #3
 8007084:	1a9b      	subs	r3, r3, r2
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	440b      	add	r3, r1
 800708a:	3344      	adds	r3, #68	; 0x44
 800708c:	2200      	movs	r2, #0
 800708e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007090:	7bfa      	ldrb	r2, [r7, #15]
 8007092:	6879      	ldr	r1, [r7, #4]
 8007094:	4613      	mov	r3, r2
 8007096:	00db      	lsls	r3, r3, #3
 8007098:	1a9b      	subs	r3, r3, r2
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	440b      	add	r3, r1
 800709e:	3348      	adds	r3, #72	; 0x48
 80070a0:	2200      	movs	r2, #0
 80070a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80070a4:	7bfa      	ldrb	r2, [r7, #15]
 80070a6:	6879      	ldr	r1, [r7, #4]
 80070a8:	4613      	mov	r3, r2
 80070aa:	00db      	lsls	r3, r3, #3
 80070ac:	1a9b      	subs	r3, r3, r2
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	440b      	add	r3, r1
 80070b2:	3350      	adds	r3, #80	; 0x50
 80070b4:	2200      	movs	r2, #0
 80070b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070b8:	7bfb      	ldrb	r3, [r7, #15]
 80070ba:	3301      	adds	r3, #1
 80070bc:	73fb      	strb	r3, [r7, #15]
 80070be:	7bfa      	ldrb	r2, [r7, #15]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d3af      	bcc.n	8007028 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070c8:	2300      	movs	r3, #0
 80070ca:	73fb      	strb	r3, [r7, #15]
 80070cc:	e044      	b.n	8007158 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80070ce:	7bfa      	ldrb	r2, [r7, #15]
 80070d0:	6879      	ldr	r1, [r7, #4]
 80070d2:	4613      	mov	r3, r2
 80070d4:	00db      	lsls	r3, r3, #3
 80070d6:	1a9b      	subs	r3, r3, r2
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	440b      	add	r3, r1
 80070dc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80070e0:	2200      	movs	r2, #0
 80070e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80070e4:	7bfa      	ldrb	r2, [r7, #15]
 80070e6:	6879      	ldr	r1, [r7, #4]
 80070e8:	4613      	mov	r3, r2
 80070ea:	00db      	lsls	r3, r3, #3
 80070ec:	1a9b      	subs	r3, r3, r2
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	440b      	add	r3, r1
 80070f2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80070f6:	7bfa      	ldrb	r2, [r7, #15]
 80070f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80070fa:	7bfa      	ldrb	r2, [r7, #15]
 80070fc:	6879      	ldr	r1, [r7, #4]
 80070fe:	4613      	mov	r3, r2
 8007100:	00db      	lsls	r3, r3, #3
 8007102:	1a9b      	subs	r3, r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	440b      	add	r3, r1
 8007108:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800710c:	2200      	movs	r2, #0
 800710e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007110:	7bfa      	ldrb	r2, [r7, #15]
 8007112:	6879      	ldr	r1, [r7, #4]
 8007114:	4613      	mov	r3, r2
 8007116:	00db      	lsls	r3, r3, #3
 8007118:	1a9b      	subs	r3, r3, r2
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	440b      	add	r3, r1
 800711e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007122:	2200      	movs	r2, #0
 8007124:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007126:	7bfa      	ldrb	r2, [r7, #15]
 8007128:	6879      	ldr	r1, [r7, #4]
 800712a:	4613      	mov	r3, r2
 800712c:	00db      	lsls	r3, r3, #3
 800712e:	1a9b      	subs	r3, r3, r2
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	440b      	add	r3, r1
 8007134:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007138:	2200      	movs	r2, #0
 800713a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800713c:	7bfa      	ldrb	r2, [r7, #15]
 800713e:	6879      	ldr	r1, [r7, #4]
 8007140:	4613      	mov	r3, r2
 8007142:	00db      	lsls	r3, r3, #3
 8007144:	1a9b      	subs	r3, r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	440b      	add	r3, r1
 800714a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800714e:	2200      	movs	r2, #0
 8007150:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007152:	7bfb      	ldrb	r3, [r7, #15]
 8007154:	3301      	adds	r3, #1
 8007156:	73fb      	strb	r3, [r7, #15]
 8007158:	7bfa      	ldrb	r2, [r7, #15]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	429a      	cmp	r2, r3
 8007160:	d3b5      	bcc.n	80070ce <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	603b      	str	r3, [r7, #0]
 8007168:	687e      	ldr	r6, [r7, #4]
 800716a:	466d      	mov	r5, sp
 800716c:	f106 0410 	add.w	r4, r6, #16
 8007170:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007172:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007174:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007176:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007178:	e894 0003 	ldmia.w	r4, {r0, r1}
 800717c:	e885 0003 	stmia.w	r5, {r0, r1}
 8007180:	1d33      	adds	r3, r6, #4
 8007182:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007184:	6838      	ldr	r0, [r7, #0]
 8007186:	f005 fa0f 	bl	800c5a8 <USB_DevInit>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d005      	beq.n	800719c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2202      	movs	r2, #2
 8007194:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e014      	b.n	80071c6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d102      	bne.n	80071ba <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 f80b 	bl	80071d0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4618      	mov	r0, r3
 80071c0:	f005 fbb1 	bl	800c926 <USB_DevDisconnect>

  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080071d0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80071fe:	4b05      	ldr	r3, [pc, #20]	; (8007214 <HAL_PCDEx_ActivateLPM+0x44>)
 8007200:	4313      	orrs	r3, r2
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3714      	adds	r7, #20
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr
 8007214:	10000003 	.word	0x10000003

08007218 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007220:	4b19      	ldr	r3, [pc, #100]	; (8007288 <HAL_PWREx_ConfigSupply+0x70>)
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	f003 0304 	and.w	r3, r3, #4
 8007228:	2b04      	cmp	r3, #4
 800722a:	d00a      	beq.n	8007242 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800722c:	4b16      	ldr	r3, [pc, #88]	; (8007288 <HAL_PWREx_ConfigSupply+0x70>)
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	f003 0307 	and.w	r3, r3, #7
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	429a      	cmp	r2, r3
 8007238:	d001      	beq.n	800723e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e01f      	b.n	800727e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800723e:	2300      	movs	r3, #0
 8007240:	e01d      	b.n	800727e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007242:	4b11      	ldr	r3, [pc, #68]	; (8007288 <HAL_PWREx_ConfigSupply+0x70>)
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	f023 0207 	bic.w	r2, r3, #7
 800724a:	490f      	ldr	r1, [pc, #60]	; (8007288 <HAL_PWREx_ConfigSupply+0x70>)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4313      	orrs	r3, r2
 8007250:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007252:	f7fd f809 	bl	8004268 <HAL_GetTick>
 8007256:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007258:	e009      	b.n	800726e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800725a:	f7fd f805 	bl	8004268 <HAL_GetTick>
 800725e:	4602      	mov	r2, r0
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007268:	d901      	bls.n	800726e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e007      	b.n	800727e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800726e:	4b06      	ldr	r3, [pc, #24]	; (8007288 <HAL_PWREx_ConfigSupply+0x70>)
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800727a:	d1ee      	bne.n	800725a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	58024800 	.word	0x58024800

0800728c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800728c:	b480      	push	{r7}
 800728e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007290:	4b05      	ldr	r3, [pc, #20]	; (80072a8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	4a04      	ldr	r2, [pc, #16]	; (80072a8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007296:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800729a:	60d3      	str	r3, [r2, #12]
}
 800729c:	bf00      	nop
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop
 80072a8:	58024800 	.word	0x58024800

080072ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b08c      	sub	sp, #48	; 0x30
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d101      	bne.n	80072be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e3ff      	b.n	8007abe <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 0301 	and.w	r3, r3, #1
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	f000 8087 	beq.w	80073da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072cc:	4b99      	ldr	r3, [pc, #612]	; (8007534 <HAL_RCC_OscConfig+0x288>)
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80072d6:	4b97      	ldr	r3, [pc, #604]	; (8007534 <HAL_RCC_OscConfig+0x288>)
 80072d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072da:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80072dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072de:	2b10      	cmp	r3, #16
 80072e0:	d007      	beq.n	80072f2 <HAL_RCC_OscConfig+0x46>
 80072e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e4:	2b18      	cmp	r3, #24
 80072e6:	d110      	bne.n	800730a <HAL_RCC_OscConfig+0x5e>
 80072e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ea:	f003 0303 	and.w	r3, r3, #3
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d10b      	bne.n	800730a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072f2:	4b90      	ldr	r3, [pc, #576]	; (8007534 <HAL_RCC_OscConfig+0x288>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d06c      	beq.n	80073d8 <HAL_RCC_OscConfig+0x12c>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d168      	bne.n	80073d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e3d9      	b.n	8007abe <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007312:	d106      	bne.n	8007322 <HAL_RCC_OscConfig+0x76>
 8007314:	4b87      	ldr	r3, [pc, #540]	; (8007534 <HAL_RCC_OscConfig+0x288>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a86      	ldr	r2, [pc, #536]	; (8007534 <HAL_RCC_OscConfig+0x288>)
 800731a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800731e:	6013      	str	r3, [r2, #0]
 8007320:	e02e      	b.n	8007380 <HAL_RCC_OscConfig+0xd4>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10c      	bne.n	8007344 <HAL_RCC_OscConfig+0x98>
 800732a:	4b82      	ldr	r3, [pc, #520]	; (8007534 <HAL_RCC_OscConfig+0x288>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a81      	ldr	r2, [pc, #516]	; (8007534 <HAL_RCC_OscConfig+0x288>)
 8007330:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007334:	6013      	str	r3, [r2, #0]
 8007336:	4b7f      	ldr	r3, [pc, #508]	; (8007534 <HAL_RCC_OscConfig+0x288>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a7e      	ldr	r2, [pc, #504]	; (8007534 <HAL_RCC_OscConfig+0x288>)
 800733c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007340:	6013      	str	r3, [r2, #0]
 8007342:	e01d      	b.n	8007380 <HAL_RCC_OscConfig+0xd4>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800734c:	d10c      	bne.n	8007368 <HAL_RCC_OscConfig+0xbc>
 800734e:	4b79      	ldr	r3, [pc, #484]	; (8007534 <HAL_RCC_OscConfig+0x288>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a78      	ldr	r2, [pc, #480]	; (8007534 <HAL_RCC_OscConfig+0x288>)
 8007354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007358:	6013      	str	r3, [r2, #0]
 800735a:	4b76      	ldr	r3, [pc, #472]	; (8007534 <HAL_RCC_OscConfig+0x288>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a75      	ldr	r2, [pc, #468]	; (8007534 <HAL_RCC_OscConfig+0x288>)
 8007360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007364:	6013      	str	r3, [r2, #0]
 8007366:	e00b      	b.n	8007380 <HAL_RCC_OscConfig+0xd4>
 8007368:	4b72      	ldr	r3, [pc, #456]	; (8007534 <HAL_RCC_OscConfig+0x288>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a71      	ldr	r2, [pc, #452]	; (8007534 <HAL_RCC_OscConfig+0x288>)
 800736e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007372:	6013      	str	r3, [r2, #0]
 8007374:	4b6f      	ldr	r3, [pc, #444]	; (8007534 <HAL_RCC_OscConfig+0x288>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a6e      	ldr	r2, [pc, #440]	; (8007534 <HAL_RCC_OscConfig+0x288>)
 800737a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800737e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d013      	beq.n	80073b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007388:	f7fc ff6e 	bl	8004268 <HAL_GetTick>
 800738c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800738e:	e008      	b.n	80073a2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007390:	f7fc ff6a 	bl	8004268 <HAL_GetTick>
 8007394:	4602      	mov	r2, r0
 8007396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	2b64      	cmp	r3, #100	; 0x64
 800739c:	d901      	bls.n	80073a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	e38d      	b.n	8007abe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80073a2:	4b64      	ldr	r3, [pc, #400]	; (8007534 <HAL_RCC_OscConfig+0x288>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d0f0      	beq.n	8007390 <HAL_RCC_OscConfig+0xe4>
 80073ae:	e014      	b.n	80073da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073b0:	f7fc ff5a 	bl	8004268 <HAL_GetTick>
 80073b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80073b6:	e008      	b.n	80073ca <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073b8:	f7fc ff56 	bl	8004268 <HAL_GetTick>
 80073bc:	4602      	mov	r2, r0
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	2b64      	cmp	r3, #100	; 0x64
 80073c4:	d901      	bls.n	80073ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80073c6:	2303      	movs	r3, #3
 80073c8:	e379      	b.n	8007abe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80073ca:	4b5a      	ldr	r3, [pc, #360]	; (8007534 <HAL_RCC_OscConfig+0x288>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1f0      	bne.n	80073b8 <HAL_RCC_OscConfig+0x10c>
 80073d6:	e000      	b.n	80073da <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 0302 	and.w	r3, r3, #2
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	f000 80ae 	beq.w	8007544 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073e8:	4b52      	ldr	r3, [pc, #328]	; (8007534 <HAL_RCC_OscConfig+0x288>)
 80073ea:	691b      	ldr	r3, [r3, #16]
 80073ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80073f2:	4b50      	ldr	r3, [pc, #320]	; (8007534 <HAL_RCC_OscConfig+0x288>)
 80073f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80073f8:	6a3b      	ldr	r3, [r7, #32]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d007      	beq.n	800740e <HAL_RCC_OscConfig+0x162>
 80073fe:	6a3b      	ldr	r3, [r7, #32]
 8007400:	2b18      	cmp	r3, #24
 8007402:	d13a      	bne.n	800747a <HAL_RCC_OscConfig+0x1ce>
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	f003 0303 	and.w	r3, r3, #3
 800740a:	2b00      	cmp	r3, #0
 800740c:	d135      	bne.n	800747a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800740e:	4b49      	ldr	r3, [pc, #292]	; (8007534 <HAL_RCC_OscConfig+0x288>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 0304 	and.w	r3, r3, #4
 8007416:	2b00      	cmp	r3, #0
 8007418:	d005      	beq.n	8007426 <HAL_RCC_OscConfig+0x17a>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d101      	bne.n	8007426 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e34b      	b.n	8007abe <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007426:	f7fc ff4f 	bl	80042c8 <HAL_GetREVID>
 800742a:	4603      	mov	r3, r0
 800742c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007430:	4293      	cmp	r3, r2
 8007432:	d817      	bhi.n	8007464 <HAL_RCC_OscConfig+0x1b8>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	691b      	ldr	r3, [r3, #16]
 8007438:	2b40      	cmp	r3, #64	; 0x40
 800743a:	d108      	bne.n	800744e <HAL_RCC_OscConfig+0x1a2>
 800743c:	4b3d      	ldr	r3, [pc, #244]	; (8007534 <HAL_RCC_OscConfig+0x288>)
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007444:	4a3b      	ldr	r2, [pc, #236]	; (8007534 <HAL_RCC_OscConfig+0x288>)
 8007446:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800744a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800744c:	e07a      	b.n	8007544 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800744e:	4b39      	ldr	r3, [pc, #228]	; (8007534 <HAL_RCC_OscConfig+0x288>)
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	031b      	lsls	r3, r3, #12
 800745c:	4935      	ldr	r1, [pc, #212]	; (8007534 <HAL_RCC_OscConfig+0x288>)
 800745e:	4313      	orrs	r3, r2
 8007460:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007462:	e06f      	b.n	8007544 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007464:	4b33      	ldr	r3, [pc, #204]	; (8007534 <HAL_RCC_OscConfig+0x288>)
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	061b      	lsls	r3, r3, #24
 8007472:	4930      	ldr	r1, [pc, #192]	; (8007534 <HAL_RCC_OscConfig+0x288>)
 8007474:	4313      	orrs	r3, r2
 8007476:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007478:	e064      	b.n	8007544 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d045      	beq.n	800750e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007482:	4b2c      	ldr	r3, [pc, #176]	; (8007534 <HAL_RCC_OscConfig+0x288>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f023 0219 	bic.w	r2, r3, #25
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	4929      	ldr	r1, [pc, #164]	; (8007534 <HAL_RCC_OscConfig+0x288>)
 8007490:	4313      	orrs	r3, r2
 8007492:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007494:	f7fc fee8 	bl	8004268 <HAL_GetTick>
 8007498:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800749a:	e008      	b.n	80074ae <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800749c:	f7fc fee4 	bl	8004268 <HAL_GetTick>
 80074a0:	4602      	mov	r2, r0
 80074a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d901      	bls.n	80074ae <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	e307      	b.n	8007abe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80074ae:	4b21      	ldr	r3, [pc, #132]	; (8007534 <HAL_RCC_OscConfig+0x288>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f003 0304 	and.w	r3, r3, #4
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d0f0      	beq.n	800749c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074ba:	f7fc ff05 	bl	80042c8 <HAL_GetREVID>
 80074be:	4603      	mov	r3, r0
 80074c0:	f241 0203 	movw	r2, #4099	; 0x1003
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d817      	bhi.n	80074f8 <HAL_RCC_OscConfig+0x24c>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	2b40      	cmp	r3, #64	; 0x40
 80074ce:	d108      	bne.n	80074e2 <HAL_RCC_OscConfig+0x236>
 80074d0:	4b18      	ldr	r3, [pc, #96]	; (8007534 <HAL_RCC_OscConfig+0x288>)
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80074d8:	4a16      	ldr	r2, [pc, #88]	; (8007534 <HAL_RCC_OscConfig+0x288>)
 80074da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074de:	6053      	str	r3, [r2, #4]
 80074e0:	e030      	b.n	8007544 <HAL_RCC_OscConfig+0x298>
 80074e2:	4b14      	ldr	r3, [pc, #80]	; (8007534 <HAL_RCC_OscConfig+0x288>)
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	031b      	lsls	r3, r3, #12
 80074f0:	4910      	ldr	r1, [pc, #64]	; (8007534 <HAL_RCC_OscConfig+0x288>)
 80074f2:	4313      	orrs	r3, r2
 80074f4:	604b      	str	r3, [r1, #4]
 80074f6:	e025      	b.n	8007544 <HAL_RCC_OscConfig+0x298>
 80074f8:	4b0e      	ldr	r3, [pc, #56]	; (8007534 <HAL_RCC_OscConfig+0x288>)
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	061b      	lsls	r3, r3, #24
 8007506:	490b      	ldr	r1, [pc, #44]	; (8007534 <HAL_RCC_OscConfig+0x288>)
 8007508:	4313      	orrs	r3, r2
 800750a:	604b      	str	r3, [r1, #4]
 800750c:	e01a      	b.n	8007544 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800750e:	4b09      	ldr	r3, [pc, #36]	; (8007534 <HAL_RCC_OscConfig+0x288>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a08      	ldr	r2, [pc, #32]	; (8007534 <HAL_RCC_OscConfig+0x288>)
 8007514:	f023 0301 	bic.w	r3, r3, #1
 8007518:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800751a:	f7fc fea5 	bl	8004268 <HAL_GetTick>
 800751e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007520:	e00a      	b.n	8007538 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007522:	f7fc fea1 	bl	8004268 <HAL_GetTick>
 8007526:	4602      	mov	r2, r0
 8007528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	2b02      	cmp	r3, #2
 800752e:	d903      	bls.n	8007538 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8007530:	2303      	movs	r3, #3
 8007532:	e2c4      	b.n	8007abe <HAL_RCC_OscConfig+0x812>
 8007534:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007538:	4ba4      	ldr	r3, [pc, #656]	; (80077cc <HAL_RCC_OscConfig+0x520>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0304 	and.w	r3, r3, #4
 8007540:	2b00      	cmp	r3, #0
 8007542:	d1ee      	bne.n	8007522 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 0310 	and.w	r3, r3, #16
 800754c:	2b00      	cmp	r3, #0
 800754e:	f000 80a9 	beq.w	80076a4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007552:	4b9e      	ldr	r3, [pc, #632]	; (80077cc <HAL_RCC_OscConfig+0x520>)
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800755a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800755c:	4b9b      	ldr	r3, [pc, #620]	; (80077cc <HAL_RCC_OscConfig+0x520>)
 800755e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007560:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	2b08      	cmp	r3, #8
 8007566:	d007      	beq.n	8007578 <HAL_RCC_OscConfig+0x2cc>
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	2b18      	cmp	r3, #24
 800756c:	d13a      	bne.n	80075e4 <HAL_RCC_OscConfig+0x338>
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	f003 0303 	and.w	r3, r3, #3
 8007574:	2b01      	cmp	r3, #1
 8007576:	d135      	bne.n	80075e4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007578:	4b94      	ldr	r3, [pc, #592]	; (80077cc <HAL_RCC_OscConfig+0x520>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007580:	2b00      	cmp	r3, #0
 8007582:	d005      	beq.n	8007590 <HAL_RCC_OscConfig+0x2e4>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	69db      	ldr	r3, [r3, #28]
 8007588:	2b80      	cmp	r3, #128	; 0x80
 800758a:	d001      	beq.n	8007590 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	e296      	b.n	8007abe <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007590:	f7fc fe9a 	bl	80042c8 <HAL_GetREVID>
 8007594:	4603      	mov	r3, r0
 8007596:	f241 0203 	movw	r2, #4099	; 0x1003
 800759a:	4293      	cmp	r3, r2
 800759c:	d817      	bhi.n	80075ce <HAL_RCC_OscConfig+0x322>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a1b      	ldr	r3, [r3, #32]
 80075a2:	2b20      	cmp	r3, #32
 80075a4:	d108      	bne.n	80075b8 <HAL_RCC_OscConfig+0x30c>
 80075a6:	4b89      	ldr	r3, [pc, #548]	; (80077cc <HAL_RCC_OscConfig+0x520>)
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80075ae:	4a87      	ldr	r2, [pc, #540]	; (80077cc <HAL_RCC_OscConfig+0x520>)
 80075b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075b4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80075b6:	e075      	b.n	80076a4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80075b8:	4b84      	ldr	r3, [pc, #528]	; (80077cc <HAL_RCC_OscConfig+0x520>)
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a1b      	ldr	r3, [r3, #32]
 80075c4:	069b      	lsls	r3, r3, #26
 80075c6:	4981      	ldr	r1, [pc, #516]	; (80077cc <HAL_RCC_OscConfig+0x520>)
 80075c8:	4313      	orrs	r3, r2
 80075ca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80075cc:	e06a      	b.n	80076a4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80075ce:	4b7f      	ldr	r3, [pc, #508]	; (80077cc <HAL_RCC_OscConfig+0x520>)
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a1b      	ldr	r3, [r3, #32]
 80075da:	061b      	lsls	r3, r3, #24
 80075dc:	497b      	ldr	r1, [pc, #492]	; (80077cc <HAL_RCC_OscConfig+0x520>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80075e2:	e05f      	b.n	80076a4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	69db      	ldr	r3, [r3, #28]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d042      	beq.n	8007672 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80075ec:	4b77      	ldr	r3, [pc, #476]	; (80077cc <HAL_RCC_OscConfig+0x520>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a76      	ldr	r2, [pc, #472]	; (80077cc <HAL_RCC_OscConfig+0x520>)
 80075f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075f8:	f7fc fe36 	bl	8004268 <HAL_GetTick>
 80075fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80075fe:	e008      	b.n	8007612 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007600:	f7fc fe32 	bl	8004268 <HAL_GetTick>
 8007604:	4602      	mov	r2, r0
 8007606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	2b02      	cmp	r3, #2
 800760c:	d901      	bls.n	8007612 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	e255      	b.n	8007abe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007612:	4b6e      	ldr	r3, [pc, #440]	; (80077cc <HAL_RCC_OscConfig+0x520>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800761a:	2b00      	cmp	r3, #0
 800761c:	d0f0      	beq.n	8007600 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800761e:	f7fc fe53 	bl	80042c8 <HAL_GetREVID>
 8007622:	4603      	mov	r3, r0
 8007624:	f241 0203 	movw	r2, #4099	; 0x1003
 8007628:	4293      	cmp	r3, r2
 800762a:	d817      	bhi.n	800765c <HAL_RCC_OscConfig+0x3b0>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6a1b      	ldr	r3, [r3, #32]
 8007630:	2b20      	cmp	r3, #32
 8007632:	d108      	bne.n	8007646 <HAL_RCC_OscConfig+0x39a>
 8007634:	4b65      	ldr	r3, [pc, #404]	; (80077cc <HAL_RCC_OscConfig+0x520>)
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800763c:	4a63      	ldr	r2, [pc, #396]	; (80077cc <HAL_RCC_OscConfig+0x520>)
 800763e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007642:	6053      	str	r3, [r2, #4]
 8007644:	e02e      	b.n	80076a4 <HAL_RCC_OscConfig+0x3f8>
 8007646:	4b61      	ldr	r3, [pc, #388]	; (80077cc <HAL_RCC_OscConfig+0x520>)
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	069b      	lsls	r3, r3, #26
 8007654:	495d      	ldr	r1, [pc, #372]	; (80077cc <HAL_RCC_OscConfig+0x520>)
 8007656:	4313      	orrs	r3, r2
 8007658:	604b      	str	r3, [r1, #4]
 800765a:	e023      	b.n	80076a4 <HAL_RCC_OscConfig+0x3f8>
 800765c:	4b5b      	ldr	r3, [pc, #364]	; (80077cc <HAL_RCC_OscConfig+0x520>)
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6a1b      	ldr	r3, [r3, #32]
 8007668:	061b      	lsls	r3, r3, #24
 800766a:	4958      	ldr	r1, [pc, #352]	; (80077cc <HAL_RCC_OscConfig+0x520>)
 800766c:	4313      	orrs	r3, r2
 800766e:	60cb      	str	r3, [r1, #12]
 8007670:	e018      	b.n	80076a4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007672:	4b56      	ldr	r3, [pc, #344]	; (80077cc <HAL_RCC_OscConfig+0x520>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a55      	ldr	r2, [pc, #340]	; (80077cc <HAL_RCC_OscConfig+0x520>)
 8007678:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800767c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800767e:	f7fc fdf3 	bl	8004268 <HAL_GetTick>
 8007682:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007684:	e008      	b.n	8007698 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007686:	f7fc fdef 	bl	8004268 <HAL_GetTick>
 800768a:	4602      	mov	r2, r0
 800768c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768e:	1ad3      	subs	r3, r2, r3
 8007690:	2b02      	cmp	r3, #2
 8007692:	d901      	bls.n	8007698 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8007694:	2303      	movs	r3, #3
 8007696:	e212      	b.n	8007abe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007698:	4b4c      	ldr	r3, [pc, #304]	; (80077cc <HAL_RCC_OscConfig+0x520>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1f0      	bne.n	8007686 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 0308 	and.w	r3, r3, #8
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d036      	beq.n	800771e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	695b      	ldr	r3, [r3, #20]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d019      	beq.n	80076ec <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076b8:	4b44      	ldr	r3, [pc, #272]	; (80077cc <HAL_RCC_OscConfig+0x520>)
 80076ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076bc:	4a43      	ldr	r2, [pc, #268]	; (80077cc <HAL_RCC_OscConfig+0x520>)
 80076be:	f043 0301 	orr.w	r3, r3, #1
 80076c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076c4:	f7fc fdd0 	bl	8004268 <HAL_GetTick>
 80076c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80076ca:	e008      	b.n	80076de <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80076cc:	f7fc fdcc 	bl	8004268 <HAL_GetTick>
 80076d0:	4602      	mov	r2, r0
 80076d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d4:	1ad3      	subs	r3, r2, r3
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	d901      	bls.n	80076de <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e1ef      	b.n	8007abe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80076de:	4b3b      	ldr	r3, [pc, #236]	; (80077cc <HAL_RCC_OscConfig+0x520>)
 80076e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076e2:	f003 0302 	and.w	r3, r3, #2
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d0f0      	beq.n	80076cc <HAL_RCC_OscConfig+0x420>
 80076ea:	e018      	b.n	800771e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076ec:	4b37      	ldr	r3, [pc, #220]	; (80077cc <HAL_RCC_OscConfig+0x520>)
 80076ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076f0:	4a36      	ldr	r2, [pc, #216]	; (80077cc <HAL_RCC_OscConfig+0x520>)
 80076f2:	f023 0301 	bic.w	r3, r3, #1
 80076f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076f8:	f7fc fdb6 	bl	8004268 <HAL_GetTick>
 80076fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80076fe:	e008      	b.n	8007712 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007700:	f7fc fdb2 	bl	8004268 <HAL_GetTick>
 8007704:	4602      	mov	r2, r0
 8007706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	2b02      	cmp	r3, #2
 800770c:	d901      	bls.n	8007712 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800770e:	2303      	movs	r3, #3
 8007710:	e1d5      	b.n	8007abe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007712:	4b2e      	ldr	r3, [pc, #184]	; (80077cc <HAL_RCC_OscConfig+0x520>)
 8007714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007716:	f003 0302 	and.w	r3, r3, #2
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1f0      	bne.n	8007700 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 0320 	and.w	r3, r3, #32
 8007726:	2b00      	cmp	r3, #0
 8007728:	d036      	beq.n	8007798 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	699b      	ldr	r3, [r3, #24]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d019      	beq.n	8007766 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007732:	4b26      	ldr	r3, [pc, #152]	; (80077cc <HAL_RCC_OscConfig+0x520>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a25      	ldr	r2, [pc, #148]	; (80077cc <HAL_RCC_OscConfig+0x520>)
 8007738:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800773c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800773e:	f7fc fd93 	bl	8004268 <HAL_GetTick>
 8007742:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007744:	e008      	b.n	8007758 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007746:	f7fc fd8f 	bl	8004268 <HAL_GetTick>
 800774a:	4602      	mov	r2, r0
 800774c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	2b02      	cmp	r3, #2
 8007752:	d901      	bls.n	8007758 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8007754:	2303      	movs	r3, #3
 8007756:	e1b2      	b.n	8007abe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007758:	4b1c      	ldr	r3, [pc, #112]	; (80077cc <HAL_RCC_OscConfig+0x520>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007760:	2b00      	cmp	r3, #0
 8007762:	d0f0      	beq.n	8007746 <HAL_RCC_OscConfig+0x49a>
 8007764:	e018      	b.n	8007798 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007766:	4b19      	ldr	r3, [pc, #100]	; (80077cc <HAL_RCC_OscConfig+0x520>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a18      	ldr	r2, [pc, #96]	; (80077cc <HAL_RCC_OscConfig+0x520>)
 800776c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007770:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007772:	f7fc fd79 	bl	8004268 <HAL_GetTick>
 8007776:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007778:	e008      	b.n	800778c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800777a:	f7fc fd75 	bl	8004268 <HAL_GetTick>
 800777e:	4602      	mov	r2, r0
 8007780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	2b02      	cmp	r3, #2
 8007786:	d901      	bls.n	800778c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e198      	b.n	8007abe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800778c:	4b0f      	ldr	r3, [pc, #60]	; (80077cc <HAL_RCC_OscConfig+0x520>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1f0      	bne.n	800777a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 0304 	and.w	r3, r3, #4
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f000 8085 	beq.w	80078b0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80077a6:	4b0a      	ldr	r3, [pc, #40]	; (80077d0 <HAL_RCC_OscConfig+0x524>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a09      	ldr	r2, [pc, #36]	; (80077d0 <HAL_RCC_OscConfig+0x524>)
 80077ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80077b2:	f7fc fd59 	bl	8004268 <HAL_GetTick>
 80077b6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077b8:	e00c      	b.n	80077d4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80077ba:	f7fc fd55 	bl	8004268 <HAL_GetTick>
 80077be:	4602      	mov	r2, r0
 80077c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c2:	1ad3      	subs	r3, r2, r3
 80077c4:	2b64      	cmp	r3, #100	; 0x64
 80077c6:	d905      	bls.n	80077d4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80077c8:	2303      	movs	r3, #3
 80077ca:	e178      	b.n	8007abe <HAL_RCC_OscConfig+0x812>
 80077cc:	58024400 	.word	0x58024400
 80077d0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077d4:	4b96      	ldr	r3, [pc, #600]	; (8007a30 <HAL_RCC_OscConfig+0x784>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d0ec      	beq.n	80077ba <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d106      	bne.n	80077f6 <HAL_RCC_OscConfig+0x54a>
 80077e8:	4b92      	ldr	r3, [pc, #584]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 80077ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ec:	4a91      	ldr	r2, [pc, #580]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 80077ee:	f043 0301 	orr.w	r3, r3, #1
 80077f2:	6713      	str	r3, [r2, #112]	; 0x70
 80077f4:	e02d      	b.n	8007852 <HAL_RCC_OscConfig+0x5a6>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d10c      	bne.n	8007818 <HAL_RCC_OscConfig+0x56c>
 80077fe:	4b8d      	ldr	r3, [pc, #564]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 8007800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007802:	4a8c      	ldr	r2, [pc, #560]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 8007804:	f023 0301 	bic.w	r3, r3, #1
 8007808:	6713      	str	r3, [r2, #112]	; 0x70
 800780a:	4b8a      	ldr	r3, [pc, #552]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 800780c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800780e:	4a89      	ldr	r2, [pc, #548]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 8007810:	f023 0304 	bic.w	r3, r3, #4
 8007814:	6713      	str	r3, [r2, #112]	; 0x70
 8007816:	e01c      	b.n	8007852 <HAL_RCC_OscConfig+0x5a6>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	2b05      	cmp	r3, #5
 800781e:	d10c      	bne.n	800783a <HAL_RCC_OscConfig+0x58e>
 8007820:	4b84      	ldr	r3, [pc, #528]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 8007822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007824:	4a83      	ldr	r2, [pc, #524]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 8007826:	f043 0304 	orr.w	r3, r3, #4
 800782a:	6713      	str	r3, [r2, #112]	; 0x70
 800782c:	4b81      	ldr	r3, [pc, #516]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 800782e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007830:	4a80      	ldr	r2, [pc, #512]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 8007832:	f043 0301 	orr.w	r3, r3, #1
 8007836:	6713      	str	r3, [r2, #112]	; 0x70
 8007838:	e00b      	b.n	8007852 <HAL_RCC_OscConfig+0x5a6>
 800783a:	4b7e      	ldr	r3, [pc, #504]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 800783c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800783e:	4a7d      	ldr	r2, [pc, #500]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 8007840:	f023 0301 	bic.w	r3, r3, #1
 8007844:	6713      	str	r3, [r2, #112]	; 0x70
 8007846:	4b7b      	ldr	r3, [pc, #492]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 8007848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800784a:	4a7a      	ldr	r2, [pc, #488]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 800784c:	f023 0304 	bic.w	r3, r3, #4
 8007850:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d015      	beq.n	8007886 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800785a:	f7fc fd05 	bl	8004268 <HAL_GetTick>
 800785e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007860:	e00a      	b.n	8007878 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007862:	f7fc fd01 	bl	8004268 <HAL_GetTick>
 8007866:	4602      	mov	r2, r0
 8007868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786a:	1ad3      	subs	r3, r2, r3
 800786c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007870:	4293      	cmp	r3, r2
 8007872:	d901      	bls.n	8007878 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8007874:	2303      	movs	r3, #3
 8007876:	e122      	b.n	8007abe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007878:	4b6e      	ldr	r3, [pc, #440]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 800787a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800787c:	f003 0302 	and.w	r3, r3, #2
 8007880:	2b00      	cmp	r3, #0
 8007882:	d0ee      	beq.n	8007862 <HAL_RCC_OscConfig+0x5b6>
 8007884:	e014      	b.n	80078b0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007886:	f7fc fcef 	bl	8004268 <HAL_GetTick>
 800788a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800788c:	e00a      	b.n	80078a4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800788e:	f7fc fceb 	bl	8004268 <HAL_GetTick>
 8007892:	4602      	mov	r2, r0
 8007894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007896:	1ad3      	subs	r3, r2, r3
 8007898:	f241 3288 	movw	r2, #5000	; 0x1388
 800789c:	4293      	cmp	r3, r2
 800789e:	d901      	bls.n	80078a4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80078a0:	2303      	movs	r3, #3
 80078a2:	e10c      	b.n	8007abe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80078a4:	4b63      	ldr	r3, [pc, #396]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 80078a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078a8:	f003 0302 	and.w	r3, r3, #2
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1ee      	bne.n	800788e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f000 8101 	beq.w	8007abc <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80078ba:	4b5e      	ldr	r3, [pc, #376]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078c2:	2b18      	cmp	r3, #24
 80078c4:	f000 80bc 	beq.w	8007a40 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	f040 8095 	bne.w	80079fc <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078d2:	4b58      	ldr	r3, [pc, #352]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a57      	ldr	r2, [pc, #348]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 80078d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078de:	f7fc fcc3 	bl	8004268 <HAL_GetTick>
 80078e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80078e4:	e008      	b.n	80078f8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078e6:	f7fc fcbf 	bl	8004268 <HAL_GetTick>
 80078ea:	4602      	mov	r2, r0
 80078ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d901      	bls.n	80078f8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80078f4:	2303      	movs	r3, #3
 80078f6:	e0e2      	b.n	8007abe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80078f8:	4b4e      	ldr	r3, [pc, #312]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007900:	2b00      	cmp	r3, #0
 8007902:	d1f0      	bne.n	80078e6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007904:	4b4b      	ldr	r3, [pc, #300]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 8007906:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007908:	4b4b      	ldr	r3, [pc, #300]	; (8007a38 <HAL_RCC_OscConfig+0x78c>)
 800790a:	4013      	ands	r3, r2
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007914:	0112      	lsls	r2, r2, #4
 8007916:	430a      	orrs	r2, r1
 8007918:	4946      	ldr	r1, [pc, #280]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 800791a:	4313      	orrs	r3, r2
 800791c:	628b      	str	r3, [r1, #40]	; 0x28
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007922:	3b01      	subs	r3, #1
 8007924:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800792c:	3b01      	subs	r3, #1
 800792e:	025b      	lsls	r3, r3, #9
 8007930:	b29b      	uxth	r3, r3
 8007932:	431a      	orrs	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007938:	3b01      	subs	r3, #1
 800793a:	041b      	lsls	r3, r3, #16
 800793c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007940:	431a      	orrs	r2, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007946:	3b01      	subs	r3, #1
 8007948:	061b      	lsls	r3, r3, #24
 800794a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800794e:	4939      	ldr	r1, [pc, #228]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 8007950:	4313      	orrs	r3, r2
 8007952:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007954:	4b37      	ldr	r3, [pc, #220]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 8007956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007958:	4a36      	ldr	r2, [pc, #216]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 800795a:	f023 0301 	bic.w	r3, r3, #1
 800795e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007960:	4b34      	ldr	r3, [pc, #208]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 8007962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007964:	4b35      	ldr	r3, [pc, #212]	; (8007a3c <HAL_RCC_OscConfig+0x790>)
 8007966:	4013      	ands	r3, r2
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800796c:	00d2      	lsls	r2, r2, #3
 800796e:	4931      	ldr	r1, [pc, #196]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 8007970:	4313      	orrs	r3, r2
 8007972:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007974:	4b2f      	ldr	r3, [pc, #188]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 8007976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007978:	f023 020c 	bic.w	r2, r3, #12
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007980:	492c      	ldr	r1, [pc, #176]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 8007982:	4313      	orrs	r3, r2
 8007984:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007986:	4b2b      	ldr	r3, [pc, #172]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 8007988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798a:	f023 0202 	bic.w	r2, r3, #2
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007992:	4928      	ldr	r1, [pc, #160]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 8007994:	4313      	orrs	r3, r2
 8007996:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007998:	4b26      	ldr	r3, [pc, #152]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 800799a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799c:	4a25      	ldr	r2, [pc, #148]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 800799e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079a4:	4b23      	ldr	r3, [pc, #140]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 80079a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a8:	4a22      	ldr	r2, [pc, #136]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 80079aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80079b0:	4b20      	ldr	r3, [pc, #128]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 80079b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b4:	4a1f      	ldr	r2, [pc, #124]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 80079b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80079ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80079bc:	4b1d      	ldr	r3, [pc, #116]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 80079be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c0:	4a1c      	ldr	r2, [pc, #112]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 80079c2:	f043 0301 	orr.w	r3, r3, #1
 80079c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80079c8:	4b1a      	ldr	r3, [pc, #104]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a19      	ldr	r2, [pc, #100]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 80079ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80079d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079d4:	f7fc fc48 	bl	8004268 <HAL_GetTick>
 80079d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80079da:	e008      	b.n	80079ee <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079dc:	f7fc fc44 	bl	8004268 <HAL_GetTick>
 80079e0:	4602      	mov	r2, r0
 80079e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e4:	1ad3      	subs	r3, r2, r3
 80079e6:	2b02      	cmp	r3, #2
 80079e8:	d901      	bls.n	80079ee <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80079ea:	2303      	movs	r3, #3
 80079ec:	e067      	b.n	8007abe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80079ee:	4b11      	ldr	r3, [pc, #68]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d0f0      	beq.n	80079dc <HAL_RCC_OscConfig+0x730>
 80079fa:	e05f      	b.n	8007abc <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079fc:	4b0d      	ldr	r3, [pc, #52]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a0c      	ldr	r2, [pc, #48]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 8007a02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a08:	f7fc fc2e 	bl	8004268 <HAL_GetTick>
 8007a0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a0e:	e008      	b.n	8007a22 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a10:	f7fc fc2a 	bl	8004268 <HAL_GetTick>
 8007a14:	4602      	mov	r2, r0
 8007a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a18:	1ad3      	subs	r3, r2, r3
 8007a1a:	2b02      	cmp	r3, #2
 8007a1c:	d901      	bls.n	8007a22 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8007a1e:	2303      	movs	r3, #3
 8007a20:	e04d      	b.n	8007abe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a22:	4b04      	ldr	r3, [pc, #16]	; (8007a34 <HAL_RCC_OscConfig+0x788>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d1f0      	bne.n	8007a10 <HAL_RCC_OscConfig+0x764>
 8007a2e:	e045      	b.n	8007abc <HAL_RCC_OscConfig+0x810>
 8007a30:	58024800 	.word	0x58024800
 8007a34:	58024400 	.word	0x58024400
 8007a38:	fffffc0c 	.word	0xfffffc0c
 8007a3c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007a40:	4b21      	ldr	r3, [pc, #132]	; (8007ac8 <HAL_RCC_OscConfig+0x81c>)
 8007a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a44:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007a46:	4b20      	ldr	r3, [pc, #128]	; (8007ac8 <HAL_RCC_OscConfig+0x81c>)
 8007a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a4a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d031      	beq.n	8007ab8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	f003 0203 	and.w	r2, r3, #3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d12a      	bne.n	8007ab8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	091b      	lsrs	r3, r3, #4
 8007a66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d122      	bne.n	8007ab8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a7c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d11a      	bne.n	8007ab8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	0a5b      	lsrs	r3, r3, #9
 8007a86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a8e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d111      	bne.n	8007ab8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	0c1b      	lsrs	r3, r3, #16
 8007a98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d108      	bne.n	8007ab8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	0e1b      	lsrs	r3, r3, #24
 8007aaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ab2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d001      	beq.n	8007abc <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e000      	b.n	8007abe <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3730      	adds	r7, #48	; 0x30
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	58024400 	.word	0x58024400

08007acc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b086      	sub	sp, #24
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d101      	bne.n	8007ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	e19c      	b.n	8007e1a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007ae0:	4b8a      	ldr	r3, [pc, #552]	; (8007d0c <HAL_RCC_ClockConfig+0x240>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 030f 	and.w	r3, r3, #15
 8007ae8:	683a      	ldr	r2, [r7, #0]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d910      	bls.n	8007b10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007aee:	4b87      	ldr	r3, [pc, #540]	; (8007d0c <HAL_RCC_ClockConfig+0x240>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f023 020f 	bic.w	r2, r3, #15
 8007af6:	4985      	ldr	r1, [pc, #532]	; (8007d0c <HAL_RCC_ClockConfig+0x240>)
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007afe:	4b83      	ldr	r3, [pc, #524]	; (8007d0c <HAL_RCC_ClockConfig+0x240>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 030f 	and.w	r3, r3, #15
 8007b06:	683a      	ldr	r2, [r7, #0]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d001      	beq.n	8007b10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e184      	b.n	8007e1a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 0304 	and.w	r3, r3, #4
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d010      	beq.n	8007b3e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	691a      	ldr	r2, [r3, #16]
 8007b20:	4b7b      	ldr	r3, [pc, #492]	; (8007d10 <HAL_RCC_ClockConfig+0x244>)
 8007b22:	699b      	ldr	r3, [r3, #24]
 8007b24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d908      	bls.n	8007b3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007b2c:	4b78      	ldr	r3, [pc, #480]	; (8007d10 <HAL_RCC_ClockConfig+0x244>)
 8007b2e:	699b      	ldr	r3, [r3, #24]
 8007b30:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	4975      	ldr	r1, [pc, #468]	; (8007d10 <HAL_RCC_ClockConfig+0x244>)
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f003 0308 	and.w	r3, r3, #8
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d010      	beq.n	8007b6c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	695a      	ldr	r2, [r3, #20]
 8007b4e:	4b70      	ldr	r3, [pc, #448]	; (8007d10 <HAL_RCC_ClockConfig+0x244>)
 8007b50:	69db      	ldr	r3, [r3, #28]
 8007b52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d908      	bls.n	8007b6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007b5a:	4b6d      	ldr	r3, [pc, #436]	; (8007d10 <HAL_RCC_ClockConfig+0x244>)
 8007b5c:	69db      	ldr	r3, [r3, #28]
 8007b5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	695b      	ldr	r3, [r3, #20]
 8007b66:	496a      	ldr	r1, [pc, #424]	; (8007d10 <HAL_RCC_ClockConfig+0x244>)
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f003 0310 	and.w	r3, r3, #16
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d010      	beq.n	8007b9a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	699a      	ldr	r2, [r3, #24]
 8007b7c:	4b64      	ldr	r3, [pc, #400]	; (8007d10 <HAL_RCC_ClockConfig+0x244>)
 8007b7e:	69db      	ldr	r3, [r3, #28]
 8007b80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d908      	bls.n	8007b9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007b88:	4b61      	ldr	r3, [pc, #388]	; (8007d10 <HAL_RCC_ClockConfig+0x244>)
 8007b8a:	69db      	ldr	r3, [r3, #28]
 8007b8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	699b      	ldr	r3, [r3, #24]
 8007b94:	495e      	ldr	r1, [pc, #376]	; (8007d10 <HAL_RCC_ClockConfig+0x244>)
 8007b96:	4313      	orrs	r3, r2
 8007b98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f003 0320 	and.w	r3, r3, #32
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d010      	beq.n	8007bc8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	69da      	ldr	r2, [r3, #28]
 8007baa:	4b59      	ldr	r3, [pc, #356]	; (8007d10 <HAL_RCC_ClockConfig+0x244>)
 8007bac:	6a1b      	ldr	r3, [r3, #32]
 8007bae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d908      	bls.n	8007bc8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007bb6:	4b56      	ldr	r3, [pc, #344]	; (8007d10 <HAL_RCC_ClockConfig+0x244>)
 8007bb8:	6a1b      	ldr	r3, [r3, #32]
 8007bba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	69db      	ldr	r3, [r3, #28]
 8007bc2:	4953      	ldr	r1, [pc, #332]	; (8007d10 <HAL_RCC_ClockConfig+0x244>)
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f003 0302 	and.w	r3, r3, #2
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d010      	beq.n	8007bf6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	68da      	ldr	r2, [r3, #12]
 8007bd8:	4b4d      	ldr	r3, [pc, #308]	; (8007d10 <HAL_RCC_ClockConfig+0x244>)
 8007bda:	699b      	ldr	r3, [r3, #24]
 8007bdc:	f003 030f 	and.w	r3, r3, #15
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d908      	bls.n	8007bf6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007be4:	4b4a      	ldr	r3, [pc, #296]	; (8007d10 <HAL_RCC_ClockConfig+0x244>)
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	f023 020f 	bic.w	r2, r3, #15
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	4947      	ldr	r1, [pc, #284]	; (8007d10 <HAL_RCC_ClockConfig+0x244>)
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 0301 	and.w	r3, r3, #1
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d055      	beq.n	8007cae <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007c02:	4b43      	ldr	r3, [pc, #268]	; (8007d10 <HAL_RCC_ClockConfig+0x244>)
 8007c04:	699b      	ldr	r3, [r3, #24]
 8007c06:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	4940      	ldr	r1, [pc, #256]	; (8007d10 <HAL_RCC_ClockConfig+0x244>)
 8007c10:	4313      	orrs	r3, r2
 8007c12:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	2b02      	cmp	r3, #2
 8007c1a:	d107      	bne.n	8007c2c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007c1c:	4b3c      	ldr	r3, [pc, #240]	; (8007d10 <HAL_RCC_ClockConfig+0x244>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d121      	bne.n	8007c6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e0f6      	b.n	8007e1a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	2b03      	cmp	r3, #3
 8007c32:	d107      	bne.n	8007c44 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007c34:	4b36      	ldr	r3, [pc, #216]	; (8007d10 <HAL_RCC_ClockConfig+0x244>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d115      	bne.n	8007c6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	e0ea      	b.n	8007e1a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d107      	bne.n	8007c5c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007c4c:	4b30      	ldr	r3, [pc, #192]	; (8007d10 <HAL_RCC_ClockConfig+0x244>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d109      	bne.n	8007c6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e0de      	b.n	8007e1a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c5c:	4b2c      	ldr	r3, [pc, #176]	; (8007d10 <HAL_RCC_ClockConfig+0x244>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 0304 	and.w	r3, r3, #4
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d101      	bne.n	8007c6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e0d6      	b.n	8007e1a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007c6c:	4b28      	ldr	r3, [pc, #160]	; (8007d10 <HAL_RCC_ClockConfig+0x244>)
 8007c6e:	691b      	ldr	r3, [r3, #16]
 8007c70:	f023 0207 	bic.w	r2, r3, #7
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	4925      	ldr	r1, [pc, #148]	; (8007d10 <HAL_RCC_ClockConfig+0x244>)
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c7e:	f7fc faf3 	bl	8004268 <HAL_GetTick>
 8007c82:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c84:	e00a      	b.n	8007c9c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c86:	f7fc faef 	bl	8004268 <HAL_GetTick>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	1ad3      	subs	r3, r2, r3
 8007c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d901      	bls.n	8007c9c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007c98:	2303      	movs	r3, #3
 8007c9a:	e0be      	b.n	8007e1a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c9c:	4b1c      	ldr	r3, [pc, #112]	; (8007d10 <HAL_RCC_ClockConfig+0x244>)
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	00db      	lsls	r3, r3, #3
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d1eb      	bne.n	8007c86 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 0302 	and.w	r3, r3, #2
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d010      	beq.n	8007cdc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	68da      	ldr	r2, [r3, #12]
 8007cbe:	4b14      	ldr	r3, [pc, #80]	; (8007d10 <HAL_RCC_ClockConfig+0x244>)
 8007cc0:	699b      	ldr	r3, [r3, #24]
 8007cc2:	f003 030f 	and.w	r3, r3, #15
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d208      	bcs.n	8007cdc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007cca:	4b11      	ldr	r3, [pc, #68]	; (8007d10 <HAL_RCC_ClockConfig+0x244>)
 8007ccc:	699b      	ldr	r3, [r3, #24]
 8007cce:	f023 020f 	bic.w	r2, r3, #15
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	490e      	ldr	r1, [pc, #56]	; (8007d10 <HAL_RCC_ClockConfig+0x244>)
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007cdc:	4b0b      	ldr	r3, [pc, #44]	; (8007d0c <HAL_RCC_ClockConfig+0x240>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 030f 	and.w	r3, r3, #15
 8007ce4:	683a      	ldr	r2, [r7, #0]
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d214      	bcs.n	8007d14 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cea:	4b08      	ldr	r3, [pc, #32]	; (8007d0c <HAL_RCC_ClockConfig+0x240>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f023 020f 	bic.w	r2, r3, #15
 8007cf2:	4906      	ldr	r1, [pc, #24]	; (8007d0c <HAL_RCC_ClockConfig+0x240>)
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cfa:	4b04      	ldr	r3, [pc, #16]	; (8007d0c <HAL_RCC_ClockConfig+0x240>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 030f 	and.w	r3, r3, #15
 8007d02:	683a      	ldr	r2, [r7, #0]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d005      	beq.n	8007d14 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e086      	b.n	8007e1a <HAL_RCC_ClockConfig+0x34e>
 8007d0c:	52002000 	.word	0x52002000
 8007d10:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 0304 	and.w	r3, r3, #4
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d010      	beq.n	8007d42 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	691a      	ldr	r2, [r3, #16]
 8007d24:	4b3f      	ldr	r3, [pc, #252]	; (8007e24 <HAL_RCC_ClockConfig+0x358>)
 8007d26:	699b      	ldr	r3, [r3, #24]
 8007d28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d208      	bcs.n	8007d42 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007d30:	4b3c      	ldr	r3, [pc, #240]	; (8007e24 <HAL_RCC_ClockConfig+0x358>)
 8007d32:	699b      	ldr	r3, [r3, #24]
 8007d34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	691b      	ldr	r3, [r3, #16]
 8007d3c:	4939      	ldr	r1, [pc, #228]	; (8007e24 <HAL_RCC_ClockConfig+0x358>)
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f003 0308 	and.w	r3, r3, #8
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d010      	beq.n	8007d70 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	695a      	ldr	r2, [r3, #20]
 8007d52:	4b34      	ldr	r3, [pc, #208]	; (8007e24 <HAL_RCC_ClockConfig+0x358>)
 8007d54:	69db      	ldr	r3, [r3, #28]
 8007d56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d208      	bcs.n	8007d70 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007d5e:	4b31      	ldr	r3, [pc, #196]	; (8007e24 <HAL_RCC_ClockConfig+0x358>)
 8007d60:	69db      	ldr	r3, [r3, #28]
 8007d62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	695b      	ldr	r3, [r3, #20]
 8007d6a:	492e      	ldr	r1, [pc, #184]	; (8007e24 <HAL_RCC_ClockConfig+0x358>)
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 0310 	and.w	r3, r3, #16
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d010      	beq.n	8007d9e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	699a      	ldr	r2, [r3, #24]
 8007d80:	4b28      	ldr	r3, [pc, #160]	; (8007e24 <HAL_RCC_ClockConfig+0x358>)
 8007d82:	69db      	ldr	r3, [r3, #28]
 8007d84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d208      	bcs.n	8007d9e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007d8c:	4b25      	ldr	r3, [pc, #148]	; (8007e24 <HAL_RCC_ClockConfig+0x358>)
 8007d8e:	69db      	ldr	r3, [r3, #28]
 8007d90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	699b      	ldr	r3, [r3, #24]
 8007d98:	4922      	ldr	r1, [pc, #136]	; (8007e24 <HAL_RCC_ClockConfig+0x358>)
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 0320 	and.w	r3, r3, #32
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d010      	beq.n	8007dcc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	69da      	ldr	r2, [r3, #28]
 8007dae:	4b1d      	ldr	r3, [pc, #116]	; (8007e24 <HAL_RCC_ClockConfig+0x358>)
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d208      	bcs.n	8007dcc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007dba:	4b1a      	ldr	r3, [pc, #104]	; (8007e24 <HAL_RCC_ClockConfig+0x358>)
 8007dbc:	6a1b      	ldr	r3, [r3, #32]
 8007dbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	69db      	ldr	r3, [r3, #28]
 8007dc6:	4917      	ldr	r1, [pc, #92]	; (8007e24 <HAL_RCC_ClockConfig+0x358>)
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007dcc:	f000 f834 	bl	8007e38 <HAL_RCC_GetSysClockFreq>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	4b14      	ldr	r3, [pc, #80]	; (8007e24 <HAL_RCC_ClockConfig+0x358>)
 8007dd4:	699b      	ldr	r3, [r3, #24]
 8007dd6:	0a1b      	lsrs	r3, r3, #8
 8007dd8:	f003 030f 	and.w	r3, r3, #15
 8007ddc:	4912      	ldr	r1, [pc, #72]	; (8007e28 <HAL_RCC_ClockConfig+0x35c>)
 8007dde:	5ccb      	ldrb	r3, [r1, r3]
 8007de0:	f003 031f 	and.w	r3, r3, #31
 8007de4:	fa22 f303 	lsr.w	r3, r2, r3
 8007de8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007dea:	4b0e      	ldr	r3, [pc, #56]	; (8007e24 <HAL_RCC_ClockConfig+0x358>)
 8007dec:	699b      	ldr	r3, [r3, #24]
 8007dee:	f003 030f 	and.w	r3, r3, #15
 8007df2:	4a0d      	ldr	r2, [pc, #52]	; (8007e28 <HAL_RCC_ClockConfig+0x35c>)
 8007df4:	5cd3      	ldrb	r3, [r2, r3]
 8007df6:	f003 031f 	and.w	r3, r3, #31
 8007dfa:	693a      	ldr	r2, [r7, #16]
 8007dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8007e00:	4a0a      	ldr	r2, [pc, #40]	; (8007e2c <HAL_RCC_ClockConfig+0x360>)
 8007e02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007e04:	4a0a      	ldr	r2, [pc, #40]	; (8007e30 <HAL_RCC_ClockConfig+0x364>)
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007e0a:	4b0a      	ldr	r3, [pc, #40]	; (8007e34 <HAL_RCC_ClockConfig+0x368>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7fc f9e0 	bl	80041d4 <HAL_InitTick>
 8007e14:	4603      	mov	r3, r0
 8007e16:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3718      	adds	r7, #24
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	58024400 	.word	0x58024400
 8007e28:	08012374 	.word	0x08012374
 8007e2c:	24000004 	.word	0x24000004
 8007e30:	24000000 	.word	0x24000000
 8007e34:	24000008 	.word	0x24000008

08007e38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b089      	sub	sp, #36	; 0x24
 8007e3c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e3e:	4bb3      	ldr	r3, [pc, #716]	; (800810c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e46:	2b18      	cmp	r3, #24
 8007e48:	f200 8155 	bhi.w	80080f6 <HAL_RCC_GetSysClockFreq+0x2be>
 8007e4c:	a201      	add	r2, pc, #4	; (adr r2, 8007e54 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e52:	bf00      	nop
 8007e54:	08007eb9 	.word	0x08007eb9
 8007e58:	080080f7 	.word	0x080080f7
 8007e5c:	080080f7 	.word	0x080080f7
 8007e60:	080080f7 	.word	0x080080f7
 8007e64:	080080f7 	.word	0x080080f7
 8007e68:	080080f7 	.word	0x080080f7
 8007e6c:	080080f7 	.word	0x080080f7
 8007e70:	080080f7 	.word	0x080080f7
 8007e74:	08007edf 	.word	0x08007edf
 8007e78:	080080f7 	.word	0x080080f7
 8007e7c:	080080f7 	.word	0x080080f7
 8007e80:	080080f7 	.word	0x080080f7
 8007e84:	080080f7 	.word	0x080080f7
 8007e88:	080080f7 	.word	0x080080f7
 8007e8c:	080080f7 	.word	0x080080f7
 8007e90:	080080f7 	.word	0x080080f7
 8007e94:	08007ee5 	.word	0x08007ee5
 8007e98:	080080f7 	.word	0x080080f7
 8007e9c:	080080f7 	.word	0x080080f7
 8007ea0:	080080f7 	.word	0x080080f7
 8007ea4:	080080f7 	.word	0x080080f7
 8007ea8:	080080f7 	.word	0x080080f7
 8007eac:	080080f7 	.word	0x080080f7
 8007eb0:	080080f7 	.word	0x080080f7
 8007eb4:	08007eeb 	.word	0x08007eeb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007eb8:	4b94      	ldr	r3, [pc, #592]	; (800810c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 0320 	and.w	r3, r3, #32
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d009      	beq.n	8007ed8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ec4:	4b91      	ldr	r3, [pc, #580]	; (800810c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	08db      	lsrs	r3, r3, #3
 8007eca:	f003 0303 	and.w	r3, r3, #3
 8007ece:	4a90      	ldr	r2, [pc, #576]	; (8008110 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ed4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007ed6:	e111      	b.n	80080fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007ed8:	4b8d      	ldr	r3, [pc, #564]	; (8008110 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007eda:	61bb      	str	r3, [r7, #24]
    break;
 8007edc:	e10e      	b.n	80080fc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007ede:	4b8d      	ldr	r3, [pc, #564]	; (8008114 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007ee0:	61bb      	str	r3, [r7, #24]
    break;
 8007ee2:	e10b      	b.n	80080fc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007ee4:	4b8c      	ldr	r3, [pc, #560]	; (8008118 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007ee6:	61bb      	str	r3, [r7, #24]
    break;
 8007ee8:	e108      	b.n	80080fc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007eea:	4b88      	ldr	r3, [pc, #544]	; (800810c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eee:	f003 0303 	and.w	r3, r3, #3
 8007ef2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007ef4:	4b85      	ldr	r3, [pc, #532]	; (800810c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef8:	091b      	lsrs	r3, r3, #4
 8007efa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007efe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007f00:	4b82      	ldr	r3, [pc, #520]	; (800810c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f04:	f003 0301 	and.w	r3, r3, #1
 8007f08:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007f0a:	4b80      	ldr	r3, [pc, #512]	; (800810c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f0e:	08db      	lsrs	r3, r3, #3
 8007f10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f14:	68fa      	ldr	r2, [r7, #12]
 8007f16:	fb02 f303 	mul.w	r3, r2, r3
 8007f1a:	ee07 3a90 	vmov	s15, r3
 8007f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f22:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f000 80e1 	beq.w	80080f0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	f000 8083 	beq.w	800803c <HAL_RCC_GetSysClockFreq+0x204>
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	f200 80a1 	bhi.w	8008080 <HAL_RCC_GetSysClockFreq+0x248>
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d003      	beq.n	8007f4c <HAL_RCC_GetSysClockFreq+0x114>
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d056      	beq.n	8007ff8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007f4a:	e099      	b.n	8008080 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f4c:	4b6f      	ldr	r3, [pc, #444]	; (800810c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 0320 	and.w	r3, r3, #32
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d02d      	beq.n	8007fb4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007f58:	4b6c      	ldr	r3, [pc, #432]	; (800810c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	08db      	lsrs	r3, r3, #3
 8007f5e:	f003 0303 	and.w	r3, r3, #3
 8007f62:	4a6b      	ldr	r2, [pc, #428]	; (8008110 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007f64:	fa22 f303 	lsr.w	r3, r2, r3
 8007f68:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	ee07 3a90 	vmov	s15, r3
 8007f70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	ee07 3a90 	vmov	s15, r3
 8007f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f82:	4b62      	ldr	r3, [pc, #392]	; (800810c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f8a:	ee07 3a90 	vmov	s15, r3
 8007f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f92:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f96:	eddf 5a61 	vldr	s11, [pc, #388]	; 800811c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007fb2:	e087      	b.n	80080c4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	ee07 3a90 	vmov	s15, r3
 8007fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fbe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008120 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fc6:	4b51      	ldr	r3, [pc, #324]	; (800810c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fce:	ee07 3a90 	vmov	s15, r3
 8007fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007fda:	eddf 5a50 	vldr	s11, [pc, #320]	; 800811c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ff2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ff6:	e065      	b.n	80080c4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	ee07 3a90 	vmov	s15, r3
 8007ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008002:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008124 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800800a:	4b40      	ldr	r3, [pc, #256]	; (800810c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800800c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800800e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008012:	ee07 3a90 	vmov	s15, r3
 8008016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800801a:	ed97 6a02 	vldr	s12, [r7, #8]
 800801e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800811c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800802a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800802e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008036:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800803a:	e043      	b.n	80080c4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	ee07 3a90 	vmov	s15, r3
 8008042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008046:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008128 <HAL_RCC_GetSysClockFreq+0x2f0>
 800804a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800804e:	4b2f      	ldr	r3, [pc, #188]	; (800810c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008056:	ee07 3a90 	vmov	s15, r3
 800805a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800805e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008062:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800811c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800806a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800806e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800807a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800807e:	e021      	b.n	80080c4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	ee07 3a90 	vmov	s15, r3
 8008086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800808a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008124 <HAL_RCC_GetSysClockFreq+0x2ec>
 800808e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008092:	4b1e      	ldr	r3, [pc, #120]	; (800810c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800809a:	ee07 3a90 	vmov	s15, r3
 800809e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80080a6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800811c <HAL_RCC_GetSysClockFreq+0x2e4>
 80080aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080c2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80080c4:	4b11      	ldr	r3, [pc, #68]	; (800810c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c8:	0a5b      	lsrs	r3, r3, #9
 80080ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080ce:	3301      	adds	r3, #1
 80080d0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	ee07 3a90 	vmov	s15, r3
 80080d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80080dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80080e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080e8:	ee17 3a90 	vmov	r3, s15
 80080ec:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80080ee:	e005      	b.n	80080fc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80080f0:	2300      	movs	r3, #0
 80080f2:	61bb      	str	r3, [r7, #24]
    break;
 80080f4:	e002      	b.n	80080fc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80080f6:	4b07      	ldr	r3, [pc, #28]	; (8008114 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80080f8:	61bb      	str	r3, [r7, #24]
    break;
 80080fa:	bf00      	nop
  }

  return sysclockfreq;
 80080fc:	69bb      	ldr	r3, [r7, #24]
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3724      	adds	r7, #36	; 0x24
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	58024400 	.word	0x58024400
 8008110:	03d09000 	.word	0x03d09000
 8008114:	003d0900 	.word	0x003d0900
 8008118:	007a1200 	.word	0x007a1200
 800811c:	46000000 	.word	0x46000000
 8008120:	4c742400 	.word	0x4c742400
 8008124:	4a742400 	.word	0x4a742400
 8008128:	4af42400 	.word	0x4af42400

0800812c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008132:	f7ff fe81 	bl	8007e38 <HAL_RCC_GetSysClockFreq>
 8008136:	4602      	mov	r2, r0
 8008138:	4b10      	ldr	r3, [pc, #64]	; (800817c <HAL_RCC_GetHCLKFreq+0x50>)
 800813a:	699b      	ldr	r3, [r3, #24]
 800813c:	0a1b      	lsrs	r3, r3, #8
 800813e:	f003 030f 	and.w	r3, r3, #15
 8008142:	490f      	ldr	r1, [pc, #60]	; (8008180 <HAL_RCC_GetHCLKFreq+0x54>)
 8008144:	5ccb      	ldrb	r3, [r1, r3]
 8008146:	f003 031f 	and.w	r3, r3, #31
 800814a:	fa22 f303 	lsr.w	r3, r2, r3
 800814e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008150:	4b0a      	ldr	r3, [pc, #40]	; (800817c <HAL_RCC_GetHCLKFreq+0x50>)
 8008152:	699b      	ldr	r3, [r3, #24]
 8008154:	f003 030f 	and.w	r3, r3, #15
 8008158:	4a09      	ldr	r2, [pc, #36]	; (8008180 <HAL_RCC_GetHCLKFreq+0x54>)
 800815a:	5cd3      	ldrb	r3, [r2, r3]
 800815c:	f003 031f 	and.w	r3, r3, #31
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	fa22 f303 	lsr.w	r3, r2, r3
 8008166:	4a07      	ldr	r2, [pc, #28]	; (8008184 <HAL_RCC_GetHCLKFreq+0x58>)
 8008168:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800816a:	4a07      	ldr	r2, [pc, #28]	; (8008188 <HAL_RCC_GetHCLKFreq+0x5c>)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008170:	4b04      	ldr	r3, [pc, #16]	; (8008184 <HAL_RCC_GetHCLKFreq+0x58>)
 8008172:	681b      	ldr	r3, [r3, #0]
}
 8008174:	4618      	mov	r0, r3
 8008176:	3708      	adds	r7, #8
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	58024400 	.word	0x58024400
 8008180:	08012374 	.word	0x08012374
 8008184:	24000004 	.word	0x24000004
 8008188:	24000000 	.word	0x24000000

0800818c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008190:	f7ff ffcc 	bl	800812c <HAL_RCC_GetHCLKFreq>
 8008194:	4602      	mov	r2, r0
 8008196:	4b06      	ldr	r3, [pc, #24]	; (80081b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008198:	69db      	ldr	r3, [r3, #28]
 800819a:	091b      	lsrs	r3, r3, #4
 800819c:	f003 0307 	and.w	r3, r3, #7
 80081a0:	4904      	ldr	r1, [pc, #16]	; (80081b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80081a2:	5ccb      	ldrb	r3, [r1, r3]
 80081a4:	f003 031f 	and.w	r3, r3, #31
 80081a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	58024400 	.word	0x58024400
 80081b4:	08012374 	.word	0x08012374

080081b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80081bc:	f7ff ffb6 	bl	800812c <HAL_RCC_GetHCLKFreq>
 80081c0:	4602      	mov	r2, r0
 80081c2:	4b06      	ldr	r3, [pc, #24]	; (80081dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80081c4:	69db      	ldr	r3, [r3, #28]
 80081c6:	0a1b      	lsrs	r3, r3, #8
 80081c8:	f003 0307 	and.w	r3, r3, #7
 80081cc:	4904      	ldr	r1, [pc, #16]	; (80081e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80081ce:	5ccb      	ldrb	r3, [r1, r3]
 80081d0:	f003 031f 	and.w	r3, r3, #31
 80081d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80081d8:	4618      	mov	r0, r3
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	58024400 	.word	0x58024400
 80081e0:	08012374 	.word	0x08012374

080081e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b086      	sub	sp, #24
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80081ec:	2300      	movs	r3, #0
 80081ee:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80081f0:	2300      	movs	r3, #0
 80081f2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d03f      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008204:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008208:	d02a      	beq.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800820a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800820e:	d824      	bhi.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008210:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008214:	d018      	beq.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008216:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800821a:	d81e      	bhi.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800821c:	2b00      	cmp	r3, #0
 800821e:	d003      	beq.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008220:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008224:	d007      	beq.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008226:	e018      	b.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008228:	4bab      	ldr	r3, [pc, #684]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800822a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800822c:	4aaa      	ldr	r2, [pc, #680]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800822e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008232:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008234:	e015      	b.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	3304      	adds	r3, #4
 800823a:	2102      	movs	r1, #2
 800823c:	4618      	mov	r0, r3
 800823e:	f001 f9cf 	bl	80095e0 <RCCEx_PLL2_Config>
 8008242:	4603      	mov	r3, r0
 8008244:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008246:	e00c      	b.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	3324      	adds	r3, #36	; 0x24
 800824c:	2102      	movs	r1, #2
 800824e:	4618      	mov	r0, r3
 8008250:	f001 fa78 	bl	8009744 <RCCEx_PLL3_Config>
 8008254:	4603      	mov	r3, r0
 8008256:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008258:	e003      	b.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	75fb      	strb	r3, [r7, #23]
      break;
 800825e:	e000      	b.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008260:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008262:	7dfb      	ldrb	r3, [r7, #23]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d109      	bne.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008268:	4b9b      	ldr	r3, [pc, #620]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800826a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800826c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008274:	4998      	ldr	r1, [pc, #608]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008276:	4313      	orrs	r3, r2
 8008278:	650b      	str	r3, [r1, #80]	; 0x50
 800827a:	e001      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800827c:	7dfb      	ldrb	r3, [r7, #23]
 800827e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008288:	2b00      	cmp	r3, #0
 800828a:	d03d      	beq.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008290:	2b04      	cmp	r3, #4
 8008292:	d826      	bhi.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008294:	a201      	add	r2, pc, #4	; (adr r2, 800829c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800829a:	bf00      	nop
 800829c:	080082b1 	.word	0x080082b1
 80082a0:	080082bf 	.word	0x080082bf
 80082a4:	080082d1 	.word	0x080082d1
 80082a8:	080082e9 	.word	0x080082e9
 80082ac:	080082e9 	.word	0x080082e9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082b0:	4b89      	ldr	r3, [pc, #548]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80082b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b4:	4a88      	ldr	r2, [pc, #544]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80082b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80082bc:	e015      	b.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	3304      	adds	r3, #4
 80082c2:	2100      	movs	r1, #0
 80082c4:	4618      	mov	r0, r3
 80082c6:	f001 f98b 	bl	80095e0 <RCCEx_PLL2_Config>
 80082ca:	4603      	mov	r3, r0
 80082cc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80082ce:	e00c      	b.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	3324      	adds	r3, #36	; 0x24
 80082d4:	2100      	movs	r1, #0
 80082d6:	4618      	mov	r0, r3
 80082d8:	f001 fa34 	bl	8009744 <RCCEx_PLL3_Config>
 80082dc:	4603      	mov	r3, r0
 80082de:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80082e0:	e003      	b.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	75fb      	strb	r3, [r7, #23]
      break;
 80082e6:	e000      	b.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80082e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082ea:	7dfb      	ldrb	r3, [r7, #23]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d109      	bne.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80082f0:	4b79      	ldr	r3, [pc, #484]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80082f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082f4:	f023 0207 	bic.w	r2, r3, #7
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082fc:	4976      	ldr	r1, [pc, #472]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80082fe:	4313      	orrs	r3, r2
 8008300:	650b      	str	r3, [r1, #80]	; 0x50
 8008302:	e001      	b.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008304:	7dfb      	ldrb	r3, [r7, #23]
 8008306:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008310:	2b00      	cmp	r3, #0
 8008312:	d042      	beq.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800831c:	d02b      	beq.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800831e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008322:	d825      	bhi.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008324:	2bc0      	cmp	r3, #192	; 0xc0
 8008326:	d028      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008328:	2bc0      	cmp	r3, #192	; 0xc0
 800832a:	d821      	bhi.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800832c:	2b80      	cmp	r3, #128	; 0x80
 800832e:	d016      	beq.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008330:	2b80      	cmp	r3, #128	; 0x80
 8008332:	d81d      	bhi.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008334:	2b00      	cmp	r3, #0
 8008336:	d002      	beq.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008338:	2b40      	cmp	r3, #64	; 0x40
 800833a:	d007      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800833c:	e018      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800833e:	4b66      	ldr	r3, [pc, #408]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008342:	4a65      	ldr	r2, [pc, #404]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008348:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800834a:	e017      	b.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	3304      	adds	r3, #4
 8008350:	2100      	movs	r1, #0
 8008352:	4618      	mov	r0, r3
 8008354:	f001 f944 	bl	80095e0 <RCCEx_PLL2_Config>
 8008358:	4603      	mov	r3, r0
 800835a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800835c:	e00e      	b.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	3324      	adds	r3, #36	; 0x24
 8008362:	2100      	movs	r1, #0
 8008364:	4618      	mov	r0, r3
 8008366:	f001 f9ed 	bl	8009744 <RCCEx_PLL3_Config>
 800836a:	4603      	mov	r3, r0
 800836c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800836e:	e005      	b.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	75fb      	strb	r3, [r7, #23]
      break;
 8008374:	e002      	b.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008376:	bf00      	nop
 8008378:	e000      	b.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800837a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800837c:	7dfb      	ldrb	r3, [r7, #23]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d109      	bne.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008382:	4b55      	ldr	r3, [pc, #340]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008386:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800838e:	4952      	ldr	r1, [pc, #328]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008390:	4313      	orrs	r3, r2
 8008392:	650b      	str	r3, [r1, #80]	; 0x50
 8008394:	e001      	b.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008396:	7dfb      	ldrb	r3, [r7, #23]
 8008398:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d049      	beq.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80083ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083b0:	d030      	beq.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80083b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083b6:	d82a      	bhi.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80083b8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80083bc:	d02c      	beq.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80083be:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80083c2:	d824      	bhi.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80083c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083c8:	d018      	beq.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x218>
 80083ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083ce:	d81e      	bhi.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d003      	beq.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80083d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083d8:	d007      	beq.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x206>
 80083da:	e018      	b.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083dc:	4b3e      	ldr	r3, [pc, #248]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e0:	4a3d      	ldr	r2, [pc, #244]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80083e8:	e017      	b.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	3304      	adds	r3, #4
 80083ee:	2100      	movs	r1, #0
 80083f0:	4618      	mov	r0, r3
 80083f2:	f001 f8f5 	bl	80095e0 <RCCEx_PLL2_Config>
 80083f6:	4603      	mov	r3, r0
 80083f8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80083fa:	e00e      	b.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	3324      	adds	r3, #36	; 0x24
 8008400:	2100      	movs	r1, #0
 8008402:	4618      	mov	r0, r3
 8008404:	f001 f99e 	bl	8009744 <RCCEx_PLL3_Config>
 8008408:	4603      	mov	r3, r0
 800840a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800840c:	e005      	b.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	75fb      	strb	r3, [r7, #23]
      break;
 8008412:	e002      	b.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008414:	bf00      	nop
 8008416:	e000      	b.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008418:	bf00      	nop
    }

    if(ret == HAL_OK)
 800841a:	7dfb      	ldrb	r3, [r7, #23]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d10a      	bne.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008420:	4b2d      	ldr	r3, [pc, #180]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008424:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800842e:	492a      	ldr	r1, [pc, #168]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008430:	4313      	orrs	r3, r2
 8008432:	658b      	str	r3, [r1, #88]	; 0x58
 8008434:	e001      	b.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008436:	7dfb      	ldrb	r3, [r7, #23]
 8008438:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008442:	2b00      	cmp	r3, #0
 8008444:	d04c      	beq.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800844c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008450:	d030      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008452:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008456:	d82a      	bhi.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008458:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800845c:	d02c      	beq.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800845e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008462:	d824      	bhi.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008464:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008468:	d018      	beq.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800846a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800846e:	d81e      	bhi.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008470:	2b00      	cmp	r3, #0
 8008472:	d003      	beq.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008474:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008478:	d007      	beq.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800847a:	e018      	b.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800847c:	4b16      	ldr	r3, [pc, #88]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800847e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008480:	4a15      	ldr	r2, [pc, #84]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008486:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008488:	e017      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	3304      	adds	r3, #4
 800848e:	2100      	movs	r1, #0
 8008490:	4618      	mov	r0, r3
 8008492:	f001 f8a5 	bl	80095e0 <RCCEx_PLL2_Config>
 8008496:	4603      	mov	r3, r0
 8008498:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800849a:	e00e      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	3324      	adds	r3, #36	; 0x24
 80084a0:	2100      	movs	r1, #0
 80084a2:	4618      	mov	r0, r3
 80084a4:	f001 f94e 	bl	8009744 <RCCEx_PLL3_Config>
 80084a8:	4603      	mov	r3, r0
 80084aa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80084ac:	e005      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	75fb      	strb	r3, [r7, #23]
      break;
 80084b2:	e002      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80084b4:	bf00      	nop
 80084b6:	e000      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80084b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084ba:	7dfb      	ldrb	r3, [r7, #23]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d10d      	bne.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80084c0:	4b05      	ldr	r3, [pc, #20]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084c4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80084ce:	4902      	ldr	r1, [pc, #8]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084d0:	4313      	orrs	r3, r2
 80084d2:	658b      	str	r3, [r1, #88]	; 0x58
 80084d4:	e004      	b.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80084d6:	bf00      	nop
 80084d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084dc:	7dfb      	ldrb	r3, [r7, #23]
 80084de:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d032      	beq.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084f0:	2b30      	cmp	r3, #48	; 0x30
 80084f2:	d01c      	beq.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80084f4:	2b30      	cmp	r3, #48	; 0x30
 80084f6:	d817      	bhi.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80084f8:	2b20      	cmp	r3, #32
 80084fa:	d00c      	beq.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80084fc:	2b20      	cmp	r3, #32
 80084fe:	d813      	bhi.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008500:	2b00      	cmp	r3, #0
 8008502:	d016      	beq.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008504:	2b10      	cmp	r3, #16
 8008506:	d10f      	bne.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008508:	4baf      	ldr	r3, [pc, #700]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800850a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800850c:	4aae      	ldr	r2, [pc, #696]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800850e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008512:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008514:	e00e      	b.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	3304      	adds	r3, #4
 800851a:	2102      	movs	r1, #2
 800851c:	4618      	mov	r0, r3
 800851e:	f001 f85f 	bl	80095e0 <RCCEx_PLL2_Config>
 8008522:	4603      	mov	r3, r0
 8008524:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008526:	e005      	b.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	75fb      	strb	r3, [r7, #23]
      break;
 800852c:	e002      	b.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800852e:	bf00      	nop
 8008530:	e000      	b.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8008532:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008534:	7dfb      	ldrb	r3, [r7, #23]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d109      	bne.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800853a:	4ba3      	ldr	r3, [pc, #652]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800853c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800853e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008546:	49a0      	ldr	r1, [pc, #640]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008548:	4313      	orrs	r3, r2
 800854a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800854c:	e001      	b.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800854e:	7dfb      	ldrb	r3, [r7, #23]
 8008550:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800855a:	2b00      	cmp	r3, #0
 800855c:	d047      	beq.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008562:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008566:	d030      	beq.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8008568:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800856c:	d82a      	bhi.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800856e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008572:	d02c      	beq.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8008574:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008578:	d824      	bhi.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800857a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800857e:	d018      	beq.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8008580:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008584:	d81e      	bhi.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008586:	2b00      	cmp	r3, #0
 8008588:	d003      	beq.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800858a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800858e:	d007      	beq.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008590:	e018      	b.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008592:	4b8d      	ldr	r3, [pc, #564]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008596:	4a8c      	ldr	r2, [pc, #560]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800859c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800859e:	e017      	b.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	3304      	adds	r3, #4
 80085a4:	2100      	movs	r1, #0
 80085a6:	4618      	mov	r0, r3
 80085a8:	f001 f81a 	bl	80095e0 <RCCEx_PLL2_Config>
 80085ac:	4603      	mov	r3, r0
 80085ae:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80085b0:	e00e      	b.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	3324      	adds	r3, #36	; 0x24
 80085b6:	2100      	movs	r1, #0
 80085b8:	4618      	mov	r0, r3
 80085ba:	f001 f8c3 	bl	8009744 <RCCEx_PLL3_Config>
 80085be:	4603      	mov	r3, r0
 80085c0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80085c2:	e005      	b.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	75fb      	strb	r3, [r7, #23]
      break;
 80085c8:	e002      	b.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80085ca:	bf00      	nop
 80085cc:	e000      	b.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80085ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085d0:	7dfb      	ldrb	r3, [r7, #23]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d109      	bne.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80085d6:	4b7c      	ldr	r3, [pc, #496]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80085d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085da:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085e2:	4979      	ldr	r1, [pc, #484]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80085e4:	4313      	orrs	r3, r2
 80085e6:	650b      	str	r3, [r1, #80]	; 0x50
 80085e8:	e001      	b.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085ea:	7dfb      	ldrb	r3, [r7, #23]
 80085ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d049      	beq.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008602:	d02e      	beq.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8008604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008608:	d828      	bhi.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800860a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800860e:	d02a      	beq.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8008610:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008614:	d822      	bhi.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008616:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800861a:	d026      	beq.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800861c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008620:	d81c      	bhi.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008622:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008626:	d010      	beq.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8008628:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800862c:	d816      	bhi.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800862e:	2b00      	cmp	r3, #0
 8008630:	d01d      	beq.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8008632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008636:	d111      	bne.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	3304      	adds	r3, #4
 800863c:	2101      	movs	r1, #1
 800863e:	4618      	mov	r0, r3
 8008640:	f000 ffce 	bl	80095e0 <RCCEx_PLL2_Config>
 8008644:	4603      	mov	r3, r0
 8008646:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008648:	e012      	b.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	3324      	adds	r3, #36	; 0x24
 800864e:	2101      	movs	r1, #1
 8008650:	4618      	mov	r0, r3
 8008652:	f001 f877 	bl	8009744 <RCCEx_PLL3_Config>
 8008656:	4603      	mov	r3, r0
 8008658:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800865a:	e009      	b.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	75fb      	strb	r3, [r7, #23]
      break;
 8008660:	e006      	b.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008662:	bf00      	nop
 8008664:	e004      	b.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008666:	bf00      	nop
 8008668:	e002      	b.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800866a:	bf00      	nop
 800866c:	e000      	b.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800866e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008670:	7dfb      	ldrb	r3, [r7, #23]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d109      	bne.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008676:	4b54      	ldr	r3, [pc, #336]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800867a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008682:	4951      	ldr	r1, [pc, #324]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008684:	4313      	orrs	r3, r2
 8008686:	650b      	str	r3, [r1, #80]	; 0x50
 8008688:	e001      	b.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800868a:	7dfb      	ldrb	r3, [r7, #23]
 800868c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008696:	2b00      	cmp	r3, #0
 8008698:	d04b      	beq.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80086a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086a4:	d02e      	beq.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80086a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086aa:	d828      	bhi.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80086ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086b0:	d02a      	beq.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80086b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086b6:	d822      	bhi.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80086b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80086bc:	d026      	beq.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x528>
 80086be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80086c2:	d81c      	bhi.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80086c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086c8:	d010      	beq.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x508>
 80086ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086ce:	d816      	bhi.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d01d      	beq.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80086d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086d8:	d111      	bne.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	3304      	adds	r3, #4
 80086de:	2101      	movs	r1, #1
 80086e0:	4618      	mov	r0, r3
 80086e2:	f000 ff7d 	bl	80095e0 <RCCEx_PLL2_Config>
 80086e6:	4603      	mov	r3, r0
 80086e8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80086ea:	e012      	b.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	3324      	adds	r3, #36	; 0x24
 80086f0:	2101      	movs	r1, #1
 80086f2:	4618      	mov	r0, r3
 80086f4:	f001 f826 	bl	8009744 <RCCEx_PLL3_Config>
 80086f8:	4603      	mov	r3, r0
 80086fa:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80086fc:	e009      	b.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	75fb      	strb	r3, [r7, #23]
      break;
 8008702:	e006      	b.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008704:	bf00      	nop
 8008706:	e004      	b.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008708:	bf00      	nop
 800870a:	e002      	b.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800870c:	bf00      	nop
 800870e:	e000      	b.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008710:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008712:	7dfb      	ldrb	r3, [r7, #23]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d10a      	bne.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008718:	4b2b      	ldr	r3, [pc, #172]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800871a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800871c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008726:	4928      	ldr	r1, [pc, #160]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008728:	4313      	orrs	r3, r2
 800872a:	658b      	str	r3, [r1, #88]	; 0x58
 800872c:	e001      	b.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800872e:	7dfb      	ldrb	r3, [r7, #23]
 8008730:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800873a:	2b00      	cmp	r3, #0
 800873c:	d02f      	beq.n	800879e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008742:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008746:	d00e      	beq.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8008748:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800874c:	d814      	bhi.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800874e:	2b00      	cmp	r3, #0
 8008750:	d015      	beq.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008752:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008756:	d10f      	bne.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008758:	4b1b      	ldr	r3, [pc, #108]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800875a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875c:	4a1a      	ldr	r2, [pc, #104]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800875e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008762:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008764:	e00c      	b.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	3304      	adds	r3, #4
 800876a:	2101      	movs	r1, #1
 800876c:	4618      	mov	r0, r3
 800876e:	f000 ff37 	bl	80095e0 <RCCEx_PLL2_Config>
 8008772:	4603      	mov	r3, r0
 8008774:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008776:	e003      	b.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008778:	2301      	movs	r3, #1
 800877a:	75fb      	strb	r3, [r7, #23]
      break;
 800877c:	e000      	b.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800877e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008780:	7dfb      	ldrb	r3, [r7, #23]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d109      	bne.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008786:	4b10      	ldr	r3, [pc, #64]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800878a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008792:	490d      	ldr	r1, [pc, #52]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008794:	4313      	orrs	r3, r2
 8008796:	650b      	str	r3, [r1, #80]	; 0x50
 8008798:	e001      	b.n	800879e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800879a:	7dfb      	ldrb	r3, [r7, #23]
 800879c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d033      	beq.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087ae:	2b03      	cmp	r3, #3
 80087b0:	d81c      	bhi.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x608>
 80087b2:	a201      	add	r2, pc, #4	; (adr r2, 80087b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80087b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b8:	080087f3 	.word	0x080087f3
 80087bc:	080087cd 	.word	0x080087cd
 80087c0:	080087db 	.word	0x080087db
 80087c4:	080087f3 	.word	0x080087f3
 80087c8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087cc:	4bb8      	ldr	r3, [pc, #736]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80087ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d0:	4ab7      	ldr	r2, [pc, #732]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80087d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80087d8:	e00c      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	3304      	adds	r3, #4
 80087de:	2102      	movs	r1, #2
 80087e0:	4618      	mov	r0, r3
 80087e2:	f000 fefd 	bl	80095e0 <RCCEx_PLL2_Config>
 80087e6:	4603      	mov	r3, r0
 80087e8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80087ea:	e003      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	75fb      	strb	r3, [r7, #23]
      break;
 80087f0:	e000      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80087f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087f4:	7dfb      	ldrb	r3, [r7, #23]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d109      	bne.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80087fa:	4bad      	ldr	r3, [pc, #692]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80087fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087fe:	f023 0203 	bic.w	r2, r3, #3
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008806:	49aa      	ldr	r1, [pc, #680]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008808:	4313      	orrs	r3, r2
 800880a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800880c:	e001      	b.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800880e:	7dfb      	ldrb	r3, [r7, #23]
 8008810:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800881a:	2b00      	cmp	r3, #0
 800881c:	f000 8086 	beq.w	800892c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008820:	4ba4      	ldr	r3, [pc, #656]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4aa3      	ldr	r2, [pc, #652]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008826:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800882a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800882c:	f7fb fd1c 	bl	8004268 <HAL_GetTick>
 8008830:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008832:	e009      	b.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008834:	f7fb fd18 	bl	8004268 <HAL_GetTick>
 8008838:	4602      	mov	r2, r0
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	1ad3      	subs	r3, r2, r3
 800883e:	2b64      	cmp	r3, #100	; 0x64
 8008840:	d902      	bls.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008842:	2303      	movs	r3, #3
 8008844:	75fb      	strb	r3, [r7, #23]
        break;
 8008846:	e005      	b.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008848:	4b9a      	ldr	r3, [pc, #616]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008850:	2b00      	cmp	r3, #0
 8008852:	d0ef      	beq.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008854:	7dfb      	ldrb	r3, [r7, #23]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d166      	bne.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800885a:	4b95      	ldr	r3, [pc, #596]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800885c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008864:	4053      	eors	r3, r2
 8008866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800886a:	2b00      	cmp	r3, #0
 800886c:	d013      	beq.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800886e:	4b90      	ldr	r3, [pc, #576]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008876:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008878:	4b8d      	ldr	r3, [pc, #564]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800887a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800887c:	4a8c      	ldr	r2, [pc, #560]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800887e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008882:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008884:	4b8a      	ldr	r3, [pc, #552]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008888:	4a89      	ldr	r2, [pc, #548]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800888a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800888e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008890:	4a87      	ldr	r2, [pc, #540]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800889c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088a0:	d115      	bne.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088a2:	f7fb fce1 	bl	8004268 <HAL_GetTick>
 80088a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80088a8:	e00b      	b.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088aa:	f7fb fcdd 	bl	8004268 <HAL_GetTick>
 80088ae:	4602      	mov	r2, r0
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	1ad3      	subs	r3, r2, r3
 80088b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d902      	bls.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80088bc:	2303      	movs	r3, #3
 80088be:	75fb      	strb	r3, [r7, #23]
            break;
 80088c0:	e005      	b.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80088c2:	4b7b      	ldr	r3, [pc, #492]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80088c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088c6:	f003 0302 	and.w	r3, r3, #2
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d0ed      	beq.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80088ce:	7dfb      	ldrb	r3, [r7, #23]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d126      	bne.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80088da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088e2:	d10d      	bne.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80088e4:	4b72      	ldr	r3, [pc, #456]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80088f2:	0919      	lsrs	r1, r3, #4
 80088f4:	4b70      	ldr	r3, [pc, #448]	; (8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80088f6:	400b      	ands	r3, r1
 80088f8:	496d      	ldr	r1, [pc, #436]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80088fa:	4313      	orrs	r3, r2
 80088fc:	610b      	str	r3, [r1, #16]
 80088fe:	e005      	b.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008900:	4b6b      	ldr	r3, [pc, #428]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008902:	691b      	ldr	r3, [r3, #16]
 8008904:	4a6a      	ldr	r2, [pc, #424]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008906:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800890a:	6113      	str	r3, [r2, #16]
 800890c:	4b68      	ldr	r3, [pc, #416]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800890e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008916:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800891a:	4965      	ldr	r1, [pc, #404]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800891c:	4313      	orrs	r3, r2
 800891e:	670b      	str	r3, [r1, #112]	; 0x70
 8008920:	e004      	b.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008922:	7dfb      	ldrb	r3, [r7, #23]
 8008924:	75bb      	strb	r3, [r7, #22]
 8008926:	e001      	b.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008928:	7dfb      	ldrb	r3, [r7, #23]
 800892a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f003 0301 	and.w	r3, r3, #1
 8008934:	2b00      	cmp	r3, #0
 8008936:	d07e      	beq.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800893c:	2b28      	cmp	r3, #40	; 0x28
 800893e:	d867      	bhi.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008940:	a201      	add	r2, pc, #4	; (adr r2, 8008948 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008946:	bf00      	nop
 8008948:	08008a17 	.word	0x08008a17
 800894c:	08008a11 	.word	0x08008a11
 8008950:	08008a11 	.word	0x08008a11
 8008954:	08008a11 	.word	0x08008a11
 8008958:	08008a11 	.word	0x08008a11
 800895c:	08008a11 	.word	0x08008a11
 8008960:	08008a11 	.word	0x08008a11
 8008964:	08008a11 	.word	0x08008a11
 8008968:	080089ed 	.word	0x080089ed
 800896c:	08008a11 	.word	0x08008a11
 8008970:	08008a11 	.word	0x08008a11
 8008974:	08008a11 	.word	0x08008a11
 8008978:	08008a11 	.word	0x08008a11
 800897c:	08008a11 	.word	0x08008a11
 8008980:	08008a11 	.word	0x08008a11
 8008984:	08008a11 	.word	0x08008a11
 8008988:	080089ff 	.word	0x080089ff
 800898c:	08008a11 	.word	0x08008a11
 8008990:	08008a11 	.word	0x08008a11
 8008994:	08008a11 	.word	0x08008a11
 8008998:	08008a11 	.word	0x08008a11
 800899c:	08008a11 	.word	0x08008a11
 80089a0:	08008a11 	.word	0x08008a11
 80089a4:	08008a11 	.word	0x08008a11
 80089a8:	08008a17 	.word	0x08008a17
 80089ac:	08008a11 	.word	0x08008a11
 80089b0:	08008a11 	.word	0x08008a11
 80089b4:	08008a11 	.word	0x08008a11
 80089b8:	08008a11 	.word	0x08008a11
 80089bc:	08008a11 	.word	0x08008a11
 80089c0:	08008a11 	.word	0x08008a11
 80089c4:	08008a11 	.word	0x08008a11
 80089c8:	08008a17 	.word	0x08008a17
 80089cc:	08008a11 	.word	0x08008a11
 80089d0:	08008a11 	.word	0x08008a11
 80089d4:	08008a11 	.word	0x08008a11
 80089d8:	08008a11 	.word	0x08008a11
 80089dc:	08008a11 	.word	0x08008a11
 80089e0:	08008a11 	.word	0x08008a11
 80089e4:	08008a11 	.word	0x08008a11
 80089e8:	08008a17 	.word	0x08008a17
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	3304      	adds	r3, #4
 80089f0:	2101      	movs	r1, #1
 80089f2:	4618      	mov	r0, r3
 80089f4:	f000 fdf4 	bl	80095e0 <RCCEx_PLL2_Config>
 80089f8:	4603      	mov	r3, r0
 80089fa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80089fc:	e00c      	b.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	3324      	adds	r3, #36	; 0x24
 8008a02:	2101      	movs	r1, #1
 8008a04:	4618      	mov	r0, r3
 8008a06:	f000 fe9d 	bl	8009744 <RCCEx_PLL3_Config>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008a0e:	e003      	b.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	75fb      	strb	r3, [r7, #23]
      break;
 8008a14:	e000      	b.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8008a16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a18:	7dfb      	ldrb	r3, [r7, #23]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d109      	bne.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008a1e:	4b24      	ldr	r3, [pc, #144]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a22:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a2a:	4921      	ldr	r1, [pc, #132]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	654b      	str	r3, [r1, #84]	; 0x54
 8008a30:	e001      	b.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a32:	7dfb      	ldrb	r3, [r7, #23]
 8008a34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f003 0302 	and.w	r3, r3, #2
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d03e      	beq.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a46:	2b05      	cmp	r3, #5
 8008a48:	d820      	bhi.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8008a4a:	a201      	add	r2, pc, #4	; (adr r2, 8008a50 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8008a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a50:	08008a93 	.word	0x08008a93
 8008a54:	08008a69 	.word	0x08008a69
 8008a58:	08008a7b 	.word	0x08008a7b
 8008a5c:	08008a93 	.word	0x08008a93
 8008a60:	08008a93 	.word	0x08008a93
 8008a64:	08008a93 	.word	0x08008a93
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	3304      	adds	r3, #4
 8008a6c:	2101      	movs	r1, #1
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f000 fdb6 	bl	80095e0 <RCCEx_PLL2_Config>
 8008a74:	4603      	mov	r3, r0
 8008a76:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008a78:	e00c      	b.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	3324      	adds	r3, #36	; 0x24
 8008a7e:	2101      	movs	r1, #1
 8008a80:	4618      	mov	r0, r3
 8008a82:	f000 fe5f 	bl	8009744 <RCCEx_PLL3_Config>
 8008a86:	4603      	mov	r3, r0
 8008a88:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008a8a:	e003      	b.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8008a90:	e000      	b.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8008a92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a94:	7dfb      	ldrb	r3, [r7, #23]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d110      	bne.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008a9a:	4b05      	ldr	r3, [pc, #20]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a9e:	f023 0207 	bic.w	r2, r3, #7
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008aa6:	4902      	ldr	r1, [pc, #8]	; (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	654b      	str	r3, [r1, #84]	; 0x54
 8008aac:	e008      	b.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8008aae:	bf00      	nop
 8008ab0:	58024400 	.word	0x58024400
 8008ab4:	58024800 	.word	0x58024800
 8008ab8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008abc:	7dfb      	ldrb	r3, [r7, #23]
 8008abe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f003 0304 	and.w	r3, r3, #4
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d039      	beq.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ad2:	2b05      	cmp	r3, #5
 8008ad4:	d820      	bhi.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8008ad6:	a201      	add	r2, pc, #4	; (adr r2, 8008adc <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8008ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008adc:	08008b1f 	.word	0x08008b1f
 8008ae0:	08008af5 	.word	0x08008af5
 8008ae4:	08008b07 	.word	0x08008b07
 8008ae8:	08008b1f 	.word	0x08008b1f
 8008aec:	08008b1f 	.word	0x08008b1f
 8008af0:	08008b1f 	.word	0x08008b1f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	3304      	adds	r3, #4
 8008af8:	2101      	movs	r1, #1
 8008afa:	4618      	mov	r0, r3
 8008afc:	f000 fd70 	bl	80095e0 <RCCEx_PLL2_Config>
 8008b00:	4603      	mov	r3, r0
 8008b02:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008b04:	e00c      	b.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	3324      	adds	r3, #36	; 0x24
 8008b0a:	2101      	movs	r1, #1
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f000 fe19 	bl	8009744 <RCCEx_PLL3_Config>
 8008b12:	4603      	mov	r3, r0
 8008b14:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008b16:	e003      	b.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	75fb      	strb	r3, [r7, #23]
      break;
 8008b1c:	e000      	b.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8008b1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b20:	7dfb      	ldrb	r3, [r7, #23]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d10a      	bne.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008b26:	4bb7      	ldr	r3, [pc, #732]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b2a:	f023 0207 	bic.w	r2, r3, #7
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b34:	49b3      	ldr	r1, [pc, #716]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008b36:	4313      	orrs	r3, r2
 8008b38:	658b      	str	r3, [r1, #88]	; 0x58
 8008b3a:	e001      	b.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b3c:	7dfb      	ldrb	r3, [r7, #23]
 8008b3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f003 0320 	and.w	r3, r3, #32
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d04b      	beq.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b56:	d02e      	beq.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8008b58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b5c:	d828      	bhi.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b62:	d02a      	beq.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b68:	d822      	bhi.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008b6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008b6e:	d026      	beq.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008b70:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008b74:	d81c      	bhi.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008b76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b7a:	d010      	beq.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8008b7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b80:	d816      	bhi.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d01d      	beq.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008b86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b8a:	d111      	bne.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	3304      	adds	r3, #4
 8008b90:	2100      	movs	r1, #0
 8008b92:	4618      	mov	r0, r3
 8008b94:	f000 fd24 	bl	80095e0 <RCCEx_PLL2_Config>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008b9c:	e012      	b.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	3324      	adds	r3, #36	; 0x24
 8008ba2:	2102      	movs	r1, #2
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f000 fdcd 	bl	8009744 <RCCEx_PLL3_Config>
 8008baa:	4603      	mov	r3, r0
 8008bac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008bae:	e009      	b.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	75fb      	strb	r3, [r7, #23]
      break;
 8008bb4:	e006      	b.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008bb6:	bf00      	nop
 8008bb8:	e004      	b.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008bba:	bf00      	nop
 8008bbc:	e002      	b.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008bbe:	bf00      	nop
 8008bc0:	e000      	b.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008bc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bc4:	7dfb      	ldrb	r3, [r7, #23]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d10a      	bne.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008bca:	4b8e      	ldr	r3, [pc, #568]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bce:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bd8:	498a      	ldr	r1, [pc, #552]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	654b      	str	r3, [r1, #84]	; 0x54
 8008bde:	e001      	b.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008be0:	7dfb      	ldrb	r3, [r7, #23]
 8008be2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d04b      	beq.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008bf6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008bfa:	d02e      	beq.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8008bfc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008c00:	d828      	bhi.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c06:	d02a      	beq.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c0c:	d822      	bhi.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008c0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c12:	d026      	beq.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008c14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c18:	d81c      	bhi.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008c1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c1e:	d010      	beq.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8008c20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c24:	d816      	bhi.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d01d      	beq.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008c2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c2e:	d111      	bne.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	3304      	adds	r3, #4
 8008c34:	2100      	movs	r1, #0
 8008c36:	4618      	mov	r0, r3
 8008c38:	f000 fcd2 	bl	80095e0 <RCCEx_PLL2_Config>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008c40:	e012      	b.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	3324      	adds	r3, #36	; 0x24
 8008c46:	2102      	movs	r1, #2
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f000 fd7b 	bl	8009744 <RCCEx_PLL3_Config>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008c52:	e009      	b.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	75fb      	strb	r3, [r7, #23]
      break;
 8008c58:	e006      	b.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008c5a:	bf00      	nop
 8008c5c:	e004      	b.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008c5e:	bf00      	nop
 8008c60:	e002      	b.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008c62:	bf00      	nop
 8008c64:	e000      	b.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008c66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c68:	7dfb      	ldrb	r3, [r7, #23]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d10a      	bne.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008c6e:	4b65      	ldr	r3, [pc, #404]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c72:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008c7c:	4961      	ldr	r1, [pc, #388]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	658b      	str	r3, [r1, #88]	; 0x58
 8008c82:	e001      	b.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c84:	7dfb      	ldrb	r3, [r7, #23]
 8008c86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d04b      	beq.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008c9a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008c9e:	d02e      	beq.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8008ca0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008ca4:	d828      	bhi.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008ca6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008caa:	d02a      	beq.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8008cac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cb0:	d822      	bhi.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008cb2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008cb6:	d026      	beq.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008cb8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008cbc:	d81c      	bhi.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008cbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008cc2:	d010      	beq.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8008cc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008cc8:	d816      	bhi.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d01d      	beq.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cd2:	d111      	bne.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	3304      	adds	r3, #4
 8008cd8:	2100      	movs	r1, #0
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f000 fc80 	bl	80095e0 <RCCEx_PLL2_Config>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008ce4:	e012      	b.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	3324      	adds	r3, #36	; 0x24
 8008cea:	2102      	movs	r1, #2
 8008cec:	4618      	mov	r0, r3
 8008cee:	f000 fd29 	bl	8009744 <RCCEx_PLL3_Config>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008cf6:	e009      	b.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8008cfc:	e006      	b.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008cfe:	bf00      	nop
 8008d00:	e004      	b.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008d02:	bf00      	nop
 8008d04:	e002      	b.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008d06:	bf00      	nop
 8008d08:	e000      	b.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008d0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d0c:	7dfb      	ldrb	r3, [r7, #23]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d10a      	bne.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008d12:	4b3c      	ldr	r3, [pc, #240]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008d20:	4938      	ldr	r1, [pc, #224]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008d22:	4313      	orrs	r3, r2
 8008d24:	658b      	str	r3, [r1, #88]	; 0x58
 8008d26:	e001      	b.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d28:	7dfb      	ldrb	r3, [r7, #23]
 8008d2a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 0308 	and.w	r3, r3, #8
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d01a      	beq.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d42:	d10a      	bne.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	3324      	adds	r3, #36	; 0x24
 8008d48:	2102      	movs	r1, #2
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f000 fcfa 	bl	8009744 <RCCEx_PLL3_Config>
 8008d50:	4603      	mov	r3, r0
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d001      	beq.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8008d56:	2301      	movs	r3, #1
 8008d58:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008d5a:	4b2a      	ldr	r3, [pc, #168]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d5e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d68:	4926      	ldr	r1, [pc, #152]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f003 0310 	and.w	r3, r3, #16
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d01a      	beq.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d84:	d10a      	bne.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	3324      	adds	r3, #36	; 0x24
 8008d8a:	2102      	movs	r1, #2
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f000 fcd9 	bl	8009744 <RCCEx_PLL3_Config>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d001      	beq.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008d9c:	4b19      	ldr	r3, [pc, #100]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008da0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008daa:	4916      	ldr	r1, [pc, #88]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008dac:	4313      	orrs	r3, r2
 8008dae:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d036      	beq.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008dc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008dc6:	d01f      	beq.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008dc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008dcc:	d817      	bhi.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d003      	beq.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8008dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dd6:	d009      	beq.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8008dd8:	e011      	b.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	3304      	adds	r3, #4
 8008dde:	2100      	movs	r1, #0
 8008de0:	4618      	mov	r0, r3
 8008de2:	f000 fbfd 	bl	80095e0 <RCCEx_PLL2_Config>
 8008de6:	4603      	mov	r3, r0
 8008de8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008dea:	e00e      	b.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	3324      	adds	r3, #36	; 0x24
 8008df0:	2102      	movs	r1, #2
 8008df2:	4618      	mov	r0, r3
 8008df4:	f000 fca6 	bl	8009744 <RCCEx_PLL3_Config>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008dfc:	e005      	b.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	75fb      	strb	r3, [r7, #23]
      break;
 8008e02:	e002      	b.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8008e04:	58024400 	.word	0x58024400
      break;
 8008e08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e0a:	7dfb      	ldrb	r3, [r7, #23]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d10a      	bne.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008e10:	4b93      	ldr	r3, [pc, #588]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008e1e:	4990      	ldr	r1, [pc, #576]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008e20:	4313      	orrs	r3, r2
 8008e22:	658b      	str	r3, [r1, #88]	; 0x58
 8008e24:	e001      	b.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e26:	7dfb      	ldrb	r3, [r7, #23]
 8008e28:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d033      	beq.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e3c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008e40:	d01c      	beq.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8008e42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008e46:	d816      	bhi.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8008e48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e4c:	d003      	beq.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8008e4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e52:	d007      	beq.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8008e54:	e00f      	b.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e56:	4b82      	ldr	r3, [pc, #520]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e5a:	4a81      	ldr	r2, [pc, #516]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008e62:	e00c      	b.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	3324      	adds	r3, #36	; 0x24
 8008e68:	2101      	movs	r1, #1
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f000 fc6a 	bl	8009744 <RCCEx_PLL3_Config>
 8008e70:	4603      	mov	r3, r0
 8008e72:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008e74:	e003      	b.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
 8008e78:	75fb      	strb	r3, [r7, #23]
      break;
 8008e7a:	e000      	b.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8008e7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e7e:	7dfb      	ldrb	r3, [r7, #23]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d10a      	bne.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008e84:	4b76      	ldr	r3, [pc, #472]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e92:	4973      	ldr	r1, [pc, #460]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008e94:	4313      	orrs	r3, r2
 8008e96:	654b      	str	r3, [r1, #84]	; 0x54
 8008e98:	e001      	b.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e9a:	7dfb      	ldrb	r3, [r7, #23]
 8008e9c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d029      	beq.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d003      	beq.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8008eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008eb6:	d007      	beq.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8008eb8:	e00f      	b.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008eba:	4b69      	ldr	r3, [pc, #420]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ebe:	4a68      	ldr	r2, [pc, #416]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ec4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008ec6:	e00b      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	3304      	adds	r3, #4
 8008ecc:	2102      	movs	r1, #2
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f000 fb86 	bl	80095e0 <RCCEx_PLL2_Config>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008ed8:	e002      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	75fb      	strb	r3, [r7, #23]
      break;
 8008ede:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ee0:	7dfb      	ldrb	r3, [r7, #23]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d109      	bne.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008ee6:	4b5e      	ldr	r3, [pc, #376]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008eea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ef2:	495b      	ldr	r1, [pc, #364]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008ef8:	e001      	b.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008efa:	7dfb      	ldrb	r3, [r7, #23]
 8008efc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00a      	beq.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	3324      	adds	r3, #36	; 0x24
 8008f0e:	2102      	movs	r1, #2
 8008f10:	4618      	mov	r0, r3
 8008f12:	f000 fc17 	bl	8009744 <RCCEx_PLL3_Config>
 8008f16:	4603      	mov	r3, r0
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d001      	beq.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d030      	beq.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f34:	d017      	beq.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8008f36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f3a:	d811      	bhi.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f40:	d013      	beq.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008f42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f46:	d80b      	bhi.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d010      	beq.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008f4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f50:	d106      	bne.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f52:	4b43      	ldr	r3, [pc, #268]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f56:	4a42      	ldr	r2, [pc, #264]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008f5e:	e007      	b.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f60:	2301      	movs	r3, #1
 8008f62:	75fb      	strb	r3, [r7, #23]
      break;
 8008f64:	e004      	b.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008f66:	bf00      	nop
 8008f68:	e002      	b.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008f6a:	bf00      	nop
 8008f6c:	e000      	b.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008f6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f70:	7dfb      	ldrb	r3, [r7, #23]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d109      	bne.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008f76:	4b3a      	ldr	r3, [pc, #232]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f82:	4937      	ldr	r1, [pc, #220]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f84:	4313      	orrs	r3, r2
 8008f86:	654b      	str	r3, [r1, #84]	; 0x54
 8008f88:	e001      	b.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f8a:	7dfb      	ldrb	r3, [r7, #23]
 8008f8c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d008      	beq.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008f9a:	4b31      	ldr	r3, [pc, #196]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fa6:	492e      	ldr	r1, [pc, #184]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d009      	beq.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008fb8:	4b29      	ldr	r3, [pc, #164]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008fba:	691b      	ldr	r3, [r3, #16]
 8008fbc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008fc6:	4926      	ldr	r1, [pc, #152]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d008      	beq.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008fd8:	4b21      	ldr	r3, [pc, #132]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fdc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fe4:	491e      	ldr	r1, [pc, #120]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00d      	beq.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008ff6:	4b1a      	ldr	r3, [pc, #104]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ff8:	691b      	ldr	r3, [r3, #16]
 8008ffa:	4a19      	ldr	r2, [pc, #100]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ffc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009000:	6113      	str	r3, [r2, #16]
 8009002:	4b17      	ldr	r3, [pc, #92]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009004:	691a      	ldr	r2, [r3, #16]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800900c:	4914      	ldr	r1, [pc, #80]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800900e:	4313      	orrs	r3, r2
 8009010:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	2b00      	cmp	r3, #0
 8009018:	da08      	bge.n	800902c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800901a:	4b11      	ldr	r3, [pc, #68]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800901c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800901e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009026:	490e      	ldr	r1, [pc, #56]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009028:	4313      	orrs	r3, r2
 800902a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009034:	2b00      	cmp	r3, #0
 8009036:	d009      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009038:	4b09      	ldr	r3, [pc, #36]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800903a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800903c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009046:	4906      	ldr	r1, [pc, #24]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009048:	4313      	orrs	r3, r2
 800904a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800904c:	7dbb      	ldrb	r3, [r7, #22]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d101      	bne.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8009052:	2300      	movs	r3, #0
 8009054:	e000      	b.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8009056:	2301      	movs	r3, #1
}
 8009058:	4618      	mov	r0, r3
 800905a:	3718      	adds	r7, #24
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}
 8009060:	58024400 	.word	0x58024400

08009064 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009068:	f7ff f860 	bl	800812c <HAL_RCC_GetHCLKFreq>
 800906c:	4602      	mov	r2, r0
 800906e:	4b06      	ldr	r3, [pc, #24]	; (8009088 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009070:	6a1b      	ldr	r3, [r3, #32]
 8009072:	091b      	lsrs	r3, r3, #4
 8009074:	f003 0307 	and.w	r3, r3, #7
 8009078:	4904      	ldr	r1, [pc, #16]	; (800908c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800907a:	5ccb      	ldrb	r3, [r1, r3]
 800907c:	f003 031f 	and.w	r3, r3, #31
 8009080:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009084:	4618      	mov	r0, r3
 8009086:	bd80      	pop	{r7, pc}
 8009088:	58024400 	.word	0x58024400
 800908c:	08012374 	.word	0x08012374

08009090 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009090:	b480      	push	{r7}
 8009092:	b089      	sub	sp, #36	; 0x24
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009098:	4ba1      	ldr	r3, [pc, #644]	; (8009320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800909a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800909c:	f003 0303 	and.w	r3, r3, #3
 80090a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80090a2:	4b9f      	ldr	r3, [pc, #636]	; (8009320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090a6:	0b1b      	lsrs	r3, r3, #12
 80090a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80090ae:	4b9c      	ldr	r3, [pc, #624]	; (8009320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b2:	091b      	lsrs	r3, r3, #4
 80090b4:	f003 0301 	and.w	r3, r3, #1
 80090b8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80090ba:	4b99      	ldr	r3, [pc, #612]	; (8009320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090be:	08db      	lsrs	r3, r3, #3
 80090c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090c4:	693a      	ldr	r2, [r7, #16]
 80090c6:	fb02 f303 	mul.w	r3, r2, r3
 80090ca:	ee07 3a90 	vmov	s15, r3
 80090ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	f000 8111 	beq.w	8009300 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	2b02      	cmp	r3, #2
 80090e2:	f000 8083 	beq.w	80091ec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	2b02      	cmp	r3, #2
 80090ea:	f200 80a1 	bhi.w	8009230 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d003      	beq.n	80090fc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80090f4:	69bb      	ldr	r3, [r7, #24]
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d056      	beq.n	80091a8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80090fa:	e099      	b.n	8009230 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090fc:	4b88      	ldr	r3, [pc, #544]	; (8009320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 0320 	and.w	r3, r3, #32
 8009104:	2b00      	cmp	r3, #0
 8009106:	d02d      	beq.n	8009164 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009108:	4b85      	ldr	r3, [pc, #532]	; (8009320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	08db      	lsrs	r3, r3, #3
 800910e:	f003 0303 	and.w	r3, r3, #3
 8009112:	4a84      	ldr	r2, [pc, #528]	; (8009324 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009114:	fa22 f303 	lsr.w	r3, r2, r3
 8009118:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	ee07 3a90 	vmov	s15, r3
 8009120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	ee07 3a90 	vmov	s15, r3
 800912a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800912e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009132:	4b7b      	ldr	r3, [pc, #492]	; (8009320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800913a:	ee07 3a90 	vmov	s15, r3
 800913e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009142:	ed97 6a03 	vldr	s12, [r7, #12]
 8009146:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009328 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800914a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800914e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800915a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800915e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009162:	e087      	b.n	8009274 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	ee07 3a90 	vmov	s15, r3
 800916a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800916e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800932c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009176:	4b6a      	ldr	r3, [pc, #424]	; (8009320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800917a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800917e:	ee07 3a90 	vmov	s15, r3
 8009182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009186:	ed97 6a03 	vldr	s12, [r7, #12]
 800918a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009328 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800918e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800919a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800919e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80091a6:	e065      	b.n	8009274 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	ee07 3a90 	vmov	s15, r3
 80091ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009330 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80091b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091ba:	4b59      	ldr	r3, [pc, #356]	; (8009320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091c2:	ee07 3a90 	vmov	s15, r3
 80091c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80091ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009328 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80091d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80091ea:	e043      	b.n	8009274 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	ee07 3a90 	vmov	s15, r3
 80091f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009334 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80091fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091fe:	4b48      	ldr	r3, [pc, #288]	; (8009320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009206:	ee07 3a90 	vmov	s15, r3
 800920a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800920e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009212:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009328 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800921a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800921e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800922a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800922e:	e021      	b.n	8009274 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	ee07 3a90 	vmov	s15, r3
 8009236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800923a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009330 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800923e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009242:	4b37      	ldr	r3, [pc, #220]	; (8009320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800924a:	ee07 3a90 	vmov	s15, r3
 800924e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009252:	ed97 6a03 	vldr	s12, [r7, #12]
 8009256:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009328 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800925a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800925e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009262:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800926a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800926e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009272:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009274:	4b2a      	ldr	r3, [pc, #168]	; (8009320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009278:	0a5b      	lsrs	r3, r3, #9
 800927a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800927e:	ee07 3a90 	vmov	s15, r3
 8009282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009286:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800928a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800928e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009292:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009296:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800929a:	ee17 2a90 	vmov	r2, s15
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80092a2:	4b1f      	ldr	r3, [pc, #124]	; (8009320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a6:	0c1b      	lsrs	r3, r3, #16
 80092a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092ac:	ee07 3a90 	vmov	s15, r3
 80092b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80092c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092c8:	ee17 2a90 	vmov	r2, s15
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80092d0:	4b13      	ldr	r3, [pc, #76]	; (8009320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d4:	0e1b      	lsrs	r3, r3, #24
 80092d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092da:	ee07 3a90 	vmov	s15, r3
 80092de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80092ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092f6:	ee17 2a90 	vmov	r2, s15
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80092fe:	e008      	b.n	8009312 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	609a      	str	r2, [r3, #8]
}
 8009312:	bf00      	nop
 8009314:	3724      	adds	r7, #36	; 0x24
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr
 800931e:	bf00      	nop
 8009320:	58024400 	.word	0x58024400
 8009324:	03d09000 	.word	0x03d09000
 8009328:	46000000 	.word	0x46000000
 800932c:	4c742400 	.word	0x4c742400
 8009330:	4a742400 	.word	0x4a742400
 8009334:	4af42400 	.word	0x4af42400

08009338 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009338:	b480      	push	{r7}
 800933a:	b089      	sub	sp, #36	; 0x24
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009340:	4ba1      	ldr	r3, [pc, #644]	; (80095c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009344:	f003 0303 	and.w	r3, r3, #3
 8009348:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800934a:	4b9f      	ldr	r3, [pc, #636]	; (80095c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800934c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800934e:	0d1b      	lsrs	r3, r3, #20
 8009350:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009354:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009356:	4b9c      	ldr	r3, [pc, #624]	; (80095c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800935a:	0a1b      	lsrs	r3, r3, #8
 800935c:	f003 0301 	and.w	r3, r3, #1
 8009360:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009362:	4b99      	ldr	r3, [pc, #612]	; (80095c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009366:	08db      	lsrs	r3, r3, #3
 8009368:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800936c:	693a      	ldr	r2, [r7, #16]
 800936e:	fb02 f303 	mul.w	r3, r2, r3
 8009372:	ee07 3a90 	vmov	s15, r3
 8009376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800937a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	2b00      	cmp	r3, #0
 8009382:	f000 8111 	beq.w	80095a8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	2b02      	cmp	r3, #2
 800938a:	f000 8083 	beq.w	8009494 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	2b02      	cmp	r3, #2
 8009392:	f200 80a1 	bhi.w	80094d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d003      	beq.n	80093a4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800939c:	69bb      	ldr	r3, [r7, #24]
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d056      	beq.n	8009450 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80093a2:	e099      	b.n	80094d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093a4:	4b88      	ldr	r3, [pc, #544]	; (80095c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f003 0320 	and.w	r3, r3, #32
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d02d      	beq.n	800940c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80093b0:	4b85      	ldr	r3, [pc, #532]	; (80095c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	08db      	lsrs	r3, r3, #3
 80093b6:	f003 0303 	and.w	r3, r3, #3
 80093ba:	4a84      	ldr	r2, [pc, #528]	; (80095cc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80093bc:	fa22 f303 	lsr.w	r3, r2, r3
 80093c0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	ee07 3a90 	vmov	s15, r3
 80093c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	ee07 3a90 	vmov	s15, r3
 80093d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093da:	4b7b      	ldr	r3, [pc, #492]	; (80095c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093e2:	ee07 3a90 	vmov	s15, r3
 80093e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80093ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80095d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80093f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009406:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800940a:	e087      	b.n	800951c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	ee07 3a90 	vmov	s15, r3
 8009412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009416:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80095d4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800941a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800941e:	4b6a      	ldr	r3, [pc, #424]	; (80095c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009426:	ee07 3a90 	vmov	s15, r3
 800942a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800942e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009432:	eddf 5a67 	vldr	s11, [pc, #412]	; 80095d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800943a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800943e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800944a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800944e:	e065      	b.n	800951c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	ee07 3a90 	vmov	s15, r3
 8009456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800945a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80095d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800945e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009462:	4b59      	ldr	r3, [pc, #356]	; (80095c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800946a:	ee07 3a90 	vmov	s15, r3
 800946e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009472:	ed97 6a03 	vldr	s12, [r7, #12]
 8009476:	eddf 5a56 	vldr	s11, [pc, #344]	; 80095d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800947a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800947e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009482:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800948a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800948e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009492:	e043      	b.n	800951c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	ee07 3a90 	vmov	s15, r3
 800949a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800949e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80095dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80094a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094a6:	4b48      	ldr	r3, [pc, #288]	; (80095c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094ae:	ee07 3a90 	vmov	s15, r3
 80094b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80094ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 80095d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80094be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80094d6:	e021      	b.n	800951c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	ee07 3a90 	vmov	s15, r3
 80094de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80095d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80094e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094ea:	4b37      	ldr	r3, [pc, #220]	; (80095c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094f2:	ee07 3a90 	vmov	s15, r3
 80094f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80094fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 80095d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800950a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800950e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009516:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800951a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800951c:	4b2a      	ldr	r3, [pc, #168]	; (80095c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800951e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009520:	0a5b      	lsrs	r3, r3, #9
 8009522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009526:	ee07 3a90 	vmov	s15, r3
 800952a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800952e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009532:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009536:	edd7 6a07 	vldr	s13, [r7, #28]
 800953a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800953e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009542:	ee17 2a90 	vmov	r2, s15
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800954a:	4b1f      	ldr	r3, [pc, #124]	; (80095c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800954c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800954e:	0c1b      	lsrs	r3, r3, #16
 8009550:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009554:	ee07 3a90 	vmov	s15, r3
 8009558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800955c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009560:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009564:	edd7 6a07 	vldr	s13, [r7, #28]
 8009568:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800956c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009570:	ee17 2a90 	vmov	r2, s15
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009578:	4b13      	ldr	r3, [pc, #76]	; (80095c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800957a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800957c:	0e1b      	lsrs	r3, r3, #24
 800957e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009582:	ee07 3a90 	vmov	s15, r3
 8009586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800958a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800958e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009592:	edd7 6a07 	vldr	s13, [r7, #28]
 8009596:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800959a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800959e:	ee17 2a90 	vmov	r2, s15
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80095a6:	e008      	b.n	80095ba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	609a      	str	r2, [r3, #8]
}
 80095ba:	bf00      	nop
 80095bc:	3724      	adds	r7, #36	; 0x24
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
 80095c6:	bf00      	nop
 80095c8:	58024400 	.word	0x58024400
 80095cc:	03d09000 	.word	0x03d09000
 80095d0:	46000000 	.word	0x46000000
 80095d4:	4c742400 	.word	0x4c742400
 80095d8:	4a742400 	.word	0x4a742400
 80095dc:	4af42400 	.word	0x4af42400

080095e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80095ea:	2300      	movs	r3, #0
 80095ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80095ee:	4b53      	ldr	r3, [pc, #332]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 80095f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095f2:	f003 0303 	and.w	r3, r3, #3
 80095f6:	2b03      	cmp	r3, #3
 80095f8:	d101      	bne.n	80095fe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80095fa:	2301      	movs	r3, #1
 80095fc:	e099      	b.n	8009732 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80095fe:	4b4f      	ldr	r3, [pc, #316]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a4e      	ldr	r2, [pc, #312]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 8009604:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009608:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800960a:	f7fa fe2d 	bl	8004268 <HAL_GetTick>
 800960e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009610:	e008      	b.n	8009624 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009612:	f7fa fe29 	bl	8004268 <HAL_GetTick>
 8009616:	4602      	mov	r2, r0
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	1ad3      	subs	r3, r2, r3
 800961c:	2b02      	cmp	r3, #2
 800961e:	d901      	bls.n	8009624 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009620:	2303      	movs	r3, #3
 8009622:	e086      	b.n	8009732 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009624:	4b45      	ldr	r3, [pc, #276]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800962c:	2b00      	cmp	r3, #0
 800962e:	d1f0      	bne.n	8009612 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009630:	4b42      	ldr	r3, [pc, #264]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 8009632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009634:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	031b      	lsls	r3, r3, #12
 800963e:	493f      	ldr	r1, [pc, #252]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 8009640:	4313      	orrs	r3, r2
 8009642:	628b      	str	r3, [r1, #40]	; 0x28
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	3b01      	subs	r3, #1
 800964a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	3b01      	subs	r3, #1
 8009654:	025b      	lsls	r3, r3, #9
 8009656:	b29b      	uxth	r3, r3
 8009658:	431a      	orrs	r2, r3
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	3b01      	subs	r3, #1
 8009660:	041b      	lsls	r3, r3, #16
 8009662:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009666:	431a      	orrs	r2, r3
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	691b      	ldr	r3, [r3, #16]
 800966c:	3b01      	subs	r3, #1
 800966e:	061b      	lsls	r3, r3, #24
 8009670:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009674:	4931      	ldr	r1, [pc, #196]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 8009676:	4313      	orrs	r3, r2
 8009678:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800967a:	4b30      	ldr	r3, [pc, #192]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 800967c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800967e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	695b      	ldr	r3, [r3, #20]
 8009686:	492d      	ldr	r1, [pc, #180]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 8009688:	4313      	orrs	r3, r2
 800968a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800968c:	4b2b      	ldr	r3, [pc, #172]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 800968e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009690:	f023 0220 	bic.w	r2, r3, #32
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	699b      	ldr	r3, [r3, #24]
 8009698:	4928      	ldr	r1, [pc, #160]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 800969a:	4313      	orrs	r3, r2
 800969c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800969e:	4b27      	ldr	r3, [pc, #156]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 80096a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a2:	4a26      	ldr	r2, [pc, #152]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 80096a4:	f023 0310 	bic.w	r3, r3, #16
 80096a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80096aa:	4b24      	ldr	r3, [pc, #144]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 80096ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096ae:	4b24      	ldr	r3, [pc, #144]	; (8009740 <RCCEx_PLL2_Config+0x160>)
 80096b0:	4013      	ands	r3, r2
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	69d2      	ldr	r2, [r2, #28]
 80096b6:	00d2      	lsls	r2, r2, #3
 80096b8:	4920      	ldr	r1, [pc, #128]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 80096ba:	4313      	orrs	r3, r2
 80096bc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80096be:	4b1f      	ldr	r3, [pc, #124]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 80096c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c2:	4a1e      	ldr	r2, [pc, #120]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 80096c4:	f043 0310 	orr.w	r3, r3, #16
 80096c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d106      	bne.n	80096de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80096d0:	4b1a      	ldr	r3, [pc, #104]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 80096d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d4:	4a19      	ldr	r2, [pc, #100]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 80096d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80096da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80096dc:	e00f      	b.n	80096fe <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d106      	bne.n	80096f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80096e4:	4b15      	ldr	r3, [pc, #84]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 80096e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e8:	4a14      	ldr	r2, [pc, #80]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 80096ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80096f0:	e005      	b.n	80096fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80096f2:	4b12      	ldr	r3, [pc, #72]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 80096f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f6:	4a11      	ldr	r2, [pc, #68]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 80096f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80096fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80096fe:	4b0f      	ldr	r3, [pc, #60]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a0e      	ldr	r2, [pc, #56]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 8009704:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009708:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800970a:	f7fa fdad 	bl	8004268 <HAL_GetTick>
 800970e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009710:	e008      	b.n	8009724 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009712:	f7fa fda9 	bl	8004268 <HAL_GetTick>
 8009716:	4602      	mov	r2, r0
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	1ad3      	subs	r3, r2, r3
 800971c:	2b02      	cmp	r3, #2
 800971e:	d901      	bls.n	8009724 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009720:	2303      	movs	r3, #3
 8009722:	e006      	b.n	8009732 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009724:	4b05      	ldr	r3, [pc, #20]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800972c:	2b00      	cmp	r3, #0
 800972e:	d0f0      	beq.n	8009712 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009730:	7bfb      	ldrb	r3, [r7, #15]
}
 8009732:	4618      	mov	r0, r3
 8009734:	3710      	adds	r7, #16
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	58024400 	.word	0x58024400
 8009740:	ffff0007 	.word	0xffff0007

08009744 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800974e:	2300      	movs	r3, #0
 8009750:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009752:	4b53      	ldr	r3, [pc, #332]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 8009754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009756:	f003 0303 	and.w	r3, r3, #3
 800975a:	2b03      	cmp	r3, #3
 800975c:	d101      	bne.n	8009762 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800975e:	2301      	movs	r3, #1
 8009760:	e099      	b.n	8009896 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009762:	4b4f      	ldr	r3, [pc, #316]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a4e      	ldr	r2, [pc, #312]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 8009768:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800976c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800976e:	f7fa fd7b 	bl	8004268 <HAL_GetTick>
 8009772:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009774:	e008      	b.n	8009788 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009776:	f7fa fd77 	bl	8004268 <HAL_GetTick>
 800977a:	4602      	mov	r2, r0
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	1ad3      	subs	r3, r2, r3
 8009780:	2b02      	cmp	r3, #2
 8009782:	d901      	bls.n	8009788 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009784:	2303      	movs	r3, #3
 8009786:	e086      	b.n	8009896 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009788:	4b45      	ldr	r3, [pc, #276]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009790:	2b00      	cmp	r3, #0
 8009792:	d1f0      	bne.n	8009776 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009794:	4b42      	ldr	r3, [pc, #264]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 8009796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009798:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	051b      	lsls	r3, r3, #20
 80097a2:	493f      	ldr	r1, [pc, #252]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 80097a4:	4313      	orrs	r3, r2
 80097a6:	628b      	str	r3, [r1, #40]	; 0x28
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	3b01      	subs	r3, #1
 80097ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	689b      	ldr	r3, [r3, #8]
 80097b6:	3b01      	subs	r3, #1
 80097b8:	025b      	lsls	r3, r3, #9
 80097ba:	b29b      	uxth	r3, r3
 80097bc:	431a      	orrs	r2, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	3b01      	subs	r3, #1
 80097c4:	041b      	lsls	r3, r3, #16
 80097c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80097ca:	431a      	orrs	r2, r3
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	3b01      	subs	r3, #1
 80097d2:	061b      	lsls	r3, r3, #24
 80097d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80097d8:	4931      	ldr	r1, [pc, #196]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 80097da:	4313      	orrs	r3, r2
 80097dc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80097de:	4b30      	ldr	r3, [pc, #192]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 80097e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	695b      	ldr	r3, [r3, #20]
 80097ea:	492d      	ldr	r1, [pc, #180]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 80097ec:	4313      	orrs	r3, r2
 80097ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80097f0:	4b2b      	ldr	r3, [pc, #172]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 80097f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	699b      	ldr	r3, [r3, #24]
 80097fc:	4928      	ldr	r1, [pc, #160]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 80097fe:	4313      	orrs	r3, r2
 8009800:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009802:	4b27      	ldr	r3, [pc, #156]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 8009804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009806:	4a26      	ldr	r2, [pc, #152]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 8009808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800980c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800980e:	4b24      	ldr	r3, [pc, #144]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 8009810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009812:	4b24      	ldr	r3, [pc, #144]	; (80098a4 <RCCEx_PLL3_Config+0x160>)
 8009814:	4013      	ands	r3, r2
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	69d2      	ldr	r2, [r2, #28]
 800981a:	00d2      	lsls	r2, r2, #3
 800981c:	4920      	ldr	r1, [pc, #128]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 800981e:	4313      	orrs	r3, r2
 8009820:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009822:	4b1f      	ldr	r3, [pc, #124]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 8009824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009826:	4a1e      	ldr	r2, [pc, #120]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 8009828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800982c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d106      	bne.n	8009842 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009834:	4b1a      	ldr	r3, [pc, #104]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 8009836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009838:	4a19      	ldr	r2, [pc, #100]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 800983a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800983e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009840:	e00f      	b.n	8009862 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	2b01      	cmp	r3, #1
 8009846:	d106      	bne.n	8009856 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009848:	4b15      	ldr	r3, [pc, #84]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 800984a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800984c:	4a14      	ldr	r2, [pc, #80]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 800984e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009852:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009854:	e005      	b.n	8009862 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009856:	4b12      	ldr	r3, [pc, #72]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 8009858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800985a:	4a11      	ldr	r2, [pc, #68]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 800985c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009860:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009862:	4b0f      	ldr	r3, [pc, #60]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a0e      	ldr	r2, [pc, #56]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 8009868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800986c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800986e:	f7fa fcfb 	bl	8004268 <HAL_GetTick>
 8009872:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009874:	e008      	b.n	8009888 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009876:	f7fa fcf7 	bl	8004268 <HAL_GetTick>
 800987a:	4602      	mov	r2, r0
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	1ad3      	subs	r3, r2, r3
 8009880:	2b02      	cmp	r3, #2
 8009882:	d901      	bls.n	8009888 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009884:	2303      	movs	r3, #3
 8009886:	e006      	b.n	8009896 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009888:	4b05      	ldr	r3, [pc, #20]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009890:	2b00      	cmp	r3, #0
 8009892:	d0f0      	beq.n	8009876 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009894:	7bfb      	ldrb	r3, [r7, #15]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	58024400 	.word	0x58024400
 80098a4:	ffff0007 	.word	0xffff0007

080098a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b082      	sub	sp, #8
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d101      	bne.n	80098ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80098b6:	2301      	movs	r3, #1
 80098b8:	e049      	b.n	800994e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d106      	bne.n	80098d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f7fa f9b0 	bl	8003c34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2202      	movs	r2, #2
 80098d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	3304      	adds	r3, #4
 80098e4:	4619      	mov	r1, r3
 80098e6:	4610      	mov	r0, r2
 80098e8:	f000 fb10 	bl	8009f0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2201      	movs	r2, #1
 80098f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2201      	movs	r2, #1
 80098f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2201      	movs	r2, #1
 8009900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2201      	movs	r2, #1
 8009908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2201      	movs	r2, #1
 8009910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2201      	movs	r2, #1
 8009918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2201      	movs	r2, #1
 8009920:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2201      	movs	r2, #1
 8009928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2201      	movs	r2, #1
 8009930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2201      	movs	r2, #1
 8009938:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2201      	movs	r2, #1
 8009940:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2201      	movs	r2, #1
 8009948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800994c:	2300      	movs	r3, #0
}
 800994e:	4618      	mov	r0, r3
 8009950:	3708      	adds	r7, #8
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
	...

08009958 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009958:	b480      	push	{r7}
 800995a:	b085      	sub	sp, #20
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009966:	b2db      	uxtb	r3, r3
 8009968:	2b01      	cmp	r3, #1
 800996a:	d001      	beq.n	8009970 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800996c:	2301      	movs	r3, #1
 800996e:	e04f      	b.n	8009a10 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2202      	movs	r2, #2
 8009974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	68da      	ldr	r2, [r3, #12]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f042 0201 	orr.w	r2, r2, #1
 8009986:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a23      	ldr	r2, [pc, #140]	; (8009a1c <HAL_TIM_Base_Start_IT+0xc4>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d01d      	beq.n	80099ce <HAL_TIM_Base_Start_IT+0x76>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800999a:	d018      	beq.n	80099ce <HAL_TIM_Base_Start_IT+0x76>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a1f      	ldr	r2, [pc, #124]	; (8009a20 <HAL_TIM_Base_Start_IT+0xc8>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d013      	beq.n	80099ce <HAL_TIM_Base_Start_IT+0x76>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a1e      	ldr	r2, [pc, #120]	; (8009a24 <HAL_TIM_Base_Start_IT+0xcc>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d00e      	beq.n	80099ce <HAL_TIM_Base_Start_IT+0x76>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a1c      	ldr	r2, [pc, #112]	; (8009a28 <HAL_TIM_Base_Start_IT+0xd0>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d009      	beq.n	80099ce <HAL_TIM_Base_Start_IT+0x76>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a1b      	ldr	r2, [pc, #108]	; (8009a2c <HAL_TIM_Base_Start_IT+0xd4>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d004      	beq.n	80099ce <HAL_TIM_Base_Start_IT+0x76>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a19      	ldr	r2, [pc, #100]	; (8009a30 <HAL_TIM_Base_Start_IT+0xd8>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d115      	bne.n	80099fa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	689a      	ldr	r2, [r3, #8]
 80099d4:	4b17      	ldr	r3, [pc, #92]	; (8009a34 <HAL_TIM_Base_Start_IT+0xdc>)
 80099d6:	4013      	ands	r3, r2
 80099d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2b06      	cmp	r3, #6
 80099de:	d015      	beq.n	8009a0c <HAL_TIM_Base_Start_IT+0xb4>
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099e6:	d011      	beq.n	8009a0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f042 0201 	orr.w	r2, r2, #1
 80099f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099f8:	e008      	b.n	8009a0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	681a      	ldr	r2, [r3, #0]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f042 0201 	orr.w	r2, r2, #1
 8009a08:	601a      	str	r2, [r3, #0]
 8009a0a:	e000      	b.n	8009a0e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009a0e:	2300      	movs	r3, #0
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3714      	adds	r7, #20
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr
 8009a1c:	40010000 	.word	0x40010000
 8009a20:	40000400 	.word	0x40000400
 8009a24:	40000800 	.word	0x40000800
 8009a28:	40000c00 	.word	0x40000c00
 8009a2c:	40010400 	.word	0x40010400
 8009a30:	40001800 	.word	0x40001800
 8009a34:	00010007 	.word	0x00010007

08009a38 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b083      	sub	sp, #12
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	68da      	ldr	r2, [r3, #12]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f022 0201 	bic.w	r2, r2, #1
 8009a4e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	6a1a      	ldr	r2, [r3, #32]
 8009a56:	f241 1311 	movw	r3, #4369	; 0x1111
 8009a5a:	4013      	ands	r3, r2
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d10f      	bne.n	8009a80 <HAL_TIM_Base_Stop_IT+0x48>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	6a1a      	ldr	r2, [r3, #32]
 8009a66:	f240 4344 	movw	r3, #1092	; 0x444
 8009a6a:	4013      	ands	r3, r2
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d107      	bne.n	8009a80 <HAL_TIM_Base_Stop_IT+0x48>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	681a      	ldr	r2, [r3, #0]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f022 0201 	bic.w	r2, r2, #1
 8009a7e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2201      	movs	r2, #1
 8009a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009a88:	2300      	movs	r3, #0
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	370c      	adds	r7, #12
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr

08009a96 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b082      	sub	sp, #8
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	691b      	ldr	r3, [r3, #16]
 8009aa4:	f003 0302 	and.w	r3, r3, #2
 8009aa8:	2b02      	cmp	r3, #2
 8009aaa:	d122      	bne.n	8009af2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	f003 0302 	and.w	r3, r3, #2
 8009ab6:	2b02      	cmp	r3, #2
 8009ab8:	d11b      	bne.n	8009af2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f06f 0202 	mvn.w	r2, #2
 8009ac2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	699b      	ldr	r3, [r3, #24]
 8009ad0:	f003 0303 	and.w	r3, r3, #3
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d003      	beq.n	8009ae0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 f9f9 	bl	8009ed0 <HAL_TIM_IC_CaptureCallback>
 8009ade:	e005      	b.n	8009aec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 f9eb 	bl	8009ebc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 f9fc 	bl	8009ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	691b      	ldr	r3, [r3, #16]
 8009af8:	f003 0304 	and.w	r3, r3, #4
 8009afc:	2b04      	cmp	r3, #4
 8009afe:	d122      	bne.n	8009b46 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	68db      	ldr	r3, [r3, #12]
 8009b06:	f003 0304 	and.w	r3, r3, #4
 8009b0a:	2b04      	cmp	r3, #4
 8009b0c:	d11b      	bne.n	8009b46 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f06f 0204 	mvn.w	r2, #4
 8009b16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2202      	movs	r2, #2
 8009b1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	699b      	ldr	r3, [r3, #24]
 8009b24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d003      	beq.n	8009b34 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 f9cf 	bl	8009ed0 <HAL_TIM_IC_CaptureCallback>
 8009b32:	e005      	b.n	8009b40 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 f9c1 	bl	8009ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 f9d2 	bl	8009ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	691b      	ldr	r3, [r3, #16]
 8009b4c:	f003 0308 	and.w	r3, r3, #8
 8009b50:	2b08      	cmp	r3, #8
 8009b52:	d122      	bne.n	8009b9a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	68db      	ldr	r3, [r3, #12]
 8009b5a:	f003 0308 	and.w	r3, r3, #8
 8009b5e:	2b08      	cmp	r3, #8
 8009b60:	d11b      	bne.n	8009b9a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f06f 0208 	mvn.w	r2, #8
 8009b6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2204      	movs	r2, #4
 8009b70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	69db      	ldr	r3, [r3, #28]
 8009b78:	f003 0303 	and.w	r3, r3, #3
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d003      	beq.n	8009b88 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 f9a5 	bl	8009ed0 <HAL_TIM_IC_CaptureCallback>
 8009b86:	e005      	b.n	8009b94 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 f997 	bl	8009ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 f9a8 	bl	8009ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	691b      	ldr	r3, [r3, #16]
 8009ba0:	f003 0310 	and.w	r3, r3, #16
 8009ba4:	2b10      	cmp	r3, #16
 8009ba6:	d122      	bne.n	8009bee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	68db      	ldr	r3, [r3, #12]
 8009bae:	f003 0310 	and.w	r3, r3, #16
 8009bb2:	2b10      	cmp	r3, #16
 8009bb4:	d11b      	bne.n	8009bee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f06f 0210 	mvn.w	r2, #16
 8009bbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2208      	movs	r2, #8
 8009bc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	69db      	ldr	r3, [r3, #28]
 8009bcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d003      	beq.n	8009bdc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 f97b 	bl	8009ed0 <HAL_TIM_IC_CaptureCallback>
 8009bda:	e005      	b.n	8009be8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 f96d 	bl	8009ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 f97e 	bl	8009ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	691b      	ldr	r3, [r3, #16]
 8009bf4:	f003 0301 	and.w	r3, r3, #1
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d10e      	bne.n	8009c1a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	f003 0301 	and.w	r3, r3, #1
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d107      	bne.n	8009c1a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f06f 0201 	mvn.w	r2, #1
 8009c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f7f9 fcd9 	bl	80035cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	691b      	ldr	r3, [r3, #16]
 8009c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c24:	2b80      	cmp	r3, #128	; 0x80
 8009c26:	d10e      	bne.n	8009c46 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	68db      	ldr	r3, [r3, #12]
 8009c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c32:	2b80      	cmp	r3, #128	; 0x80
 8009c34:	d107      	bne.n	8009c46 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 fb2d 	bl	800a2a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	691b      	ldr	r3, [r3, #16]
 8009c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c54:	d10e      	bne.n	8009c74 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c60:	2b80      	cmp	r3, #128	; 0x80
 8009c62:	d107      	bne.n	8009c74 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 fb20 	bl	800a2b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	691b      	ldr	r3, [r3, #16]
 8009c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c7e:	2b40      	cmp	r3, #64	; 0x40
 8009c80:	d10e      	bne.n	8009ca0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c8c:	2b40      	cmp	r3, #64	; 0x40
 8009c8e:	d107      	bne.n	8009ca0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 f92c 	bl	8009ef8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	691b      	ldr	r3, [r3, #16]
 8009ca6:	f003 0320 	and.w	r3, r3, #32
 8009caa:	2b20      	cmp	r3, #32
 8009cac:	d10e      	bne.n	8009ccc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	68db      	ldr	r3, [r3, #12]
 8009cb4:	f003 0320 	and.w	r3, r3, #32
 8009cb8:	2b20      	cmp	r3, #32
 8009cba:	d107      	bne.n	8009ccc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f06f 0220 	mvn.w	r2, #32
 8009cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 fae0 	bl	800a28c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009ccc:	bf00      	nop
 8009cce:	3708      	adds	r7, #8
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d101      	bne.n	8009cec <HAL_TIM_ConfigClockSource+0x18>
 8009ce8:	2302      	movs	r3, #2
 8009cea:	e0db      	b.n	8009ea4 <HAL_TIM_ConfigClockSource+0x1d0>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2201      	movs	r2, #1
 8009cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2202      	movs	r2, #2
 8009cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	689b      	ldr	r3, [r3, #8]
 8009d02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009d04:	68fa      	ldr	r2, [r7, #12]
 8009d06:	4b69      	ldr	r3, [pc, #420]	; (8009eac <HAL_TIM_ConfigClockSource+0x1d8>)
 8009d08:	4013      	ands	r3, r2
 8009d0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d12:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	68fa      	ldr	r2, [r7, #12]
 8009d1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a63      	ldr	r2, [pc, #396]	; (8009eb0 <HAL_TIM_ConfigClockSource+0x1dc>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	f000 80a9 	beq.w	8009e7a <HAL_TIM_ConfigClockSource+0x1a6>
 8009d28:	4a61      	ldr	r2, [pc, #388]	; (8009eb0 <HAL_TIM_ConfigClockSource+0x1dc>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	f200 80ae 	bhi.w	8009e8c <HAL_TIM_ConfigClockSource+0x1b8>
 8009d30:	4a60      	ldr	r2, [pc, #384]	; (8009eb4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	f000 80a1 	beq.w	8009e7a <HAL_TIM_ConfigClockSource+0x1a6>
 8009d38:	4a5e      	ldr	r2, [pc, #376]	; (8009eb4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	f200 80a6 	bhi.w	8009e8c <HAL_TIM_ConfigClockSource+0x1b8>
 8009d40:	4a5d      	ldr	r2, [pc, #372]	; (8009eb8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	f000 8099 	beq.w	8009e7a <HAL_TIM_ConfigClockSource+0x1a6>
 8009d48:	4a5b      	ldr	r2, [pc, #364]	; (8009eb8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	f200 809e 	bhi.w	8009e8c <HAL_TIM_ConfigClockSource+0x1b8>
 8009d50:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009d54:	f000 8091 	beq.w	8009e7a <HAL_TIM_ConfigClockSource+0x1a6>
 8009d58:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009d5c:	f200 8096 	bhi.w	8009e8c <HAL_TIM_ConfigClockSource+0x1b8>
 8009d60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d64:	f000 8089 	beq.w	8009e7a <HAL_TIM_ConfigClockSource+0x1a6>
 8009d68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d6c:	f200 808e 	bhi.w	8009e8c <HAL_TIM_ConfigClockSource+0x1b8>
 8009d70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d74:	d03e      	beq.n	8009df4 <HAL_TIM_ConfigClockSource+0x120>
 8009d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d7a:	f200 8087 	bhi.w	8009e8c <HAL_TIM_ConfigClockSource+0x1b8>
 8009d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d82:	f000 8085 	beq.w	8009e90 <HAL_TIM_ConfigClockSource+0x1bc>
 8009d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d8a:	d87f      	bhi.n	8009e8c <HAL_TIM_ConfigClockSource+0x1b8>
 8009d8c:	2b70      	cmp	r3, #112	; 0x70
 8009d8e:	d01a      	beq.n	8009dc6 <HAL_TIM_ConfigClockSource+0xf2>
 8009d90:	2b70      	cmp	r3, #112	; 0x70
 8009d92:	d87b      	bhi.n	8009e8c <HAL_TIM_ConfigClockSource+0x1b8>
 8009d94:	2b60      	cmp	r3, #96	; 0x60
 8009d96:	d050      	beq.n	8009e3a <HAL_TIM_ConfigClockSource+0x166>
 8009d98:	2b60      	cmp	r3, #96	; 0x60
 8009d9a:	d877      	bhi.n	8009e8c <HAL_TIM_ConfigClockSource+0x1b8>
 8009d9c:	2b50      	cmp	r3, #80	; 0x50
 8009d9e:	d03c      	beq.n	8009e1a <HAL_TIM_ConfigClockSource+0x146>
 8009da0:	2b50      	cmp	r3, #80	; 0x50
 8009da2:	d873      	bhi.n	8009e8c <HAL_TIM_ConfigClockSource+0x1b8>
 8009da4:	2b40      	cmp	r3, #64	; 0x40
 8009da6:	d058      	beq.n	8009e5a <HAL_TIM_ConfigClockSource+0x186>
 8009da8:	2b40      	cmp	r3, #64	; 0x40
 8009daa:	d86f      	bhi.n	8009e8c <HAL_TIM_ConfigClockSource+0x1b8>
 8009dac:	2b30      	cmp	r3, #48	; 0x30
 8009dae:	d064      	beq.n	8009e7a <HAL_TIM_ConfigClockSource+0x1a6>
 8009db0:	2b30      	cmp	r3, #48	; 0x30
 8009db2:	d86b      	bhi.n	8009e8c <HAL_TIM_ConfigClockSource+0x1b8>
 8009db4:	2b20      	cmp	r3, #32
 8009db6:	d060      	beq.n	8009e7a <HAL_TIM_ConfigClockSource+0x1a6>
 8009db8:	2b20      	cmp	r3, #32
 8009dba:	d867      	bhi.n	8009e8c <HAL_TIM_ConfigClockSource+0x1b8>
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d05c      	beq.n	8009e7a <HAL_TIM_ConfigClockSource+0x1a6>
 8009dc0:	2b10      	cmp	r3, #16
 8009dc2:	d05a      	beq.n	8009e7a <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009dc4:	e062      	b.n	8009e8c <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6818      	ldr	r0, [r3, #0]
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	6899      	ldr	r1, [r3, #8]
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	685a      	ldr	r2, [r3, #4]
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	68db      	ldr	r3, [r3, #12]
 8009dd6:	f000 f9b1 	bl	800a13c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009de8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	68fa      	ldr	r2, [r7, #12]
 8009df0:	609a      	str	r2, [r3, #8]
      break;
 8009df2:	e04e      	b.n	8009e92 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6818      	ldr	r0, [r3, #0]
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	6899      	ldr	r1, [r3, #8]
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	685a      	ldr	r2, [r3, #4]
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	68db      	ldr	r3, [r3, #12]
 8009e04:	f000 f99a 	bl	800a13c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	689a      	ldr	r2, [r3, #8]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009e16:	609a      	str	r2, [r3, #8]
      break;
 8009e18:	e03b      	b.n	8009e92 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6818      	ldr	r0, [r3, #0]
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	6859      	ldr	r1, [r3, #4]
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	461a      	mov	r2, r3
 8009e28:	f000 f90a 	bl	800a040 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	2150      	movs	r1, #80	; 0x50
 8009e32:	4618      	mov	r0, r3
 8009e34:	f000 f964 	bl	800a100 <TIM_ITRx_SetConfig>
      break;
 8009e38:	e02b      	b.n	8009e92 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6818      	ldr	r0, [r3, #0]
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	6859      	ldr	r1, [r3, #4]
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	68db      	ldr	r3, [r3, #12]
 8009e46:	461a      	mov	r2, r3
 8009e48:	f000 f929 	bl	800a09e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	2160      	movs	r1, #96	; 0x60
 8009e52:	4618      	mov	r0, r3
 8009e54:	f000 f954 	bl	800a100 <TIM_ITRx_SetConfig>
      break;
 8009e58:	e01b      	b.n	8009e92 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6818      	ldr	r0, [r3, #0]
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	6859      	ldr	r1, [r3, #4]
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	461a      	mov	r2, r3
 8009e68:	f000 f8ea 	bl	800a040 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	2140      	movs	r1, #64	; 0x40
 8009e72:	4618      	mov	r0, r3
 8009e74:	f000 f944 	bl	800a100 <TIM_ITRx_SetConfig>
      break;
 8009e78:	e00b      	b.n	8009e92 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681a      	ldr	r2, [r3, #0]
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4619      	mov	r1, r3
 8009e84:	4610      	mov	r0, r2
 8009e86:	f000 f93b 	bl	800a100 <TIM_ITRx_SetConfig>
        break;
 8009e8a:	e002      	b.n	8009e92 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8009e8c:	bf00      	nop
 8009e8e:	e000      	b.n	8009e92 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8009e90:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2201      	movs	r2, #1
 8009e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ea2:	2300      	movs	r3, #0
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3710      	adds	r7, #16
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}
 8009eac:	ffceff88 	.word	0xffceff88
 8009eb0:	00100040 	.word	0x00100040
 8009eb4:	00100030 	.word	0x00100030
 8009eb8:	00100020 	.word	0x00100020

08009ebc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b083      	sub	sp, #12
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ec4:	bf00      	nop
 8009ec6:	370c      	adds	r7, #12
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009ed8:	bf00      	nop
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr

08009ee4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009eec:	bf00      	nop
 8009eee:	370c      	adds	r7, #12
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b083      	sub	sp, #12
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009f00:	bf00      	nop
 8009f02:	370c      	adds	r7, #12
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr

08009f0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b085      	sub	sp, #20
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	4a40      	ldr	r2, [pc, #256]	; (800a020 <TIM_Base_SetConfig+0x114>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d013      	beq.n	8009f4c <TIM_Base_SetConfig+0x40>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f2a:	d00f      	beq.n	8009f4c <TIM_Base_SetConfig+0x40>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	4a3d      	ldr	r2, [pc, #244]	; (800a024 <TIM_Base_SetConfig+0x118>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d00b      	beq.n	8009f4c <TIM_Base_SetConfig+0x40>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	4a3c      	ldr	r2, [pc, #240]	; (800a028 <TIM_Base_SetConfig+0x11c>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d007      	beq.n	8009f4c <TIM_Base_SetConfig+0x40>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	4a3b      	ldr	r2, [pc, #236]	; (800a02c <TIM_Base_SetConfig+0x120>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d003      	beq.n	8009f4c <TIM_Base_SetConfig+0x40>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	4a3a      	ldr	r2, [pc, #232]	; (800a030 <TIM_Base_SetConfig+0x124>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d108      	bne.n	8009f5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	4a2f      	ldr	r2, [pc, #188]	; (800a020 <TIM_Base_SetConfig+0x114>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d01f      	beq.n	8009fa6 <TIM_Base_SetConfig+0x9a>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f6c:	d01b      	beq.n	8009fa6 <TIM_Base_SetConfig+0x9a>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	4a2c      	ldr	r2, [pc, #176]	; (800a024 <TIM_Base_SetConfig+0x118>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d017      	beq.n	8009fa6 <TIM_Base_SetConfig+0x9a>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	4a2b      	ldr	r2, [pc, #172]	; (800a028 <TIM_Base_SetConfig+0x11c>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d013      	beq.n	8009fa6 <TIM_Base_SetConfig+0x9a>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	4a2a      	ldr	r2, [pc, #168]	; (800a02c <TIM_Base_SetConfig+0x120>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d00f      	beq.n	8009fa6 <TIM_Base_SetConfig+0x9a>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	4a29      	ldr	r2, [pc, #164]	; (800a030 <TIM_Base_SetConfig+0x124>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d00b      	beq.n	8009fa6 <TIM_Base_SetConfig+0x9a>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	4a28      	ldr	r2, [pc, #160]	; (800a034 <TIM_Base_SetConfig+0x128>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d007      	beq.n	8009fa6 <TIM_Base_SetConfig+0x9a>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	4a27      	ldr	r2, [pc, #156]	; (800a038 <TIM_Base_SetConfig+0x12c>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d003      	beq.n	8009fa6 <TIM_Base_SetConfig+0x9a>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	4a26      	ldr	r2, [pc, #152]	; (800a03c <TIM_Base_SetConfig+0x130>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d108      	bne.n	8009fb8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	68db      	ldr	r3, [r3, #12]
 8009fb2:	68fa      	ldr	r2, [r7, #12]
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	695b      	ldr	r3, [r3, #20]
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	68fa      	ldr	r2, [r7, #12]
 8009fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	689a      	ldr	r2, [r3, #8]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	4a10      	ldr	r2, [pc, #64]	; (800a020 <TIM_Base_SetConfig+0x114>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d00f      	beq.n	800a004 <TIM_Base_SetConfig+0xf8>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	4a12      	ldr	r2, [pc, #72]	; (800a030 <TIM_Base_SetConfig+0x124>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d00b      	beq.n	800a004 <TIM_Base_SetConfig+0xf8>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	4a11      	ldr	r2, [pc, #68]	; (800a034 <TIM_Base_SetConfig+0x128>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d007      	beq.n	800a004 <TIM_Base_SetConfig+0xf8>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	4a10      	ldr	r2, [pc, #64]	; (800a038 <TIM_Base_SetConfig+0x12c>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d003      	beq.n	800a004 <TIM_Base_SetConfig+0xf8>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4a0f      	ldr	r2, [pc, #60]	; (800a03c <TIM_Base_SetConfig+0x130>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d103      	bne.n	800a00c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	691a      	ldr	r2, [r3, #16]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2201      	movs	r2, #1
 800a010:	615a      	str	r2, [r3, #20]
}
 800a012:	bf00      	nop
 800a014:	3714      	adds	r7, #20
 800a016:	46bd      	mov	sp, r7
 800a018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01c:	4770      	bx	lr
 800a01e:	bf00      	nop
 800a020:	40010000 	.word	0x40010000
 800a024:	40000400 	.word	0x40000400
 800a028:	40000800 	.word	0x40000800
 800a02c:	40000c00 	.word	0x40000c00
 800a030:	40010400 	.word	0x40010400
 800a034:	40014000 	.word	0x40014000
 800a038:	40014400 	.word	0x40014400
 800a03c:	40014800 	.word	0x40014800

0800a040 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a040:	b480      	push	{r7}
 800a042:	b087      	sub	sp, #28
 800a044:	af00      	add	r7, sp, #0
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	60b9      	str	r1, [r7, #8]
 800a04a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6a1b      	ldr	r3, [r3, #32]
 800a050:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	6a1b      	ldr	r3, [r3, #32]
 800a056:	f023 0201 	bic.w	r2, r3, #1
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	699b      	ldr	r3, [r3, #24]
 800a062:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a06a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	011b      	lsls	r3, r3, #4
 800a070:	693a      	ldr	r2, [r7, #16]
 800a072:	4313      	orrs	r3, r2
 800a074:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	f023 030a 	bic.w	r3, r3, #10
 800a07c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a07e:	697a      	ldr	r2, [r7, #20]
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	4313      	orrs	r3, r2
 800a084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	693a      	ldr	r2, [r7, #16]
 800a08a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	697a      	ldr	r2, [r7, #20]
 800a090:	621a      	str	r2, [r3, #32]
}
 800a092:	bf00      	nop
 800a094:	371c      	adds	r7, #28
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr

0800a09e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a09e:	b480      	push	{r7}
 800a0a0:	b087      	sub	sp, #28
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	60f8      	str	r0, [r7, #12]
 800a0a6:	60b9      	str	r1, [r7, #8]
 800a0a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	6a1b      	ldr	r3, [r3, #32]
 800a0ae:	f023 0210 	bic.w	r2, r3, #16
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	699b      	ldr	r3, [r3, #24]
 800a0ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	6a1b      	ldr	r3, [r3, #32]
 800a0c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a0c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	031b      	lsls	r3, r3, #12
 800a0ce:	697a      	ldr	r2, [r7, #20]
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a0da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	011b      	lsls	r3, r3, #4
 800a0e0:	693a      	ldr	r2, [r7, #16]
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	697a      	ldr	r2, [r7, #20]
 800a0ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	693a      	ldr	r2, [r7, #16]
 800a0f0:	621a      	str	r2, [r3, #32]
}
 800a0f2:	bf00      	nop
 800a0f4:	371c      	adds	r7, #28
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fc:	4770      	bx	lr
	...

0800a100 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a100:	b480      	push	{r7}
 800a102:	b085      	sub	sp, #20
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	689b      	ldr	r3, [r3, #8]
 800a10e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a110:	68fa      	ldr	r2, [r7, #12]
 800a112:	4b09      	ldr	r3, [pc, #36]	; (800a138 <TIM_ITRx_SetConfig+0x38>)
 800a114:	4013      	ands	r3, r2
 800a116:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a118:	683a      	ldr	r2, [r7, #0]
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	4313      	orrs	r3, r2
 800a11e:	f043 0307 	orr.w	r3, r3, #7
 800a122:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	68fa      	ldr	r2, [r7, #12]
 800a128:	609a      	str	r2, [r3, #8]
}
 800a12a:	bf00      	nop
 800a12c:	3714      	adds	r7, #20
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr
 800a136:	bf00      	nop
 800a138:	ffcfff8f 	.word	0xffcfff8f

0800a13c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b087      	sub	sp, #28
 800a140:	af00      	add	r7, sp, #0
 800a142:	60f8      	str	r0, [r7, #12]
 800a144:	60b9      	str	r1, [r7, #8]
 800a146:	607a      	str	r2, [r7, #4]
 800a148:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	689b      	ldr	r3, [r3, #8]
 800a14e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a156:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	021a      	lsls	r2, r3, #8
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	431a      	orrs	r2, r3
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	4313      	orrs	r3, r2
 800a164:	697a      	ldr	r2, [r7, #20]
 800a166:	4313      	orrs	r3, r2
 800a168:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	697a      	ldr	r2, [r7, #20]
 800a16e:	609a      	str	r2, [r3, #8]
}
 800a170:	bf00      	nop
 800a172:	371c      	adds	r7, #28
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr

0800a17c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b085      	sub	sp, #20
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d101      	bne.n	800a194 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a190:	2302      	movs	r3, #2
 800a192:	e068      	b.n	800a266 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2201      	movs	r2, #1
 800a198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2202      	movs	r2, #2
 800a1a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a2e      	ldr	r2, [pc, #184]	; (800a274 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d004      	beq.n	800a1c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4a2d      	ldr	r2, [pc, #180]	; (800a278 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d108      	bne.n	800a1da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a1ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	68fa      	ldr	r2, [r7, #12]
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	68fa      	ldr	r2, [r7, #12]
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	68fa      	ldr	r2, [r7, #12]
 800a1f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a1e      	ldr	r2, [pc, #120]	; (800a274 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d01d      	beq.n	800a23a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a206:	d018      	beq.n	800a23a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a1b      	ldr	r2, [pc, #108]	; (800a27c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d013      	beq.n	800a23a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a1a      	ldr	r2, [pc, #104]	; (800a280 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d00e      	beq.n	800a23a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a18      	ldr	r2, [pc, #96]	; (800a284 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d009      	beq.n	800a23a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a13      	ldr	r2, [pc, #76]	; (800a278 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d004      	beq.n	800a23a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4a14      	ldr	r2, [pc, #80]	; (800a288 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d10c      	bne.n	800a254 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a240:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	68ba      	ldr	r2, [r7, #8]
 800a248:	4313      	orrs	r3, r2
 800a24a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	68ba      	ldr	r2, [r7, #8]
 800a252:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2201      	movs	r2, #1
 800a258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2200      	movs	r2, #0
 800a260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a264:	2300      	movs	r3, #0
}
 800a266:	4618      	mov	r0, r3
 800a268:	3714      	adds	r7, #20
 800a26a:	46bd      	mov	sp, r7
 800a26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a270:	4770      	bx	lr
 800a272:	bf00      	nop
 800a274:	40010000 	.word	0x40010000
 800a278:	40010400 	.word	0x40010400
 800a27c:	40000400 	.word	0x40000400
 800a280:	40000800 	.word	0x40000800
 800a284:	40000c00 	.word	0x40000c00
 800a288:	40001800 	.word	0x40001800

0800a28c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a294:	bf00      	nop
 800a296:	370c      	adds	r7, #12
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr

0800a2a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b083      	sub	sp, #12
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a2a8:	bf00      	nop
 800a2aa:	370c      	adds	r7, #12
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr

0800a2b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b083      	sub	sp, #12
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a2bc:	bf00      	nop
 800a2be:	370c      	adds	r7, #12
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr

0800a2c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d101      	bne.n	800a2da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	e042      	b.n	800a360 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d106      	bne.n	800a2f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f7f9 fd05 	bl	8003cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2224      	movs	r2, #36	; 0x24
 800a2f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	681a      	ldr	r2, [r3, #0]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f022 0201 	bic.w	r2, r2, #1
 800a308:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f000 fcb6 	bl	800ac7c <UART_SetConfig>
 800a310:	4603      	mov	r3, r0
 800a312:	2b01      	cmp	r3, #1
 800a314:	d101      	bne.n	800a31a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a316:	2301      	movs	r3, #1
 800a318:	e022      	b.n	800a360 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d002      	beq.n	800a328 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f001 fa0a 	bl	800b73c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	685a      	ldr	r2, [r3, #4]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a336:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	689a      	ldr	r2, [r3, #8]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a346:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	681a      	ldr	r2, [r3, #0]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f042 0201 	orr.w	r2, r2, #1
 800a356:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f001 fa91 	bl	800b880 <UART_CheckIdleState>
 800a35e:	4603      	mov	r3, r0
}
 800a360:	4618      	mov	r0, r3
 800a362:	3708      	adds	r7, #8
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}

0800a368 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b08a      	sub	sp, #40	; 0x28
 800a36c:	af02      	add	r7, sp, #8
 800a36e:	60f8      	str	r0, [r7, #12]
 800a370:	60b9      	str	r1, [r7, #8]
 800a372:	603b      	str	r3, [r7, #0]
 800a374:	4613      	mov	r3, r2
 800a376:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a37e:	2b20      	cmp	r3, #32
 800a380:	f040 8083 	bne.w	800a48a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d002      	beq.n	800a390 <HAL_UART_Transmit+0x28>
 800a38a:	88fb      	ldrh	r3, [r7, #6]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d101      	bne.n	800a394 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a390:	2301      	movs	r3, #1
 800a392:	e07b      	b.n	800a48c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a39a:	2b01      	cmp	r3, #1
 800a39c:	d101      	bne.n	800a3a2 <HAL_UART_Transmit+0x3a>
 800a39e:	2302      	movs	r3, #2
 800a3a0:	e074      	b.n	800a48c <HAL_UART_Transmit+0x124>
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2221      	movs	r2, #33	; 0x21
 800a3b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a3ba:	f7f9 ff55 	bl	8004268 <HAL_GetTick>
 800a3be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	88fa      	ldrh	r2, [r7, #6]
 800a3c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	88fa      	ldrh	r2, [r7, #6]
 800a3cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	689b      	ldr	r3, [r3, #8]
 800a3d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3d8:	d108      	bne.n	800a3ec <HAL_UART_Transmit+0x84>
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	691b      	ldr	r3, [r3, #16]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d104      	bne.n	800a3ec <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	61bb      	str	r3, [r7, #24]
 800a3ea:	e003      	b.n	800a3f4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800a3fc:	e02c      	b.n	800a458 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	9300      	str	r3, [sp, #0]
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	2200      	movs	r2, #0
 800a406:	2180      	movs	r1, #128	; 0x80
 800a408:	68f8      	ldr	r0, [r7, #12]
 800a40a:	f001 fa84 	bl	800b916 <UART_WaitOnFlagUntilTimeout>
 800a40e:	4603      	mov	r3, r0
 800a410:	2b00      	cmp	r3, #0
 800a412:	d001      	beq.n	800a418 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a414:	2303      	movs	r3, #3
 800a416:	e039      	b.n	800a48c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800a418:	69fb      	ldr	r3, [r7, #28]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d10b      	bne.n	800a436 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a41e:	69bb      	ldr	r3, [r7, #24]
 800a420:	881b      	ldrh	r3, [r3, #0]
 800a422:	461a      	mov	r2, r3
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a42c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a42e:	69bb      	ldr	r3, [r7, #24]
 800a430:	3302      	adds	r3, #2
 800a432:	61bb      	str	r3, [r7, #24]
 800a434:	e007      	b.n	800a446 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a436:	69fb      	ldr	r3, [r7, #28]
 800a438:	781a      	ldrb	r2, [r3, #0]
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a440:	69fb      	ldr	r3, [r7, #28]
 800a442:	3301      	adds	r3, #1
 800a444:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	3b01      	subs	r3, #1
 800a450:	b29a      	uxth	r2, r3
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a45e:	b29b      	uxth	r3, r3
 800a460:	2b00      	cmp	r3, #0
 800a462:	d1cc      	bne.n	800a3fe <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	9300      	str	r3, [sp, #0]
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	2200      	movs	r2, #0
 800a46c:	2140      	movs	r1, #64	; 0x40
 800a46e:	68f8      	ldr	r0, [r7, #12]
 800a470:	f001 fa51 	bl	800b916 <UART_WaitOnFlagUntilTimeout>
 800a474:	4603      	mov	r3, r0
 800a476:	2b00      	cmp	r3, #0
 800a478:	d001      	beq.n	800a47e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800a47a:	2303      	movs	r3, #3
 800a47c:	e006      	b.n	800a48c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2220      	movs	r2, #32
 800a482:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800a486:	2300      	movs	r3, #0
 800a488:	e000      	b.n	800a48c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800a48a:	2302      	movs	r3, #2
  }
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3720      	adds	r7, #32
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b08a      	sub	sp, #40	; 0x28
 800a498:	af02      	add	r7, sp, #8
 800a49a:	60f8      	str	r0, [r7, #12]
 800a49c:	60b9      	str	r1, [r7, #8]
 800a49e:	603b      	str	r3, [r7, #0]
 800a4a0:	4613      	mov	r3, r2
 800a4a2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4aa:	2b20      	cmp	r3, #32
 800a4ac:	f040 80c0 	bne.w	800a630 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d002      	beq.n	800a4bc <HAL_UART_Receive+0x28>
 800a4b6:	88fb      	ldrh	r3, [r7, #6]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d101      	bne.n	800a4c0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800a4bc:	2301      	movs	r3, #1
 800a4be:	e0b8      	b.n	800a632 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d101      	bne.n	800a4ce <HAL_UART_Receive+0x3a>
 800a4ca:	2302      	movs	r3, #2
 800a4cc:	e0b1      	b.n	800a632 <HAL_UART_Receive+0x19e>
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2222      	movs	r2, #34	; 0x22
 800a4e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a4ec:	f7f9 febc 	bl	8004268 <HAL_GetTick>
 800a4f0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	88fa      	ldrh	r2, [r7, #6]
 800a4f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	88fa      	ldrh	r2, [r7, #6]
 800a4fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	689b      	ldr	r3, [r3, #8]
 800a506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a50a:	d10e      	bne.n	800a52a <HAL_UART_Receive+0x96>
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	691b      	ldr	r3, [r3, #16]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d105      	bne.n	800a520 <HAL_UART_Receive+0x8c>
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a51a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a51e:	e02d      	b.n	800a57c <HAL_UART_Receive+0xe8>
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	22ff      	movs	r2, #255	; 0xff
 800a524:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a528:	e028      	b.n	800a57c <HAL_UART_Receive+0xe8>
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	689b      	ldr	r3, [r3, #8]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d10d      	bne.n	800a54e <HAL_UART_Receive+0xba>
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	691b      	ldr	r3, [r3, #16]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d104      	bne.n	800a544 <HAL_UART_Receive+0xb0>
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	22ff      	movs	r2, #255	; 0xff
 800a53e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a542:	e01b      	b.n	800a57c <HAL_UART_Receive+0xe8>
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	227f      	movs	r2, #127	; 0x7f
 800a548:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a54c:	e016      	b.n	800a57c <HAL_UART_Receive+0xe8>
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	689b      	ldr	r3, [r3, #8]
 800a552:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a556:	d10d      	bne.n	800a574 <HAL_UART_Receive+0xe0>
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	691b      	ldr	r3, [r3, #16]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d104      	bne.n	800a56a <HAL_UART_Receive+0xd6>
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	227f      	movs	r2, #127	; 0x7f
 800a564:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a568:	e008      	b.n	800a57c <HAL_UART_Receive+0xe8>
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	223f      	movs	r2, #63	; 0x3f
 800a56e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a572:	e003      	b.n	800a57c <HAL_UART_Receive+0xe8>
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2200      	movs	r2, #0
 800a578:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a582:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	689b      	ldr	r3, [r3, #8]
 800a588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a58c:	d108      	bne.n	800a5a0 <HAL_UART_Receive+0x10c>
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	691b      	ldr	r3, [r3, #16]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d104      	bne.n	800a5a0 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800a596:	2300      	movs	r3, #0
 800a598:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	61bb      	str	r3, [r7, #24]
 800a59e:	e003      	b.n	800a5a8 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800a5b0:	e032      	b.n	800a618 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	9300      	str	r3, [sp, #0]
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	2120      	movs	r1, #32
 800a5bc:	68f8      	ldr	r0, [r7, #12]
 800a5be:	f001 f9aa 	bl	800b916 <UART_WaitOnFlagUntilTimeout>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d001      	beq.n	800a5cc <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800a5c8:	2303      	movs	r3, #3
 800a5ca:	e032      	b.n	800a632 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800a5cc:	69fb      	ldr	r3, [r7, #28]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d10c      	bne.n	800a5ec <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d8:	b29a      	uxth	r2, r3
 800a5da:	8a7b      	ldrh	r3, [r7, #18]
 800a5dc:	4013      	ands	r3, r2
 800a5de:	b29a      	uxth	r2, r3
 800a5e0:	69bb      	ldr	r3, [r7, #24]
 800a5e2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a5e4:	69bb      	ldr	r3, [r7, #24]
 800a5e6:	3302      	adds	r3, #2
 800a5e8:	61bb      	str	r3, [r7, #24]
 800a5ea:	e00c      	b.n	800a606 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f2:	b2da      	uxtb	r2, r3
 800a5f4:	8a7b      	ldrh	r3, [r7, #18]
 800a5f6:	b2db      	uxtb	r3, r3
 800a5f8:	4013      	ands	r3, r2
 800a5fa:	b2da      	uxtb	r2, r3
 800a5fc:	69fb      	ldr	r3, [r7, #28]
 800a5fe:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800a600:	69fb      	ldr	r3, [r7, #28]
 800a602:	3301      	adds	r3, #1
 800a604:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	3b01      	subs	r3, #1
 800a610:	b29a      	uxth	r2, r3
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a61e:	b29b      	uxth	r3, r3
 800a620:	2b00      	cmp	r3, #0
 800a622:	d1c6      	bne.n	800a5b2 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	2220      	movs	r2, #32
 800a628:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a62c:	2300      	movs	r3, #0
 800a62e:	e000      	b.n	800a632 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800a630:	2302      	movs	r3, #2
  }
}
 800a632:	4618      	mov	r0, r3
 800a634:	3720      	adds	r7, #32
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
	...

0800a63c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b084      	sub	sp, #16
 800a640:	af00      	add	r7, sp, #0
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	60b9      	str	r1, [r7, #8]
 800a646:	4613      	mov	r3, r2
 800a648:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a650:	2b20      	cmp	r3, #32
 800a652:	d131      	bne.n	800a6b8 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d002      	beq.n	800a660 <HAL_UART_Receive_IT+0x24>
 800a65a:	88fb      	ldrh	r3, [r7, #6]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d101      	bne.n	800a664 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a660:	2301      	movs	r3, #1
 800a662:	e02a      	b.n	800a6ba <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d101      	bne.n	800a672 <HAL_UART_Receive_IT+0x36>
 800a66e:	2302      	movs	r3, #2
 800a670:	e023      	b.n	800a6ba <HAL_UART_Receive_IT+0x7e>
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2201      	movs	r2, #1
 800a676:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2200      	movs	r2, #0
 800a67e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a0f      	ldr	r2, [pc, #60]	; (800a6c4 <HAL_UART_Receive_IT+0x88>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d00e      	beq.n	800a6a8 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a694:	2b00      	cmp	r3, #0
 800a696:	d007      	beq.n	800a6a8 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800a6a6:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a6a8:	88fb      	ldrh	r3, [r7, #6]
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	68b9      	ldr	r1, [r7, #8]
 800a6ae:	68f8      	ldr	r0, [r7, #12]
 800a6b0:	f001 f9b2 	bl	800ba18 <UART_Start_Receive_IT>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	e000      	b.n	800a6ba <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800a6b8:	2302      	movs	r3, #2
  }
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3710      	adds	r7, #16
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	58000c00 	.word	0x58000c00

0800a6c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b088      	sub	sp, #32
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	69db      	ldr	r3, [r3, #28]
 800a6d6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	689b      	ldr	r3, [r3, #8]
 800a6e6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a6e8:	69fa      	ldr	r2, [r7, #28]
 800a6ea:	f640 030f 	movw	r3, #2063	; 0x80f
 800a6ee:	4013      	ands	r3, r2
 800a6f0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d118      	bne.n	800a72a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a6f8:	69fb      	ldr	r3, [r7, #28]
 800a6fa:	f003 0320 	and.w	r3, r3, #32
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d013      	beq.n	800a72a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a702:	69bb      	ldr	r3, [r7, #24]
 800a704:	f003 0320 	and.w	r3, r3, #32
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d104      	bne.n	800a716 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a712:	2b00      	cmp	r3, #0
 800a714:	d009      	beq.n	800a72a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	f000 8282 	beq.w	800ac24 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	4798      	blx	r3
      }
      return;
 800a728:	e27c      	b.n	800ac24 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	f000 80ef 	beq.w	800a910 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a732:	697a      	ldr	r2, [r7, #20]
 800a734:	4b73      	ldr	r3, [pc, #460]	; (800a904 <HAL_UART_IRQHandler+0x23c>)
 800a736:	4013      	ands	r3, r2
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d105      	bne.n	800a748 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a73c:	69ba      	ldr	r2, [r7, #24]
 800a73e:	4b72      	ldr	r3, [pc, #456]	; (800a908 <HAL_UART_IRQHandler+0x240>)
 800a740:	4013      	ands	r3, r2
 800a742:	2b00      	cmp	r3, #0
 800a744:	f000 80e4 	beq.w	800a910 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a748:	69fb      	ldr	r3, [r7, #28]
 800a74a:	f003 0301 	and.w	r3, r3, #1
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d010      	beq.n	800a774 <HAL_UART_IRQHandler+0xac>
 800a752:	69bb      	ldr	r3, [r7, #24]
 800a754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d00b      	beq.n	800a774 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	2201      	movs	r2, #1
 800a762:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a76a:	f043 0201 	orr.w	r2, r3, #1
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a774:	69fb      	ldr	r3, [r7, #28]
 800a776:	f003 0302 	and.w	r3, r3, #2
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d010      	beq.n	800a7a0 <HAL_UART_IRQHandler+0xd8>
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	f003 0301 	and.w	r3, r3, #1
 800a784:	2b00      	cmp	r3, #0
 800a786:	d00b      	beq.n	800a7a0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	2202      	movs	r2, #2
 800a78e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a796:	f043 0204 	orr.w	r2, r3, #4
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a7a0:	69fb      	ldr	r3, [r7, #28]
 800a7a2:	f003 0304 	and.w	r3, r3, #4
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d010      	beq.n	800a7cc <HAL_UART_IRQHandler+0x104>
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	f003 0301 	and.w	r3, r3, #1
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d00b      	beq.n	800a7cc <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	2204      	movs	r2, #4
 800a7ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7c2:	f043 0202 	orr.w	r2, r3, #2
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a7cc:	69fb      	ldr	r3, [r7, #28]
 800a7ce:	f003 0308 	and.w	r3, r3, #8
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d015      	beq.n	800a802 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a7d6:	69bb      	ldr	r3, [r7, #24]
 800a7d8:	f003 0320 	and.w	r3, r3, #32
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d104      	bne.n	800a7ea <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a7e0:	697a      	ldr	r2, [r7, #20]
 800a7e2:	4b48      	ldr	r3, [pc, #288]	; (800a904 <HAL_UART_IRQHandler+0x23c>)
 800a7e4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d00b      	beq.n	800a802 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	2208      	movs	r2, #8
 800a7f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7f8:	f043 0208 	orr.w	r2, r3, #8
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a802:	69fb      	ldr	r3, [r7, #28]
 800a804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d011      	beq.n	800a830 <HAL_UART_IRQHandler+0x168>
 800a80c:	69bb      	ldr	r3, [r7, #24]
 800a80e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a812:	2b00      	cmp	r3, #0
 800a814:	d00c      	beq.n	800a830 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a81e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a826:	f043 0220 	orr.w	r2, r3, #32
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a836:	2b00      	cmp	r3, #0
 800a838:	f000 81f6 	beq.w	800ac28 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a83c:	69fb      	ldr	r3, [r7, #28]
 800a83e:	f003 0320 	and.w	r3, r3, #32
 800a842:	2b00      	cmp	r3, #0
 800a844:	d011      	beq.n	800a86a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a846:	69bb      	ldr	r3, [r7, #24]
 800a848:	f003 0320 	and.w	r3, r3, #32
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d104      	bne.n	800a85a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a856:	2b00      	cmp	r3, #0
 800a858:	d007      	beq.n	800a86a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d003      	beq.n	800a86a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a870:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	689b      	ldr	r3, [r3, #8]
 800a878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a87c:	2b40      	cmp	r3, #64	; 0x40
 800a87e:	d004      	beq.n	800a88a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a886:	2b00      	cmp	r3, #0
 800a888:	d031      	beq.n	800a8ee <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f001 f982 	bl	800bb94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	689b      	ldr	r3, [r3, #8]
 800a896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a89a:	2b40      	cmp	r3, #64	; 0x40
 800a89c:	d123      	bne.n	800a8e6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	689a      	ldr	r2, [r3, #8]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a8ac:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d013      	beq.n	800a8de <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8ba:	4a14      	ldr	r2, [pc, #80]	; (800a90c <HAL_UART_IRQHandler+0x244>)
 800a8bc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7fa f94e 	bl	8004b64 <HAL_DMA_Abort_IT>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d017      	beq.n	800a8fe <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8d4:	687a      	ldr	r2, [r7, #4]
 800a8d6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800a8d8:	4610      	mov	r0, r2
 800a8da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8dc:	e00f      	b.n	800a8fe <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f000 f9b6 	bl	800ac50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8e4:	e00b      	b.n	800a8fe <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f000 f9b2 	bl	800ac50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8ec:	e007      	b.n	800a8fe <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f000 f9ae 	bl	800ac50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800a8fc:	e194      	b.n	800ac28 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8fe:	bf00      	nop
    return;
 800a900:	e192      	b.n	800ac28 <HAL_UART_IRQHandler+0x560>
 800a902:	bf00      	nop
 800a904:	10000001 	.word	0x10000001
 800a908:	04000120 	.word	0x04000120
 800a90c:	0800bbf9 	.word	0x0800bbf9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a914:	2b01      	cmp	r3, #1
 800a916:	f040 810f 	bne.w	800ab38 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a91a:	69fb      	ldr	r3, [r7, #28]
 800a91c:	f003 0310 	and.w	r3, r3, #16
 800a920:	2b00      	cmp	r3, #0
 800a922:	f000 8109 	beq.w	800ab38 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a926:	69bb      	ldr	r3, [r7, #24]
 800a928:	f003 0310 	and.w	r3, r3, #16
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	f000 8103 	beq.w	800ab38 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	2210      	movs	r2, #16
 800a938:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	689b      	ldr	r3, [r3, #8]
 800a940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a944:	2b40      	cmp	r3, #64	; 0x40
 800a946:	f040 80bb 	bne.w	800aac0 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4a96      	ldr	r2, [pc, #600]	; (800abac <HAL_UART_IRQHandler+0x4e4>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d059      	beq.n	800aa0a <HAL_UART_IRQHandler+0x342>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a94      	ldr	r2, [pc, #592]	; (800abb0 <HAL_UART_IRQHandler+0x4e8>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d053      	beq.n	800aa0a <HAL_UART_IRQHandler+0x342>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4a92      	ldr	r2, [pc, #584]	; (800abb4 <HAL_UART_IRQHandler+0x4ec>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d04d      	beq.n	800aa0a <HAL_UART_IRQHandler+0x342>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4a90      	ldr	r2, [pc, #576]	; (800abb8 <HAL_UART_IRQHandler+0x4f0>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d047      	beq.n	800aa0a <HAL_UART_IRQHandler+0x342>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	4a8e      	ldr	r2, [pc, #568]	; (800abbc <HAL_UART_IRQHandler+0x4f4>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d041      	beq.n	800aa0a <HAL_UART_IRQHandler+0x342>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	4a8c      	ldr	r2, [pc, #560]	; (800abc0 <HAL_UART_IRQHandler+0x4f8>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d03b      	beq.n	800aa0a <HAL_UART_IRQHandler+0x342>
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4a8a      	ldr	r2, [pc, #552]	; (800abc4 <HAL_UART_IRQHandler+0x4fc>)
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d035      	beq.n	800aa0a <HAL_UART_IRQHandler+0x342>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4a88      	ldr	r2, [pc, #544]	; (800abc8 <HAL_UART_IRQHandler+0x500>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d02f      	beq.n	800aa0a <HAL_UART_IRQHandler+0x342>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4a86      	ldr	r2, [pc, #536]	; (800abcc <HAL_UART_IRQHandler+0x504>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d029      	beq.n	800aa0a <HAL_UART_IRQHandler+0x342>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	4a84      	ldr	r2, [pc, #528]	; (800abd0 <HAL_UART_IRQHandler+0x508>)
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d023      	beq.n	800aa0a <HAL_UART_IRQHandler+0x342>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	4a82      	ldr	r2, [pc, #520]	; (800abd4 <HAL_UART_IRQHandler+0x50c>)
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d01d      	beq.n	800aa0a <HAL_UART_IRQHandler+0x342>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4a80      	ldr	r2, [pc, #512]	; (800abd8 <HAL_UART_IRQHandler+0x510>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d017      	beq.n	800aa0a <HAL_UART_IRQHandler+0x342>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4a7e      	ldr	r2, [pc, #504]	; (800abdc <HAL_UART_IRQHandler+0x514>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d011      	beq.n	800aa0a <HAL_UART_IRQHandler+0x342>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a7c      	ldr	r2, [pc, #496]	; (800abe0 <HAL_UART_IRQHandler+0x518>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d00b      	beq.n	800aa0a <HAL_UART_IRQHandler+0x342>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4a7a      	ldr	r2, [pc, #488]	; (800abe4 <HAL_UART_IRQHandler+0x51c>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d005      	beq.n	800aa0a <HAL_UART_IRQHandler+0x342>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4a78      	ldr	r2, [pc, #480]	; (800abe8 <HAL_UART_IRQHandler+0x520>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d105      	bne.n	800aa16 <HAL_UART_IRQHandler+0x34e>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	e004      	b.n	800aa20 <HAL_UART_IRQHandler+0x358>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	b29b      	uxth	r3, r3
 800aa20:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800aa22:	893b      	ldrh	r3, [r7, #8]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	f000 8101 	beq.w	800ac2c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aa30:	893a      	ldrh	r2, [r7, #8]
 800aa32:	429a      	cmp	r2, r3
 800aa34:	f080 80fa 	bcs.w	800ac2c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	893a      	ldrh	r2, [r7, #8]
 800aa3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa44:	69db      	ldr	r3, [r3, #28]
 800aa46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa4a:	d02b      	beq.n	800aaa4 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	681a      	ldr	r2, [r3, #0]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aa5a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	689a      	ldr	r2, [r3, #8]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f022 0201 	bic.w	r2, r2, #1
 800aa6a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	689a      	ldr	r2, [r3, #8]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa7a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2220      	movs	r2, #32
 800aa80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	681a      	ldr	r2, [r3, #0]
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f022 0210 	bic.w	r2, r2, #16
 800aa98:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f7f9 fd42 	bl	8004528 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	1ad3      	subs	r3, r2, r3
 800aab4:	b29b      	uxth	r3, r3
 800aab6:	4619      	mov	r1, r3
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 f8d3 	bl	800ac64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aabe:	e0b5      	b.n	800ac2c <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aacc:	b29b      	uxth	r3, r3
 800aace:	1ad3      	subs	r3, r2, r3
 800aad0:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aad8:	b29b      	uxth	r3, r3
 800aada:	2b00      	cmp	r3, #0
 800aadc:	f000 80a8 	beq.w	800ac30 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800aae0:	897b      	ldrh	r3, [r7, #10]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	f000 80a4 	beq.w	800ac30 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800aaf6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	6899      	ldr	r1, [r3, #8]
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681a      	ldr	r2, [r3, #0]
 800ab02:	4b3a      	ldr	r3, [pc, #232]	; (800abec <HAL_UART_IRQHandler+0x524>)
 800ab04:	400b      	ands	r3, r1
 800ab06:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2220      	movs	r2, #32
 800ab0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2200      	movs	r2, #0
 800ab14:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f022 0210 	bic.w	r2, r2, #16
 800ab2a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ab2c:	897b      	ldrh	r3, [r7, #10]
 800ab2e:	4619      	mov	r1, r3
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 f897 	bl	800ac64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ab36:	e07b      	b.n	800ac30 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ab38:	69fb      	ldr	r3, [r7, #28]
 800ab3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d00d      	beq.n	800ab5e <HAL_UART_IRQHandler+0x496>
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d008      	beq.n	800ab5e <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ab54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f001 fb5a 	bl	800c210 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ab5c:	e06b      	b.n	800ac36 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ab5e:	69fb      	ldr	r3, [r7, #28]
 800ab60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d012      	beq.n	800ab8e <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ab68:	69bb      	ldr	r3, [r7, #24]
 800ab6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d104      	bne.n	800ab7c <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d008      	beq.n	800ab8e <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d057      	beq.n	800ac34 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	4798      	blx	r3
    }
    return;
 800ab8c:	e052      	b.n	800ac34 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ab8e:	69fb      	ldr	r3, [r7, #28]
 800ab90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d02b      	beq.n	800abf0 <HAL_UART_IRQHandler+0x528>
 800ab98:	69bb      	ldr	r3, [r7, #24]
 800ab9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d026      	beq.n	800abf0 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f001 f83e 	bl	800bc24 <UART_EndTransmit_IT>
    return;
 800aba8:	e045      	b.n	800ac36 <HAL_UART_IRQHandler+0x56e>
 800abaa:	bf00      	nop
 800abac:	40020010 	.word	0x40020010
 800abb0:	40020028 	.word	0x40020028
 800abb4:	40020040 	.word	0x40020040
 800abb8:	40020058 	.word	0x40020058
 800abbc:	40020070 	.word	0x40020070
 800abc0:	40020088 	.word	0x40020088
 800abc4:	400200a0 	.word	0x400200a0
 800abc8:	400200b8 	.word	0x400200b8
 800abcc:	40020410 	.word	0x40020410
 800abd0:	40020428 	.word	0x40020428
 800abd4:	40020440 	.word	0x40020440
 800abd8:	40020458 	.word	0x40020458
 800abdc:	40020470 	.word	0x40020470
 800abe0:	40020488 	.word	0x40020488
 800abe4:	400204a0 	.word	0x400204a0
 800abe8:	400204b8 	.word	0x400204b8
 800abec:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800abf0:	69fb      	ldr	r3, [r7, #28]
 800abf2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d008      	beq.n	800ac0c <HAL_UART_IRQHandler+0x544>
 800abfa:	69bb      	ldr	r3, [r7, #24]
 800abfc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d003      	beq.n	800ac0c <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f001 fb17 	bl	800c238 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ac0a:	e014      	b.n	800ac36 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ac0c:	69fb      	ldr	r3, [r7, #28]
 800ac0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d00f      	beq.n	800ac36 <HAL_UART_IRQHandler+0x56e>
 800ac16:	69bb      	ldr	r3, [r7, #24]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	da0c      	bge.n	800ac36 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f001 fb01 	bl	800c224 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ac22:	e008      	b.n	800ac36 <HAL_UART_IRQHandler+0x56e>
      return;
 800ac24:	bf00      	nop
 800ac26:	e006      	b.n	800ac36 <HAL_UART_IRQHandler+0x56e>
    return;
 800ac28:	bf00      	nop
 800ac2a:	e004      	b.n	800ac36 <HAL_UART_IRQHandler+0x56e>
      return;
 800ac2c:	bf00      	nop
 800ac2e:	e002      	b.n	800ac36 <HAL_UART_IRQHandler+0x56e>
      return;
 800ac30:	bf00      	nop
 800ac32:	e000      	b.n	800ac36 <HAL_UART_IRQHandler+0x56e>
    return;
 800ac34:	bf00      	nop
  }
}
 800ac36:	3720      	adds	r7, #32
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b083      	sub	sp, #12
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ac44:	bf00      	nop
 800ac46:	370c      	adds	r7, #12
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr

0800ac50 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b083      	sub	sp, #12
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ac58:	bf00      	nop
 800ac5a:	370c      	adds	r7, #12
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr

0800ac64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b083      	sub	sp, #12
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ac70:	bf00      	nop
 800ac72:	370c      	adds	r7, #12
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr

0800ac7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ac7c:	b5b0      	push	{r4, r5, r7, lr}
 800ac7e:	b08e      	sub	sp, #56	; 0x38
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ac84:	2300      	movs	r3, #0
 800ac86:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	689a      	ldr	r2, [r3, #8]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	691b      	ldr	r3, [r3, #16]
 800ac92:	431a      	orrs	r2, r3
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	695b      	ldr	r3, [r3, #20]
 800ac98:	431a      	orrs	r2, r3
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	69db      	ldr	r3, [r3, #28]
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	681a      	ldr	r2, [r3, #0]
 800aca8:	4bbf      	ldr	r3, [pc, #764]	; (800afa8 <UART_SetConfig+0x32c>)
 800acaa:	4013      	ands	r3, r2
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	6812      	ldr	r2, [r2, #0]
 800acb0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800acb2:	430b      	orrs	r3, r1
 800acb4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	68da      	ldr	r2, [r3, #12]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	430a      	orrs	r2, r1
 800acca:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	699b      	ldr	r3, [r3, #24]
 800acd0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4ab5      	ldr	r2, [pc, #724]	; (800afac <UART_SetConfig+0x330>)
 800acd8:	4293      	cmp	r3, r2
 800acda:	d004      	beq.n	800ace6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6a1b      	ldr	r3, [r3, #32]
 800ace0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ace2:	4313      	orrs	r3, r2
 800ace4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	689a      	ldr	r2, [r3, #8]
 800acec:	4bb0      	ldr	r3, [pc, #704]	; (800afb0 <UART_SetConfig+0x334>)
 800acee:	4013      	ands	r3, r2
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	6812      	ldr	r2, [r2, #0]
 800acf4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800acf6:	430b      	orrs	r3, r1
 800acf8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad00:	f023 010f 	bic.w	r1, r3, #15
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	430a      	orrs	r2, r1
 800ad0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4aa7      	ldr	r2, [pc, #668]	; (800afb4 <UART_SetConfig+0x338>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d176      	bne.n	800ae08 <UART_SetConfig+0x18c>
 800ad1a:	4ba7      	ldr	r3, [pc, #668]	; (800afb8 <UART_SetConfig+0x33c>)
 800ad1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ad22:	2b28      	cmp	r3, #40	; 0x28
 800ad24:	d86c      	bhi.n	800ae00 <UART_SetConfig+0x184>
 800ad26:	a201      	add	r2, pc, #4	; (adr r2, 800ad2c <UART_SetConfig+0xb0>)
 800ad28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad2c:	0800add1 	.word	0x0800add1
 800ad30:	0800ae01 	.word	0x0800ae01
 800ad34:	0800ae01 	.word	0x0800ae01
 800ad38:	0800ae01 	.word	0x0800ae01
 800ad3c:	0800ae01 	.word	0x0800ae01
 800ad40:	0800ae01 	.word	0x0800ae01
 800ad44:	0800ae01 	.word	0x0800ae01
 800ad48:	0800ae01 	.word	0x0800ae01
 800ad4c:	0800add9 	.word	0x0800add9
 800ad50:	0800ae01 	.word	0x0800ae01
 800ad54:	0800ae01 	.word	0x0800ae01
 800ad58:	0800ae01 	.word	0x0800ae01
 800ad5c:	0800ae01 	.word	0x0800ae01
 800ad60:	0800ae01 	.word	0x0800ae01
 800ad64:	0800ae01 	.word	0x0800ae01
 800ad68:	0800ae01 	.word	0x0800ae01
 800ad6c:	0800ade1 	.word	0x0800ade1
 800ad70:	0800ae01 	.word	0x0800ae01
 800ad74:	0800ae01 	.word	0x0800ae01
 800ad78:	0800ae01 	.word	0x0800ae01
 800ad7c:	0800ae01 	.word	0x0800ae01
 800ad80:	0800ae01 	.word	0x0800ae01
 800ad84:	0800ae01 	.word	0x0800ae01
 800ad88:	0800ae01 	.word	0x0800ae01
 800ad8c:	0800ade9 	.word	0x0800ade9
 800ad90:	0800ae01 	.word	0x0800ae01
 800ad94:	0800ae01 	.word	0x0800ae01
 800ad98:	0800ae01 	.word	0x0800ae01
 800ad9c:	0800ae01 	.word	0x0800ae01
 800ada0:	0800ae01 	.word	0x0800ae01
 800ada4:	0800ae01 	.word	0x0800ae01
 800ada8:	0800ae01 	.word	0x0800ae01
 800adac:	0800adf1 	.word	0x0800adf1
 800adb0:	0800ae01 	.word	0x0800ae01
 800adb4:	0800ae01 	.word	0x0800ae01
 800adb8:	0800ae01 	.word	0x0800ae01
 800adbc:	0800ae01 	.word	0x0800ae01
 800adc0:	0800ae01 	.word	0x0800ae01
 800adc4:	0800ae01 	.word	0x0800ae01
 800adc8:	0800ae01 	.word	0x0800ae01
 800adcc:	0800adf9 	.word	0x0800adf9
 800add0:	2301      	movs	r3, #1
 800add2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800add6:	e222      	b.n	800b21e <UART_SetConfig+0x5a2>
 800add8:	2304      	movs	r3, #4
 800adda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adde:	e21e      	b.n	800b21e <UART_SetConfig+0x5a2>
 800ade0:	2308      	movs	r3, #8
 800ade2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ade6:	e21a      	b.n	800b21e <UART_SetConfig+0x5a2>
 800ade8:	2310      	movs	r3, #16
 800adea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adee:	e216      	b.n	800b21e <UART_SetConfig+0x5a2>
 800adf0:	2320      	movs	r3, #32
 800adf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adf6:	e212      	b.n	800b21e <UART_SetConfig+0x5a2>
 800adf8:	2340      	movs	r3, #64	; 0x40
 800adfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adfe:	e20e      	b.n	800b21e <UART_SetConfig+0x5a2>
 800ae00:	2380      	movs	r3, #128	; 0x80
 800ae02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae06:	e20a      	b.n	800b21e <UART_SetConfig+0x5a2>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4a6b      	ldr	r2, [pc, #428]	; (800afbc <UART_SetConfig+0x340>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d130      	bne.n	800ae74 <UART_SetConfig+0x1f8>
 800ae12:	4b69      	ldr	r3, [pc, #420]	; (800afb8 <UART_SetConfig+0x33c>)
 800ae14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae16:	f003 0307 	and.w	r3, r3, #7
 800ae1a:	2b05      	cmp	r3, #5
 800ae1c:	d826      	bhi.n	800ae6c <UART_SetConfig+0x1f0>
 800ae1e:	a201      	add	r2, pc, #4	; (adr r2, 800ae24 <UART_SetConfig+0x1a8>)
 800ae20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae24:	0800ae3d 	.word	0x0800ae3d
 800ae28:	0800ae45 	.word	0x0800ae45
 800ae2c:	0800ae4d 	.word	0x0800ae4d
 800ae30:	0800ae55 	.word	0x0800ae55
 800ae34:	0800ae5d 	.word	0x0800ae5d
 800ae38:	0800ae65 	.word	0x0800ae65
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae42:	e1ec      	b.n	800b21e <UART_SetConfig+0x5a2>
 800ae44:	2304      	movs	r3, #4
 800ae46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae4a:	e1e8      	b.n	800b21e <UART_SetConfig+0x5a2>
 800ae4c:	2308      	movs	r3, #8
 800ae4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae52:	e1e4      	b.n	800b21e <UART_SetConfig+0x5a2>
 800ae54:	2310      	movs	r3, #16
 800ae56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae5a:	e1e0      	b.n	800b21e <UART_SetConfig+0x5a2>
 800ae5c:	2320      	movs	r3, #32
 800ae5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae62:	e1dc      	b.n	800b21e <UART_SetConfig+0x5a2>
 800ae64:	2340      	movs	r3, #64	; 0x40
 800ae66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae6a:	e1d8      	b.n	800b21e <UART_SetConfig+0x5a2>
 800ae6c:	2380      	movs	r3, #128	; 0x80
 800ae6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae72:	e1d4      	b.n	800b21e <UART_SetConfig+0x5a2>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	4a51      	ldr	r2, [pc, #324]	; (800afc0 <UART_SetConfig+0x344>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d130      	bne.n	800aee0 <UART_SetConfig+0x264>
 800ae7e:	4b4e      	ldr	r3, [pc, #312]	; (800afb8 <UART_SetConfig+0x33c>)
 800ae80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae82:	f003 0307 	and.w	r3, r3, #7
 800ae86:	2b05      	cmp	r3, #5
 800ae88:	d826      	bhi.n	800aed8 <UART_SetConfig+0x25c>
 800ae8a:	a201      	add	r2, pc, #4	; (adr r2, 800ae90 <UART_SetConfig+0x214>)
 800ae8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae90:	0800aea9 	.word	0x0800aea9
 800ae94:	0800aeb1 	.word	0x0800aeb1
 800ae98:	0800aeb9 	.word	0x0800aeb9
 800ae9c:	0800aec1 	.word	0x0800aec1
 800aea0:	0800aec9 	.word	0x0800aec9
 800aea4:	0800aed1 	.word	0x0800aed1
 800aea8:	2300      	movs	r3, #0
 800aeaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeae:	e1b6      	b.n	800b21e <UART_SetConfig+0x5a2>
 800aeb0:	2304      	movs	r3, #4
 800aeb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeb6:	e1b2      	b.n	800b21e <UART_SetConfig+0x5a2>
 800aeb8:	2308      	movs	r3, #8
 800aeba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aebe:	e1ae      	b.n	800b21e <UART_SetConfig+0x5a2>
 800aec0:	2310      	movs	r3, #16
 800aec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aec6:	e1aa      	b.n	800b21e <UART_SetConfig+0x5a2>
 800aec8:	2320      	movs	r3, #32
 800aeca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aece:	e1a6      	b.n	800b21e <UART_SetConfig+0x5a2>
 800aed0:	2340      	movs	r3, #64	; 0x40
 800aed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aed6:	e1a2      	b.n	800b21e <UART_SetConfig+0x5a2>
 800aed8:	2380      	movs	r3, #128	; 0x80
 800aeda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aede:	e19e      	b.n	800b21e <UART_SetConfig+0x5a2>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4a37      	ldr	r2, [pc, #220]	; (800afc4 <UART_SetConfig+0x348>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d130      	bne.n	800af4c <UART_SetConfig+0x2d0>
 800aeea:	4b33      	ldr	r3, [pc, #204]	; (800afb8 <UART_SetConfig+0x33c>)
 800aeec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeee:	f003 0307 	and.w	r3, r3, #7
 800aef2:	2b05      	cmp	r3, #5
 800aef4:	d826      	bhi.n	800af44 <UART_SetConfig+0x2c8>
 800aef6:	a201      	add	r2, pc, #4	; (adr r2, 800aefc <UART_SetConfig+0x280>)
 800aef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aefc:	0800af15 	.word	0x0800af15
 800af00:	0800af1d 	.word	0x0800af1d
 800af04:	0800af25 	.word	0x0800af25
 800af08:	0800af2d 	.word	0x0800af2d
 800af0c:	0800af35 	.word	0x0800af35
 800af10:	0800af3d 	.word	0x0800af3d
 800af14:	2300      	movs	r3, #0
 800af16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af1a:	e180      	b.n	800b21e <UART_SetConfig+0x5a2>
 800af1c:	2304      	movs	r3, #4
 800af1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af22:	e17c      	b.n	800b21e <UART_SetConfig+0x5a2>
 800af24:	2308      	movs	r3, #8
 800af26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af2a:	e178      	b.n	800b21e <UART_SetConfig+0x5a2>
 800af2c:	2310      	movs	r3, #16
 800af2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af32:	e174      	b.n	800b21e <UART_SetConfig+0x5a2>
 800af34:	2320      	movs	r3, #32
 800af36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af3a:	e170      	b.n	800b21e <UART_SetConfig+0x5a2>
 800af3c:	2340      	movs	r3, #64	; 0x40
 800af3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af42:	e16c      	b.n	800b21e <UART_SetConfig+0x5a2>
 800af44:	2380      	movs	r3, #128	; 0x80
 800af46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af4a:	e168      	b.n	800b21e <UART_SetConfig+0x5a2>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4a1d      	ldr	r2, [pc, #116]	; (800afc8 <UART_SetConfig+0x34c>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d142      	bne.n	800afdc <UART_SetConfig+0x360>
 800af56:	4b18      	ldr	r3, [pc, #96]	; (800afb8 <UART_SetConfig+0x33c>)
 800af58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af5a:	f003 0307 	and.w	r3, r3, #7
 800af5e:	2b05      	cmp	r3, #5
 800af60:	d838      	bhi.n	800afd4 <UART_SetConfig+0x358>
 800af62:	a201      	add	r2, pc, #4	; (adr r2, 800af68 <UART_SetConfig+0x2ec>)
 800af64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af68:	0800af81 	.word	0x0800af81
 800af6c:	0800af89 	.word	0x0800af89
 800af70:	0800af91 	.word	0x0800af91
 800af74:	0800af99 	.word	0x0800af99
 800af78:	0800afa1 	.word	0x0800afa1
 800af7c:	0800afcd 	.word	0x0800afcd
 800af80:	2300      	movs	r3, #0
 800af82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af86:	e14a      	b.n	800b21e <UART_SetConfig+0x5a2>
 800af88:	2304      	movs	r3, #4
 800af8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af8e:	e146      	b.n	800b21e <UART_SetConfig+0x5a2>
 800af90:	2308      	movs	r3, #8
 800af92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af96:	e142      	b.n	800b21e <UART_SetConfig+0x5a2>
 800af98:	2310      	movs	r3, #16
 800af9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af9e:	e13e      	b.n	800b21e <UART_SetConfig+0x5a2>
 800afa0:	2320      	movs	r3, #32
 800afa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afa6:	e13a      	b.n	800b21e <UART_SetConfig+0x5a2>
 800afa8:	cfff69f3 	.word	0xcfff69f3
 800afac:	58000c00 	.word	0x58000c00
 800afb0:	11fff4ff 	.word	0x11fff4ff
 800afb4:	40011000 	.word	0x40011000
 800afb8:	58024400 	.word	0x58024400
 800afbc:	40004400 	.word	0x40004400
 800afc0:	40004800 	.word	0x40004800
 800afc4:	40004c00 	.word	0x40004c00
 800afc8:	40005000 	.word	0x40005000
 800afcc:	2340      	movs	r3, #64	; 0x40
 800afce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afd2:	e124      	b.n	800b21e <UART_SetConfig+0x5a2>
 800afd4:	2380      	movs	r3, #128	; 0x80
 800afd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afda:	e120      	b.n	800b21e <UART_SetConfig+0x5a2>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4acc      	ldr	r2, [pc, #816]	; (800b314 <UART_SetConfig+0x698>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d176      	bne.n	800b0d4 <UART_SetConfig+0x458>
 800afe6:	4bcc      	ldr	r3, [pc, #816]	; (800b318 <UART_SetConfig+0x69c>)
 800afe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800afee:	2b28      	cmp	r3, #40	; 0x28
 800aff0:	d86c      	bhi.n	800b0cc <UART_SetConfig+0x450>
 800aff2:	a201      	add	r2, pc, #4	; (adr r2, 800aff8 <UART_SetConfig+0x37c>)
 800aff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aff8:	0800b09d 	.word	0x0800b09d
 800affc:	0800b0cd 	.word	0x0800b0cd
 800b000:	0800b0cd 	.word	0x0800b0cd
 800b004:	0800b0cd 	.word	0x0800b0cd
 800b008:	0800b0cd 	.word	0x0800b0cd
 800b00c:	0800b0cd 	.word	0x0800b0cd
 800b010:	0800b0cd 	.word	0x0800b0cd
 800b014:	0800b0cd 	.word	0x0800b0cd
 800b018:	0800b0a5 	.word	0x0800b0a5
 800b01c:	0800b0cd 	.word	0x0800b0cd
 800b020:	0800b0cd 	.word	0x0800b0cd
 800b024:	0800b0cd 	.word	0x0800b0cd
 800b028:	0800b0cd 	.word	0x0800b0cd
 800b02c:	0800b0cd 	.word	0x0800b0cd
 800b030:	0800b0cd 	.word	0x0800b0cd
 800b034:	0800b0cd 	.word	0x0800b0cd
 800b038:	0800b0ad 	.word	0x0800b0ad
 800b03c:	0800b0cd 	.word	0x0800b0cd
 800b040:	0800b0cd 	.word	0x0800b0cd
 800b044:	0800b0cd 	.word	0x0800b0cd
 800b048:	0800b0cd 	.word	0x0800b0cd
 800b04c:	0800b0cd 	.word	0x0800b0cd
 800b050:	0800b0cd 	.word	0x0800b0cd
 800b054:	0800b0cd 	.word	0x0800b0cd
 800b058:	0800b0b5 	.word	0x0800b0b5
 800b05c:	0800b0cd 	.word	0x0800b0cd
 800b060:	0800b0cd 	.word	0x0800b0cd
 800b064:	0800b0cd 	.word	0x0800b0cd
 800b068:	0800b0cd 	.word	0x0800b0cd
 800b06c:	0800b0cd 	.word	0x0800b0cd
 800b070:	0800b0cd 	.word	0x0800b0cd
 800b074:	0800b0cd 	.word	0x0800b0cd
 800b078:	0800b0bd 	.word	0x0800b0bd
 800b07c:	0800b0cd 	.word	0x0800b0cd
 800b080:	0800b0cd 	.word	0x0800b0cd
 800b084:	0800b0cd 	.word	0x0800b0cd
 800b088:	0800b0cd 	.word	0x0800b0cd
 800b08c:	0800b0cd 	.word	0x0800b0cd
 800b090:	0800b0cd 	.word	0x0800b0cd
 800b094:	0800b0cd 	.word	0x0800b0cd
 800b098:	0800b0c5 	.word	0x0800b0c5
 800b09c:	2301      	movs	r3, #1
 800b09e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0a2:	e0bc      	b.n	800b21e <UART_SetConfig+0x5a2>
 800b0a4:	2304      	movs	r3, #4
 800b0a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0aa:	e0b8      	b.n	800b21e <UART_SetConfig+0x5a2>
 800b0ac:	2308      	movs	r3, #8
 800b0ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0b2:	e0b4      	b.n	800b21e <UART_SetConfig+0x5a2>
 800b0b4:	2310      	movs	r3, #16
 800b0b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0ba:	e0b0      	b.n	800b21e <UART_SetConfig+0x5a2>
 800b0bc:	2320      	movs	r3, #32
 800b0be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0c2:	e0ac      	b.n	800b21e <UART_SetConfig+0x5a2>
 800b0c4:	2340      	movs	r3, #64	; 0x40
 800b0c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0ca:	e0a8      	b.n	800b21e <UART_SetConfig+0x5a2>
 800b0cc:	2380      	movs	r3, #128	; 0x80
 800b0ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0d2:	e0a4      	b.n	800b21e <UART_SetConfig+0x5a2>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	4a90      	ldr	r2, [pc, #576]	; (800b31c <UART_SetConfig+0x6a0>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d130      	bne.n	800b140 <UART_SetConfig+0x4c4>
 800b0de:	4b8e      	ldr	r3, [pc, #568]	; (800b318 <UART_SetConfig+0x69c>)
 800b0e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0e2:	f003 0307 	and.w	r3, r3, #7
 800b0e6:	2b05      	cmp	r3, #5
 800b0e8:	d826      	bhi.n	800b138 <UART_SetConfig+0x4bc>
 800b0ea:	a201      	add	r2, pc, #4	; (adr r2, 800b0f0 <UART_SetConfig+0x474>)
 800b0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0f0:	0800b109 	.word	0x0800b109
 800b0f4:	0800b111 	.word	0x0800b111
 800b0f8:	0800b119 	.word	0x0800b119
 800b0fc:	0800b121 	.word	0x0800b121
 800b100:	0800b129 	.word	0x0800b129
 800b104:	0800b131 	.word	0x0800b131
 800b108:	2300      	movs	r3, #0
 800b10a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b10e:	e086      	b.n	800b21e <UART_SetConfig+0x5a2>
 800b110:	2304      	movs	r3, #4
 800b112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b116:	e082      	b.n	800b21e <UART_SetConfig+0x5a2>
 800b118:	2308      	movs	r3, #8
 800b11a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b11e:	e07e      	b.n	800b21e <UART_SetConfig+0x5a2>
 800b120:	2310      	movs	r3, #16
 800b122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b126:	e07a      	b.n	800b21e <UART_SetConfig+0x5a2>
 800b128:	2320      	movs	r3, #32
 800b12a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b12e:	e076      	b.n	800b21e <UART_SetConfig+0x5a2>
 800b130:	2340      	movs	r3, #64	; 0x40
 800b132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b136:	e072      	b.n	800b21e <UART_SetConfig+0x5a2>
 800b138:	2380      	movs	r3, #128	; 0x80
 800b13a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b13e:	e06e      	b.n	800b21e <UART_SetConfig+0x5a2>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	4a76      	ldr	r2, [pc, #472]	; (800b320 <UART_SetConfig+0x6a4>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d130      	bne.n	800b1ac <UART_SetConfig+0x530>
 800b14a:	4b73      	ldr	r3, [pc, #460]	; (800b318 <UART_SetConfig+0x69c>)
 800b14c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b14e:	f003 0307 	and.w	r3, r3, #7
 800b152:	2b05      	cmp	r3, #5
 800b154:	d826      	bhi.n	800b1a4 <UART_SetConfig+0x528>
 800b156:	a201      	add	r2, pc, #4	; (adr r2, 800b15c <UART_SetConfig+0x4e0>)
 800b158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b15c:	0800b175 	.word	0x0800b175
 800b160:	0800b17d 	.word	0x0800b17d
 800b164:	0800b185 	.word	0x0800b185
 800b168:	0800b18d 	.word	0x0800b18d
 800b16c:	0800b195 	.word	0x0800b195
 800b170:	0800b19d 	.word	0x0800b19d
 800b174:	2300      	movs	r3, #0
 800b176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b17a:	e050      	b.n	800b21e <UART_SetConfig+0x5a2>
 800b17c:	2304      	movs	r3, #4
 800b17e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b182:	e04c      	b.n	800b21e <UART_SetConfig+0x5a2>
 800b184:	2308      	movs	r3, #8
 800b186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b18a:	e048      	b.n	800b21e <UART_SetConfig+0x5a2>
 800b18c:	2310      	movs	r3, #16
 800b18e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b192:	e044      	b.n	800b21e <UART_SetConfig+0x5a2>
 800b194:	2320      	movs	r3, #32
 800b196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b19a:	e040      	b.n	800b21e <UART_SetConfig+0x5a2>
 800b19c:	2340      	movs	r3, #64	; 0x40
 800b19e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1a2:	e03c      	b.n	800b21e <UART_SetConfig+0x5a2>
 800b1a4:	2380      	movs	r3, #128	; 0x80
 800b1a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1aa:	e038      	b.n	800b21e <UART_SetConfig+0x5a2>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	4a5c      	ldr	r2, [pc, #368]	; (800b324 <UART_SetConfig+0x6a8>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d130      	bne.n	800b218 <UART_SetConfig+0x59c>
 800b1b6:	4b58      	ldr	r3, [pc, #352]	; (800b318 <UART_SetConfig+0x69c>)
 800b1b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1ba:	f003 0307 	and.w	r3, r3, #7
 800b1be:	2b05      	cmp	r3, #5
 800b1c0:	d826      	bhi.n	800b210 <UART_SetConfig+0x594>
 800b1c2:	a201      	add	r2, pc, #4	; (adr r2, 800b1c8 <UART_SetConfig+0x54c>)
 800b1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1c8:	0800b1e1 	.word	0x0800b1e1
 800b1cc:	0800b1e9 	.word	0x0800b1e9
 800b1d0:	0800b1f1 	.word	0x0800b1f1
 800b1d4:	0800b1f9 	.word	0x0800b1f9
 800b1d8:	0800b201 	.word	0x0800b201
 800b1dc:	0800b209 	.word	0x0800b209
 800b1e0:	2302      	movs	r3, #2
 800b1e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1e6:	e01a      	b.n	800b21e <UART_SetConfig+0x5a2>
 800b1e8:	2304      	movs	r3, #4
 800b1ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1ee:	e016      	b.n	800b21e <UART_SetConfig+0x5a2>
 800b1f0:	2308      	movs	r3, #8
 800b1f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1f6:	e012      	b.n	800b21e <UART_SetConfig+0x5a2>
 800b1f8:	2310      	movs	r3, #16
 800b1fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1fe:	e00e      	b.n	800b21e <UART_SetConfig+0x5a2>
 800b200:	2320      	movs	r3, #32
 800b202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b206:	e00a      	b.n	800b21e <UART_SetConfig+0x5a2>
 800b208:	2340      	movs	r3, #64	; 0x40
 800b20a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b20e:	e006      	b.n	800b21e <UART_SetConfig+0x5a2>
 800b210:	2380      	movs	r3, #128	; 0x80
 800b212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b216:	e002      	b.n	800b21e <UART_SetConfig+0x5a2>
 800b218:	2380      	movs	r3, #128	; 0x80
 800b21a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	4a40      	ldr	r2, [pc, #256]	; (800b324 <UART_SetConfig+0x6a8>)
 800b224:	4293      	cmp	r3, r2
 800b226:	f040 80ef 	bne.w	800b408 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b22a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b22e:	2b20      	cmp	r3, #32
 800b230:	dc46      	bgt.n	800b2c0 <UART_SetConfig+0x644>
 800b232:	2b02      	cmp	r3, #2
 800b234:	f2c0 8081 	blt.w	800b33a <UART_SetConfig+0x6be>
 800b238:	3b02      	subs	r3, #2
 800b23a:	2b1e      	cmp	r3, #30
 800b23c:	d87d      	bhi.n	800b33a <UART_SetConfig+0x6be>
 800b23e:	a201      	add	r2, pc, #4	; (adr r2, 800b244 <UART_SetConfig+0x5c8>)
 800b240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b244:	0800b2c7 	.word	0x0800b2c7
 800b248:	0800b33b 	.word	0x0800b33b
 800b24c:	0800b2cf 	.word	0x0800b2cf
 800b250:	0800b33b 	.word	0x0800b33b
 800b254:	0800b33b 	.word	0x0800b33b
 800b258:	0800b33b 	.word	0x0800b33b
 800b25c:	0800b2df 	.word	0x0800b2df
 800b260:	0800b33b 	.word	0x0800b33b
 800b264:	0800b33b 	.word	0x0800b33b
 800b268:	0800b33b 	.word	0x0800b33b
 800b26c:	0800b33b 	.word	0x0800b33b
 800b270:	0800b33b 	.word	0x0800b33b
 800b274:	0800b33b 	.word	0x0800b33b
 800b278:	0800b33b 	.word	0x0800b33b
 800b27c:	0800b2ef 	.word	0x0800b2ef
 800b280:	0800b33b 	.word	0x0800b33b
 800b284:	0800b33b 	.word	0x0800b33b
 800b288:	0800b33b 	.word	0x0800b33b
 800b28c:	0800b33b 	.word	0x0800b33b
 800b290:	0800b33b 	.word	0x0800b33b
 800b294:	0800b33b 	.word	0x0800b33b
 800b298:	0800b33b 	.word	0x0800b33b
 800b29c:	0800b33b 	.word	0x0800b33b
 800b2a0:	0800b33b 	.word	0x0800b33b
 800b2a4:	0800b33b 	.word	0x0800b33b
 800b2a8:	0800b33b 	.word	0x0800b33b
 800b2ac:	0800b33b 	.word	0x0800b33b
 800b2b0:	0800b33b 	.word	0x0800b33b
 800b2b4:	0800b33b 	.word	0x0800b33b
 800b2b8:	0800b33b 	.word	0x0800b33b
 800b2bc:	0800b32d 	.word	0x0800b32d
 800b2c0:	2b40      	cmp	r3, #64	; 0x40
 800b2c2:	d036      	beq.n	800b332 <UART_SetConfig+0x6b6>
 800b2c4:	e039      	b.n	800b33a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b2c6:	f7fd fecd 	bl	8009064 <HAL_RCCEx_GetD3PCLK1Freq>
 800b2ca:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b2cc:	e03b      	b.n	800b346 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2ce:	f107 0314 	add.w	r3, r7, #20
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f7fd fedc 	bl	8009090 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b2d8:	69bb      	ldr	r3, [r7, #24]
 800b2da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b2dc:	e033      	b.n	800b346 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2de:	f107 0308 	add.w	r3, r7, #8
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f7fe f828 	bl	8009338 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b2ec:	e02b      	b.n	800b346 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2ee:	4b0a      	ldr	r3, [pc, #40]	; (800b318 <UART_SetConfig+0x69c>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f003 0320 	and.w	r3, r3, #32
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d009      	beq.n	800b30e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b2fa:	4b07      	ldr	r3, [pc, #28]	; (800b318 <UART_SetConfig+0x69c>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	08db      	lsrs	r3, r3, #3
 800b300:	f003 0303 	and.w	r3, r3, #3
 800b304:	4a08      	ldr	r2, [pc, #32]	; (800b328 <UART_SetConfig+0x6ac>)
 800b306:	fa22 f303 	lsr.w	r3, r2, r3
 800b30a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b30c:	e01b      	b.n	800b346 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800b30e:	4b06      	ldr	r3, [pc, #24]	; (800b328 <UART_SetConfig+0x6ac>)
 800b310:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b312:	e018      	b.n	800b346 <UART_SetConfig+0x6ca>
 800b314:	40011400 	.word	0x40011400
 800b318:	58024400 	.word	0x58024400
 800b31c:	40007800 	.word	0x40007800
 800b320:	40007c00 	.word	0x40007c00
 800b324:	58000c00 	.word	0x58000c00
 800b328:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b32c:	4bc4      	ldr	r3, [pc, #784]	; (800b640 <UART_SetConfig+0x9c4>)
 800b32e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b330:	e009      	b.n	800b346 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b336:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b338:	e005      	b.n	800b346 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800b33a:	2300      	movs	r3, #0
 800b33c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b33e:	2301      	movs	r3, #1
 800b340:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b344:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b348:	2b00      	cmp	r3, #0
 800b34a:	f000 81da 	beq.w	800b702 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b352:	4abc      	ldr	r2, [pc, #752]	; (800b644 <UART_SetConfig+0x9c8>)
 800b354:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b358:	461a      	mov	r2, r3
 800b35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b35c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b360:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	685a      	ldr	r2, [r3, #4]
 800b366:	4613      	mov	r3, r2
 800b368:	005b      	lsls	r3, r3, #1
 800b36a:	4413      	add	r3, r2
 800b36c:	6a3a      	ldr	r2, [r7, #32]
 800b36e:	429a      	cmp	r2, r3
 800b370:	d305      	bcc.n	800b37e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b378:	6a3a      	ldr	r2, [r7, #32]
 800b37a:	429a      	cmp	r2, r3
 800b37c:	d903      	bls.n	800b386 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800b37e:	2301      	movs	r3, #1
 800b380:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b384:	e1bd      	b.n	800b702 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b388:	4618      	mov	r0, r3
 800b38a:	f04f 0100 	mov.w	r1, #0
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b392:	4aac      	ldr	r2, [pc, #688]	; (800b644 <UART_SetConfig+0x9c8>)
 800b394:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b398:	b29a      	uxth	r2, r3
 800b39a:	f04f 0300 	mov.w	r3, #0
 800b39e:	f7f5 f9b3 	bl	8000708 <__aeabi_uldivmod>
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	460b      	mov	r3, r1
 800b3a6:	4610      	mov	r0, r2
 800b3a8:	4619      	mov	r1, r3
 800b3aa:	f04f 0200 	mov.w	r2, #0
 800b3ae:	f04f 0300 	mov.w	r3, #0
 800b3b2:	020b      	lsls	r3, r1, #8
 800b3b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b3b8:	0202      	lsls	r2, r0, #8
 800b3ba:	6879      	ldr	r1, [r7, #4]
 800b3bc:	6849      	ldr	r1, [r1, #4]
 800b3be:	0849      	lsrs	r1, r1, #1
 800b3c0:	4608      	mov	r0, r1
 800b3c2:	f04f 0100 	mov.w	r1, #0
 800b3c6:	1814      	adds	r4, r2, r0
 800b3c8:	eb43 0501 	adc.w	r5, r3, r1
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	461a      	mov	r2, r3
 800b3d2:	f04f 0300 	mov.w	r3, #0
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	4629      	mov	r1, r5
 800b3da:	f7f5 f995 	bl	8000708 <__aeabi_uldivmod>
 800b3de:	4602      	mov	r2, r0
 800b3e0:	460b      	mov	r3, r1
 800b3e2:	4613      	mov	r3, r2
 800b3e4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b3ec:	d308      	bcc.n	800b400 <UART_SetConfig+0x784>
 800b3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3f4:	d204      	bcs.n	800b400 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3fc:	60da      	str	r2, [r3, #12]
 800b3fe:	e180      	b.n	800b702 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800b400:	2301      	movs	r3, #1
 800b402:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b406:	e17c      	b.n	800b702 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	69db      	ldr	r3, [r3, #28]
 800b40c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b410:	f040 80bf 	bne.w	800b592 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800b414:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b418:	2b20      	cmp	r3, #32
 800b41a:	dc49      	bgt.n	800b4b0 <UART_SetConfig+0x834>
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	db7c      	blt.n	800b51a <UART_SetConfig+0x89e>
 800b420:	2b20      	cmp	r3, #32
 800b422:	d87a      	bhi.n	800b51a <UART_SetConfig+0x89e>
 800b424:	a201      	add	r2, pc, #4	; (adr r2, 800b42c <UART_SetConfig+0x7b0>)
 800b426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b42a:	bf00      	nop
 800b42c:	0800b4b7 	.word	0x0800b4b7
 800b430:	0800b4bf 	.word	0x0800b4bf
 800b434:	0800b51b 	.word	0x0800b51b
 800b438:	0800b51b 	.word	0x0800b51b
 800b43c:	0800b4c7 	.word	0x0800b4c7
 800b440:	0800b51b 	.word	0x0800b51b
 800b444:	0800b51b 	.word	0x0800b51b
 800b448:	0800b51b 	.word	0x0800b51b
 800b44c:	0800b4d7 	.word	0x0800b4d7
 800b450:	0800b51b 	.word	0x0800b51b
 800b454:	0800b51b 	.word	0x0800b51b
 800b458:	0800b51b 	.word	0x0800b51b
 800b45c:	0800b51b 	.word	0x0800b51b
 800b460:	0800b51b 	.word	0x0800b51b
 800b464:	0800b51b 	.word	0x0800b51b
 800b468:	0800b51b 	.word	0x0800b51b
 800b46c:	0800b4e7 	.word	0x0800b4e7
 800b470:	0800b51b 	.word	0x0800b51b
 800b474:	0800b51b 	.word	0x0800b51b
 800b478:	0800b51b 	.word	0x0800b51b
 800b47c:	0800b51b 	.word	0x0800b51b
 800b480:	0800b51b 	.word	0x0800b51b
 800b484:	0800b51b 	.word	0x0800b51b
 800b488:	0800b51b 	.word	0x0800b51b
 800b48c:	0800b51b 	.word	0x0800b51b
 800b490:	0800b51b 	.word	0x0800b51b
 800b494:	0800b51b 	.word	0x0800b51b
 800b498:	0800b51b 	.word	0x0800b51b
 800b49c:	0800b51b 	.word	0x0800b51b
 800b4a0:	0800b51b 	.word	0x0800b51b
 800b4a4:	0800b51b 	.word	0x0800b51b
 800b4a8:	0800b51b 	.word	0x0800b51b
 800b4ac:	0800b50d 	.word	0x0800b50d
 800b4b0:	2b40      	cmp	r3, #64	; 0x40
 800b4b2:	d02e      	beq.n	800b512 <UART_SetConfig+0x896>
 800b4b4:	e031      	b.n	800b51a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b4b6:	f7fc fe69 	bl	800818c <HAL_RCC_GetPCLK1Freq>
 800b4ba:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b4bc:	e033      	b.n	800b526 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b4be:	f7fc fe7b 	bl	80081b8 <HAL_RCC_GetPCLK2Freq>
 800b4c2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b4c4:	e02f      	b.n	800b526 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4c6:	f107 0314 	add.w	r3, r7, #20
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f7fd fde0 	bl	8009090 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b4d0:	69bb      	ldr	r3, [r7, #24]
 800b4d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b4d4:	e027      	b.n	800b526 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4d6:	f107 0308 	add.w	r3, r7, #8
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f7fd ff2c 	bl	8009338 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b4e4:	e01f      	b.n	800b526 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4e6:	4b58      	ldr	r3, [pc, #352]	; (800b648 <UART_SetConfig+0x9cc>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f003 0320 	and.w	r3, r3, #32
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d009      	beq.n	800b506 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b4f2:	4b55      	ldr	r3, [pc, #340]	; (800b648 <UART_SetConfig+0x9cc>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	08db      	lsrs	r3, r3, #3
 800b4f8:	f003 0303 	and.w	r3, r3, #3
 800b4fc:	4a53      	ldr	r2, [pc, #332]	; (800b64c <UART_SetConfig+0x9d0>)
 800b4fe:	fa22 f303 	lsr.w	r3, r2, r3
 800b502:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b504:	e00f      	b.n	800b526 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800b506:	4b51      	ldr	r3, [pc, #324]	; (800b64c <UART_SetConfig+0x9d0>)
 800b508:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b50a:	e00c      	b.n	800b526 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b50c:	4b4c      	ldr	r3, [pc, #304]	; (800b640 <UART_SetConfig+0x9c4>)
 800b50e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b510:	e009      	b.n	800b526 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b516:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b518:	e005      	b.n	800b526 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800b51a:	2300      	movs	r3, #0
 800b51c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b51e:	2301      	movs	r3, #1
 800b520:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b524:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b528:	2b00      	cmp	r3, #0
 800b52a:	f000 80ea 	beq.w	800b702 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b532:	4a44      	ldr	r2, [pc, #272]	; (800b644 <UART_SetConfig+0x9c8>)
 800b534:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b538:	461a      	mov	r2, r3
 800b53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b53c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b540:	005a      	lsls	r2, r3, #1
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	085b      	lsrs	r3, r3, #1
 800b548:	441a      	add	r2, r3
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	685b      	ldr	r3, [r3, #4]
 800b54e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b552:	b29b      	uxth	r3, r3
 800b554:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b558:	2b0f      	cmp	r3, #15
 800b55a:	d916      	bls.n	800b58a <UART_SetConfig+0x90e>
 800b55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b55e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b562:	d212      	bcs.n	800b58a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b566:	b29b      	uxth	r3, r3
 800b568:	f023 030f 	bic.w	r3, r3, #15
 800b56c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b570:	085b      	lsrs	r3, r3, #1
 800b572:	b29b      	uxth	r3, r3
 800b574:	f003 0307 	and.w	r3, r3, #7
 800b578:	b29a      	uxth	r2, r3
 800b57a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b57c:	4313      	orrs	r3, r2
 800b57e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b586:	60da      	str	r2, [r3, #12]
 800b588:	e0bb      	b.n	800b702 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800b58a:	2301      	movs	r3, #1
 800b58c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b590:	e0b7      	b.n	800b702 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b592:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b596:	2b20      	cmp	r3, #32
 800b598:	dc4a      	bgt.n	800b630 <UART_SetConfig+0x9b4>
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	f2c0 8086 	blt.w	800b6ac <UART_SetConfig+0xa30>
 800b5a0:	2b20      	cmp	r3, #32
 800b5a2:	f200 8083 	bhi.w	800b6ac <UART_SetConfig+0xa30>
 800b5a6:	a201      	add	r2, pc, #4	; (adr r2, 800b5ac <UART_SetConfig+0x930>)
 800b5a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5ac:	0800b637 	.word	0x0800b637
 800b5b0:	0800b651 	.word	0x0800b651
 800b5b4:	0800b6ad 	.word	0x0800b6ad
 800b5b8:	0800b6ad 	.word	0x0800b6ad
 800b5bc:	0800b659 	.word	0x0800b659
 800b5c0:	0800b6ad 	.word	0x0800b6ad
 800b5c4:	0800b6ad 	.word	0x0800b6ad
 800b5c8:	0800b6ad 	.word	0x0800b6ad
 800b5cc:	0800b669 	.word	0x0800b669
 800b5d0:	0800b6ad 	.word	0x0800b6ad
 800b5d4:	0800b6ad 	.word	0x0800b6ad
 800b5d8:	0800b6ad 	.word	0x0800b6ad
 800b5dc:	0800b6ad 	.word	0x0800b6ad
 800b5e0:	0800b6ad 	.word	0x0800b6ad
 800b5e4:	0800b6ad 	.word	0x0800b6ad
 800b5e8:	0800b6ad 	.word	0x0800b6ad
 800b5ec:	0800b679 	.word	0x0800b679
 800b5f0:	0800b6ad 	.word	0x0800b6ad
 800b5f4:	0800b6ad 	.word	0x0800b6ad
 800b5f8:	0800b6ad 	.word	0x0800b6ad
 800b5fc:	0800b6ad 	.word	0x0800b6ad
 800b600:	0800b6ad 	.word	0x0800b6ad
 800b604:	0800b6ad 	.word	0x0800b6ad
 800b608:	0800b6ad 	.word	0x0800b6ad
 800b60c:	0800b6ad 	.word	0x0800b6ad
 800b610:	0800b6ad 	.word	0x0800b6ad
 800b614:	0800b6ad 	.word	0x0800b6ad
 800b618:	0800b6ad 	.word	0x0800b6ad
 800b61c:	0800b6ad 	.word	0x0800b6ad
 800b620:	0800b6ad 	.word	0x0800b6ad
 800b624:	0800b6ad 	.word	0x0800b6ad
 800b628:	0800b6ad 	.word	0x0800b6ad
 800b62c:	0800b69f 	.word	0x0800b69f
 800b630:	2b40      	cmp	r3, #64	; 0x40
 800b632:	d037      	beq.n	800b6a4 <UART_SetConfig+0xa28>
 800b634:	e03a      	b.n	800b6ac <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b636:	f7fc fda9 	bl	800818c <HAL_RCC_GetPCLK1Freq>
 800b63a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b63c:	e03c      	b.n	800b6b8 <UART_SetConfig+0xa3c>
 800b63e:	bf00      	nop
 800b640:	003d0900 	.word	0x003d0900
 800b644:	08012394 	.word	0x08012394
 800b648:	58024400 	.word	0x58024400
 800b64c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b650:	f7fc fdb2 	bl	80081b8 <HAL_RCC_GetPCLK2Freq>
 800b654:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b656:	e02f      	b.n	800b6b8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b658:	f107 0314 	add.w	r3, r7, #20
 800b65c:	4618      	mov	r0, r3
 800b65e:	f7fd fd17 	bl	8009090 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b662:	69bb      	ldr	r3, [r7, #24]
 800b664:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b666:	e027      	b.n	800b6b8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b668:	f107 0308 	add.w	r3, r7, #8
 800b66c:	4618      	mov	r0, r3
 800b66e:	f7fd fe63 	bl	8009338 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b676:	e01f      	b.n	800b6b8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b678:	4b2c      	ldr	r3, [pc, #176]	; (800b72c <UART_SetConfig+0xab0>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f003 0320 	and.w	r3, r3, #32
 800b680:	2b00      	cmp	r3, #0
 800b682:	d009      	beq.n	800b698 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b684:	4b29      	ldr	r3, [pc, #164]	; (800b72c <UART_SetConfig+0xab0>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	08db      	lsrs	r3, r3, #3
 800b68a:	f003 0303 	and.w	r3, r3, #3
 800b68e:	4a28      	ldr	r2, [pc, #160]	; (800b730 <UART_SetConfig+0xab4>)
 800b690:	fa22 f303 	lsr.w	r3, r2, r3
 800b694:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b696:	e00f      	b.n	800b6b8 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800b698:	4b25      	ldr	r3, [pc, #148]	; (800b730 <UART_SetConfig+0xab4>)
 800b69a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b69c:	e00c      	b.n	800b6b8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b69e:	4b25      	ldr	r3, [pc, #148]	; (800b734 <UART_SetConfig+0xab8>)
 800b6a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6a2:	e009      	b.n	800b6b8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b6a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6aa:	e005      	b.n	800b6b8 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b6b6:	bf00      	nop
    }

    if (pclk != 0U)
 800b6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d021      	beq.n	800b702 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c2:	4a1d      	ldr	r2, [pc, #116]	; (800b738 <UART_SetConfig+0xabc>)
 800b6c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6c8:	461a      	mov	r2, r3
 800b6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6cc:	fbb3 f2f2 	udiv	r2, r3, r2
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	085b      	lsrs	r3, r3, #1
 800b6d6:	441a      	add	r2, r3
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	685b      	ldr	r3, [r3, #4]
 800b6dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6e0:	b29b      	uxth	r3, r3
 800b6e2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e6:	2b0f      	cmp	r3, #15
 800b6e8:	d908      	bls.n	800b6fc <UART_SetConfig+0xa80>
 800b6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6f0:	d204      	bcs.n	800b6fc <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6f8:	60da      	str	r2, [r3, #12]
 800b6fa:	e002      	b.n	800b702 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2201      	movs	r2, #1
 800b706:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2201      	movs	r2, #1
 800b70e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2200      	movs	r2, #0
 800b716:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2200      	movs	r2, #0
 800b71c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b71e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800b722:	4618      	mov	r0, r3
 800b724:	3738      	adds	r7, #56	; 0x38
 800b726:	46bd      	mov	sp, r7
 800b728:	bdb0      	pop	{r4, r5, r7, pc}
 800b72a:	bf00      	nop
 800b72c:	58024400 	.word	0x58024400
 800b730:	03d09000 	.word	0x03d09000
 800b734:	003d0900 	.word	0x003d0900
 800b738:	08012394 	.word	0x08012394

0800b73c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b748:	f003 0301 	and.w	r3, r3, #1
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d00a      	beq.n	800b766 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	430a      	orrs	r2, r1
 800b764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b76a:	f003 0302 	and.w	r3, r3, #2
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d00a      	beq.n	800b788 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	430a      	orrs	r2, r1
 800b786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b78c:	f003 0304 	and.w	r3, r3, #4
 800b790:	2b00      	cmp	r3, #0
 800b792:	d00a      	beq.n	800b7aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	430a      	orrs	r2, r1
 800b7a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7ae:	f003 0308 	and.w	r3, r3, #8
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d00a      	beq.n	800b7cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	685b      	ldr	r3, [r3, #4]
 800b7bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	430a      	orrs	r2, r1
 800b7ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7d0:	f003 0310 	and.w	r3, r3, #16
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d00a      	beq.n	800b7ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	689b      	ldr	r3, [r3, #8]
 800b7de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	430a      	orrs	r2, r1
 800b7ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7f2:	f003 0320 	and.w	r3, r3, #32
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d00a      	beq.n	800b810 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	689b      	ldr	r3, [r3, #8]
 800b800:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	430a      	orrs	r2, r1
 800b80e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d01a      	beq.n	800b852 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	430a      	orrs	r2, r1
 800b830:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b83a:	d10a      	bne.n	800b852 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	685b      	ldr	r3, [r3, #4]
 800b842:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	430a      	orrs	r2, r1
 800b850:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d00a      	beq.n	800b874 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	430a      	orrs	r2, r1
 800b872:	605a      	str	r2, [r3, #4]
  }
}
 800b874:	bf00      	nop
 800b876:	370c      	adds	r7, #12
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr

0800b880 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b086      	sub	sp, #24
 800b884:	af02      	add	r7, sp, #8
 800b886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2200      	movs	r2, #0
 800b88c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b890:	f7f8 fcea 	bl	8004268 <HAL_GetTick>
 800b894:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f003 0308 	and.w	r3, r3, #8
 800b8a0:	2b08      	cmp	r3, #8
 800b8a2:	d10e      	bne.n	800b8c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b8a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b8a8:	9300      	str	r3, [sp, #0]
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f000 f82f 	bl	800b916 <UART_WaitOnFlagUntilTimeout>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d001      	beq.n	800b8c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b8be:	2303      	movs	r3, #3
 800b8c0:	e025      	b.n	800b90e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f003 0304 	and.w	r3, r3, #4
 800b8cc:	2b04      	cmp	r3, #4
 800b8ce:	d10e      	bne.n	800b8ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b8d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b8d4:	9300      	str	r3, [sp, #0]
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f000 f819 	bl	800b916 <UART_WaitOnFlagUntilTimeout>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d001      	beq.n	800b8ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b8ea:	2303      	movs	r3, #3
 800b8ec:	e00f      	b.n	800b90e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2220      	movs	r2, #32
 800b8f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2220      	movs	r2, #32
 800b8fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2200      	movs	r2, #0
 800b902:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2200      	movs	r2, #0
 800b908:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b90c:	2300      	movs	r3, #0
}
 800b90e:	4618      	mov	r0, r3
 800b910:	3710      	adds	r7, #16
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}

0800b916 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b916:	b580      	push	{r7, lr}
 800b918:	b084      	sub	sp, #16
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	60f8      	str	r0, [r7, #12]
 800b91e:	60b9      	str	r1, [r7, #8]
 800b920:	603b      	str	r3, [r7, #0]
 800b922:	4613      	mov	r3, r2
 800b924:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b926:	e062      	b.n	800b9ee <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b928:	69bb      	ldr	r3, [r7, #24]
 800b92a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b92e:	d05e      	beq.n	800b9ee <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b930:	f7f8 fc9a 	bl	8004268 <HAL_GetTick>
 800b934:	4602      	mov	r2, r0
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	1ad3      	subs	r3, r2, r3
 800b93a:	69ba      	ldr	r2, [r7, #24]
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d302      	bcc.n	800b946 <UART_WaitOnFlagUntilTimeout+0x30>
 800b940:	69bb      	ldr	r3, [r7, #24]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d11d      	bne.n	800b982 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	681a      	ldr	r2, [r3, #0]
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b954:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	689a      	ldr	r2, [r3, #8]
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f022 0201 	bic.w	r2, r2, #1
 800b964:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2220      	movs	r2, #32
 800b96a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2220      	movs	r2, #32
 800b972:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2200      	movs	r2, #0
 800b97a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b97e:	2303      	movs	r3, #3
 800b980:	e045      	b.n	800ba0e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f003 0304 	and.w	r3, r3, #4
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d02e      	beq.n	800b9ee <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	69db      	ldr	r3, [r3, #28]
 800b996:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b99a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b99e:	d126      	bne.n	800b9ee <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b9a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	681a      	ldr	r2, [r3, #0]
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b9b8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	689a      	ldr	r2, [r3, #8]
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f022 0201 	bic.w	r2, r2, #1
 800b9c8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	2220      	movs	r2, #32
 800b9ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2220      	movs	r2, #32
 800b9d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	2220      	movs	r2, #32
 800b9de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b9ea:	2303      	movs	r3, #3
 800b9ec:	e00f      	b.n	800ba0e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	69da      	ldr	r2, [r3, #28]
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	4013      	ands	r3, r2
 800b9f8:	68ba      	ldr	r2, [r7, #8]
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	bf0c      	ite	eq
 800b9fe:	2301      	moveq	r3, #1
 800ba00:	2300      	movne	r3, #0
 800ba02:	b2db      	uxtb	r3, r3
 800ba04:	461a      	mov	r2, r3
 800ba06:	79fb      	ldrb	r3, [r7, #7]
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d08d      	beq.n	800b928 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ba0c:	2300      	movs	r3, #0
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	3710      	adds	r7, #16
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}
	...

0800ba18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b085      	sub	sp, #20
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	60f8      	str	r0, [r7, #12]
 800ba20:	60b9      	str	r1, [r7, #8]
 800ba22:	4613      	mov	r3, r2
 800ba24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	68ba      	ldr	r2, [r7, #8]
 800ba2a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	88fa      	ldrh	r2, [r7, #6]
 800ba30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	88fa      	ldrh	r2, [r7, #6]
 800ba38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	689b      	ldr	r3, [r3, #8]
 800ba46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba4a:	d10e      	bne.n	800ba6a <UART_Start_Receive_IT+0x52>
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	691b      	ldr	r3, [r3, #16]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d105      	bne.n	800ba60 <UART_Start_Receive_IT+0x48>
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ba5a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ba5e:	e02d      	b.n	800babc <UART_Start_Receive_IT+0xa4>
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	22ff      	movs	r2, #255	; 0xff
 800ba64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ba68:	e028      	b.n	800babc <UART_Start_Receive_IT+0xa4>
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	689b      	ldr	r3, [r3, #8]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d10d      	bne.n	800ba8e <UART_Start_Receive_IT+0x76>
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	691b      	ldr	r3, [r3, #16]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d104      	bne.n	800ba84 <UART_Start_Receive_IT+0x6c>
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	22ff      	movs	r2, #255	; 0xff
 800ba7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ba82:	e01b      	b.n	800babc <UART_Start_Receive_IT+0xa4>
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	227f      	movs	r2, #127	; 0x7f
 800ba88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ba8c:	e016      	b.n	800babc <UART_Start_Receive_IT+0xa4>
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	689b      	ldr	r3, [r3, #8]
 800ba92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba96:	d10d      	bne.n	800bab4 <UART_Start_Receive_IT+0x9c>
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	691b      	ldr	r3, [r3, #16]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d104      	bne.n	800baaa <UART_Start_Receive_IT+0x92>
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	227f      	movs	r2, #127	; 0x7f
 800baa4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800baa8:	e008      	b.n	800babc <UART_Start_Receive_IT+0xa4>
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	223f      	movs	r2, #63	; 0x3f
 800baae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bab2:	e003      	b.n	800babc <UART_Start_Receive_IT+0xa4>
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	2200      	movs	r2, #0
 800bab8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	2200      	movs	r2, #0
 800bac0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	2222      	movs	r2, #34	; 0x22
 800bac8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	689a      	ldr	r2, [r3, #8]
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f042 0201 	orr.w	r2, r2, #1
 800bada:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bae0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bae4:	d12a      	bne.n	800bb3c <UART_Start_Receive_IT+0x124>
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800baec:	88fa      	ldrh	r2, [r7, #6]
 800baee:	429a      	cmp	r2, r3
 800baf0:	d324      	bcc.n	800bb3c <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	689b      	ldr	r3, [r3, #8]
 800baf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bafa:	d107      	bne.n	800bb0c <UART_Start_Receive_IT+0xf4>
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	691b      	ldr	r3, [r3, #16]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d103      	bne.n	800bb0c <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	4a1f      	ldr	r2, [pc, #124]	; (800bb84 <UART_Start_Receive_IT+0x16c>)
 800bb08:	671a      	str	r2, [r3, #112]	; 0x70
 800bb0a:	e002      	b.n	800bb12 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	4a1e      	ldr	r2, [pc, #120]	; (800bb88 <UART_Start_Receive_IT+0x170>)
 800bb10:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	2200      	movs	r2, #0
 800bb16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	681a      	ldr	r2, [r3, #0]
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bb28:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	689a      	ldr	r2, [r3, #8]
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800bb38:	609a      	str	r2, [r3, #8]
 800bb3a:	e01b      	b.n	800bb74 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	689b      	ldr	r3, [r3, #8]
 800bb40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb44:	d107      	bne.n	800bb56 <UART_Start_Receive_IT+0x13e>
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	691b      	ldr	r3, [r3, #16]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d103      	bne.n	800bb56 <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	4a0e      	ldr	r2, [pc, #56]	; (800bb8c <UART_Start_Receive_IT+0x174>)
 800bb52:	671a      	str	r2, [r3, #112]	; 0x70
 800bb54:	e002      	b.n	800bb5c <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	4a0d      	ldr	r2, [pc, #52]	; (800bb90 <UART_Start_Receive_IT+0x178>)
 800bb5a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	681a      	ldr	r2, [r3, #0]
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800bb72:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800bb74:	2300      	movs	r3, #0
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3714      	adds	r7, #20
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb80:	4770      	bx	lr
 800bb82:	bf00      	nop
 800bb84:	0800c00d 	.word	0x0800c00d
 800bb88:	0800be09 	.word	0x0800be09
 800bb8c:	0800bd31 	.word	0x0800bd31
 800bb90:	0800bc59 	.word	0x0800bc59

0800bb94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b083      	sub	sp, #12
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bbaa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	6899      	ldr	r1, [r3, #8]
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681a      	ldr	r2, [r3, #0]
 800bbb6:	4b0f      	ldr	r3, [pc, #60]	; (800bbf4 <UART_EndRxTransfer+0x60>)
 800bbb8:	400b      	ands	r3, r1
 800bbba:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbc0:	2b01      	cmp	r3, #1
 800bbc2:	d107      	bne.n	800bbd4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	681a      	ldr	r2, [r3, #0]
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f022 0210 	bic.w	r2, r2, #16
 800bbd2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2220      	movs	r2, #32
 800bbd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	671a      	str	r2, [r3, #112]	; 0x70
}
 800bbe8:	bf00      	nop
 800bbea:	370c      	adds	r7, #12
 800bbec:	46bd      	mov	sp, r7
 800bbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf2:	4770      	bx	lr
 800bbf4:	effffffe 	.word	0xeffffffe

0800bbf8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b084      	sub	sp, #16
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	2200      	movs	r2, #0
 800bc0a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2200      	movs	r2, #0
 800bc12:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bc16:	68f8      	ldr	r0, [r7, #12]
 800bc18:	f7ff f81a 	bl	800ac50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc1c:	bf00      	nop
 800bc1e:	3710      	adds	r7, #16
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b082      	sub	sp, #8
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	681a      	ldr	r2, [r3, #0]
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc3a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2220      	movs	r2, #32
 800bc40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2200      	movs	r2, #0
 800bc48:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f7fe fff6 	bl	800ac3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc50:	bf00      	nop
 800bc52:	3708      	adds	r7, #8
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}

0800bc58 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b084      	sub	sp, #16
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bc66:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc6e:	2b22      	cmp	r3, #34	; 0x22
 800bc70:	d152      	bne.n	800bd18 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc78:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bc7a:	89bb      	ldrh	r3, [r7, #12]
 800bc7c:	b2d9      	uxtb	r1, r3
 800bc7e:	89fb      	ldrh	r3, [r7, #14]
 800bc80:	b2da      	uxtb	r2, r3
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc86:	400a      	ands	r2, r1
 800bc88:	b2d2      	uxtb	r2, r2
 800bc8a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc90:	1c5a      	adds	r2, r3, #1
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bc9c:	b29b      	uxth	r3, r3
 800bc9e:	3b01      	subs	r3, #1
 800bca0:	b29a      	uxth	r2, r3
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bcae:	b29b      	uxth	r3, r3
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d139      	bne.n	800bd28 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	681a      	ldr	r2, [r3, #0]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bcc2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	689a      	ldr	r2, [r3, #8]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f022 0201 	bic.w	r2, r2, #1
 800bcd2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2220      	movs	r2, #32
 800bcd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2200      	movs	r2, #0
 800bce0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bce6:	2b01      	cmp	r3, #1
 800bce8:	d10f      	bne.n	800bd0a <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	681a      	ldr	r2, [r3, #0]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f022 0210 	bic.w	r2, r2, #16
 800bcf8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bd00:	4619      	mov	r1, r3
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f7fe ffae 	bl	800ac64 <HAL_UARTEx_RxEventCallback>
 800bd08:	e002      	b.n	800bd10 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f7f7 fc94 	bl	8003638 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2200      	movs	r2, #0
 800bd14:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bd16:	e007      	b.n	800bd28 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	699a      	ldr	r2, [r3, #24]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f042 0208 	orr.w	r2, r2, #8
 800bd26:	619a      	str	r2, [r3, #24]
}
 800bd28:	bf00      	nop
 800bd2a:	3710      	adds	r7, #16
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}

0800bd30 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b084      	sub	sp, #16
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bd3e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd46:	2b22      	cmp	r3, #34	; 0x22
 800bd48:	d152      	bne.n	800bdf0 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd50:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd56:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800bd58:	89ba      	ldrh	r2, [r7, #12]
 800bd5a:	89fb      	ldrh	r3, [r7, #14]
 800bd5c:	4013      	ands	r3, r2
 800bd5e:	b29a      	uxth	r2, r3
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd68:	1c9a      	adds	r2, r3, #2
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bd74:	b29b      	uxth	r3, r3
 800bd76:	3b01      	subs	r3, #1
 800bd78:	b29a      	uxth	r2, r3
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bd86:	b29b      	uxth	r3, r3
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d139      	bne.n	800be00 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	681a      	ldr	r2, [r3, #0]
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bd9a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	689a      	ldr	r2, [r3, #8]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f022 0201 	bic.w	r2, r2, #1
 800bdaa:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2220      	movs	r2, #32
 800bdb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdbe:	2b01      	cmp	r3, #1
 800bdc0:	d10f      	bne.n	800bde2 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	681a      	ldr	r2, [r3, #0]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f022 0210 	bic.w	r2, r2, #16
 800bdd0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bdd8:	4619      	mov	r1, r3
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f7fe ff42 	bl	800ac64 <HAL_UARTEx_RxEventCallback>
 800bde0:	e002      	b.n	800bde8 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f7f7 fc28 	bl	8003638 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2200      	movs	r2, #0
 800bdec:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bdee:	e007      	b.n	800be00 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	699a      	ldr	r2, [r3, #24]
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f042 0208 	orr.w	r2, r2, #8
 800bdfe:	619a      	str	r2, [r3, #24]
}
 800be00:	bf00      	nop
 800be02:	3710      	adds	r7, #16
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}

0800be08 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b088      	sub	sp, #32
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800be16:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	69db      	ldr	r3, [r3, #28]
 800be1e:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	689b      	ldr	r3, [r3, #8]
 800be2e:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be36:	2b22      	cmp	r3, #34	; 0x22
 800be38:	f040 80d8 	bne.w	800bfec <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800be42:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800be44:	e0a8      	b.n	800bf98 <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be4c:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800be4e:	89bb      	ldrh	r3, [r7, #12]
 800be50:	b2d9      	uxtb	r1, r3
 800be52:	8b7b      	ldrh	r3, [r7, #26]
 800be54:	b2da      	uxtb	r2, r3
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be5a:	400a      	ands	r2, r1
 800be5c:	b2d2      	uxtb	r2, r2
 800be5e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be64:	1c5a      	adds	r2, r3, #1
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800be70:	b29b      	uxth	r3, r3
 800be72:	3b01      	subs	r3, #1
 800be74:	b29a      	uxth	r2, r3
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	69db      	ldr	r3, [r3, #28]
 800be82:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800be84:	69fb      	ldr	r3, [r7, #28]
 800be86:	f003 0307 	and.w	r3, r3, #7
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d04d      	beq.n	800bf2a <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800be8e:	69fb      	ldr	r3, [r7, #28]
 800be90:	f003 0301 	and.w	r3, r3, #1
 800be94:	2b00      	cmp	r3, #0
 800be96:	d010      	beq.n	800beba <UART_RxISR_8BIT_FIFOEN+0xb2>
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d00b      	beq.n	800beba <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	2201      	movs	r2, #1
 800bea8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800beb0:	f043 0201 	orr.w	r2, r3, #1
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800beba:	69fb      	ldr	r3, [r7, #28]
 800bebc:	f003 0302 	and.w	r3, r3, #2
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d010      	beq.n	800bee6 <UART_RxISR_8BIT_FIFOEN+0xde>
 800bec4:	693b      	ldr	r3, [r7, #16]
 800bec6:	f003 0301 	and.w	r3, r3, #1
 800beca:	2b00      	cmp	r3, #0
 800becc:	d00b      	beq.n	800bee6 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	2202      	movs	r2, #2
 800bed4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bedc:	f043 0204 	orr.w	r2, r3, #4
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bee6:	69fb      	ldr	r3, [r7, #28]
 800bee8:	f003 0304 	and.w	r3, r3, #4
 800beec:	2b00      	cmp	r3, #0
 800beee:	d010      	beq.n	800bf12 <UART_RxISR_8BIT_FIFOEN+0x10a>
 800bef0:	693b      	ldr	r3, [r7, #16]
 800bef2:	f003 0301 	and.w	r3, r3, #1
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d00b      	beq.n	800bf12 <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	2204      	movs	r2, #4
 800bf00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf08:	f043 0202 	orr.w	r2, r3, #2
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d006      	beq.n	800bf2a <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f7fe fe97 	bl	800ac50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2200      	movs	r2, #0
 800bf26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf30:	b29b      	uxth	r3, r3
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d130      	bne.n	800bf98 <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	681a      	ldr	r2, [r3, #0]
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bf44:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	6899      	ldr	r1, [r3, #8]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681a      	ldr	r2, [r3, #0]
 800bf50:	4b2c      	ldr	r3, [pc, #176]	; (800c004 <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 800bf52:	400b      	ands	r3, r1
 800bf54:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2220      	movs	r2, #32
 800bf5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2200      	movs	r2, #0
 800bf62:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf68:	2b01      	cmp	r3, #1
 800bf6a:	d10f      	bne.n	800bf8c <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	681a      	ldr	r2, [r3, #0]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f022 0210 	bic.w	r2, r2, #16
 800bf7a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bf82:	4619      	mov	r1, r3
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f7fe fe6d 	bl	800ac64 <HAL_UARTEx_RxEventCallback>
 800bf8a:	e002      	b.n	800bf92 <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f7f7 fb53 	bl	8003638 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2200      	movs	r2, #0
 800bf96:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bf98:	89fb      	ldrh	r3, [r7, #14]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d005      	beq.n	800bfaa <UART_RxISR_8BIT_FIFOEN+0x1a2>
 800bf9e:	69fb      	ldr	r3, [r7, #28]
 800bfa0:	f003 0320 	and.w	r3, r3, #32
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	f47f af4e 	bne.w	800be46 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bfb0:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800bfb2:	897b      	ldrh	r3, [r7, #10]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d021      	beq.n	800bffc <UART_RxISR_8BIT_FIFOEN+0x1f4>
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bfbe:	897a      	ldrh	r2, [r7, #10]
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d21b      	bcs.n	800bffc <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	689a      	ldr	r2, [r3, #8]
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800bfd2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	4a0c      	ldr	r2, [pc, #48]	; (800c008 <UART_RxISR_8BIT_FIFOEN+0x200>)
 800bfd8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	681a      	ldr	r2, [r3, #0]
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	f042 0220 	orr.w	r2, r2, #32
 800bfe8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bfea:	e007      	b.n	800bffc <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	699a      	ldr	r2, [r3, #24]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f042 0208 	orr.w	r2, r2, #8
 800bffa:	619a      	str	r2, [r3, #24]
}
 800bffc:	bf00      	nop
 800bffe:	3720      	adds	r7, #32
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}
 800c004:	effffffe 	.word	0xeffffffe
 800c008:	0800bc59 	.word	0x0800bc59

0800c00c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b08a      	sub	sp, #40	; 0x28
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c01a:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	69db      	ldr	r3, [r3, #28]
 800c022:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	689b      	ldr	r3, [r3, #8]
 800c032:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c03a:	2b22      	cmp	r3, #34	; 0x22
 800c03c:	f040 80d8 	bne.w	800c1f0 <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c046:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c048:	e0a8      	b.n	800c19c <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c050:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c056:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 800c058:	8aba      	ldrh	r2, [r7, #20]
 800c05a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c05c:	4013      	ands	r3, r2
 800c05e:	b29a      	uxth	r2, r3
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c068:	1c9a      	adds	r2, r3, #2
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c074:	b29b      	uxth	r3, r3
 800c076:	3b01      	subs	r3, #1
 800c078:	b29a      	uxth	r2, r3
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	69db      	ldr	r3, [r3, #28]
 800c086:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c08a:	f003 0307 	and.w	r3, r3, #7
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d04d      	beq.n	800c12e <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c094:	f003 0301 	and.w	r3, r3, #1
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d010      	beq.n	800c0be <UART_RxISR_16BIT_FIFOEN+0xb2>
 800c09c:	69fb      	ldr	r3, [r7, #28]
 800c09e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d00b      	beq.n	800c0be <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0b4:	f043 0201 	orr.w	r2, r3, #1
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c0:	f003 0302 	and.w	r3, r3, #2
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d010      	beq.n	800c0ea <UART_RxISR_16BIT_FIFOEN+0xde>
 800c0c8:	69bb      	ldr	r3, [r7, #24]
 800c0ca:	f003 0301 	and.w	r3, r3, #1
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d00b      	beq.n	800c0ea <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	2202      	movs	r2, #2
 800c0d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0e0:	f043 0204 	orr.w	r2, r3, #4
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ec:	f003 0304 	and.w	r3, r3, #4
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d010      	beq.n	800c116 <UART_RxISR_16BIT_FIFOEN+0x10a>
 800c0f4:	69bb      	ldr	r3, [r7, #24]
 800c0f6:	f003 0301 	and.w	r3, r3, #1
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d00b      	beq.n	800c116 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	2204      	movs	r2, #4
 800c104:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c10c:	f043 0202 	orr.w	r2, r3, #2
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d006      	beq.n	800c12e <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f7fe fd95 	bl	800ac50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2200      	movs	r2, #0
 800c12a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c134:	b29b      	uxth	r3, r3
 800c136:	2b00      	cmp	r3, #0
 800c138:	d130      	bne.n	800c19c <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	681a      	ldr	r2, [r3, #0]
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c148:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	6899      	ldr	r1, [r3, #8]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681a      	ldr	r2, [r3, #0]
 800c154:	4b2c      	ldr	r3, [pc, #176]	; (800c208 <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 800c156:	400b      	ands	r3, r1
 800c158:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2220      	movs	r2, #32
 800c15e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2200      	movs	r2, #0
 800c166:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c16c:	2b01      	cmp	r3, #1
 800c16e:	d10f      	bne.n	800c190 <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	681a      	ldr	r2, [r3, #0]
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f022 0210 	bic.w	r2, r2, #16
 800c17e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c186:	4619      	mov	r1, r3
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f7fe fd6b 	bl	800ac64 <HAL_UARTEx_RxEventCallback>
 800c18e:	e002      	b.n	800c196 <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f7f7 fa51 	bl	8003638 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2200      	movs	r2, #0
 800c19a:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c19c:	8afb      	ldrh	r3, [r7, #22]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d005      	beq.n	800c1ae <UART_RxISR_16BIT_FIFOEN+0x1a2>
 800c1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a4:	f003 0320 	and.w	r3, r3, #32
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	f47f af4e 	bne.w	800c04a <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c1b4:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c1b6:	89fb      	ldrh	r3, [r7, #14]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d021      	beq.n	800c200 <UART_RxISR_16BIT_FIFOEN+0x1f4>
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c1c2:	89fa      	ldrh	r2, [r7, #14]
 800c1c4:	429a      	cmp	r2, r3
 800c1c6:	d21b      	bcs.n	800c200 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	689a      	ldr	r2, [r3, #8]
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c1d6:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	4a0c      	ldr	r2, [pc, #48]	; (800c20c <UART_RxISR_16BIT_FIFOEN+0x200>)
 800c1dc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	681a      	ldr	r2, [r3, #0]
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	f042 0220 	orr.w	r2, r2, #32
 800c1ec:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c1ee:	e007      	b.n	800c200 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	699a      	ldr	r2, [r3, #24]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f042 0208 	orr.w	r2, r2, #8
 800c1fe:	619a      	str	r2, [r3, #24]
}
 800c200:	bf00      	nop
 800c202:	3728      	adds	r7, #40	; 0x28
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}
 800c208:	effffffe 	.word	0xeffffffe
 800c20c:	0800bd31 	.word	0x0800bd31

0800c210 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c210:	b480      	push	{r7}
 800c212:	b083      	sub	sp, #12
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c218:	bf00      	nop
 800c21a:	370c      	adds	r7, #12
 800c21c:	46bd      	mov	sp, r7
 800c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c222:	4770      	bx	lr

0800c224 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c224:	b480      	push	{r7}
 800c226:	b083      	sub	sp, #12
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c22c:	bf00      	nop
 800c22e:	370c      	adds	r7, #12
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr

0800c238 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c238:	b480      	push	{r7}
 800c23a:	b083      	sub	sp, #12
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c240:	bf00      	nop
 800c242:	370c      	adds	r7, #12
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr

0800c24c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b085      	sub	sp, #20
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c25a:	2b01      	cmp	r3, #1
 800c25c:	d101      	bne.n	800c262 <HAL_UARTEx_DisableFifoMode+0x16>
 800c25e:	2302      	movs	r3, #2
 800c260:	e027      	b.n	800c2b2 <HAL_UARTEx_DisableFifoMode+0x66>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2201      	movs	r2, #1
 800c266:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2224      	movs	r2, #36	; 0x24
 800c26e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	681a      	ldr	r2, [r3, #0]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f022 0201 	bic.w	r2, r2, #1
 800c288:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c290:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2200      	movs	r2, #0
 800c296:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	68fa      	ldr	r2, [r7, #12]
 800c29e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2220      	movs	r2, #32
 800c2a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c2b0:	2300      	movs	r3, #0
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3714      	adds	r7, #20
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2bc:	4770      	bx	lr

0800c2be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c2be:	b580      	push	{r7, lr}
 800c2c0:	b084      	sub	sp, #16
 800c2c2:	af00      	add	r7, sp, #0
 800c2c4:	6078      	str	r0, [r7, #4]
 800c2c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c2ce:	2b01      	cmp	r3, #1
 800c2d0:	d101      	bne.n	800c2d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c2d2:	2302      	movs	r3, #2
 800c2d4:	e02d      	b.n	800c332 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2201      	movs	r2, #1
 800c2da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2224      	movs	r2, #36	; 0x24
 800c2e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	681a      	ldr	r2, [r3, #0]
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f022 0201 	bic.w	r2, r2, #1
 800c2fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	689b      	ldr	r3, [r3, #8]
 800c304:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	683a      	ldr	r2, [r7, #0]
 800c30e:	430a      	orrs	r2, r1
 800c310:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f000 f850 	bl	800c3b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	68fa      	ldr	r2, [r7, #12]
 800c31e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2220      	movs	r2, #32
 800c324:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2200      	movs	r2, #0
 800c32c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c330:	2300      	movs	r3, #0
}
 800c332:	4618      	mov	r0, r3
 800c334:	3710      	adds	r7, #16
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}

0800c33a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c33a:	b580      	push	{r7, lr}
 800c33c:	b084      	sub	sp, #16
 800c33e:	af00      	add	r7, sp, #0
 800c340:	6078      	str	r0, [r7, #4]
 800c342:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c34a:	2b01      	cmp	r3, #1
 800c34c:	d101      	bne.n	800c352 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c34e:	2302      	movs	r3, #2
 800c350:	e02d      	b.n	800c3ae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2201      	movs	r2, #1
 800c356:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2224      	movs	r2, #36	; 0x24
 800c35e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	681a      	ldr	r2, [r3, #0]
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f022 0201 	bic.w	r2, r2, #1
 800c378:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	689b      	ldr	r3, [r3, #8]
 800c380:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	683a      	ldr	r2, [r7, #0]
 800c38a:	430a      	orrs	r2, r1
 800c38c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	f000 f812 	bl	800c3b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	68fa      	ldr	r2, [r7, #12]
 800c39a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2220      	movs	r2, #32
 800c3a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c3ac:	2300      	movs	r3, #0
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3710      	adds	r7, #16
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}
	...

0800c3b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b085      	sub	sp, #20
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d108      	bne.n	800c3da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2201      	movs	r2, #1
 800c3cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2201      	movs	r2, #1
 800c3d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c3d8:	e031      	b.n	800c43e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c3da:	2310      	movs	r3, #16
 800c3dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c3de:	2310      	movs	r3, #16
 800c3e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	689b      	ldr	r3, [r3, #8]
 800c3e8:	0e5b      	lsrs	r3, r3, #25
 800c3ea:	b2db      	uxtb	r3, r3
 800c3ec:	f003 0307 	and.w	r3, r3, #7
 800c3f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	689b      	ldr	r3, [r3, #8]
 800c3f8:	0f5b      	lsrs	r3, r3, #29
 800c3fa:	b2db      	uxtb	r3, r3
 800c3fc:	f003 0307 	and.w	r3, r3, #7
 800c400:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c402:	7bbb      	ldrb	r3, [r7, #14]
 800c404:	7b3a      	ldrb	r2, [r7, #12]
 800c406:	4911      	ldr	r1, [pc, #68]	; (800c44c <UARTEx_SetNbDataToProcess+0x94>)
 800c408:	5c8a      	ldrb	r2, [r1, r2]
 800c40a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c40e:	7b3a      	ldrb	r2, [r7, #12]
 800c410:	490f      	ldr	r1, [pc, #60]	; (800c450 <UARTEx_SetNbDataToProcess+0x98>)
 800c412:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c414:	fb93 f3f2 	sdiv	r3, r3, r2
 800c418:	b29a      	uxth	r2, r3
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c420:	7bfb      	ldrb	r3, [r7, #15]
 800c422:	7b7a      	ldrb	r2, [r7, #13]
 800c424:	4909      	ldr	r1, [pc, #36]	; (800c44c <UARTEx_SetNbDataToProcess+0x94>)
 800c426:	5c8a      	ldrb	r2, [r1, r2]
 800c428:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c42c:	7b7a      	ldrb	r2, [r7, #13]
 800c42e:	4908      	ldr	r1, [pc, #32]	; (800c450 <UARTEx_SetNbDataToProcess+0x98>)
 800c430:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c432:	fb93 f3f2 	sdiv	r3, r3, r2
 800c436:	b29a      	uxth	r2, r3
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c43e:	bf00      	nop
 800c440:	3714      	adds	r7, #20
 800c442:	46bd      	mov	sp, r7
 800c444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c448:	4770      	bx	lr
 800c44a:	bf00      	nop
 800c44c:	080123ac 	.word	0x080123ac
 800c450:	080123b4 	.word	0x080123b4

0800c454 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c454:	b084      	sub	sp, #16
 800c456:	b580      	push	{r7, lr}
 800c458:	b084      	sub	sp, #16
 800c45a:	af00      	add	r7, sp, #0
 800c45c:	6078      	str	r0, [r7, #4]
 800c45e:	f107 001c 	add.w	r0, r7, #28
 800c462:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c468:	2b01      	cmp	r3, #1
 800c46a:	d120      	bne.n	800c4ae <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c470:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	68da      	ldr	r2, [r3, #12]
 800c47c:	4b2a      	ldr	r3, [pc, #168]	; (800c528 <USB_CoreInit+0xd4>)
 800c47e:	4013      	ands	r3, r2
 800c480:	687a      	ldr	r2, [r7, #4]
 800c482:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	68db      	ldr	r3, [r3, #12]
 800c488:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c492:	2b01      	cmp	r3, #1
 800c494:	d105      	bne.n	800c4a2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	68db      	ldr	r3, [r3, #12]
 800c49a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f000 fa60 	bl	800c968 <USB_CoreReset>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	73fb      	strb	r3, [r7, #15]
 800c4ac:	e01a      	b.n	800c4e4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	68db      	ldr	r3, [r3, #12]
 800c4b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f000 fa54 	bl	800c968 <USB_CoreReset>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c4c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d106      	bne.n	800c4d8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	639a      	str	r2, [r3, #56]	; 0x38
 800c4d6:	e005      	b.n	800c4e4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e6:	2b01      	cmp	r3, #1
 800c4e8:	d116      	bne.n	800c518 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c4ee:	b29a      	uxth	r2, r3
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c4f8:	4b0c      	ldr	r3, [pc, #48]	; (800c52c <USB_CoreInit+0xd8>)
 800c4fa:	4313      	orrs	r3, r2
 800c4fc:	687a      	ldr	r2, [r7, #4]
 800c4fe:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	689b      	ldr	r3, [r3, #8]
 800c504:	f043 0206 	orr.w	r2, r3, #6
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	689b      	ldr	r3, [r3, #8]
 800c510:	f043 0220 	orr.w	r2, r3, #32
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c518:	7bfb      	ldrb	r3, [r7, #15]
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3710      	adds	r7, #16
 800c51e:	46bd      	mov	sp, r7
 800c520:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c524:	b004      	add	sp, #16
 800c526:	4770      	bx	lr
 800c528:	ffbdffbf 	.word	0xffbdffbf
 800c52c:	03ee0000 	.word	0x03ee0000

0800c530 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c530:	b480      	push	{r7}
 800c532:	b083      	sub	sp, #12
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	689b      	ldr	r3, [r3, #8]
 800c53c:	f023 0201 	bic.w	r2, r3, #1
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c544:	2300      	movs	r3, #0
}
 800c546:	4618      	mov	r0, r3
 800c548:	370c      	adds	r7, #12
 800c54a:	46bd      	mov	sp, r7
 800c54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c550:	4770      	bx	lr

0800c552 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c552:	b580      	push	{r7, lr}
 800c554:	b082      	sub	sp, #8
 800c556:	af00      	add	r7, sp, #0
 800c558:	6078      	str	r0, [r7, #4]
 800c55a:	460b      	mov	r3, r1
 800c55c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	68db      	ldr	r3, [r3, #12]
 800c562:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c56a:	78fb      	ldrb	r3, [r7, #3]
 800c56c:	2b01      	cmp	r3, #1
 800c56e:	d106      	bne.n	800c57e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	68db      	ldr	r3, [r3, #12]
 800c574:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	60da      	str	r2, [r3, #12]
 800c57c:	e00b      	b.n	800c596 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c57e:	78fb      	ldrb	r3, [r7, #3]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d106      	bne.n	800c592 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	68db      	ldr	r3, [r3, #12]
 800c588:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	60da      	str	r2, [r3, #12]
 800c590:	e001      	b.n	800c596 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c592:	2301      	movs	r3, #1
 800c594:	e003      	b.n	800c59e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c596:	2032      	movs	r0, #50	; 0x32
 800c598:	f7f7 fe72 	bl	8004280 <HAL_Delay>

  return HAL_OK;
 800c59c:	2300      	movs	r3, #0
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3708      	adds	r7, #8
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
	...

0800c5a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c5a8:	b084      	sub	sp, #16
 800c5aa:	b580      	push	{r7, lr}
 800c5ac:	b086      	sub	sp, #24
 800c5ae:	af00      	add	r7, sp, #0
 800c5b0:	6078      	str	r0, [r7, #4]
 800c5b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c5b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	613b      	str	r3, [r7, #16]
 800c5c6:	e009      	b.n	800c5dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c5c8:	687a      	ldr	r2, [r7, #4]
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	3340      	adds	r3, #64	; 0x40
 800c5ce:	009b      	lsls	r3, r3, #2
 800c5d0:	4413      	add	r3, r2
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	3301      	adds	r3, #1
 800c5da:	613b      	str	r3, [r7, #16]
 800c5dc:	693b      	ldr	r3, [r7, #16]
 800c5de:	2b0e      	cmp	r3, #14
 800c5e0:	d9f2      	bls.n	800c5c8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c5e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d11c      	bne.n	800c622 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5ee:	685b      	ldr	r3, [r3, #4]
 800c5f0:	68fa      	ldr	r2, [r7, #12]
 800c5f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c5f6:	f043 0302 	orr.w	r3, r3, #2
 800c5fa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c600:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	601a      	str	r2, [r3, #0]
 800c620:	e005      	b.n	800c62e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c626:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c634:	461a      	mov	r2, r3
 800c636:	2300      	movs	r3, #0
 800c638:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c640:	4619      	mov	r1, r3
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c648:	461a      	mov	r2, r3
 800c64a:	680b      	ldr	r3, [r1, #0]
 800c64c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c650:	2b01      	cmp	r3, #1
 800c652:	d10c      	bne.n	800c66e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c656:	2b00      	cmp	r3, #0
 800c658:	d104      	bne.n	800c664 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c65a:	2100      	movs	r1, #0
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f000 f949 	bl	800c8f4 <USB_SetDevSpeed>
 800c662:	e008      	b.n	800c676 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c664:	2101      	movs	r1, #1
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f000 f944 	bl	800c8f4 <USB_SetDevSpeed>
 800c66c:	e003      	b.n	800c676 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c66e:	2103      	movs	r1, #3
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f000 f93f 	bl	800c8f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c676:	2110      	movs	r1, #16
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f000 f8f3 	bl	800c864 <USB_FlushTxFifo>
 800c67e:	4603      	mov	r3, r0
 800c680:	2b00      	cmp	r3, #0
 800c682:	d001      	beq.n	800c688 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c684:	2301      	movs	r3, #1
 800c686:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f000 f911 	bl	800c8b0 <USB_FlushRxFifo>
 800c68e:	4603      	mov	r3, r0
 800c690:	2b00      	cmp	r3, #0
 800c692:	d001      	beq.n	800c698 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c694:	2301      	movs	r3, #1
 800c696:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c69e:	461a      	mov	r2, r3
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6b6:	461a      	mov	r2, r3
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c6bc:	2300      	movs	r3, #0
 800c6be:	613b      	str	r3, [r7, #16]
 800c6c0:	e043      	b.n	800c74a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	015a      	lsls	r2, r3, #5
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	4413      	add	r3, r2
 800c6ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c6d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c6d8:	d118      	bne.n	800c70c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c6da:	693b      	ldr	r3, [r7, #16]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d10a      	bne.n	800c6f6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	015a      	lsls	r2, r3, #5
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	4413      	add	r3, r2
 800c6e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6ec:	461a      	mov	r2, r3
 800c6ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c6f2:	6013      	str	r3, [r2, #0]
 800c6f4:	e013      	b.n	800c71e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	015a      	lsls	r2, r3, #5
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	4413      	add	r3, r2
 800c6fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c702:	461a      	mov	r2, r3
 800c704:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c708:	6013      	str	r3, [r2, #0]
 800c70a:	e008      	b.n	800c71e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c70c:	693b      	ldr	r3, [r7, #16]
 800c70e:	015a      	lsls	r2, r3, #5
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	4413      	add	r3, r2
 800c714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c718:	461a      	mov	r2, r3
 800c71a:	2300      	movs	r3, #0
 800c71c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	015a      	lsls	r2, r3, #5
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	4413      	add	r3, r2
 800c726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c72a:	461a      	mov	r2, r3
 800c72c:	2300      	movs	r3, #0
 800c72e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	015a      	lsls	r2, r3, #5
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	4413      	add	r3, r2
 800c738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c73c:	461a      	mov	r2, r3
 800c73e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c742:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	3301      	adds	r3, #1
 800c748:	613b      	str	r3, [r7, #16]
 800c74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c74c:	693a      	ldr	r2, [r7, #16]
 800c74e:	429a      	cmp	r2, r3
 800c750:	d3b7      	bcc.n	800c6c2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c752:	2300      	movs	r3, #0
 800c754:	613b      	str	r3, [r7, #16]
 800c756:	e043      	b.n	800c7e0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c758:	693b      	ldr	r3, [r7, #16]
 800c75a:	015a      	lsls	r2, r3, #5
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	4413      	add	r3, r2
 800c760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c76a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c76e:	d118      	bne.n	800c7a2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c770:	693b      	ldr	r3, [r7, #16]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d10a      	bne.n	800c78c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	015a      	lsls	r2, r3, #5
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	4413      	add	r3, r2
 800c77e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c782:	461a      	mov	r2, r3
 800c784:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c788:	6013      	str	r3, [r2, #0]
 800c78a:	e013      	b.n	800c7b4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	015a      	lsls	r2, r3, #5
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	4413      	add	r3, r2
 800c794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c798:	461a      	mov	r2, r3
 800c79a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c79e:	6013      	str	r3, [r2, #0]
 800c7a0:	e008      	b.n	800c7b4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c7a2:	693b      	ldr	r3, [r7, #16]
 800c7a4:	015a      	lsls	r2, r3, #5
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	4413      	add	r3, r2
 800c7aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7ae:	461a      	mov	r2, r3
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c7b4:	693b      	ldr	r3, [r7, #16]
 800c7b6:	015a      	lsls	r2, r3, #5
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	4413      	add	r3, r2
 800c7bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7c0:	461a      	mov	r2, r3
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c7c6:	693b      	ldr	r3, [r7, #16]
 800c7c8:	015a      	lsls	r2, r3, #5
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	4413      	add	r3, r2
 800c7ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7d2:	461a      	mov	r2, r3
 800c7d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c7d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c7da:	693b      	ldr	r3, [r7, #16]
 800c7dc:	3301      	adds	r3, #1
 800c7de:	613b      	str	r3, [r7, #16]
 800c7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e2:	693a      	ldr	r2, [r7, #16]
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	d3b7      	bcc.n	800c758 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7ee:	691b      	ldr	r3, [r3, #16]
 800c7f0:	68fa      	ldr	r2, [r7, #12]
 800c7f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c7f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c7fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2200      	movs	r2, #0
 800c800:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c808:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d105      	bne.n	800c81c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	699b      	ldr	r3, [r3, #24]
 800c814:	f043 0210 	orr.w	r2, r3, #16
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	699a      	ldr	r2, [r3, #24]
 800c820:	4b0e      	ldr	r3, [pc, #56]	; (800c85c <USB_DevInit+0x2b4>)
 800c822:	4313      	orrs	r3, r2
 800c824:	687a      	ldr	r2, [r7, #4]
 800c826:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d005      	beq.n	800c83a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	699b      	ldr	r3, [r3, #24]
 800c832:	f043 0208 	orr.w	r2, r3, #8
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c83a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c83c:	2b01      	cmp	r3, #1
 800c83e:	d105      	bne.n	800c84c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	699a      	ldr	r2, [r3, #24]
 800c844:	4b06      	ldr	r3, [pc, #24]	; (800c860 <USB_DevInit+0x2b8>)
 800c846:	4313      	orrs	r3, r2
 800c848:	687a      	ldr	r2, [r7, #4]
 800c84a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c84c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c84e:	4618      	mov	r0, r3
 800c850:	3718      	adds	r7, #24
 800c852:	46bd      	mov	sp, r7
 800c854:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c858:	b004      	add	sp, #16
 800c85a:	4770      	bx	lr
 800c85c:	803c3800 	.word	0x803c3800
 800c860:	40000004 	.word	0x40000004

0800c864 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c864:	b480      	push	{r7}
 800c866:	b085      	sub	sp, #20
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c86e:	2300      	movs	r3, #0
 800c870:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	019b      	lsls	r3, r3, #6
 800c876:	f043 0220 	orr.w	r2, r3, #32
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	3301      	adds	r3, #1
 800c882:	60fb      	str	r3, [r7, #12]
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	4a09      	ldr	r2, [pc, #36]	; (800c8ac <USB_FlushTxFifo+0x48>)
 800c888:	4293      	cmp	r3, r2
 800c88a:	d901      	bls.n	800c890 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c88c:	2303      	movs	r3, #3
 800c88e:	e006      	b.n	800c89e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	691b      	ldr	r3, [r3, #16]
 800c894:	f003 0320 	and.w	r3, r3, #32
 800c898:	2b20      	cmp	r3, #32
 800c89a:	d0f0      	beq.n	800c87e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c89c:	2300      	movs	r3, #0
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3714      	adds	r7, #20
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a8:	4770      	bx	lr
 800c8aa:	bf00      	nop
 800c8ac:	00030d40 	.word	0x00030d40

0800c8b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b085      	sub	sp, #20
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2210      	movs	r2, #16
 800c8c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	3301      	adds	r3, #1
 800c8c6:	60fb      	str	r3, [r7, #12]
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	4a09      	ldr	r2, [pc, #36]	; (800c8f0 <USB_FlushRxFifo+0x40>)
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	d901      	bls.n	800c8d4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c8d0:	2303      	movs	r3, #3
 800c8d2:	e006      	b.n	800c8e2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	691b      	ldr	r3, [r3, #16]
 800c8d8:	f003 0310 	and.w	r3, r3, #16
 800c8dc:	2b10      	cmp	r3, #16
 800c8de:	d0f0      	beq.n	800c8c2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c8e0:	2300      	movs	r3, #0
}
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	3714      	adds	r7, #20
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ec:	4770      	bx	lr
 800c8ee:	bf00      	nop
 800c8f0:	00030d40 	.word	0x00030d40

0800c8f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b085      	sub	sp, #20
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
 800c8fc:	460b      	mov	r3, r1
 800c8fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c90a:	681a      	ldr	r2, [r3, #0]
 800c90c:	78fb      	ldrb	r3, [r7, #3]
 800c90e:	68f9      	ldr	r1, [r7, #12]
 800c910:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c914:	4313      	orrs	r3, r2
 800c916:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c918:	2300      	movs	r3, #0
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	3714      	adds	r7, #20
 800c91e:	46bd      	mov	sp, r7
 800c920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c924:	4770      	bx	lr

0800c926 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c926:	b480      	push	{r7}
 800c928:	b085      	sub	sp, #20
 800c92a:	af00      	add	r7, sp, #0
 800c92c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	68fa      	ldr	r2, [r7, #12]
 800c93c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c940:	f023 0303 	bic.w	r3, r3, #3
 800c944:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c94c:	685b      	ldr	r3, [r3, #4]
 800c94e:	68fa      	ldr	r2, [r7, #12]
 800c950:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c954:	f043 0302 	orr.w	r3, r3, #2
 800c958:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c95a:	2300      	movs	r3, #0
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3714      	adds	r7, #20
 800c960:	46bd      	mov	sp, r7
 800c962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c966:	4770      	bx	lr

0800c968 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c968:	b480      	push	{r7}
 800c96a:	b085      	sub	sp, #20
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800c970:	2300      	movs	r3, #0
 800c972:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	3301      	adds	r3, #1
 800c978:	60fb      	str	r3, [r7, #12]
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	4a13      	ldr	r2, [pc, #76]	; (800c9cc <USB_CoreReset+0x64>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	d901      	bls.n	800c986 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c982:	2303      	movs	r3, #3
 800c984:	e01b      	b.n	800c9be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	691b      	ldr	r3, [r3, #16]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	daf2      	bge.n	800c974 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c98e:	2300      	movs	r3, #0
 800c990:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	691b      	ldr	r3, [r3, #16]
 800c996:	f043 0201 	orr.w	r2, r3, #1
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	3301      	adds	r3, #1
 800c9a2:	60fb      	str	r3, [r7, #12]
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	4a09      	ldr	r2, [pc, #36]	; (800c9cc <USB_CoreReset+0x64>)
 800c9a8:	4293      	cmp	r3, r2
 800c9aa:	d901      	bls.n	800c9b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c9ac:	2303      	movs	r3, #3
 800c9ae:	e006      	b.n	800c9be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	691b      	ldr	r3, [r3, #16]
 800c9b4:	f003 0301 	and.w	r3, r3, #1
 800c9b8:	2b01      	cmp	r3, #1
 800c9ba:	d0f0      	beq.n	800c99e <USB_CoreReset+0x36>

  return HAL_OK;
 800c9bc:	2300      	movs	r3, #0
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3714      	adds	r7, #20
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c8:	4770      	bx	lr
 800c9ca:	bf00      	nop
 800c9cc:	00030d40 	.word	0x00030d40

0800c9d0 <atoi>:
 800c9d0:	220a      	movs	r2, #10
 800c9d2:	2100      	movs	r1, #0
 800c9d4:	f001 be7e 	b.w	800e6d4 <strtol>

0800c9d8 <__errno>:
 800c9d8:	4b01      	ldr	r3, [pc, #4]	; (800c9e0 <__errno+0x8>)
 800c9da:	6818      	ldr	r0, [r3, #0]
 800c9dc:	4770      	bx	lr
 800c9de:	bf00      	nop
 800c9e0:	24000010 	.word	0x24000010

0800c9e4 <__libc_init_array>:
 800c9e4:	b570      	push	{r4, r5, r6, lr}
 800c9e6:	4d0d      	ldr	r5, [pc, #52]	; (800ca1c <__libc_init_array+0x38>)
 800c9e8:	4c0d      	ldr	r4, [pc, #52]	; (800ca20 <__libc_init_array+0x3c>)
 800c9ea:	1b64      	subs	r4, r4, r5
 800c9ec:	10a4      	asrs	r4, r4, #2
 800c9ee:	2600      	movs	r6, #0
 800c9f0:	42a6      	cmp	r6, r4
 800c9f2:	d109      	bne.n	800ca08 <__libc_init_array+0x24>
 800c9f4:	4d0b      	ldr	r5, [pc, #44]	; (800ca24 <__libc_init_array+0x40>)
 800c9f6:	4c0c      	ldr	r4, [pc, #48]	; (800ca28 <__libc_init_array+0x44>)
 800c9f8:	f005 fa50 	bl	8011e9c <_init>
 800c9fc:	1b64      	subs	r4, r4, r5
 800c9fe:	10a4      	asrs	r4, r4, #2
 800ca00:	2600      	movs	r6, #0
 800ca02:	42a6      	cmp	r6, r4
 800ca04:	d105      	bne.n	800ca12 <__libc_init_array+0x2e>
 800ca06:	bd70      	pop	{r4, r5, r6, pc}
 800ca08:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca0c:	4798      	blx	r3
 800ca0e:	3601      	adds	r6, #1
 800ca10:	e7ee      	b.n	800c9f0 <__libc_init_array+0xc>
 800ca12:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca16:	4798      	blx	r3
 800ca18:	3601      	adds	r6, #1
 800ca1a:	e7f2      	b.n	800ca02 <__libc_init_array+0x1e>
 800ca1c:	080141a8 	.word	0x080141a8
 800ca20:	080141a8 	.word	0x080141a8
 800ca24:	080141a8 	.word	0x080141a8
 800ca28:	080141ac 	.word	0x080141ac

0800ca2c <memcpy>:
 800ca2c:	440a      	add	r2, r1
 800ca2e:	4291      	cmp	r1, r2
 800ca30:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca34:	d100      	bne.n	800ca38 <memcpy+0xc>
 800ca36:	4770      	bx	lr
 800ca38:	b510      	push	{r4, lr}
 800ca3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca42:	4291      	cmp	r1, r2
 800ca44:	d1f9      	bne.n	800ca3a <memcpy+0xe>
 800ca46:	bd10      	pop	{r4, pc}

0800ca48 <memset>:
 800ca48:	4402      	add	r2, r0
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	d100      	bne.n	800ca52 <memset+0xa>
 800ca50:	4770      	bx	lr
 800ca52:	f803 1b01 	strb.w	r1, [r3], #1
 800ca56:	e7f9      	b.n	800ca4c <memset+0x4>

0800ca58 <__cvt>:
 800ca58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca5a:	ed2d 8b02 	vpush	{d8}
 800ca5e:	eeb0 8b40 	vmov.f64	d8, d0
 800ca62:	b085      	sub	sp, #20
 800ca64:	4617      	mov	r7, r2
 800ca66:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ca68:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ca6a:	ee18 2a90 	vmov	r2, s17
 800ca6e:	f025 0520 	bic.w	r5, r5, #32
 800ca72:	2a00      	cmp	r2, #0
 800ca74:	bfb6      	itet	lt
 800ca76:	222d      	movlt	r2, #45	; 0x2d
 800ca78:	2200      	movge	r2, #0
 800ca7a:	eeb1 8b40 	vneglt.f64	d8, d0
 800ca7e:	2d46      	cmp	r5, #70	; 0x46
 800ca80:	460c      	mov	r4, r1
 800ca82:	701a      	strb	r2, [r3, #0]
 800ca84:	d004      	beq.n	800ca90 <__cvt+0x38>
 800ca86:	2d45      	cmp	r5, #69	; 0x45
 800ca88:	d100      	bne.n	800ca8c <__cvt+0x34>
 800ca8a:	3401      	adds	r4, #1
 800ca8c:	2102      	movs	r1, #2
 800ca8e:	e000      	b.n	800ca92 <__cvt+0x3a>
 800ca90:	2103      	movs	r1, #3
 800ca92:	ab03      	add	r3, sp, #12
 800ca94:	9301      	str	r3, [sp, #4]
 800ca96:	ab02      	add	r3, sp, #8
 800ca98:	9300      	str	r3, [sp, #0]
 800ca9a:	4622      	mov	r2, r4
 800ca9c:	4633      	mov	r3, r6
 800ca9e:	eeb0 0b48 	vmov.f64	d0, d8
 800caa2:	f001 ff6d 	bl	800e980 <_dtoa_r>
 800caa6:	2d47      	cmp	r5, #71	; 0x47
 800caa8:	d109      	bne.n	800cabe <__cvt+0x66>
 800caaa:	07fb      	lsls	r3, r7, #31
 800caac:	d407      	bmi.n	800cabe <__cvt+0x66>
 800caae:	9b03      	ldr	r3, [sp, #12]
 800cab0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cab2:	1a1b      	subs	r3, r3, r0
 800cab4:	6013      	str	r3, [r2, #0]
 800cab6:	b005      	add	sp, #20
 800cab8:	ecbd 8b02 	vpop	{d8}
 800cabc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cabe:	2d46      	cmp	r5, #70	; 0x46
 800cac0:	eb00 0204 	add.w	r2, r0, r4
 800cac4:	d10c      	bne.n	800cae0 <__cvt+0x88>
 800cac6:	7803      	ldrb	r3, [r0, #0]
 800cac8:	2b30      	cmp	r3, #48	; 0x30
 800caca:	d107      	bne.n	800cadc <__cvt+0x84>
 800cacc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cad4:	bf1c      	itt	ne
 800cad6:	f1c4 0401 	rsbne	r4, r4, #1
 800cada:	6034      	strne	r4, [r6, #0]
 800cadc:	6833      	ldr	r3, [r6, #0]
 800cade:	441a      	add	r2, r3
 800cae0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cae8:	bf08      	it	eq
 800caea:	9203      	streq	r2, [sp, #12]
 800caec:	2130      	movs	r1, #48	; 0x30
 800caee:	9b03      	ldr	r3, [sp, #12]
 800caf0:	4293      	cmp	r3, r2
 800caf2:	d2dc      	bcs.n	800caae <__cvt+0x56>
 800caf4:	1c5c      	adds	r4, r3, #1
 800caf6:	9403      	str	r4, [sp, #12]
 800caf8:	7019      	strb	r1, [r3, #0]
 800cafa:	e7f8      	b.n	800caee <__cvt+0x96>

0800cafc <__exponent>:
 800cafc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cafe:	4603      	mov	r3, r0
 800cb00:	2900      	cmp	r1, #0
 800cb02:	bfb8      	it	lt
 800cb04:	4249      	neglt	r1, r1
 800cb06:	f803 2b02 	strb.w	r2, [r3], #2
 800cb0a:	bfb4      	ite	lt
 800cb0c:	222d      	movlt	r2, #45	; 0x2d
 800cb0e:	222b      	movge	r2, #43	; 0x2b
 800cb10:	2909      	cmp	r1, #9
 800cb12:	7042      	strb	r2, [r0, #1]
 800cb14:	dd2a      	ble.n	800cb6c <__exponent+0x70>
 800cb16:	f10d 0407 	add.w	r4, sp, #7
 800cb1a:	46a4      	mov	ip, r4
 800cb1c:	270a      	movs	r7, #10
 800cb1e:	46a6      	mov	lr, r4
 800cb20:	460a      	mov	r2, r1
 800cb22:	fb91 f6f7 	sdiv	r6, r1, r7
 800cb26:	fb07 1516 	mls	r5, r7, r6, r1
 800cb2a:	3530      	adds	r5, #48	; 0x30
 800cb2c:	2a63      	cmp	r2, #99	; 0x63
 800cb2e:	f104 34ff 	add.w	r4, r4, #4294967295
 800cb32:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cb36:	4631      	mov	r1, r6
 800cb38:	dcf1      	bgt.n	800cb1e <__exponent+0x22>
 800cb3a:	3130      	adds	r1, #48	; 0x30
 800cb3c:	f1ae 0502 	sub.w	r5, lr, #2
 800cb40:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cb44:	1c44      	adds	r4, r0, #1
 800cb46:	4629      	mov	r1, r5
 800cb48:	4561      	cmp	r1, ip
 800cb4a:	d30a      	bcc.n	800cb62 <__exponent+0x66>
 800cb4c:	f10d 0209 	add.w	r2, sp, #9
 800cb50:	eba2 020e 	sub.w	r2, r2, lr
 800cb54:	4565      	cmp	r5, ip
 800cb56:	bf88      	it	hi
 800cb58:	2200      	movhi	r2, #0
 800cb5a:	4413      	add	r3, r2
 800cb5c:	1a18      	subs	r0, r3, r0
 800cb5e:	b003      	add	sp, #12
 800cb60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb66:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cb6a:	e7ed      	b.n	800cb48 <__exponent+0x4c>
 800cb6c:	2330      	movs	r3, #48	; 0x30
 800cb6e:	3130      	adds	r1, #48	; 0x30
 800cb70:	7083      	strb	r3, [r0, #2]
 800cb72:	70c1      	strb	r1, [r0, #3]
 800cb74:	1d03      	adds	r3, r0, #4
 800cb76:	e7f1      	b.n	800cb5c <__exponent+0x60>

0800cb78 <_printf_float>:
 800cb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb7c:	b08b      	sub	sp, #44	; 0x2c
 800cb7e:	460c      	mov	r4, r1
 800cb80:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800cb84:	4616      	mov	r6, r2
 800cb86:	461f      	mov	r7, r3
 800cb88:	4605      	mov	r5, r0
 800cb8a:	f003 f9a1 	bl	800fed0 <_localeconv_r>
 800cb8e:	f8d0 b000 	ldr.w	fp, [r0]
 800cb92:	4658      	mov	r0, fp
 800cb94:	f7f3 fba4 	bl	80002e0 <strlen>
 800cb98:	2300      	movs	r3, #0
 800cb9a:	9308      	str	r3, [sp, #32]
 800cb9c:	f8d8 3000 	ldr.w	r3, [r8]
 800cba0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800cba4:	6822      	ldr	r2, [r4, #0]
 800cba6:	3307      	adds	r3, #7
 800cba8:	f023 0307 	bic.w	r3, r3, #7
 800cbac:	f103 0108 	add.w	r1, r3, #8
 800cbb0:	f8c8 1000 	str.w	r1, [r8]
 800cbb4:	4682      	mov	sl, r0
 800cbb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cbba:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800cbbe:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800ce20 <_printf_float+0x2a8>
 800cbc2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800cbc6:	eeb0 6bc0 	vabs.f64	d6, d0
 800cbca:	eeb4 6b47 	vcmp.f64	d6, d7
 800cbce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbd2:	dd24      	ble.n	800cc1e <_printf_float+0xa6>
 800cbd4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cbd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbdc:	d502      	bpl.n	800cbe4 <_printf_float+0x6c>
 800cbde:	232d      	movs	r3, #45	; 0x2d
 800cbe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbe4:	4b90      	ldr	r3, [pc, #576]	; (800ce28 <_printf_float+0x2b0>)
 800cbe6:	4891      	ldr	r0, [pc, #580]	; (800ce2c <_printf_float+0x2b4>)
 800cbe8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800cbec:	bf94      	ite	ls
 800cbee:	4698      	movls	r8, r3
 800cbf0:	4680      	movhi	r8, r0
 800cbf2:	2303      	movs	r3, #3
 800cbf4:	6123      	str	r3, [r4, #16]
 800cbf6:	f022 0204 	bic.w	r2, r2, #4
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	6022      	str	r2, [r4, #0]
 800cbfe:	9304      	str	r3, [sp, #16]
 800cc00:	9700      	str	r7, [sp, #0]
 800cc02:	4633      	mov	r3, r6
 800cc04:	aa09      	add	r2, sp, #36	; 0x24
 800cc06:	4621      	mov	r1, r4
 800cc08:	4628      	mov	r0, r5
 800cc0a:	f000 f9d3 	bl	800cfb4 <_printf_common>
 800cc0e:	3001      	adds	r0, #1
 800cc10:	f040 808a 	bne.w	800cd28 <_printf_float+0x1b0>
 800cc14:	f04f 30ff 	mov.w	r0, #4294967295
 800cc18:	b00b      	add	sp, #44	; 0x2c
 800cc1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc1e:	eeb4 0b40 	vcmp.f64	d0, d0
 800cc22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc26:	d709      	bvc.n	800cc3c <_printf_float+0xc4>
 800cc28:	ee10 3a90 	vmov	r3, s1
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	bfbc      	itt	lt
 800cc30:	232d      	movlt	r3, #45	; 0x2d
 800cc32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cc36:	487e      	ldr	r0, [pc, #504]	; (800ce30 <_printf_float+0x2b8>)
 800cc38:	4b7e      	ldr	r3, [pc, #504]	; (800ce34 <_printf_float+0x2bc>)
 800cc3a:	e7d5      	b.n	800cbe8 <_printf_float+0x70>
 800cc3c:	6863      	ldr	r3, [r4, #4]
 800cc3e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800cc42:	9104      	str	r1, [sp, #16]
 800cc44:	1c59      	adds	r1, r3, #1
 800cc46:	d13c      	bne.n	800ccc2 <_printf_float+0x14a>
 800cc48:	2306      	movs	r3, #6
 800cc4a:	6063      	str	r3, [r4, #4]
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	9303      	str	r3, [sp, #12]
 800cc50:	ab08      	add	r3, sp, #32
 800cc52:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800cc56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cc5a:	ab07      	add	r3, sp, #28
 800cc5c:	6861      	ldr	r1, [r4, #4]
 800cc5e:	9300      	str	r3, [sp, #0]
 800cc60:	6022      	str	r2, [r4, #0]
 800cc62:	f10d 031b 	add.w	r3, sp, #27
 800cc66:	4628      	mov	r0, r5
 800cc68:	f7ff fef6 	bl	800ca58 <__cvt>
 800cc6c:	9b04      	ldr	r3, [sp, #16]
 800cc6e:	9907      	ldr	r1, [sp, #28]
 800cc70:	2b47      	cmp	r3, #71	; 0x47
 800cc72:	4680      	mov	r8, r0
 800cc74:	d108      	bne.n	800cc88 <_printf_float+0x110>
 800cc76:	1cc8      	adds	r0, r1, #3
 800cc78:	db02      	blt.n	800cc80 <_printf_float+0x108>
 800cc7a:	6863      	ldr	r3, [r4, #4]
 800cc7c:	4299      	cmp	r1, r3
 800cc7e:	dd41      	ble.n	800cd04 <_printf_float+0x18c>
 800cc80:	f1a9 0902 	sub.w	r9, r9, #2
 800cc84:	fa5f f989 	uxtb.w	r9, r9
 800cc88:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cc8c:	d820      	bhi.n	800ccd0 <_printf_float+0x158>
 800cc8e:	3901      	subs	r1, #1
 800cc90:	464a      	mov	r2, r9
 800cc92:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cc96:	9107      	str	r1, [sp, #28]
 800cc98:	f7ff ff30 	bl	800cafc <__exponent>
 800cc9c:	9a08      	ldr	r2, [sp, #32]
 800cc9e:	9004      	str	r0, [sp, #16]
 800cca0:	1813      	adds	r3, r2, r0
 800cca2:	2a01      	cmp	r2, #1
 800cca4:	6123      	str	r3, [r4, #16]
 800cca6:	dc02      	bgt.n	800ccae <_printf_float+0x136>
 800cca8:	6822      	ldr	r2, [r4, #0]
 800ccaa:	07d2      	lsls	r2, r2, #31
 800ccac:	d501      	bpl.n	800ccb2 <_printf_float+0x13a>
 800ccae:	3301      	adds	r3, #1
 800ccb0:	6123      	str	r3, [r4, #16]
 800ccb2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d0a2      	beq.n	800cc00 <_printf_float+0x88>
 800ccba:	232d      	movs	r3, #45	; 0x2d
 800ccbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccc0:	e79e      	b.n	800cc00 <_printf_float+0x88>
 800ccc2:	9904      	ldr	r1, [sp, #16]
 800ccc4:	2947      	cmp	r1, #71	; 0x47
 800ccc6:	d1c1      	bne.n	800cc4c <_printf_float+0xd4>
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d1bf      	bne.n	800cc4c <_printf_float+0xd4>
 800cccc:	2301      	movs	r3, #1
 800ccce:	e7bc      	b.n	800cc4a <_printf_float+0xd2>
 800ccd0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800ccd4:	d118      	bne.n	800cd08 <_printf_float+0x190>
 800ccd6:	2900      	cmp	r1, #0
 800ccd8:	6863      	ldr	r3, [r4, #4]
 800ccda:	dd0b      	ble.n	800ccf4 <_printf_float+0x17c>
 800ccdc:	6121      	str	r1, [r4, #16]
 800ccde:	b913      	cbnz	r3, 800cce6 <_printf_float+0x16e>
 800cce0:	6822      	ldr	r2, [r4, #0]
 800cce2:	07d0      	lsls	r0, r2, #31
 800cce4:	d502      	bpl.n	800ccec <_printf_float+0x174>
 800cce6:	3301      	adds	r3, #1
 800cce8:	440b      	add	r3, r1
 800ccea:	6123      	str	r3, [r4, #16]
 800ccec:	2300      	movs	r3, #0
 800ccee:	65a1      	str	r1, [r4, #88]	; 0x58
 800ccf0:	9304      	str	r3, [sp, #16]
 800ccf2:	e7de      	b.n	800ccb2 <_printf_float+0x13a>
 800ccf4:	b913      	cbnz	r3, 800ccfc <_printf_float+0x184>
 800ccf6:	6822      	ldr	r2, [r4, #0]
 800ccf8:	07d2      	lsls	r2, r2, #31
 800ccfa:	d501      	bpl.n	800cd00 <_printf_float+0x188>
 800ccfc:	3302      	adds	r3, #2
 800ccfe:	e7f4      	b.n	800ccea <_printf_float+0x172>
 800cd00:	2301      	movs	r3, #1
 800cd02:	e7f2      	b.n	800ccea <_printf_float+0x172>
 800cd04:	f04f 0967 	mov.w	r9, #103	; 0x67
 800cd08:	9b08      	ldr	r3, [sp, #32]
 800cd0a:	4299      	cmp	r1, r3
 800cd0c:	db05      	blt.n	800cd1a <_printf_float+0x1a2>
 800cd0e:	6823      	ldr	r3, [r4, #0]
 800cd10:	6121      	str	r1, [r4, #16]
 800cd12:	07d8      	lsls	r0, r3, #31
 800cd14:	d5ea      	bpl.n	800ccec <_printf_float+0x174>
 800cd16:	1c4b      	adds	r3, r1, #1
 800cd18:	e7e7      	b.n	800ccea <_printf_float+0x172>
 800cd1a:	2900      	cmp	r1, #0
 800cd1c:	bfd4      	ite	le
 800cd1e:	f1c1 0202 	rsble	r2, r1, #2
 800cd22:	2201      	movgt	r2, #1
 800cd24:	4413      	add	r3, r2
 800cd26:	e7e0      	b.n	800ccea <_printf_float+0x172>
 800cd28:	6823      	ldr	r3, [r4, #0]
 800cd2a:	055a      	lsls	r2, r3, #21
 800cd2c:	d407      	bmi.n	800cd3e <_printf_float+0x1c6>
 800cd2e:	6923      	ldr	r3, [r4, #16]
 800cd30:	4642      	mov	r2, r8
 800cd32:	4631      	mov	r1, r6
 800cd34:	4628      	mov	r0, r5
 800cd36:	47b8      	blx	r7
 800cd38:	3001      	adds	r0, #1
 800cd3a:	d12a      	bne.n	800cd92 <_printf_float+0x21a>
 800cd3c:	e76a      	b.n	800cc14 <_printf_float+0x9c>
 800cd3e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cd42:	f240 80e2 	bls.w	800cf0a <_printf_float+0x392>
 800cd46:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cd4a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cd4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd52:	d133      	bne.n	800cdbc <_printf_float+0x244>
 800cd54:	4a38      	ldr	r2, [pc, #224]	; (800ce38 <_printf_float+0x2c0>)
 800cd56:	2301      	movs	r3, #1
 800cd58:	4631      	mov	r1, r6
 800cd5a:	4628      	mov	r0, r5
 800cd5c:	47b8      	blx	r7
 800cd5e:	3001      	adds	r0, #1
 800cd60:	f43f af58 	beq.w	800cc14 <_printf_float+0x9c>
 800cd64:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	db02      	blt.n	800cd72 <_printf_float+0x1fa>
 800cd6c:	6823      	ldr	r3, [r4, #0]
 800cd6e:	07d8      	lsls	r0, r3, #31
 800cd70:	d50f      	bpl.n	800cd92 <_printf_float+0x21a>
 800cd72:	4653      	mov	r3, sl
 800cd74:	465a      	mov	r2, fp
 800cd76:	4631      	mov	r1, r6
 800cd78:	4628      	mov	r0, r5
 800cd7a:	47b8      	blx	r7
 800cd7c:	3001      	adds	r0, #1
 800cd7e:	f43f af49 	beq.w	800cc14 <_printf_float+0x9c>
 800cd82:	f04f 0800 	mov.w	r8, #0
 800cd86:	f104 091a 	add.w	r9, r4, #26
 800cd8a:	9b08      	ldr	r3, [sp, #32]
 800cd8c:	3b01      	subs	r3, #1
 800cd8e:	4543      	cmp	r3, r8
 800cd90:	dc09      	bgt.n	800cda6 <_printf_float+0x22e>
 800cd92:	6823      	ldr	r3, [r4, #0]
 800cd94:	079b      	lsls	r3, r3, #30
 800cd96:	f100 8108 	bmi.w	800cfaa <_printf_float+0x432>
 800cd9a:	68e0      	ldr	r0, [r4, #12]
 800cd9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd9e:	4298      	cmp	r0, r3
 800cda0:	bfb8      	it	lt
 800cda2:	4618      	movlt	r0, r3
 800cda4:	e738      	b.n	800cc18 <_printf_float+0xa0>
 800cda6:	2301      	movs	r3, #1
 800cda8:	464a      	mov	r2, r9
 800cdaa:	4631      	mov	r1, r6
 800cdac:	4628      	mov	r0, r5
 800cdae:	47b8      	blx	r7
 800cdb0:	3001      	adds	r0, #1
 800cdb2:	f43f af2f 	beq.w	800cc14 <_printf_float+0x9c>
 800cdb6:	f108 0801 	add.w	r8, r8, #1
 800cdba:	e7e6      	b.n	800cd8a <_printf_float+0x212>
 800cdbc:	9b07      	ldr	r3, [sp, #28]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	dc3c      	bgt.n	800ce3c <_printf_float+0x2c4>
 800cdc2:	4a1d      	ldr	r2, [pc, #116]	; (800ce38 <_printf_float+0x2c0>)
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	4631      	mov	r1, r6
 800cdc8:	4628      	mov	r0, r5
 800cdca:	47b8      	blx	r7
 800cdcc:	3001      	adds	r0, #1
 800cdce:	f43f af21 	beq.w	800cc14 <_printf_float+0x9c>
 800cdd2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cdd6:	4313      	orrs	r3, r2
 800cdd8:	d102      	bne.n	800cde0 <_printf_float+0x268>
 800cdda:	6823      	ldr	r3, [r4, #0]
 800cddc:	07d9      	lsls	r1, r3, #31
 800cdde:	d5d8      	bpl.n	800cd92 <_printf_float+0x21a>
 800cde0:	4653      	mov	r3, sl
 800cde2:	465a      	mov	r2, fp
 800cde4:	4631      	mov	r1, r6
 800cde6:	4628      	mov	r0, r5
 800cde8:	47b8      	blx	r7
 800cdea:	3001      	adds	r0, #1
 800cdec:	f43f af12 	beq.w	800cc14 <_printf_float+0x9c>
 800cdf0:	f04f 0900 	mov.w	r9, #0
 800cdf4:	f104 0a1a 	add.w	sl, r4, #26
 800cdf8:	9b07      	ldr	r3, [sp, #28]
 800cdfa:	425b      	negs	r3, r3
 800cdfc:	454b      	cmp	r3, r9
 800cdfe:	dc01      	bgt.n	800ce04 <_printf_float+0x28c>
 800ce00:	9b08      	ldr	r3, [sp, #32]
 800ce02:	e795      	b.n	800cd30 <_printf_float+0x1b8>
 800ce04:	2301      	movs	r3, #1
 800ce06:	4652      	mov	r2, sl
 800ce08:	4631      	mov	r1, r6
 800ce0a:	4628      	mov	r0, r5
 800ce0c:	47b8      	blx	r7
 800ce0e:	3001      	adds	r0, #1
 800ce10:	f43f af00 	beq.w	800cc14 <_printf_float+0x9c>
 800ce14:	f109 0901 	add.w	r9, r9, #1
 800ce18:	e7ee      	b.n	800cdf8 <_printf_float+0x280>
 800ce1a:	bf00      	nop
 800ce1c:	f3af 8000 	nop.w
 800ce20:	ffffffff 	.word	0xffffffff
 800ce24:	7fefffff 	.word	0x7fefffff
 800ce28:	080123c0 	.word	0x080123c0
 800ce2c:	080123c4 	.word	0x080123c4
 800ce30:	080123cc 	.word	0x080123cc
 800ce34:	080123c8 	.word	0x080123c8
 800ce38:	080123d0 	.word	0x080123d0
 800ce3c:	9a08      	ldr	r2, [sp, #32]
 800ce3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ce40:	429a      	cmp	r2, r3
 800ce42:	bfa8      	it	ge
 800ce44:	461a      	movge	r2, r3
 800ce46:	2a00      	cmp	r2, #0
 800ce48:	4691      	mov	r9, r2
 800ce4a:	dc38      	bgt.n	800cebe <_printf_float+0x346>
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	9305      	str	r3, [sp, #20]
 800ce50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ce54:	f104 021a 	add.w	r2, r4, #26
 800ce58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ce5a:	9905      	ldr	r1, [sp, #20]
 800ce5c:	9304      	str	r3, [sp, #16]
 800ce5e:	eba3 0309 	sub.w	r3, r3, r9
 800ce62:	428b      	cmp	r3, r1
 800ce64:	dc33      	bgt.n	800cece <_printf_float+0x356>
 800ce66:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ce6a:	429a      	cmp	r2, r3
 800ce6c:	db3c      	blt.n	800cee8 <_printf_float+0x370>
 800ce6e:	6823      	ldr	r3, [r4, #0]
 800ce70:	07da      	lsls	r2, r3, #31
 800ce72:	d439      	bmi.n	800cee8 <_printf_float+0x370>
 800ce74:	9a08      	ldr	r2, [sp, #32]
 800ce76:	9b04      	ldr	r3, [sp, #16]
 800ce78:	9907      	ldr	r1, [sp, #28]
 800ce7a:	1ad3      	subs	r3, r2, r3
 800ce7c:	eba2 0901 	sub.w	r9, r2, r1
 800ce80:	4599      	cmp	r9, r3
 800ce82:	bfa8      	it	ge
 800ce84:	4699      	movge	r9, r3
 800ce86:	f1b9 0f00 	cmp.w	r9, #0
 800ce8a:	dc35      	bgt.n	800cef8 <_printf_float+0x380>
 800ce8c:	f04f 0800 	mov.w	r8, #0
 800ce90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ce94:	f104 0a1a 	add.w	sl, r4, #26
 800ce98:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ce9c:	1a9b      	subs	r3, r3, r2
 800ce9e:	eba3 0309 	sub.w	r3, r3, r9
 800cea2:	4543      	cmp	r3, r8
 800cea4:	f77f af75 	ble.w	800cd92 <_printf_float+0x21a>
 800cea8:	2301      	movs	r3, #1
 800ceaa:	4652      	mov	r2, sl
 800ceac:	4631      	mov	r1, r6
 800ceae:	4628      	mov	r0, r5
 800ceb0:	47b8      	blx	r7
 800ceb2:	3001      	adds	r0, #1
 800ceb4:	f43f aeae 	beq.w	800cc14 <_printf_float+0x9c>
 800ceb8:	f108 0801 	add.w	r8, r8, #1
 800cebc:	e7ec      	b.n	800ce98 <_printf_float+0x320>
 800cebe:	4613      	mov	r3, r2
 800cec0:	4631      	mov	r1, r6
 800cec2:	4642      	mov	r2, r8
 800cec4:	4628      	mov	r0, r5
 800cec6:	47b8      	blx	r7
 800cec8:	3001      	adds	r0, #1
 800ceca:	d1bf      	bne.n	800ce4c <_printf_float+0x2d4>
 800cecc:	e6a2      	b.n	800cc14 <_printf_float+0x9c>
 800cece:	2301      	movs	r3, #1
 800ced0:	4631      	mov	r1, r6
 800ced2:	4628      	mov	r0, r5
 800ced4:	9204      	str	r2, [sp, #16]
 800ced6:	47b8      	blx	r7
 800ced8:	3001      	adds	r0, #1
 800ceda:	f43f ae9b 	beq.w	800cc14 <_printf_float+0x9c>
 800cede:	9b05      	ldr	r3, [sp, #20]
 800cee0:	9a04      	ldr	r2, [sp, #16]
 800cee2:	3301      	adds	r3, #1
 800cee4:	9305      	str	r3, [sp, #20]
 800cee6:	e7b7      	b.n	800ce58 <_printf_float+0x2e0>
 800cee8:	4653      	mov	r3, sl
 800ceea:	465a      	mov	r2, fp
 800ceec:	4631      	mov	r1, r6
 800ceee:	4628      	mov	r0, r5
 800cef0:	47b8      	blx	r7
 800cef2:	3001      	adds	r0, #1
 800cef4:	d1be      	bne.n	800ce74 <_printf_float+0x2fc>
 800cef6:	e68d      	b.n	800cc14 <_printf_float+0x9c>
 800cef8:	9a04      	ldr	r2, [sp, #16]
 800cefa:	464b      	mov	r3, r9
 800cefc:	4442      	add	r2, r8
 800cefe:	4631      	mov	r1, r6
 800cf00:	4628      	mov	r0, r5
 800cf02:	47b8      	blx	r7
 800cf04:	3001      	adds	r0, #1
 800cf06:	d1c1      	bne.n	800ce8c <_printf_float+0x314>
 800cf08:	e684      	b.n	800cc14 <_printf_float+0x9c>
 800cf0a:	9a08      	ldr	r2, [sp, #32]
 800cf0c:	2a01      	cmp	r2, #1
 800cf0e:	dc01      	bgt.n	800cf14 <_printf_float+0x39c>
 800cf10:	07db      	lsls	r3, r3, #31
 800cf12:	d537      	bpl.n	800cf84 <_printf_float+0x40c>
 800cf14:	2301      	movs	r3, #1
 800cf16:	4642      	mov	r2, r8
 800cf18:	4631      	mov	r1, r6
 800cf1a:	4628      	mov	r0, r5
 800cf1c:	47b8      	blx	r7
 800cf1e:	3001      	adds	r0, #1
 800cf20:	f43f ae78 	beq.w	800cc14 <_printf_float+0x9c>
 800cf24:	4653      	mov	r3, sl
 800cf26:	465a      	mov	r2, fp
 800cf28:	4631      	mov	r1, r6
 800cf2a:	4628      	mov	r0, r5
 800cf2c:	47b8      	blx	r7
 800cf2e:	3001      	adds	r0, #1
 800cf30:	f43f ae70 	beq.w	800cc14 <_printf_float+0x9c>
 800cf34:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cf38:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cf3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf40:	d01b      	beq.n	800cf7a <_printf_float+0x402>
 800cf42:	9b08      	ldr	r3, [sp, #32]
 800cf44:	f108 0201 	add.w	r2, r8, #1
 800cf48:	3b01      	subs	r3, #1
 800cf4a:	4631      	mov	r1, r6
 800cf4c:	4628      	mov	r0, r5
 800cf4e:	47b8      	blx	r7
 800cf50:	3001      	adds	r0, #1
 800cf52:	d10e      	bne.n	800cf72 <_printf_float+0x3fa>
 800cf54:	e65e      	b.n	800cc14 <_printf_float+0x9c>
 800cf56:	2301      	movs	r3, #1
 800cf58:	464a      	mov	r2, r9
 800cf5a:	4631      	mov	r1, r6
 800cf5c:	4628      	mov	r0, r5
 800cf5e:	47b8      	blx	r7
 800cf60:	3001      	adds	r0, #1
 800cf62:	f43f ae57 	beq.w	800cc14 <_printf_float+0x9c>
 800cf66:	f108 0801 	add.w	r8, r8, #1
 800cf6a:	9b08      	ldr	r3, [sp, #32]
 800cf6c:	3b01      	subs	r3, #1
 800cf6e:	4543      	cmp	r3, r8
 800cf70:	dcf1      	bgt.n	800cf56 <_printf_float+0x3de>
 800cf72:	9b04      	ldr	r3, [sp, #16]
 800cf74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cf78:	e6db      	b.n	800cd32 <_printf_float+0x1ba>
 800cf7a:	f04f 0800 	mov.w	r8, #0
 800cf7e:	f104 091a 	add.w	r9, r4, #26
 800cf82:	e7f2      	b.n	800cf6a <_printf_float+0x3f2>
 800cf84:	2301      	movs	r3, #1
 800cf86:	4642      	mov	r2, r8
 800cf88:	e7df      	b.n	800cf4a <_printf_float+0x3d2>
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	464a      	mov	r2, r9
 800cf8e:	4631      	mov	r1, r6
 800cf90:	4628      	mov	r0, r5
 800cf92:	47b8      	blx	r7
 800cf94:	3001      	adds	r0, #1
 800cf96:	f43f ae3d 	beq.w	800cc14 <_printf_float+0x9c>
 800cf9a:	f108 0801 	add.w	r8, r8, #1
 800cf9e:	68e3      	ldr	r3, [r4, #12]
 800cfa0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cfa2:	1a5b      	subs	r3, r3, r1
 800cfa4:	4543      	cmp	r3, r8
 800cfa6:	dcf0      	bgt.n	800cf8a <_printf_float+0x412>
 800cfa8:	e6f7      	b.n	800cd9a <_printf_float+0x222>
 800cfaa:	f04f 0800 	mov.w	r8, #0
 800cfae:	f104 0919 	add.w	r9, r4, #25
 800cfb2:	e7f4      	b.n	800cf9e <_printf_float+0x426>

0800cfb4 <_printf_common>:
 800cfb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfb8:	4616      	mov	r6, r2
 800cfba:	4699      	mov	r9, r3
 800cfbc:	688a      	ldr	r2, [r1, #8]
 800cfbe:	690b      	ldr	r3, [r1, #16]
 800cfc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	bfb8      	it	lt
 800cfc8:	4613      	movlt	r3, r2
 800cfca:	6033      	str	r3, [r6, #0]
 800cfcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cfd0:	4607      	mov	r7, r0
 800cfd2:	460c      	mov	r4, r1
 800cfd4:	b10a      	cbz	r2, 800cfda <_printf_common+0x26>
 800cfd6:	3301      	adds	r3, #1
 800cfd8:	6033      	str	r3, [r6, #0]
 800cfda:	6823      	ldr	r3, [r4, #0]
 800cfdc:	0699      	lsls	r1, r3, #26
 800cfde:	bf42      	ittt	mi
 800cfe0:	6833      	ldrmi	r3, [r6, #0]
 800cfe2:	3302      	addmi	r3, #2
 800cfe4:	6033      	strmi	r3, [r6, #0]
 800cfe6:	6825      	ldr	r5, [r4, #0]
 800cfe8:	f015 0506 	ands.w	r5, r5, #6
 800cfec:	d106      	bne.n	800cffc <_printf_common+0x48>
 800cfee:	f104 0a19 	add.w	sl, r4, #25
 800cff2:	68e3      	ldr	r3, [r4, #12]
 800cff4:	6832      	ldr	r2, [r6, #0]
 800cff6:	1a9b      	subs	r3, r3, r2
 800cff8:	42ab      	cmp	r3, r5
 800cffa:	dc26      	bgt.n	800d04a <_printf_common+0x96>
 800cffc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d000:	1e13      	subs	r3, r2, #0
 800d002:	6822      	ldr	r2, [r4, #0]
 800d004:	bf18      	it	ne
 800d006:	2301      	movne	r3, #1
 800d008:	0692      	lsls	r2, r2, #26
 800d00a:	d42b      	bmi.n	800d064 <_printf_common+0xb0>
 800d00c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d010:	4649      	mov	r1, r9
 800d012:	4638      	mov	r0, r7
 800d014:	47c0      	blx	r8
 800d016:	3001      	adds	r0, #1
 800d018:	d01e      	beq.n	800d058 <_printf_common+0xa4>
 800d01a:	6823      	ldr	r3, [r4, #0]
 800d01c:	68e5      	ldr	r5, [r4, #12]
 800d01e:	6832      	ldr	r2, [r6, #0]
 800d020:	f003 0306 	and.w	r3, r3, #6
 800d024:	2b04      	cmp	r3, #4
 800d026:	bf08      	it	eq
 800d028:	1aad      	subeq	r5, r5, r2
 800d02a:	68a3      	ldr	r3, [r4, #8]
 800d02c:	6922      	ldr	r2, [r4, #16]
 800d02e:	bf0c      	ite	eq
 800d030:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d034:	2500      	movne	r5, #0
 800d036:	4293      	cmp	r3, r2
 800d038:	bfc4      	itt	gt
 800d03a:	1a9b      	subgt	r3, r3, r2
 800d03c:	18ed      	addgt	r5, r5, r3
 800d03e:	2600      	movs	r6, #0
 800d040:	341a      	adds	r4, #26
 800d042:	42b5      	cmp	r5, r6
 800d044:	d11a      	bne.n	800d07c <_printf_common+0xc8>
 800d046:	2000      	movs	r0, #0
 800d048:	e008      	b.n	800d05c <_printf_common+0xa8>
 800d04a:	2301      	movs	r3, #1
 800d04c:	4652      	mov	r2, sl
 800d04e:	4649      	mov	r1, r9
 800d050:	4638      	mov	r0, r7
 800d052:	47c0      	blx	r8
 800d054:	3001      	adds	r0, #1
 800d056:	d103      	bne.n	800d060 <_printf_common+0xac>
 800d058:	f04f 30ff 	mov.w	r0, #4294967295
 800d05c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d060:	3501      	adds	r5, #1
 800d062:	e7c6      	b.n	800cff2 <_printf_common+0x3e>
 800d064:	18e1      	adds	r1, r4, r3
 800d066:	1c5a      	adds	r2, r3, #1
 800d068:	2030      	movs	r0, #48	; 0x30
 800d06a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d06e:	4422      	add	r2, r4
 800d070:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d074:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d078:	3302      	adds	r3, #2
 800d07a:	e7c7      	b.n	800d00c <_printf_common+0x58>
 800d07c:	2301      	movs	r3, #1
 800d07e:	4622      	mov	r2, r4
 800d080:	4649      	mov	r1, r9
 800d082:	4638      	mov	r0, r7
 800d084:	47c0      	blx	r8
 800d086:	3001      	adds	r0, #1
 800d088:	d0e6      	beq.n	800d058 <_printf_common+0xa4>
 800d08a:	3601      	adds	r6, #1
 800d08c:	e7d9      	b.n	800d042 <_printf_common+0x8e>
	...

0800d090 <_printf_i>:
 800d090:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d094:	460c      	mov	r4, r1
 800d096:	4691      	mov	r9, r2
 800d098:	7e27      	ldrb	r7, [r4, #24]
 800d09a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d09c:	2f78      	cmp	r7, #120	; 0x78
 800d09e:	4680      	mov	r8, r0
 800d0a0:	469a      	mov	sl, r3
 800d0a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d0a6:	d807      	bhi.n	800d0b8 <_printf_i+0x28>
 800d0a8:	2f62      	cmp	r7, #98	; 0x62
 800d0aa:	d80a      	bhi.n	800d0c2 <_printf_i+0x32>
 800d0ac:	2f00      	cmp	r7, #0
 800d0ae:	f000 80d8 	beq.w	800d262 <_printf_i+0x1d2>
 800d0b2:	2f58      	cmp	r7, #88	; 0x58
 800d0b4:	f000 80a3 	beq.w	800d1fe <_printf_i+0x16e>
 800d0b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d0bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d0c0:	e03a      	b.n	800d138 <_printf_i+0xa8>
 800d0c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d0c6:	2b15      	cmp	r3, #21
 800d0c8:	d8f6      	bhi.n	800d0b8 <_printf_i+0x28>
 800d0ca:	a001      	add	r0, pc, #4	; (adr r0, 800d0d0 <_printf_i+0x40>)
 800d0cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d0d0:	0800d129 	.word	0x0800d129
 800d0d4:	0800d13d 	.word	0x0800d13d
 800d0d8:	0800d0b9 	.word	0x0800d0b9
 800d0dc:	0800d0b9 	.word	0x0800d0b9
 800d0e0:	0800d0b9 	.word	0x0800d0b9
 800d0e4:	0800d0b9 	.word	0x0800d0b9
 800d0e8:	0800d13d 	.word	0x0800d13d
 800d0ec:	0800d0b9 	.word	0x0800d0b9
 800d0f0:	0800d0b9 	.word	0x0800d0b9
 800d0f4:	0800d0b9 	.word	0x0800d0b9
 800d0f8:	0800d0b9 	.word	0x0800d0b9
 800d0fc:	0800d249 	.word	0x0800d249
 800d100:	0800d16d 	.word	0x0800d16d
 800d104:	0800d22b 	.word	0x0800d22b
 800d108:	0800d0b9 	.word	0x0800d0b9
 800d10c:	0800d0b9 	.word	0x0800d0b9
 800d110:	0800d26b 	.word	0x0800d26b
 800d114:	0800d0b9 	.word	0x0800d0b9
 800d118:	0800d16d 	.word	0x0800d16d
 800d11c:	0800d0b9 	.word	0x0800d0b9
 800d120:	0800d0b9 	.word	0x0800d0b9
 800d124:	0800d233 	.word	0x0800d233
 800d128:	680b      	ldr	r3, [r1, #0]
 800d12a:	1d1a      	adds	r2, r3, #4
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	600a      	str	r2, [r1, #0]
 800d130:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d134:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d138:	2301      	movs	r3, #1
 800d13a:	e0a3      	b.n	800d284 <_printf_i+0x1f4>
 800d13c:	6825      	ldr	r5, [r4, #0]
 800d13e:	6808      	ldr	r0, [r1, #0]
 800d140:	062e      	lsls	r6, r5, #24
 800d142:	f100 0304 	add.w	r3, r0, #4
 800d146:	d50a      	bpl.n	800d15e <_printf_i+0xce>
 800d148:	6805      	ldr	r5, [r0, #0]
 800d14a:	600b      	str	r3, [r1, #0]
 800d14c:	2d00      	cmp	r5, #0
 800d14e:	da03      	bge.n	800d158 <_printf_i+0xc8>
 800d150:	232d      	movs	r3, #45	; 0x2d
 800d152:	426d      	negs	r5, r5
 800d154:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d158:	485e      	ldr	r0, [pc, #376]	; (800d2d4 <_printf_i+0x244>)
 800d15a:	230a      	movs	r3, #10
 800d15c:	e019      	b.n	800d192 <_printf_i+0x102>
 800d15e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d162:	6805      	ldr	r5, [r0, #0]
 800d164:	600b      	str	r3, [r1, #0]
 800d166:	bf18      	it	ne
 800d168:	b22d      	sxthne	r5, r5
 800d16a:	e7ef      	b.n	800d14c <_printf_i+0xbc>
 800d16c:	680b      	ldr	r3, [r1, #0]
 800d16e:	6825      	ldr	r5, [r4, #0]
 800d170:	1d18      	adds	r0, r3, #4
 800d172:	6008      	str	r0, [r1, #0]
 800d174:	0628      	lsls	r0, r5, #24
 800d176:	d501      	bpl.n	800d17c <_printf_i+0xec>
 800d178:	681d      	ldr	r5, [r3, #0]
 800d17a:	e002      	b.n	800d182 <_printf_i+0xf2>
 800d17c:	0669      	lsls	r1, r5, #25
 800d17e:	d5fb      	bpl.n	800d178 <_printf_i+0xe8>
 800d180:	881d      	ldrh	r5, [r3, #0]
 800d182:	4854      	ldr	r0, [pc, #336]	; (800d2d4 <_printf_i+0x244>)
 800d184:	2f6f      	cmp	r7, #111	; 0x6f
 800d186:	bf0c      	ite	eq
 800d188:	2308      	moveq	r3, #8
 800d18a:	230a      	movne	r3, #10
 800d18c:	2100      	movs	r1, #0
 800d18e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d192:	6866      	ldr	r6, [r4, #4]
 800d194:	60a6      	str	r6, [r4, #8]
 800d196:	2e00      	cmp	r6, #0
 800d198:	bfa2      	ittt	ge
 800d19a:	6821      	ldrge	r1, [r4, #0]
 800d19c:	f021 0104 	bicge.w	r1, r1, #4
 800d1a0:	6021      	strge	r1, [r4, #0]
 800d1a2:	b90d      	cbnz	r5, 800d1a8 <_printf_i+0x118>
 800d1a4:	2e00      	cmp	r6, #0
 800d1a6:	d04d      	beq.n	800d244 <_printf_i+0x1b4>
 800d1a8:	4616      	mov	r6, r2
 800d1aa:	fbb5 f1f3 	udiv	r1, r5, r3
 800d1ae:	fb03 5711 	mls	r7, r3, r1, r5
 800d1b2:	5dc7      	ldrb	r7, [r0, r7]
 800d1b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d1b8:	462f      	mov	r7, r5
 800d1ba:	42bb      	cmp	r3, r7
 800d1bc:	460d      	mov	r5, r1
 800d1be:	d9f4      	bls.n	800d1aa <_printf_i+0x11a>
 800d1c0:	2b08      	cmp	r3, #8
 800d1c2:	d10b      	bne.n	800d1dc <_printf_i+0x14c>
 800d1c4:	6823      	ldr	r3, [r4, #0]
 800d1c6:	07df      	lsls	r7, r3, #31
 800d1c8:	d508      	bpl.n	800d1dc <_printf_i+0x14c>
 800d1ca:	6923      	ldr	r3, [r4, #16]
 800d1cc:	6861      	ldr	r1, [r4, #4]
 800d1ce:	4299      	cmp	r1, r3
 800d1d0:	bfde      	ittt	le
 800d1d2:	2330      	movle	r3, #48	; 0x30
 800d1d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d1d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d1dc:	1b92      	subs	r2, r2, r6
 800d1de:	6122      	str	r2, [r4, #16]
 800d1e0:	f8cd a000 	str.w	sl, [sp]
 800d1e4:	464b      	mov	r3, r9
 800d1e6:	aa03      	add	r2, sp, #12
 800d1e8:	4621      	mov	r1, r4
 800d1ea:	4640      	mov	r0, r8
 800d1ec:	f7ff fee2 	bl	800cfb4 <_printf_common>
 800d1f0:	3001      	adds	r0, #1
 800d1f2:	d14c      	bne.n	800d28e <_printf_i+0x1fe>
 800d1f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d1f8:	b004      	add	sp, #16
 800d1fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1fe:	4835      	ldr	r0, [pc, #212]	; (800d2d4 <_printf_i+0x244>)
 800d200:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d204:	6823      	ldr	r3, [r4, #0]
 800d206:	680e      	ldr	r6, [r1, #0]
 800d208:	061f      	lsls	r7, r3, #24
 800d20a:	f856 5b04 	ldr.w	r5, [r6], #4
 800d20e:	600e      	str	r6, [r1, #0]
 800d210:	d514      	bpl.n	800d23c <_printf_i+0x1ac>
 800d212:	07d9      	lsls	r1, r3, #31
 800d214:	bf44      	itt	mi
 800d216:	f043 0320 	orrmi.w	r3, r3, #32
 800d21a:	6023      	strmi	r3, [r4, #0]
 800d21c:	b91d      	cbnz	r5, 800d226 <_printf_i+0x196>
 800d21e:	6823      	ldr	r3, [r4, #0]
 800d220:	f023 0320 	bic.w	r3, r3, #32
 800d224:	6023      	str	r3, [r4, #0]
 800d226:	2310      	movs	r3, #16
 800d228:	e7b0      	b.n	800d18c <_printf_i+0xfc>
 800d22a:	6823      	ldr	r3, [r4, #0]
 800d22c:	f043 0320 	orr.w	r3, r3, #32
 800d230:	6023      	str	r3, [r4, #0]
 800d232:	2378      	movs	r3, #120	; 0x78
 800d234:	4828      	ldr	r0, [pc, #160]	; (800d2d8 <_printf_i+0x248>)
 800d236:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d23a:	e7e3      	b.n	800d204 <_printf_i+0x174>
 800d23c:	065e      	lsls	r6, r3, #25
 800d23e:	bf48      	it	mi
 800d240:	b2ad      	uxthmi	r5, r5
 800d242:	e7e6      	b.n	800d212 <_printf_i+0x182>
 800d244:	4616      	mov	r6, r2
 800d246:	e7bb      	b.n	800d1c0 <_printf_i+0x130>
 800d248:	680b      	ldr	r3, [r1, #0]
 800d24a:	6826      	ldr	r6, [r4, #0]
 800d24c:	6960      	ldr	r0, [r4, #20]
 800d24e:	1d1d      	adds	r5, r3, #4
 800d250:	600d      	str	r5, [r1, #0]
 800d252:	0635      	lsls	r5, r6, #24
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	d501      	bpl.n	800d25c <_printf_i+0x1cc>
 800d258:	6018      	str	r0, [r3, #0]
 800d25a:	e002      	b.n	800d262 <_printf_i+0x1d2>
 800d25c:	0671      	lsls	r1, r6, #25
 800d25e:	d5fb      	bpl.n	800d258 <_printf_i+0x1c8>
 800d260:	8018      	strh	r0, [r3, #0]
 800d262:	2300      	movs	r3, #0
 800d264:	6123      	str	r3, [r4, #16]
 800d266:	4616      	mov	r6, r2
 800d268:	e7ba      	b.n	800d1e0 <_printf_i+0x150>
 800d26a:	680b      	ldr	r3, [r1, #0]
 800d26c:	1d1a      	adds	r2, r3, #4
 800d26e:	600a      	str	r2, [r1, #0]
 800d270:	681e      	ldr	r6, [r3, #0]
 800d272:	6862      	ldr	r2, [r4, #4]
 800d274:	2100      	movs	r1, #0
 800d276:	4630      	mov	r0, r6
 800d278:	f7f3 f83a 	bl	80002f0 <memchr>
 800d27c:	b108      	cbz	r0, 800d282 <_printf_i+0x1f2>
 800d27e:	1b80      	subs	r0, r0, r6
 800d280:	6060      	str	r0, [r4, #4]
 800d282:	6863      	ldr	r3, [r4, #4]
 800d284:	6123      	str	r3, [r4, #16]
 800d286:	2300      	movs	r3, #0
 800d288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d28c:	e7a8      	b.n	800d1e0 <_printf_i+0x150>
 800d28e:	6923      	ldr	r3, [r4, #16]
 800d290:	4632      	mov	r2, r6
 800d292:	4649      	mov	r1, r9
 800d294:	4640      	mov	r0, r8
 800d296:	47d0      	blx	sl
 800d298:	3001      	adds	r0, #1
 800d29a:	d0ab      	beq.n	800d1f4 <_printf_i+0x164>
 800d29c:	6823      	ldr	r3, [r4, #0]
 800d29e:	079b      	lsls	r3, r3, #30
 800d2a0:	d413      	bmi.n	800d2ca <_printf_i+0x23a>
 800d2a2:	68e0      	ldr	r0, [r4, #12]
 800d2a4:	9b03      	ldr	r3, [sp, #12]
 800d2a6:	4298      	cmp	r0, r3
 800d2a8:	bfb8      	it	lt
 800d2aa:	4618      	movlt	r0, r3
 800d2ac:	e7a4      	b.n	800d1f8 <_printf_i+0x168>
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	4632      	mov	r2, r6
 800d2b2:	4649      	mov	r1, r9
 800d2b4:	4640      	mov	r0, r8
 800d2b6:	47d0      	blx	sl
 800d2b8:	3001      	adds	r0, #1
 800d2ba:	d09b      	beq.n	800d1f4 <_printf_i+0x164>
 800d2bc:	3501      	adds	r5, #1
 800d2be:	68e3      	ldr	r3, [r4, #12]
 800d2c0:	9903      	ldr	r1, [sp, #12]
 800d2c2:	1a5b      	subs	r3, r3, r1
 800d2c4:	42ab      	cmp	r3, r5
 800d2c6:	dcf2      	bgt.n	800d2ae <_printf_i+0x21e>
 800d2c8:	e7eb      	b.n	800d2a2 <_printf_i+0x212>
 800d2ca:	2500      	movs	r5, #0
 800d2cc:	f104 0619 	add.w	r6, r4, #25
 800d2d0:	e7f5      	b.n	800d2be <_printf_i+0x22e>
 800d2d2:	bf00      	nop
 800d2d4:	080123d2 	.word	0x080123d2
 800d2d8:	080123e3 	.word	0x080123e3

0800d2dc <_scanf_float>:
 800d2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2e0:	b087      	sub	sp, #28
 800d2e2:	4617      	mov	r7, r2
 800d2e4:	9303      	str	r3, [sp, #12]
 800d2e6:	688b      	ldr	r3, [r1, #8]
 800d2e8:	1e5a      	subs	r2, r3, #1
 800d2ea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d2ee:	bf83      	ittte	hi
 800d2f0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d2f4:	195b      	addhi	r3, r3, r5
 800d2f6:	9302      	strhi	r3, [sp, #8]
 800d2f8:	2300      	movls	r3, #0
 800d2fa:	bf86      	itte	hi
 800d2fc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d300:	608b      	strhi	r3, [r1, #8]
 800d302:	9302      	strls	r3, [sp, #8]
 800d304:	680b      	ldr	r3, [r1, #0]
 800d306:	468b      	mov	fp, r1
 800d308:	2500      	movs	r5, #0
 800d30a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d30e:	f84b 3b1c 	str.w	r3, [fp], #28
 800d312:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d316:	4680      	mov	r8, r0
 800d318:	460c      	mov	r4, r1
 800d31a:	465e      	mov	r6, fp
 800d31c:	46aa      	mov	sl, r5
 800d31e:	46a9      	mov	r9, r5
 800d320:	9501      	str	r5, [sp, #4]
 800d322:	68a2      	ldr	r2, [r4, #8]
 800d324:	b152      	cbz	r2, 800d33c <_scanf_float+0x60>
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	781b      	ldrb	r3, [r3, #0]
 800d32a:	2b4e      	cmp	r3, #78	; 0x4e
 800d32c:	d864      	bhi.n	800d3f8 <_scanf_float+0x11c>
 800d32e:	2b40      	cmp	r3, #64	; 0x40
 800d330:	d83c      	bhi.n	800d3ac <_scanf_float+0xd0>
 800d332:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800d336:	b2c8      	uxtb	r0, r1
 800d338:	280e      	cmp	r0, #14
 800d33a:	d93a      	bls.n	800d3b2 <_scanf_float+0xd6>
 800d33c:	f1b9 0f00 	cmp.w	r9, #0
 800d340:	d003      	beq.n	800d34a <_scanf_float+0x6e>
 800d342:	6823      	ldr	r3, [r4, #0]
 800d344:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d348:	6023      	str	r3, [r4, #0]
 800d34a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d34e:	f1ba 0f01 	cmp.w	sl, #1
 800d352:	f200 8113 	bhi.w	800d57c <_scanf_float+0x2a0>
 800d356:	455e      	cmp	r6, fp
 800d358:	f200 8105 	bhi.w	800d566 <_scanf_float+0x28a>
 800d35c:	2501      	movs	r5, #1
 800d35e:	4628      	mov	r0, r5
 800d360:	b007      	add	sp, #28
 800d362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d366:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800d36a:	2a0d      	cmp	r2, #13
 800d36c:	d8e6      	bhi.n	800d33c <_scanf_float+0x60>
 800d36e:	a101      	add	r1, pc, #4	; (adr r1, 800d374 <_scanf_float+0x98>)
 800d370:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d374:	0800d4b3 	.word	0x0800d4b3
 800d378:	0800d33d 	.word	0x0800d33d
 800d37c:	0800d33d 	.word	0x0800d33d
 800d380:	0800d33d 	.word	0x0800d33d
 800d384:	0800d513 	.word	0x0800d513
 800d388:	0800d4eb 	.word	0x0800d4eb
 800d38c:	0800d33d 	.word	0x0800d33d
 800d390:	0800d33d 	.word	0x0800d33d
 800d394:	0800d4c1 	.word	0x0800d4c1
 800d398:	0800d33d 	.word	0x0800d33d
 800d39c:	0800d33d 	.word	0x0800d33d
 800d3a0:	0800d33d 	.word	0x0800d33d
 800d3a4:	0800d33d 	.word	0x0800d33d
 800d3a8:	0800d479 	.word	0x0800d479
 800d3ac:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800d3b0:	e7db      	b.n	800d36a <_scanf_float+0x8e>
 800d3b2:	290e      	cmp	r1, #14
 800d3b4:	d8c2      	bhi.n	800d33c <_scanf_float+0x60>
 800d3b6:	a001      	add	r0, pc, #4	; (adr r0, 800d3bc <_scanf_float+0xe0>)
 800d3b8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d3bc:	0800d46b 	.word	0x0800d46b
 800d3c0:	0800d33d 	.word	0x0800d33d
 800d3c4:	0800d46b 	.word	0x0800d46b
 800d3c8:	0800d4ff 	.word	0x0800d4ff
 800d3cc:	0800d33d 	.word	0x0800d33d
 800d3d0:	0800d419 	.word	0x0800d419
 800d3d4:	0800d455 	.word	0x0800d455
 800d3d8:	0800d455 	.word	0x0800d455
 800d3dc:	0800d455 	.word	0x0800d455
 800d3e0:	0800d455 	.word	0x0800d455
 800d3e4:	0800d455 	.word	0x0800d455
 800d3e8:	0800d455 	.word	0x0800d455
 800d3ec:	0800d455 	.word	0x0800d455
 800d3f0:	0800d455 	.word	0x0800d455
 800d3f4:	0800d455 	.word	0x0800d455
 800d3f8:	2b6e      	cmp	r3, #110	; 0x6e
 800d3fa:	d809      	bhi.n	800d410 <_scanf_float+0x134>
 800d3fc:	2b60      	cmp	r3, #96	; 0x60
 800d3fe:	d8b2      	bhi.n	800d366 <_scanf_float+0x8a>
 800d400:	2b54      	cmp	r3, #84	; 0x54
 800d402:	d077      	beq.n	800d4f4 <_scanf_float+0x218>
 800d404:	2b59      	cmp	r3, #89	; 0x59
 800d406:	d199      	bne.n	800d33c <_scanf_float+0x60>
 800d408:	2d07      	cmp	r5, #7
 800d40a:	d197      	bne.n	800d33c <_scanf_float+0x60>
 800d40c:	2508      	movs	r5, #8
 800d40e:	e029      	b.n	800d464 <_scanf_float+0x188>
 800d410:	2b74      	cmp	r3, #116	; 0x74
 800d412:	d06f      	beq.n	800d4f4 <_scanf_float+0x218>
 800d414:	2b79      	cmp	r3, #121	; 0x79
 800d416:	e7f6      	b.n	800d406 <_scanf_float+0x12a>
 800d418:	6821      	ldr	r1, [r4, #0]
 800d41a:	05c8      	lsls	r0, r1, #23
 800d41c:	d51a      	bpl.n	800d454 <_scanf_float+0x178>
 800d41e:	9b02      	ldr	r3, [sp, #8]
 800d420:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d424:	6021      	str	r1, [r4, #0]
 800d426:	f109 0901 	add.w	r9, r9, #1
 800d42a:	b11b      	cbz	r3, 800d434 <_scanf_float+0x158>
 800d42c:	3b01      	subs	r3, #1
 800d42e:	3201      	adds	r2, #1
 800d430:	9302      	str	r3, [sp, #8]
 800d432:	60a2      	str	r2, [r4, #8]
 800d434:	68a3      	ldr	r3, [r4, #8]
 800d436:	3b01      	subs	r3, #1
 800d438:	60a3      	str	r3, [r4, #8]
 800d43a:	6923      	ldr	r3, [r4, #16]
 800d43c:	3301      	adds	r3, #1
 800d43e:	6123      	str	r3, [r4, #16]
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	3b01      	subs	r3, #1
 800d444:	2b00      	cmp	r3, #0
 800d446:	607b      	str	r3, [r7, #4]
 800d448:	f340 8084 	ble.w	800d554 <_scanf_float+0x278>
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	3301      	adds	r3, #1
 800d450:	603b      	str	r3, [r7, #0]
 800d452:	e766      	b.n	800d322 <_scanf_float+0x46>
 800d454:	eb1a 0f05 	cmn.w	sl, r5
 800d458:	f47f af70 	bne.w	800d33c <_scanf_float+0x60>
 800d45c:	6822      	ldr	r2, [r4, #0]
 800d45e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800d462:	6022      	str	r2, [r4, #0]
 800d464:	f806 3b01 	strb.w	r3, [r6], #1
 800d468:	e7e4      	b.n	800d434 <_scanf_float+0x158>
 800d46a:	6822      	ldr	r2, [r4, #0]
 800d46c:	0610      	lsls	r0, r2, #24
 800d46e:	f57f af65 	bpl.w	800d33c <_scanf_float+0x60>
 800d472:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d476:	e7f4      	b.n	800d462 <_scanf_float+0x186>
 800d478:	f1ba 0f00 	cmp.w	sl, #0
 800d47c:	d10e      	bne.n	800d49c <_scanf_float+0x1c0>
 800d47e:	f1b9 0f00 	cmp.w	r9, #0
 800d482:	d10e      	bne.n	800d4a2 <_scanf_float+0x1c6>
 800d484:	6822      	ldr	r2, [r4, #0]
 800d486:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d48a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d48e:	d108      	bne.n	800d4a2 <_scanf_float+0x1c6>
 800d490:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d494:	6022      	str	r2, [r4, #0]
 800d496:	f04f 0a01 	mov.w	sl, #1
 800d49a:	e7e3      	b.n	800d464 <_scanf_float+0x188>
 800d49c:	f1ba 0f02 	cmp.w	sl, #2
 800d4a0:	d055      	beq.n	800d54e <_scanf_float+0x272>
 800d4a2:	2d01      	cmp	r5, #1
 800d4a4:	d002      	beq.n	800d4ac <_scanf_float+0x1d0>
 800d4a6:	2d04      	cmp	r5, #4
 800d4a8:	f47f af48 	bne.w	800d33c <_scanf_float+0x60>
 800d4ac:	3501      	adds	r5, #1
 800d4ae:	b2ed      	uxtb	r5, r5
 800d4b0:	e7d8      	b.n	800d464 <_scanf_float+0x188>
 800d4b2:	f1ba 0f01 	cmp.w	sl, #1
 800d4b6:	f47f af41 	bne.w	800d33c <_scanf_float+0x60>
 800d4ba:	f04f 0a02 	mov.w	sl, #2
 800d4be:	e7d1      	b.n	800d464 <_scanf_float+0x188>
 800d4c0:	b97d      	cbnz	r5, 800d4e2 <_scanf_float+0x206>
 800d4c2:	f1b9 0f00 	cmp.w	r9, #0
 800d4c6:	f47f af3c 	bne.w	800d342 <_scanf_float+0x66>
 800d4ca:	6822      	ldr	r2, [r4, #0]
 800d4cc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d4d0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d4d4:	f47f af39 	bne.w	800d34a <_scanf_float+0x6e>
 800d4d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d4dc:	6022      	str	r2, [r4, #0]
 800d4de:	2501      	movs	r5, #1
 800d4e0:	e7c0      	b.n	800d464 <_scanf_float+0x188>
 800d4e2:	2d03      	cmp	r5, #3
 800d4e4:	d0e2      	beq.n	800d4ac <_scanf_float+0x1d0>
 800d4e6:	2d05      	cmp	r5, #5
 800d4e8:	e7de      	b.n	800d4a8 <_scanf_float+0x1cc>
 800d4ea:	2d02      	cmp	r5, #2
 800d4ec:	f47f af26 	bne.w	800d33c <_scanf_float+0x60>
 800d4f0:	2503      	movs	r5, #3
 800d4f2:	e7b7      	b.n	800d464 <_scanf_float+0x188>
 800d4f4:	2d06      	cmp	r5, #6
 800d4f6:	f47f af21 	bne.w	800d33c <_scanf_float+0x60>
 800d4fa:	2507      	movs	r5, #7
 800d4fc:	e7b2      	b.n	800d464 <_scanf_float+0x188>
 800d4fe:	6822      	ldr	r2, [r4, #0]
 800d500:	0591      	lsls	r1, r2, #22
 800d502:	f57f af1b 	bpl.w	800d33c <_scanf_float+0x60>
 800d506:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800d50a:	6022      	str	r2, [r4, #0]
 800d50c:	f8cd 9004 	str.w	r9, [sp, #4]
 800d510:	e7a8      	b.n	800d464 <_scanf_float+0x188>
 800d512:	6822      	ldr	r2, [r4, #0]
 800d514:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800d518:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d51c:	d006      	beq.n	800d52c <_scanf_float+0x250>
 800d51e:	0550      	lsls	r0, r2, #21
 800d520:	f57f af0c 	bpl.w	800d33c <_scanf_float+0x60>
 800d524:	f1b9 0f00 	cmp.w	r9, #0
 800d528:	f43f af0f 	beq.w	800d34a <_scanf_float+0x6e>
 800d52c:	0591      	lsls	r1, r2, #22
 800d52e:	bf58      	it	pl
 800d530:	9901      	ldrpl	r1, [sp, #4]
 800d532:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d536:	bf58      	it	pl
 800d538:	eba9 0101 	subpl.w	r1, r9, r1
 800d53c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800d540:	bf58      	it	pl
 800d542:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d546:	6022      	str	r2, [r4, #0]
 800d548:	f04f 0900 	mov.w	r9, #0
 800d54c:	e78a      	b.n	800d464 <_scanf_float+0x188>
 800d54e:	f04f 0a03 	mov.w	sl, #3
 800d552:	e787      	b.n	800d464 <_scanf_float+0x188>
 800d554:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d558:	4639      	mov	r1, r7
 800d55a:	4640      	mov	r0, r8
 800d55c:	4798      	blx	r3
 800d55e:	2800      	cmp	r0, #0
 800d560:	f43f aedf 	beq.w	800d322 <_scanf_float+0x46>
 800d564:	e6ea      	b.n	800d33c <_scanf_float+0x60>
 800d566:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d56a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d56e:	463a      	mov	r2, r7
 800d570:	4640      	mov	r0, r8
 800d572:	4798      	blx	r3
 800d574:	6923      	ldr	r3, [r4, #16]
 800d576:	3b01      	subs	r3, #1
 800d578:	6123      	str	r3, [r4, #16]
 800d57a:	e6ec      	b.n	800d356 <_scanf_float+0x7a>
 800d57c:	1e6b      	subs	r3, r5, #1
 800d57e:	2b06      	cmp	r3, #6
 800d580:	d825      	bhi.n	800d5ce <_scanf_float+0x2f2>
 800d582:	2d02      	cmp	r5, #2
 800d584:	d836      	bhi.n	800d5f4 <_scanf_float+0x318>
 800d586:	455e      	cmp	r6, fp
 800d588:	f67f aee8 	bls.w	800d35c <_scanf_float+0x80>
 800d58c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d590:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d594:	463a      	mov	r2, r7
 800d596:	4640      	mov	r0, r8
 800d598:	4798      	blx	r3
 800d59a:	6923      	ldr	r3, [r4, #16]
 800d59c:	3b01      	subs	r3, #1
 800d59e:	6123      	str	r3, [r4, #16]
 800d5a0:	e7f1      	b.n	800d586 <_scanf_float+0x2aa>
 800d5a2:	9802      	ldr	r0, [sp, #8]
 800d5a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d5a8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800d5ac:	9002      	str	r0, [sp, #8]
 800d5ae:	463a      	mov	r2, r7
 800d5b0:	4640      	mov	r0, r8
 800d5b2:	4798      	blx	r3
 800d5b4:	6923      	ldr	r3, [r4, #16]
 800d5b6:	3b01      	subs	r3, #1
 800d5b8:	6123      	str	r3, [r4, #16]
 800d5ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d5be:	fa5f fa8a 	uxtb.w	sl, sl
 800d5c2:	f1ba 0f02 	cmp.w	sl, #2
 800d5c6:	d1ec      	bne.n	800d5a2 <_scanf_float+0x2c6>
 800d5c8:	3d03      	subs	r5, #3
 800d5ca:	b2ed      	uxtb	r5, r5
 800d5cc:	1b76      	subs	r6, r6, r5
 800d5ce:	6823      	ldr	r3, [r4, #0]
 800d5d0:	05da      	lsls	r2, r3, #23
 800d5d2:	d52f      	bpl.n	800d634 <_scanf_float+0x358>
 800d5d4:	055b      	lsls	r3, r3, #21
 800d5d6:	d510      	bpl.n	800d5fa <_scanf_float+0x31e>
 800d5d8:	455e      	cmp	r6, fp
 800d5da:	f67f aebf 	bls.w	800d35c <_scanf_float+0x80>
 800d5de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d5e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d5e6:	463a      	mov	r2, r7
 800d5e8:	4640      	mov	r0, r8
 800d5ea:	4798      	blx	r3
 800d5ec:	6923      	ldr	r3, [r4, #16]
 800d5ee:	3b01      	subs	r3, #1
 800d5f0:	6123      	str	r3, [r4, #16]
 800d5f2:	e7f1      	b.n	800d5d8 <_scanf_float+0x2fc>
 800d5f4:	46aa      	mov	sl, r5
 800d5f6:	9602      	str	r6, [sp, #8]
 800d5f8:	e7df      	b.n	800d5ba <_scanf_float+0x2de>
 800d5fa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d5fe:	6923      	ldr	r3, [r4, #16]
 800d600:	2965      	cmp	r1, #101	; 0x65
 800d602:	f103 33ff 	add.w	r3, r3, #4294967295
 800d606:	f106 35ff 	add.w	r5, r6, #4294967295
 800d60a:	6123      	str	r3, [r4, #16]
 800d60c:	d00c      	beq.n	800d628 <_scanf_float+0x34c>
 800d60e:	2945      	cmp	r1, #69	; 0x45
 800d610:	d00a      	beq.n	800d628 <_scanf_float+0x34c>
 800d612:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d616:	463a      	mov	r2, r7
 800d618:	4640      	mov	r0, r8
 800d61a:	4798      	blx	r3
 800d61c:	6923      	ldr	r3, [r4, #16]
 800d61e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d622:	3b01      	subs	r3, #1
 800d624:	1eb5      	subs	r5, r6, #2
 800d626:	6123      	str	r3, [r4, #16]
 800d628:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d62c:	463a      	mov	r2, r7
 800d62e:	4640      	mov	r0, r8
 800d630:	4798      	blx	r3
 800d632:	462e      	mov	r6, r5
 800d634:	6825      	ldr	r5, [r4, #0]
 800d636:	f015 0510 	ands.w	r5, r5, #16
 800d63a:	d14d      	bne.n	800d6d8 <_scanf_float+0x3fc>
 800d63c:	7035      	strb	r5, [r6, #0]
 800d63e:	6823      	ldr	r3, [r4, #0]
 800d640:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d648:	d11a      	bne.n	800d680 <_scanf_float+0x3a4>
 800d64a:	9b01      	ldr	r3, [sp, #4]
 800d64c:	454b      	cmp	r3, r9
 800d64e:	eba3 0209 	sub.w	r2, r3, r9
 800d652:	d122      	bne.n	800d69a <_scanf_float+0x3be>
 800d654:	2200      	movs	r2, #0
 800d656:	4659      	mov	r1, fp
 800d658:	4640      	mov	r0, r8
 800d65a:	f000 ffaf 	bl	800e5bc <_strtod_r>
 800d65e:	9b03      	ldr	r3, [sp, #12]
 800d660:	6821      	ldr	r1, [r4, #0]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	f011 0f02 	tst.w	r1, #2
 800d668:	f103 0204 	add.w	r2, r3, #4
 800d66c:	d020      	beq.n	800d6b0 <_scanf_float+0x3d4>
 800d66e:	9903      	ldr	r1, [sp, #12]
 800d670:	600a      	str	r2, [r1, #0]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	ed83 0b00 	vstr	d0, [r3]
 800d678:	68e3      	ldr	r3, [r4, #12]
 800d67a:	3301      	adds	r3, #1
 800d67c:	60e3      	str	r3, [r4, #12]
 800d67e:	e66e      	b.n	800d35e <_scanf_float+0x82>
 800d680:	9b04      	ldr	r3, [sp, #16]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d0e6      	beq.n	800d654 <_scanf_float+0x378>
 800d686:	9905      	ldr	r1, [sp, #20]
 800d688:	230a      	movs	r3, #10
 800d68a:	462a      	mov	r2, r5
 800d68c:	3101      	adds	r1, #1
 800d68e:	4640      	mov	r0, r8
 800d690:	f001 f81e 	bl	800e6d0 <_strtol_r>
 800d694:	9b04      	ldr	r3, [sp, #16]
 800d696:	9e05      	ldr	r6, [sp, #20]
 800d698:	1ac2      	subs	r2, r0, r3
 800d69a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d69e:	429e      	cmp	r6, r3
 800d6a0:	bf28      	it	cs
 800d6a2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800d6a6:	490d      	ldr	r1, [pc, #52]	; (800d6dc <_scanf_float+0x400>)
 800d6a8:	4630      	mov	r0, r6
 800d6aa:	f000 f975 	bl	800d998 <siprintf>
 800d6ae:	e7d1      	b.n	800d654 <_scanf_float+0x378>
 800d6b0:	f011 0f04 	tst.w	r1, #4
 800d6b4:	9903      	ldr	r1, [sp, #12]
 800d6b6:	600a      	str	r2, [r1, #0]
 800d6b8:	d1db      	bne.n	800d672 <_scanf_float+0x396>
 800d6ba:	eeb4 0b40 	vcmp.f64	d0, d0
 800d6be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6c2:	681e      	ldr	r6, [r3, #0]
 800d6c4:	d705      	bvc.n	800d6d2 <_scanf_float+0x3f6>
 800d6c6:	4806      	ldr	r0, [pc, #24]	; (800d6e0 <_scanf_float+0x404>)
 800d6c8:	f000 f960 	bl	800d98c <nanf>
 800d6cc:	ed86 0a00 	vstr	s0, [r6]
 800d6d0:	e7d2      	b.n	800d678 <_scanf_float+0x39c>
 800d6d2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800d6d6:	e7f9      	b.n	800d6cc <_scanf_float+0x3f0>
 800d6d8:	2500      	movs	r5, #0
 800d6da:	e640      	b.n	800d35e <_scanf_float+0x82>
 800d6dc:	080123f4 	.word	0x080123f4
 800d6e0:	08012870 	.word	0x08012870

0800d6e4 <iprintf>:
 800d6e4:	b40f      	push	{r0, r1, r2, r3}
 800d6e6:	4b0a      	ldr	r3, [pc, #40]	; (800d710 <iprintf+0x2c>)
 800d6e8:	b513      	push	{r0, r1, r4, lr}
 800d6ea:	681c      	ldr	r4, [r3, #0]
 800d6ec:	b124      	cbz	r4, 800d6f8 <iprintf+0x14>
 800d6ee:	69a3      	ldr	r3, [r4, #24]
 800d6f0:	b913      	cbnz	r3, 800d6f8 <iprintf+0x14>
 800d6f2:	4620      	mov	r0, r4
 800d6f4:	f001 ffe0 	bl	800f6b8 <__sinit>
 800d6f8:	ab05      	add	r3, sp, #20
 800d6fa:	9a04      	ldr	r2, [sp, #16]
 800d6fc:	68a1      	ldr	r1, [r4, #8]
 800d6fe:	9301      	str	r3, [sp, #4]
 800d700:	4620      	mov	r0, r4
 800d702:	f003 fb67 	bl	8010dd4 <_vfiprintf_r>
 800d706:	b002      	add	sp, #8
 800d708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d70c:	b004      	add	sp, #16
 800d70e:	4770      	bx	lr
 800d710:	24000010 	.word	0x24000010

0800d714 <_puts_r>:
 800d714:	b570      	push	{r4, r5, r6, lr}
 800d716:	460e      	mov	r6, r1
 800d718:	4605      	mov	r5, r0
 800d71a:	b118      	cbz	r0, 800d724 <_puts_r+0x10>
 800d71c:	6983      	ldr	r3, [r0, #24]
 800d71e:	b90b      	cbnz	r3, 800d724 <_puts_r+0x10>
 800d720:	f001 ffca 	bl	800f6b8 <__sinit>
 800d724:	69ab      	ldr	r3, [r5, #24]
 800d726:	68ac      	ldr	r4, [r5, #8]
 800d728:	b913      	cbnz	r3, 800d730 <_puts_r+0x1c>
 800d72a:	4628      	mov	r0, r5
 800d72c:	f001 ffc4 	bl	800f6b8 <__sinit>
 800d730:	4b2c      	ldr	r3, [pc, #176]	; (800d7e4 <_puts_r+0xd0>)
 800d732:	429c      	cmp	r4, r3
 800d734:	d120      	bne.n	800d778 <_puts_r+0x64>
 800d736:	686c      	ldr	r4, [r5, #4]
 800d738:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d73a:	07db      	lsls	r3, r3, #31
 800d73c:	d405      	bmi.n	800d74a <_puts_r+0x36>
 800d73e:	89a3      	ldrh	r3, [r4, #12]
 800d740:	0598      	lsls	r0, r3, #22
 800d742:	d402      	bmi.n	800d74a <_puts_r+0x36>
 800d744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d746:	f002 fbc8 	bl	800feda <__retarget_lock_acquire_recursive>
 800d74a:	89a3      	ldrh	r3, [r4, #12]
 800d74c:	0719      	lsls	r1, r3, #28
 800d74e:	d51d      	bpl.n	800d78c <_puts_r+0x78>
 800d750:	6923      	ldr	r3, [r4, #16]
 800d752:	b1db      	cbz	r3, 800d78c <_puts_r+0x78>
 800d754:	3e01      	subs	r6, #1
 800d756:	68a3      	ldr	r3, [r4, #8]
 800d758:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d75c:	3b01      	subs	r3, #1
 800d75e:	60a3      	str	r3, [r4, #8]
 800d760:	bb39      	cbnz	r1, 800d7b2 <_puts_r+0x9e>
 800d762:	2b00      	cmp	r3, #0
 800d764:	da38      	bge.n	800d7d8 <_puts_r+0xc4>
 800d766:	4622      	mov	r2, r4
 800d768:	210a      	movs	r1, #10
 800d76a:	4628      	mov	r0, r5
 800d76c:	f000 ffbc 	bl	800e6e8 <__swbuf_r>
 800d770:	3001      	adds	r0, #1
 800d772:	d011      	beq.n	800d798 <_puts_r+0x84>
 800d774:	250a      	movs	r5, #10
 800d776:	e011      	b.n	800d79c <_puts_r+0x88>
 800d778:	4b1b      	ldr	r3, [pc, #108]	; (800d7e8 <_puts_r+0xd4>)
 800d77a:	429c      	cmp	r4, r3
 800d77c:	d101      	bne.n	800d782 <_puts_r+0x6e>
 800d77e:	68ac      	ldr	r4, [r5, #8]
 800d780:	e7da      	b.n	800d738 <_puts_r+0x24>
 800d782:	4b1a      	ldr	r3, [pc, #104]	; (800d7ec <_puts_r+0xd8>)
 800d784:	429c      	cmp	r4, r3
 800d786:	bf08      	it	eq
 800d788:	68ec      	ldreq	r4, [r5, #12]
 800d78a:	e7d5      	b.n	800d738 <_puts_r+0x24>
 800d78c:	4621      	mov	r1, r4
 800d78e:	4628      	mov	r0, r5
 800d790:	f000 fffc 	bl	800e78c <__swsetup_r>
 800d794:	2800      	cmp	r0, #0
 800d796:	d0dd      	beq.n	800d754 <_puts_r+0x40>
 800d798:	f04f 35ff 	mov.w	r5, #4294967295
 800d79c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d79e:	07da      	lsls	r2, r3, #31
 800d7a0:	d405      	bmi.n	800d7ae <_puts_r+0x9a>
 800d7a2:	89a3      	ldrh	r3, [r4, #12]
 800d7a4:	059b      	lsls	r3, r3, #22
 800d7a6:	d402      	bmi.n	800d7ae <_puts_r+0x9a>
 800d7a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7aa:	f002 fb97 	bl	800fedc <__retarget_lock_release_recursive>
 800d7ae:	4628      	mov	r0, r5
 800d7b0:	bd70      	pop	{r4, r5, r6, pc}
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	da04      	bge.n	800d7c0 <_puts_r+0xac>
 800d7b6:	69a2      	ldr	r2, [r4, #24]
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	dc06      	bgt.n	800d7ca <_puts_r+0xb6>
 800d7bc:	290a      	cmp	r1, #10
 800d7be:	d004      	beq.n	800d7ca <_puts_r+0xb6>
 800d7c0:	6823      	ldr	r3, [r4, #0]
 800d7c2:	1c5a      	adds	r2, r3, #1
 800d7c4:	6022      	str	r2, [r4, #0]
 800d7c6:	7019      	strb	r1, [r3, #0]
 800d7c8:	e7c5      	b.n	800d756 <_puts_r+0x42>
 800d7ca:	4622      	mov	r2, r4
 800d7cc:	4628      	mov	r0, r5
 800d7ce:	f000 ff8b 	bl	800e6e8 <__swbuf_r>
 800d7d2:	3001      	adds	r0, #1
 800d7d4:	d1bf      	bne.n	800d756 <_puts_r+0x42>
 800d7d6:	e7df      	b.n	800d798 <_puts_r+0x84>
 800d7d8:	6823      	ldr	r3, [r4, #0]
 800d7da:	250a      	movs	r5, #10
 800d7dc:	1c5a      	adds	r2, r3, #1
 800d7de:	6022      	str	r2, [r4, #0]
 800d7e0:	701d      	strb	r5, [r3, #0]
 800d7e2:	e7db      	b.n	800d79c <_puts_r+0x88>
 800d7e4:	08012608 	.word	0x08012608
 800d7e8:	08012628 	.word	0x08012628
 800d7ec:	080125e8 	.word	0x080125e8

0800d7f0 <puts>:
 800d7f0:	4b02      	ldr	r3, [pc, #8]	; (800d7fc <puts+0xc>)
 800d7f2:	4601      	mov	r1, r0
 800d7f4:	6818      	ldr	r0, [r3, #0]
 800d7f6:	f7ff bf8d 	b.w	800d714 <_puts_r>
 800d7fa:	bf00      	nop
 800d7fc:	24000010 	.word	0x24000010

0800d800 <setvbuf>:
 800d800:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d804:	461d      	mov	r5, r3
 800d806:	4b5d      	ldr	r3, [pc, #372]	; (800d97c <setvbuf+0x17c>)
 800d808:	681f      	ldr	r7, [r3, #0]
 800d80a:	4604      	mov	r4, r0
 800d80c:	460e      	mov	r6, r1
 800d80e:	4690      	mov	r8, r2
 800d810:	b127      	cbz	r7, 800d81c <setvbuf+0x1c>
 800d812:	69bb      	ldr	r3, [r7, #24]
 800d814:	b913      	cbnz	r3, 800d81c <setvbuf+0x1c>
 800d816:	4638      	mov	r0, r7
 800d818:	f001 ff4e 	bl	800f6b8 <__sinit>
 800d81c:	4b58      	ldr	r3, [pc, #352]	; (800d980 <setvbuf+0x180>)
 800d81e:	429c      	cmp	r4, r3
 800d820:	d167      	bne.n	800d8f2 <setvbuf+0xf2>
 800d822:	687c      	ldr	r4, [r7, #4]
 800d824:	f1b8 0f02 	cmp.w	r8, #2
 800d828:	d006      	beq.n	800d838 <setvbuf+0x38>
 800d82a:	f1b8 0f01 	cmp.w	r8, #1
 800d82e:	f200 809f 	bhi.w	800d970 <setvbuf+0x170>
 800d832:	2d00      	cmp	r5, #0
 800d834:	f2c0 809c 	blt.w	800d970 <setvbuf+0x170>
 800d838:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d83a:	07db      	lsls	r3, r3, #31
 800d83c:	d405      	bmi.n	800d84a <setvbuf+0x4a>
 800d83e:	89a3      	ldrh	r3, [r4, #12]
 800d840:	0598      	lsls	r0, r3, #22
 800d842:	d402      	bmi.n	800d84a <setvbuf+0x4a>
 800d844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d846:	f002 fb48 	bl	800feda <__retarget_lock_acquire_recursive>
 800d84a:	4621      	mov	r1, r4
 800d84c:	4638      	mov	r0, r7
 800d84e:	f001 fe9f 	bl	800f590 <_fflush_r>
 800d852:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d854:	b141      	cbz	r1, 800d868 <setvbuf+0x68>
 800d856:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d85a:	4299      	cmp	r1, r3
 800d85c:	d002      	beq.n	800d864 <setvbuf+0x64>
 800d85e:	4638      	mov	r0, r7
 800d860:	f003 f888 	bl	8010974 <_free_r>
 800d864:	2300      	movs	r3, #0
 800d866:	6363      	str	r3, [r4, #52]	; 0x34
 800d868:	2300      	movs	r3, #0
 800d86a:	61a3      	str	r3, [r4, #24]
 800d86c:	6063      	str	r3, [r4, #4]
 800d86e:	89a3      	ldrh	r3, [r4, #12]
 800d870:	0619      	lsls	r1, r3, #24
 800d872:	d503      	bpl.n	800d87c <setvbuf+0x7c>
 800d874:	6921      	ldr	r1, [r4, #16]
 800d876:	4638      	mov	r0, r7
 800d878:	f003 f87c 	bl	8010974 <_free_r>
 800d87c:	89a3      	ldrh	r3, [r4, #12]
 800d87e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800d882:	f023 0303 	bic.w	r3, r3, #3
 800d886:	f1b8 0f02 	cmp.w	r8, #2
 800d88a:	81a3      	strh	r3, [r4, #12]
 800d88c:	d06c      	beq.n	800d968 <setvbuf+0x168>
 800d88e:	ab01      	add	r3, sp, #4
 800d890:	466a      	mov	r2, sp
 800d892:	4621      	mov	r1, r4
 800d894:	4638      	mov	r0, r7
 800d896:	f002 fb22 	bl	800fede <__swhatbuf_r>
 800d89a:	89a3      	ldrh	r3, [r4, #12]
 800d89c:	4318      	orrs	r0, r3
 800d89e:	81a0      	strh	r0, [r4, #12]
 800d8a0:	2d00      	cmp	r5, #0
 800d8a2:	d130      	bne.n	800d906 <setvbuf+0x106>
 800d8a4:	9d00      	ldr	r5, [sp, #0]
 800d8a6:	4628      	mov	r0, r5
 800d8a8:	f002 fb7e 	bl	800ffa8 <malloc>
 800d8ac:	4606      	mov	r6, r0
 800d8ae:	2800      	cmp	r0, #0
 800d8b0:	d155      	bne.n	800d95e <setvbuf+0x15e>
 800d8b2:	f8dd 9000 	ldr.w	r9, [sp]
 800d8b6:	45a9      	cmp	r9, r5
 800d8b8:	d14a      	bne.n	800d950 <setvbuf+0x150>
 800d8ba:	f04f 35ff 	mov.w	r5, #4294967295
 800d8be:	2200      	movs	r2, #0
 800d8c0:	60a2      	str	r2, [r4, #8]
 800d8c2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800d8c6:	6022      	str	r2, [r4, #0]
 800d8c8:	6122      	str	r2, [r4, #16]
 800d8ca:	2201      	movs	r2, #1
 800d8cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8d0:	6162      	str	r2, [r4, #20]
 800d8d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d8d4:	f043 0302 	orr.w	r3, r3, #2
 800d8d8:	07d2      	lsls	r2, r2, #31
 800d8da:	81a3      	strh	r3, [r4, #12]
 800d8dc:	d405      	bmi.n	800d8ea <setvbuf+0xea>
 800d8de:	f413 7f00 	tst.w	r3, #512	; 0x200
 800d8e2:	d102      	bne.n	800d8ea <setvbuf+0xea>
 800d8e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8e6:	f002 faf9 	bl	800fedc <__retarget_lock_release_recursive>
 800d8ea:	4628      	mov	r0, r5
 800d8ec:	b003      	add	sp, #12
 800d8ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d8f2:	4b24      	ldr	r3, [pc, #144]	; (800d984 <setvbuf+0x184>)
 800d8f4:	429c      	cmp	r4, r3
 800d8f6:	d101      	bne.n	800d8fc <setvbuf+0xfc>
 800d8f8:	68bc      	ldr	r4, [r7, #8]
 800d8fa:	e793      	b.n	800d824 <setvbuf+0x24>
 800d8fc:	4b22      	ldr	r3, [pc, #136]	; (800d988 <setvbuf+0x188>)
 800d8fe:	429c      	cmp	r4, r3
 800d900:	bf08      	it	eq
 800d902:	68fc      	ldreq	r4, [r7, #12]
 800d904:	e78e      	b.n	800d824 <setvbuf+0x24>
 800d906:	2e00      	cmp	r6, #0
 800d908:	d0cd      	beq.n	800d8a6 <setvbuf+0xa6>
 800d90a:	69bb      	ldr	r3, [r7, #24]
 800d90c:	b913      	cbnz	r3, 800d914 <setvbuf+0x114>
 800d90e:	4638      	mov	r0, r7
 800d910:	f001 fed2 	bl	800f6b8 <__sinit>
 800d914:	f1b8 0f01 	cmp.w	r8, #1
 800d918:	bf08      	it	eq
 800d91a:	89a3      	ldrheq	r3, [r4, #12]
 800d91c:	6026      	str	r6, [r4, #0]
 800d91e:	bf04      	itt	eq
 800d920:	f043 0301 	orreq.w	r3, r3, #1
 800d924:	81a3      	strheq	r3, [r4, #12]
 800d926:	89a2      	ldrh	r2, [r4, #12]
 800d928:	f012 0308 	ands.w	r3, r2, #8
 800d92c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800d930:	d01c      	beq.n	800d96c <setvbuf+0x16c>
 800d932:	07d3      	lsls	r3, r2, #31
 800d934:	bf41      	itttt	mi
 800d936:	2300      	movmi	r3, #0
 800d938:	426d      	negmi	r5, r5
 800d93a:	60a3      	strmi	r3, [r4, #8]
 800d93c:	61a5      	strmi	r5, [r4, #24]
 800d93e:	bf58      	it	pl
 800d940:	60a5      	strpl	r5, [r4, #8]
 800d942:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800d944:	f015 0501 	ands.w	r5, r5, #1
 800d948:	d115      	bne.n	800d976 <setvbuf+0x176>
 800d94a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800d94e:	e7c8      	b.n	800d8e2 <setvbuf+0xe2>
 800d950:	4648      	mov	r0, r9
 800d952:	f002 fb29 	bl	800ffa8 <malloc>
 800d956:	4606      	mov	r6, r0
 800d958:	2800      	cmp	r0, #0
 800d95a:	d0ae      	beq.n	800d8ba <setvbuf+0xba>
 800d95c:	464d      	mov	r5, r9
 800d95e:	89a3      	ldrh	r3, [r4, #12]
 800d960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d964:	81a3      	strh	r3, [r4, #12]
 800d966:	e7d0      	b.n	800d90a <setvbuf+0x10a>
 800d968:	2500      	movs	r5, #0
 800d96a:	e7a8      	b.n	800d8be <setvbuf+0xbe>
 800d96c:	60a3      	str	r3, [r4, #8]
 800d96e:	e7e8      	b.n	800d942 <setvbuf+0x142>
 800d970:	f04f 35ff 	mov.w	r5, #4294967295
 800d974:	e7b9      	b.n	800d8ea <setvbuf+0xea>
 800d976:	2500      	movs	r5, #0
 800d978:	e7b7      	b.n	800d8ea <setvbuf+0xea>
 800d97a:	bf00      	nop
 800d97c:	24000010 	.word	0x24000010
 800d980:	08012608 	.word	0x08012608
 800d984:	08012628 	.word	0x08012628
 800d988:	080125e8 	.word	0x080125e8

0800d98c <nanf>:
 800d98c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d994 <nanf+0x8>
 800d990:	4770      	bx	lr
 800d992:	bf00      	nop
 800d994:	7fc00000 	.word	0x7fc00000

0800d998 <siprintf>:
 800d998:	b40e      	push	{r1, r2, r3}
 800d99a:	b500      	push	{lr}
 800d99c:	b09c      	sub	sp, #112	; 0x70
 800d99e:	ab1d      	add	r3, sp, #116	; 0x74
 800d9a0:	9002      	str	r0, [sp, #8]
 800d9a2:	9006      	str	r0, [sp, #24]
 800d9a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d9a8:	4809      	ldr	r0, [pc, #36]	; (800d9d0 <siprintf+0x38>)
 800d9aa:	9107      	str	r1, [sp, #28]
 800d9ac:	9104      	str	r1, [sp, #16]
 800d9ae:	4909      	ldr	r1, [pc, #36]	; (800d9d4 <siprintf+0x3c>)
 800d9b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9b4:	9105      	str	r1, [sp, #20]
 800d9b6:	6800      	ldr	r0, [r0, #0]
 800d9b8:	9301      	str	r3, [sp, #4]
 800d9ba:	a902      	add	r1, sp, #8
 800d9bc:	f003 f8e0 	bl	8010b80 <_svfiprintf_r>
 800d9c0:	9b02      	ldr	r3, [sp, #8]
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	701a      	strb	r2, [r3, #0]
 800d9c6:	b01c      	add	sp, #112	; 0x70
 800d9c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d9cc:	b003      	add	sp, #12
 800d9ce:	4770      	bx	lr
 800d9d0:	24000010 	.word	0x24000010
 800d9d4:	ffff0208 	.word	0xffff0208

0800d9d8 <sulp>:
 800d9d8:	b570      	push	{r4, r5, r6, lr}
 800d9da:	4604      	mov	r4, r0
 800d9dc:	460d      	mov	r5, r1
 800d9de:	4616      	mov	r6, r2
 800d9e0:	ec45 4b10 	vmov	d0, r4, r5
 800d9e4:	f002 fe66 	bl	80106b4 <__ulp>
 800d9e8:	b17e      	cbz	r6, 800da0a <sulp+0x32>
 800d9ea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d9ee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	dd09      	ble.n	800da0a <sulp+0x32>
 800d9f6:	051b      	lsls	r3, r3, #20
 800d9f8:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800d9fc:	2000      	movs	r0, #0
 800d9fe:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800da02:	ec41 0b17 	vmov	d7, r0, r1
 800da06:	ee20 0b07 	vmul.f64	d0, d0, d7
 800da0a:	bd70      	pop	{r4, r5, r6, pc}
 800da0c:	0000      	movs	r0, r0
	...

0800da10 <_strtod_l>:
 800da10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da14:	ed2d 8b0c 	vpush	{d8-d13}
 800da18:	b09d      	sub	sp, #116	; 0x74
 800da1a:	461f      	mov	r7, r3
 800da1c:	2300      	movs	r3, #0
 800da1e:	9318      	str	r3, [sp, #96]	; 0x60
 800da20:	4ba6      	ldr	r3, [pc, #664]	; (800dcbc <_strtod_l+0x2ac>)
 800da22:	9213      	str	r2, [sp, #76]	; 0x4c
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	9308      	str	r3, [sp, #32]
 800da28:	4604      	mov	r4, r0
 800da2a:	4618      	mov	r0, r3
 800da2c:	468a      	mov	sl, r1
 800da2e:	f7f2 fc57 	bl	80002e0 <strlen>
 800da32:	f04f 0800 	mov.w	r8, #0
 800da36:	4605      	mov	r5, r0
 800da38:	f04f 0900 	mov.w	r9, #0
 800da3c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800da40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800da42:	781a      	ldrb	r2, [r3, #0]
 800da44:	2a2b      	cmp	r2, #43	; 0x2b
 800da46:	d04d      	beq.n	800dae4 <_strtod_l+0xd4>
 800da48:	d83a      	bhi.n	800dac0 <_strtod_l+0xb0>
 800da4a:	2a0d      	cmp	r2, #13
 800da4c:	d833      	bhi.n	800dab6 <_strtod_l+0xa6>
 800da4e:	2a08      	cmp	r2, #8
 800da50:	d833      	bhi.n	800daba <_strtod_l+0xaa>
 800da52:	2a00      	cmp	r2, #0
 800da54:	d03d      	beq.n	800dad2 <_strtod_l+0xc2>
 800da56:	2300      	movs	r3, #0
 800da58:	930b      	str	r3, [sp, #44]	; 0x2c
 800da5a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800da5c:	7833      	ldrb	r3, [r6, #0]
 800da5e:	2b30      	cmp	r3, #48	; 0x30
 800da60:	f040 80b6 	bne.w	800dbd0 <_strtod_l+0x1c0>
 800da64:	7873      	ldrb	r3, [r6, #1]
 800da66:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800da6a:	2b58      	cmp	r3, #88	; 0x58
 800da6c:	d16d      	bne.n	800db4a <_strtod_l+0x13a>
 800da6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da70:	9301      	str	r3, [sp, #4]
 800da72:	ab18      	add	r3, sp, #96	; 0x60
 800da74:	9702      	str	r7, [sp, #8]
 800da76:	9300      	str	r3, [sp, #0]
 800da78:	4a91      	ldr	r2, [pc, #580]	; (800dcc0 <_strtod_l+0x2b0>)
 800da7a:	ab19      	add	r3, sp, #100	; 0x64
 800da7c:	a917      	add	r1, sp, #92	; 0x5c
 800da7e:	4620      	mov	r0, r4
 800da80:	f001 ff1e 	bl	800f8c0 <__gethex>
 800da84:	f010 0507 	ands.w	r5, r0, #7
 800da88:	4607      	mov	r7, r0
 800da8a:	d005      	beq.n	800da98 <_strtod_l+0x88>
 800da8c:	2d06      	cmp	r5, #6
 800da8e:	d12b      	bne.n	800dae8 <_strtod_l+0xd8>
 800da90:	3601      	adds	r6, #1
 800da92:	2300      	movs	r3, #0
 800da94:	9617      	str	r6, [sp, #92]	; 0x5c
 800da96:	930b      	str	r3, [sp, #44]	; 0x2c
 800da98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	f040 856e 	bne.w	800e57c <_strtod_l+0xb6c>
 800daa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800daa2:	b1e3      	cbz	r3, 800dade <_strtod_l+0xce>
 800daa4:	ec49 8b17 	vmov	d7, r8, r9
 800daa8:	eeb1 0b47 	vneg.f64	d0, d7
 800daac:	b01d      	add	sp, #116	; 0x74
 800daae:	ecbd 8b0c 	vpop	{d8-d13}
 800dab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dab6:	2a20      	cmp	r2, #32
 800dab8:	d1cd      	bne.n	800da56 <_strtod_l+0x46>
 800daba:	3301      	adds	r3, #1
 800dabc:	9317      	str	r3, [sp, #92]	; 0x5c
 800dabe:	e7bf      	b.n	800da40 <_strtod_l+0x30>
 800dac0:	2a2d      	cmp	r2, #45	; 0x2d
 800dac2:	d1c8      	bne.n	800da56 <_strtod_l+0x46>
 800dac4:	2201      	movs	r2, #1
 800dac6:	920b      	str	r2, [sp, #44]	; 0x2c
 800dac8:	1c5a      	adds	r2, r3, #1
 800daca:	9217      	str	r2, [sp, #92]	; 0x5c
 800dacc:	785b      	ldrb	r3, [r3, #1]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d1c3      	bne.n	800da5a <_strtod_l+0x4a>
 800dad2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dad4:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800dad8:	2b00      	cmp	r3, #0
 800dada:	f040 854d 	bne.w	800e578 <_strtod_l+0xb68>
 800dade:	ec49 8b10 	vmov	d0, r8, r9
 800dae2:	e7e3      	b.n	800daac <_strtod_l+0x9c>
 800dae4:	2200      	movs	r2, #0
 800dae6:	e7ee      	b.n	800dac6 <_strtod_l+0xb6>
 800dae8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800daea:	b13a      	cbz	r2, 800dafc <_strtod_l+0xec>
 800daec:	2135      	movs	r1, #53	; 0x35
 800daee:	a81a      	add	r0, sp, #104	; 0x68
 800daf0:	f002 feec 	bl	80108cc <__copybits>
 800daf4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800daf6:	4620      	mov	r0, r4
 800daf8:	f002 fab0 	bl	801005c <_Bfree>
 800dafc:	3d01      	subs	r5, #1
 800dafe:	2d05      	cmp	r5, #5
 800db00:	d807      	bhi.n	800db12 <_strtod_l+0x102>
 800db02:	e8df f005 	tbb	[pc, r5]
 800db06:	0b0e      	.short	0x0b0e
 800db08:	030e1d18 	.word	0x030e1d18
 800db0c:	f04f 0900 	mov.w	r9, #0
 800db10:	46c8      	mov	r8, r9
 800db12:	073b      	lsls	r3, r7, #28
 800db14:	d5c0      	bpl.n	800da98 <_strtod_l+0x88>
 800db16:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800db1a:	e7bd      	b.n	800da98 <_strtod_l+0x88>
 800db1c:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 800db20:	e7f7      	b.n	800db12 <_strtod_l+0x102>
 800db22:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 800db26:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800db28:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800db2c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800db30:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800db34:	e7ed      	b.n	800db12 <_strtod_l+0x102>
 800db36:	f8df 918c 	ldr.w	r9, [pc, #396]	; 800dcc4 <_strtod_l+0x2b4>
 800db3a:	f04f 0800 	mov.w	r8, #0
 800db3e:	e7e8      	b.n	800db12 <_strtod_l+0x102>
 800db40:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800db44:	f04f 38ff 	mov.w	r8, #4294967295
 800db48:	e7e3      	b.n	800db12 <_strtod_l+0x102>
 800db4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800db4c:	1c5a      	adds	r2, r3, #1
 800db4e:	9217      	str	r2, [sp, #92]	; 0x5c
 800db50:	785b      	ldrb	r3, [r3, #1]
 800db52:	2b30      	cmp	r3, #48	; 0x30
 800db54:	d0f9      	beq.n	800db4a <_strtod_l+0x13a>
 800db56:	2b00      	cmp	r3, #0
 800db58:	d09e      	beq.n	800da98 <_strtod_l+0x88>
 800db5a:	2301      	movs	r3, #1
 800db5c:	9306      	str	r3, [sp, #24]
 800db5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800db60:	930c      	str	r3, [sp, #48]	; 0x30
 800db62:	2300      	movs	r3, #0
 800db64:	9304      	str	r3, [sp, #16]
 800db66:	930a      	str	r3, [sp, #40]	; 0x28
 800db68:	461e      	mov	r6, r3
 800db6a:	220a      	movs	r2, #10
 800db6c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800db6e:	f890 b000 	ldrb.w	fp, [r0]
 800db72:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 800db76:	b2d9      	uxtb	r1, r3
 800db78:	2909      	cmp	r1, #9
 800db7a:	d92b      	bls.n	800dbd4 <_strtod_l+0x1c4>
 800db7c:	9908      	ldr	r1, [sp, #32]
 800db7e:	462a      	mov	r2, r5
 800db80:	f003 fab5 	bl	80110ee <strncmp>
 800db84:	2800      	cmp	r0, #0
 800db86:	d035      	beq.n	800dbf4 <_strtod_l+0x1e4>
 800db88:	2000      	movs	r0, #0
 800db8a:	465a      	mov	r2, fp
 800db8c:	4633      	mov	r3, r6
 800db8e:	4683      	mov	fp, r0
 800db90:	4601      	mov	r1, r0
 800db92:	2a65      	cmp	r2, #101	; 0x65
 800db94:	d001      	beq.n	800db9a <_strtod_l+0x18a>
 800db96:	2a45      	cmp	r2, #69	; 0x45
 800db98:	d118      	bne.n	800dbcc <_strtod_l+0x1bc>
 800db9a:	b91b      	cbnz	r3, 800dba4 <_strtod_l+0x194>
 800db9c:	9b06      	ldr	r3, [sp, #24]
 800db9e:	4303      	orrs	r3, r0
 800dba0:	d097      	beq.n	800dad2 <_strtod_l+0xc2>
 800dba2:	2300      	movs	r3, #0
 800dba4:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 800dba8:	f10a 0201 	add.w	r2, sl, #1
 800dbac:	9217      	str	r2, [sp, #92]	; 0x5c
 800dbae:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800dbb2:	2a2b      	cmp	r2, #43	; 0x2b
 800dbb4:	d077      	beq.n	800dca6 <_strtod_l+0x296>
 800dbb6:	2a2d      	cmp	r2, #45	; 0x2d
 800dbb8:	d07d      	beq.n	800dcb6 <_strtod_l+0x2a6>
 800dbba:	f04f 0e00 	mov.w	lr, #0
 800dbbe:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800dbc2:	2d09      	cmp	r5, #9
 800dbc4:	f240 8084 	bls.w	800dcd0 <_strtod_l+0x2c0>
 800dbc8:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800dbcc:	2500      	movs	r5, #0
 800dbce:	e09f      	b.n	800dd10 <_strtod_l+0x300>
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	e7c3      	b.n	800db5c <_strtod_l+0x14c>
 800dbd4:	2e08      	cmp	r6, #8
 800dbd6:	bfd5      	itete	le
 800dbd8:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800dbda:	9904      	ldrgt	r1, [sp, #16]
 800dbdc:	fb02 3301 	mlale	r3, r2, r1, r3
 800dbe0:	fb02 3301 	mlagt	r3, r2, r1, r3
 800dbe4:	f100 0001 	add.w	r0, r0, #1
 800dbe8:	bfd4      	ite	le
 800dbea:	930a      	strle	r3, [sp, #40]	; 0x28
 800dbec:	9304      	strgt	r3, [sp, #16]
 800dbee:	3601      	adds	r6, #1
 800dbf0:	9017      	str	r0, [sp, #92]	; 0x5c
 800dbf2:	e7bb      	b.n	800db6c <_strtod_l+0x15c>
 800dbf4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dbf6:	195a      	adds	r2, r3, r5
 800dbf8:	9217      	str	r2, [sp, #92]	; 0x5c
 800dbfa:	5d5a      	ldrb	r2, [r3, r5]
 800dbfc:	b3ae      	cbz	r6, 800dc6a <_strtod_l+0x25a>
 800dbfe:	4683      	mov	fp, r0
 800dc00:	4633      	mov	r3, r6
 800dc02:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800dc06:	2909      	cmp	r1, #9
 800dc08:	d912      	bls.n	800dc30 <_strtod_l+0x220>
 800dc0a:	2101      	movs	r1, #1
 800dc0c:	e7c1      	b.n	800db92 <_strtod_l+0x182>
 800dc0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dc10:	1c5a      	adds	r2, r3, #1
 800dc12:	9217      	str	r2, [sp, #92]	; 0x5c
 800dc14:	785a      	ldrb	r2, [r3, #1]
 800dc16:	3001      	adds	r0, #1
 800dc18:	2a30      	cmp	r2, #48	; 0x30
 800dc1a:	d0f8      	beq.n	800dc0e <_strtod_l+0x1fe>
 800dc1c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800dc20:	2b08      	cmp	r3, #8
 800dc22:	f200 84b0 	bhi.w	800e586 <_strtod_l+0xb76>
 800dc26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dc28:	930c      	str	r3, [sp, #48]	; 0x30
 800dc2a:	4683      	mov	fp, r0
 800dc2c:	2000      	movs	r0, #0
 800dc2e:	4603      	mov	r3, r0
 800dc30:	3a30      	subs	r2, #48	; 0x30
 800dc32:	f100 0101 	add.w	r1, r0, #1
 800dc36:	d012      	beq.n	800dc5e <_strtod_l+0x24e>
 800dc38:	448b      	add	fp, r1
 800dc3a:	eb00 0c03 	add.w	ip, r0, r3
 800dc3e:	4619      	mov	r1, r3
 800dc40:	250a      	movs	r5, #10
 800dc42:	4561      	cmp	r1, ip
 800dc44:	d113      	bne.n	800dc6e <_strtod_l+0x25e>
 800dc46:	1819      	adds	r1, r3, r0
 800dc48:	2908      	cmp	r1, #8
 800dc4a:	f103 0301 	add.w	r3, r3, #1
 800dc4e:	4403      	add	r3, r0
 800dc50:	dc1d      	bgt.n	800dc8e <_strtod_l+0x27e>
 800dc52:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dc54:	210a      	movs	r1, #10
 800dc56:	fb01 2200 	mla	r2, r1, r0, r2
 800dc5a:	920a      	str	r2, [sp, #40]	; 0x28
 800dc5c:	2100      	movs	r1, #0
 800dc5e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dc60:	1c50      	adds	r0, r2, #1
 800dc62:	9017      	str	r0, [sp, #92]	; 0x5c
 800dc64:	7852      	ldrb	r2, [r2, #1]
 800dc66:	4608      	mov	r0, r1
 800dc68:	e7cb      	b.n	800dc02 <_strtod_l+0x1f2>
 800dc6a:	4630      	mov	r0, r6
 800dc6c:	e7d4      	b.n	800dc18 <_strtod_l+0x208>
 800dc6e:	2908      	cmp	r1, #8
 800dc70:	dc04      	bgt.n	800dc7c <_strtod_l+0x26c>
 800dc72:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800dc74:	436f      	muls	r7, r5
 800dc76:	970a      	str	r7, [sp, #40]	; 0x28
 800dc78:	3101      	adds	r1, #1
 800dc7a:	e7e2      	b.n	800dc42 <_strtod_l+0x232>
 800dc7c:	f101 0e01 	add.w	lr, r1, #1
 800dc80:	f1be 0f10 	cmp.w	lr, #16
 800dc84:	bfde      	ittt	le
 800dc86:	9f04      	ldrle	r7, [sp, #16]
 800dc88:	436f      	mulle	r7, r5
 800dc8a:	9704      	strle	r7, [sp, #16]
 800dc8c:	e7f4      	b.n	800dc78 <_strtod_l+0x268>
 800dc8e:	2b10      	cmp	r3, #16
 800dc90:	bfdf      	itttt	le
 800dc92:	9804      	ldrle	r0, [sp, #16]
 800dc94:	210a      	movle	r1, #10
 800dc96:	fb01 2200 	mlale	r2, r1, r0, r2
 800dc9a:	9204      	strle	r2, [sp, #16]
 800dc9c:	e7de      	b.n	800dc5c <_strtod_l+0x24c>
 800dc9e:	f04f 0b00 	mov.w	fp, #0
 800dca2:	2101      	movs	r1, #1
 800dca4:	e77a      	b.n	800db9c <_strtod_l+0x18c>
 800dca6:	f04f 0e00 	mov.w	lr, #0
 800dcaa:	f10a 0202 	add.w	r2, sl, #2
 800dcae:	9217      	str	r2, [sp, #92]	; 0x5c
 800dcb0:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800dcb4:	e783      	b.n	800dbbe <_strtod_l+0x1ae>
 800dcb6:	f04f 0e01 	mov.w	lr, #1
 800dcba:	e7f6      	b.n	800dcaa <_strtod_l+0x29a>
 800dcbc:	080126b4 	.word	0x080126b4
 800dcc0:	080123fc 	.word	0x080123fc
 800dcc4:	7ff00000 	.word	0x7ff00000
 800dcc8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dcca:	1c55      	adds	r5, r2, #1
 800dccc:	9517      	str	r5, [sp, #92]	; 0x5c
 800dcce:	7852      	ldrb	r2, [r2, #1]
 800dcd0:	2a30      	cmp	r2, #48	; 0x30
 800dcd2:	d0f9      	beq.n	800dcc8 <_strtod_l+0x2b8>
 800dcd4:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800dcd8:	2d08      	cmp	r5, #8
 800dcda:	f63f af77 	bhi.w	800dbcc <_strtod_l+0x1bc>
 800dcde:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800dce2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dce4:	9208      	str	r2, [sp, #32]
 800dce6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dce8:	1c55      	adds	r5, r2, #1
 800dcea:	9517      	str	r5, [sp, #92]	; 0x5c
 800dcec:	7852      	ldrb	r2, [r2, #1]
 800dcee:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800dcf2:	2f09      	cmp	r7, #9
 800dcf4:	d937      	bls.n	800dd66 <_strtod_l+0x356>
 800dcf6:	9f08      	ldr	r7, [sp, #32]
 800dcf8:	1bed      	subs	r5, r5, r7
 800dcfa:	2d08      	cmp	r5, #8
 800dcfc:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800dd00:	dc02      	bgt.n	800dd08 <_strtod_l+0x2f8>
 800dd02:	4565      	cmp	r5, ip
 800dd04:	bfa8      	it	ge
 800dd06:	4665      	movge	r5, ip
 800dd08:	f1be 0f00 	cmp.w	lr, #0
 800dd0c:	d000      	beq.n	800dd10 <_strtod_l+0x300>
 800dd0e:	426d      	negs	r5, r5
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d14f      	bne.n	800ddb4 <_strtod_l+0x3a4>
 800dd14:	9b06      	ldr	r3, [sp, #24]
 800dd16:	4303      	orrs	r3, r0
 800dd18:	f47f aebe 	bne.w	800da98 <_strtod_l+0x88>
 800dd1c:	2900      	cmp	r1, #0
 800dd1e:	f47f aed8 	bne.w	800dad2 <_strtod_l+0xc2>
 800dd22:	2a69      	cmp	r2, #105	; 0x69
 800dd24:	d027      	beq.n	800dd76 <_strtod_l+0x366>
 800dd26:	dc24      	bgt.n	800dd72 <_strtod_l+0x362>
 800dd28:	2a49      	cmp	r2, #73	; 0x49
 800dd2a:	d024      	beq.n	800dd76 <_strtod_l+0x366>
 800dd2c:	2a4e      	cmp	r2, #78	; 0x4e
 800dd2e:	f47f aed0 	bne.w	800dad2 <_strtod_l+0xc2>
 800dd32:	499b      	ldr	r1, [pc, #620]	; (800dfa0 <_strtod_l+0x590>)
 800dd34:	a817      	add	r0, sp, #92	; 0x5c
 800dd36:	f002 f81b 	bl	800fd70 <__match>
 800dd3a:	2800      	cmp	r0, #0
 800dd3c:	f43f aec9 	beq.w	800dad2 <_strtod_l+0xc2>
 800dd40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dd42:	781b      	ldrb	r3, [r3, #0]
 800dd44:	2b28      	cmp	r3, #40	; 0x28
 800dd46:	d12d      	bne.n	800dda4 <_strtod_l+0x394>
 800dd48:	4996      	ldr	r1, [pc, #600]	; (800dfa4 <_strtod_l+0x594>)
 800dd4a:	aa1a      	add	r2, sp, #104	; 0x68
 800dd4c:	a817      	add	r0, sp, #92	; 0x5c
 800dd4e:	f002 f823 	bl	800fd98 <__hexnan>
 800dd52:	2805      	cmp	r0, #5
 800dd54:	d126      	bne.n	800dda4 <_strtod_l+0x394>
 800dd56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dd58:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800dd5c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800dd60:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800dd64:	e698      	b.n	800da98 <_strtod_l+0x88>
 800dd66:	250a      	movs	r5, #10
 800dd68:	fb05 250c 	mla	r5, r5, ip, r2
 800dd6c:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800dd70:	e7b9      	b.n	800dce6 <_strtod_l+0x2d6>
 800dd72:	2a6e      	cmp	r2, #110	; 0x6e
 800dd74:	e7db      	b.n	800dd2e <_strtod_l+0x31e>
 800dd76:	498c      	ldr	r1, [pc, #560]	; (800dfa8 <_strtod_l+0x598>)
 800dd78:	a817      	add	r0, sp, #92	; 0x5c
 800dd7a:	f001 fff9 	bl	800fd70 <__match>
 800dd7e:	2800      	cmp	r0, #0
 800dd80:	f43f aea7 	beq.w	800dad2 <_strtod_l+0xc2>
 800dd84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dd86:	4989      	ldr	r1, [pc, #548]	; (800dfac <_strtod_l+0x59c>)
 800dd88:	3b01      	subs	r3, #1
 800dd8a:	a817      	add	r0, sp, #92	; 0x5c
 800dd8c:	9317      	str	r3, [sp, #92]	; 0x5c
 800dd8e:	f001 ffef 	bl	800fd70 <__match>
 800dd92:	b910      	cbnz	r0, 800dd9a <_strtod_l+0x38a>
 800dd94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dd96:	3301      	adds	r3, #1
 800dd98:	9317      	str	r3, [sp, #92]	; 0x5c
 800dd9a:	f8df 9224 	ldr.w	r9, [pc, #548]	; 800dfc0 <_strtod_l+0x5b0>
 800dd9e:	f04f 0800 	mov.w	r8, #0
 800dda2:	e679      	b.n	800da98 <_strtod_l+0x88>
 800dda4:	4882      	ldr	r0, [pc, #520]	; (800dfb0 <_strtod_l+0x5a0>)
 800dda6:	f003 f947 	bl	8011038 <nan>
 800ddaa:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ddae:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ddb2:	e671      	b.n	800da98 <_strtod_l+0x88>
 800ddb4:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 800ddb8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ddbc:	eba5 020b 	sub.w	r2, r5, fp
 800ddc0:	2e00      	cmp	r6, #0
 800ddc2:	bf08      	it	eq
 800ddc4:	461e      	moveq	r6, r3
 800ddc6:	2b10      	cmp	r3, #16
 800ddc8:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ddcc:	9206      	str	r2, [sp, #24]
 800ddce:	461a      	mov	r2, r3
 800ddd0:	bfa8      	it	ge
 800ddd2:	2210      	movge	r2, #16
 800ddd4:	2b09      	cmp	r3, #9
 800ddd6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800ddda:	dd0e      	ble.n	800ddfa <_strtod_l+0x3ea>
 800dddc:	4975      	ldr	r1, [pc, #468]	; (800dfb4 <_strtod_l+0x5a4>)
 800ddde:	eddd 7a04 	vldr	s15, [sp, #16]
 800dde2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800dde6:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 800ddea:	ed9d 5b08 	vldr	d5, [sp, #32]
 800ddee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ddf2:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ddf6:	ec59 8b17 	vmov	r8, r9, d7
 800ddfa:	2b0f      	cmp	r3, #15
 800ddfc:	dc37      	bgt.n	800de6e <_strtod_l+0x45e>
 800ddfe:	9906      	ldr	r1, [sp, #24]
 800de00:	2900      	cmp	r1, #0
 800de02:	f43f ae49 	beq.w	800da98 <_strtod_l+0x88>
 800de06:	dd23      	ble.n	800de50 <_strtod_l+0x440>
 800de08:	2916      	cmp	r1, #22
 800de0a:	dc0b      	bgt.n	800de24 <_strtod_l+0x414>
 800de0c:	4b69      	ldr	r3, [pc, #420]	; (800dfb4 <_strtod_l+0x5a4>)
 800de0e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800de12:	ed93 7b00 	vldr	d7, [r3]
 800de16:	ec49 8b16 	vmov	d6, r8, r9
 800de1a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800de1e:	ec59 8b17 	vmov	r8, r9, d7
 800de22:	e639      	b.n	800da98 <_strtod_l+0x88>
 800de24:	9806      	ldr	r0, [sp, #24]
 800de26:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800de2a:	4281      	cmp	r1, r0
 800de2c:	db1f      	blt.n	800de6e <_strtod_l+0x45e>
 800de2e:	4a61      	ldr	r2, [pc, #388]	; (800dfb4 <_strtod_l+0x5a4>)
 800de30:	f1c3 030f 	rsb	r3, r3, #15
 800de34:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800de38:	ed91 7b00 	vldr	d7, [r1]
 800de3c:	ec49 8b16 	vmov	d6, r8, r9
 800de40:	1ac3      	subs	r3, r0, r3
 800de42:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800de46:	ee27 7b06 	vmul.f64	d7, d7, d6
 800de4a:	ed92 6b00 	vldr	d6, [r2]
 800de4e:	e7e4      	b.n	800de1a <_strtod_l+0x40a>
 800de50:	9906      	ldr	r1, [sp, #24]
 800de52:	3116      	adds	r1, #22
 800de54:	db0b      	blt.n	800de6e <_strtod_l+0x45e>
 800de56:	4b57      	ldr	r3, [pc, #348]	; (800dfb4 <_strtod_l+0x5a4>)
 800de58:	ebab 0505 	sub.w	r5, fp, r5
 800de5c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800de60:	ed95 7b00 	vldr	d7, [r5]
 800de64:	ec49 8b16 	vmov	d6, r8, r9
 800de68:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800de6c:	e7d7      	b.n	800de1e <_strtod_l+0x40e>
 800de6e:	9906      	ldr	r1, [sp, #24]
 800de70:	1a9a      	subs	r2, r3, r2
 800de72:	440a      	add	r2, r1
 800de74:	2a00      	cmp	r2, #0
 800de76:	dd74      	ble.n	800df62 <_strtod_l+0x552>
 800de78:	f012 000f 	ands.w	r0, r2, #15
 800de7c:	d00a      	beq.n	800de94 <_strtod_l+0x484>
 800de7e:	494d      	ldr	r1, [pc, #308]	; (800dfb4 <_strtod_l+0x5a4>)
 800de80:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800de84:	ed91 7b00 	vldr	d7, [r1]
 800de88:	ec49 8b16 	vmov	d6, r8, r9
 800de8c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800de90:	ec59 8b17 	vmov	r8, r9, d7
 800de94:	f032 020f 	bics.w	r2, r2, #15
 800de98:	d04f      	beq.n	800df3a <_strtod_l+0x52a>
 800de9a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800de9e:	dd22      	ble.n	800dee6 <_strtod_l+0x4d6>
 800dea0:	2500      	movs	r5, #0
 800dea2:	462e      	mov	r6, r5
 800dea4:	950a      	str	r5, [sp, #40]	; 0x28
 800dea6:	462f      	mov	r7, r5
 800dea8:	2322      	movs	r3, #34	; 0x22
 800deaa:	f8df 9114 	ldr.w	r9, [pc, #276]	; 800dfc0 <_strtod_l+0x5b0>
 800deae:	6023      	str	r3, [r4, #0]
 800deb0:	f04f 0800 	mov.w	r8, #0
 800deb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	f43f adee 	beq.w	800da98 <_strtod_l+0x88>
 800debc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800debe:	4620      	mov	r0, r4
 800dec0:	f002 f8cc 	bl	801005c <_Bfree>
 800dec4:	4639      	mov	r1, r7
 800dec6:	4620      	mov	r0, r4
 800dec8:	f002 f8c8 	bl	801005c <_Bfree>
 800decc:	4631      	mov	r1, r6
 800dece:	4620      	mov	r0, r4
 800ded0:	f002 f8c4 	bl	801005c <_Bfree>
 800ded4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ded6:	4620      	mov	r0, r4
 800ded8:	f002 f8c0 	bl	801005c <_Bfree>
 800dedc:	4629      	mov	r1, r5
 800dede:	4620      	mov	r0, r4
 800dee0:	f002 f8bc 	bl	801005c <_Bfree>
 800dee4:	e5d8      	b.n	800da98 <_strtod_l+0x88>
 800dee6:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800deea:	2000      	movs	r0, #0
 800deec:	4f32      	ldr	r7, [pc, #200]	; (800dfb8 <_strtod_l+0x5a8>)
 800deee:	1112      	asrs	r2, r2, #4
 800def0:	4601      	mov	r1, r0
 800def2:	2a01      	cmp	r2, #1
 800def4:	dc24      	bgt.n	800df40 <_strtod_l+0x530>
 800def6:	b108      	cbz	r0, 800defc <_strtod_l+0x4ec>
 800def8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800defc:	4a2e      	ldr	r2, [pc, #184]	; (800dfb8 <_strtod_l+0x5a8>)
 800defe:	482f      	ldr	r0, [pc, #188]	; (800dfbc <_strtod_l+0x5ac>)
 800df00:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800df04:	ed91 7b00 	vldr	d7, [r1]
 800df08:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800df0c:	ec49 8b16 	vmov	d6, r8, r9
 800df10:	ee27 7b06 	vmul.f64	d7, d7, d6
 800df14:	ed8d 7b04 	vstr	d7, [sp, #16]
 800df18:	9905      	ldr	r1, [sp, #20]
 800df1a:	4a29      	ldr	r2, [pc, #164]	; (800dfc0 <_strtod_l+0x5b0>)
 800df1c:	400a      	ands	r2, r1
 800df1e:	4282      	cmp	r2, r0
 800df20:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800df24:	d8bc      	bhi.n	800dea0 <_strtod_l+0x490>
 800df26:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800df2a:	4282      	cmp	r2, r0
 800df2c:	bf86      	itte	hi
 800df2e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800dfc4 <_strtod_l+0x5b4>
 800df32:	f04f 38ff 	movhi.w	r8, #4294967295
 800df36:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800df3a:	2200      	movs	r2, #0
 800df3c:	9204      	str	r2, [sp, #16]
 800df3e:	e07f      	b.n	800e040 <_strtod_l+0x630>
 800df40:	f012 0f01 	tst.w	r2, #1
 800df44:	d00a      	beq.n	800df5c <_strtod_l+0x54c>
 800df46:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 800df4a:	ed90 7b00 	vldr	d7, [r0]
 800df4e:	ed9d 6b04 	vldr	d6, [sp, #16]
 800df52:	ee26 7b07 	vmul.f64	d7, d6, d7
 800df56:	ed8d 7b04 	vstr	d7, [sp, #16]
 800df5a:	2001      	movs	r0, #1
 800df5c:	3101      	adds	r1, #1
 800df5e:	1052      	asrs	r2, r2, #1
 800df60:	e7c7      	b.n	800def2 <_strtod_l+0x4e2>
 800df62:	d0ea      	beq.n	800df3a <_strtod_l+0x52a>
 800df64:	4252      	negs	r2, r2
 800df66:	f012 000f 	ands.w	r0, r2, #15
 800df6a:	d00a      	beq.n	800df82 <_strtod_l+0x572>
 800df6c:	4911      	ldr	r1, [pc, #68]	; (800dfb4 <_strtod_l+0x5a4>)
 800df6e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800df72:	ed91 7b00 	vldr	d7, [r1]
 800df76:	ec49 8b16 	vmov	d6, r8, r9
 800df7a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800df7e:	ec59 8b17 	vmov	r8, r9, d7
 800df82:	1112      	asrs	r2, r2, #4
 800df84:	d0d9      	beq.n	800df3a <_strtod_l+0x52a>
 800df86:	2a1f      	cmp	r2, #31
 800df88:	dd1e      	ble.n	800dfc8 <_strtod_l+0x5b8>
 800df8a:	2500      	movs	r5, #0
 800df8c:	462e      	mov	r6, r5
 800df8e:	950a      	str	r5, [sp, #40]	; 0x28
 800df90:	462f      	mov	r7, r5
 800df92:	2322      	movs	r3, #34	; 0x22
 800df94:	f04f 0800 	mov.w	r8, #0
 800df98:	f04f 0900 	mov.w	r9, #0
 800df9c:	6023      	str	r3, [r4, #0]
 800df9e:	e789      	b.n	800deb4 <_strtod_l+0x4a4>
 800dfa0:	080123cd 	.word	0x080123cd
 800dfa4:	08012410 	.word	0x08012410
 800dfa8:	080123c5 	.word	0x080123c5
 800dfac:	08012554 	.word	0x08012554
 800dfb0:	08012870 	.word	0x08012870
 800dfb4:	08012750 	.word	0x08012750
 800dfb8:	08012728 	.word	0x08012728
 800dfbc:	7ca00000 	.word	0x7ca00000
 800dfc0:	7ff00000 	.word	0x7ff00000
 800dfc4:	7fefffff 	.word	0x7fefffff
 800dfc8:	f012 0110 	ands.w	r1, r2, #16
 800dfcc:	bf18      	it	ne
 800dfce:	216a      	movne	r1, #106	; 0x6a
 800dfd0:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800dfd4:	9104      	str	r1, [sp, #16]
 800dfd6:	49c0      	ldr	r1, [pc, #768]	; (800e2d8 <_strtod_l+0x8c8>)
 800dfd8:	2000      	movs	r0, #0
 800dfda:	07d7      	lsls	r7, r2, #31
 800dfdc:	d508      	bpl.n	800dff0 <_strtod_l+0x5e0>
 800dfde:	ed9d 6b08 	vldr	d6, [sp, #32]
 800dfe2:	ed91 7b00 	vldr	d7, [r1]
 800dfe6:	ee26 7b07 	vmul.f64	d7, d6, d7
 800dfea:	ed8d 7b08 	vstr	d7, [sp, #32]
 800dfee:	2001      	movs	r0, #1
 800dff0:	1052      	asrs	r2, r2, #1
 800dff2:	f101 0108 	add.w	r1, r1, #8
 800dff6:	d1f0      	bne.n	800dfda <_strtod_l+0x5ca>
 800dff8:	b108      	cbz	r0, 800dffe <_strtod_l+0x5ee>
 800dffa:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800dffe:	9a04      	ldr	r2, [sp, #16]
 800e000:	b1ba      	cbz	r2, 800e032 <_strtod_l+0x622>
 800e002:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800e006:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 800e00a:	2a00      	cmp	r2, #0
 800e00c:	4649      	mov	r1, r9
 800e00e:	dd10      	ble.n	800e032 <_strtod_l+0x622>
 800e010:	2a1f      	cmp	r2, #31
 800e012:	f340 8132 	ble.w	800e27a <_strtod_l+0x86a>
 800e016:	2a34      	cmp	r2, #52	; 0x34
 800e018:	bfde      	ittt	le
 800e01a:	3a20      	suble	r2, #32
 800e01c:	f04f 30ff 	movle.w	r0, #4294967295
 800e020:	fa00 f202 	lslle.w	r2, r0, r2
 800e024:	f04f 0800 	mov.w	r8, #0
 800e028:	bfcc      	ite	gt
 800e02a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800e02e:	ea02 0901 	andle.w	r9, r2, r1
 800e032:	ec49 8b17 	vmov	d7, r8, r9
 800e036:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e03a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e03e:	d0a4      	beq.n	800df8a <_strtod_l+0x57a>
 800e040:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e042:	9200      	str	r2, [sp, #0]
 800e044:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e046:	4632      	mov	r2, r6
 800e048:	4620      	mov	r0, r4
 800e04a:	f002 f873 	bl	8010134 <__s2b>
 800e04e:	900a      	str	r0, [sp, #40]	; 0x28
 800e050:	2800      	cmp	r0, #0
 800e052:	f43f af25 	beq.w	800dea0 <_strtod_l+0x490>
 800e056:	9b06      	ldr	r3, [sp, #24]
 800e058:	ebab 0505 	sub.w	r5, fp, r5
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	bfb4      	ite	lt
 800e060:	462b      	movlt	r3, r5
 800e062:	2300      	movge	r3, #0
 800e064:	930c      	str	r3, [sp, #48]	; 0x30
 800e066:	9b06      	ldr	r3, [sp, #24]
 800e068:	ed9f 9b95 	vldr	d9, [pc, #596]	; 800e2c0 <_strtod_l+0x8b0>
 800e06c:	ed9f ab96 	vldr	d10, [pc, #600]	; 800e2c8 <_strtod_l+0x8b8>
 800e070:	ed9f bb97 	vldr	d11, [pc, #604]	; 800e2d0 <_strtod_l+0x8c0>
 800e074:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e078:	2500      	movs	r5, #0
 800e07a:	9312      	str	r3, [sp, #72]	; 0x48
 800e07c:	462e      	mov	r6, r5
 800e07e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e080:	4620      	mov	r0, r4
 800e082:	6859      	ldr	r1, [r3, #4]
 800e084:	f001 ffaa 	bl	800ffdc <_Balloc>
 800e088:	4607      	mov	r7, r0
 800e08a:	2800      	cmp	r0, #0
 800e08c:	f43f af0c 	beq.w	800dea8 <_strtod_l+0x498>
 800e090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e092:	691a      	ldr	r2, [r3, #16]
 800e094:	3202      	adds	r2, #2
 800e096:	f103 010c 	add.w	r1, r3, #12
 800e09a:	0092      	lsls	r2, r2, #2
 800e09c:	300c      	adds	r0, #12
 800e09e:	f7fe fcc5 	bl	800ca2c <memcpy>
 800e0a2:	ec49 8b10 	vmov	d0, r8, r9
 800e0a6:	aa1a      	add	r2, sp, #104	; 0x68
 800e0a8:	a919      	add	r1, sp, #100	; 0x64
 800e0aa:	4620      	mov	r0, r4
 800e0ac:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800e0b0:	f002 fb7c 	bl	80107ac <__d2b>
 800e0b4:	9018      	str	r0, [sp, #96]	; 0x60
 800e0b6:	2800      	cmp	r0, #0
 800e0b8:	f43f aef6 	beq.w	800dea8 <_strtod_l+0x498>
 800e0bc:	2101      	movs	r1, #1
 800e0be:	4620      	mov	r0, r4
 800e0c0:	f002 f8d2 	bl	8010268 <__i2b>
 800e0c4:	4606      	mov	r6, r0
 800e0c6:	2800      	cmp	r0, #0
 800e0c8:	f43f aeee 	beq.w	800dea8 <_strtod_l+0x498>
 800e0cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e0ce:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	bfab      	itete	ge
 800e0d4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800e0d6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800e0d8:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 800e0dc:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 800e0e0:	bfac      	ite	ge
 800e0e2:	eb03 0b02 	addge.w	fp, r3, r2
 800e0e6:	eba2 0a03 	sublt.w	sl, r2, r3
 800e0ea:	9a04      	ldr	r2, [sp, #16]
 800e0ec:	1a9b      	subs	r3, r3, r2
 800e0ee:	440b      	add	r3, r1
 800e0f0:	4a7a      	ldr	r2, [pc, #488]	; (800e2dc <_strtod_l+0x8cc>)
 800e0f2:	3b01      	subs	r3, #1
 800e0f4:	4293      	cmp	r3, r2
 800e0f6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800e0fa:	f280 80d1 	bge.w	800e2a0 <_strtod_l+0x890>
 800e0fe:	1ad2      	subs	r2, r2, r3
 800e100:	2a1f      	cmp	r2, #31
 800e102:	eba1 0102 	sub.w	r1, r1, r2
 800e106:	f04f 0001 	mov.w	r0, #1
 800e10a:	f300 80bd 	bgt.w	800e288 <_strtod_l+0x878>
 800e10e:	fa00 f302 	lsl.w	r3, r0, r2
 800e112:	930e      	str	r3, [sp, #56]	; 0x38
 800e114:	2300      	movs	r3, #0
 800e116:	930d      	str	r3, [sp, #52]	; 0x34
 800e118:	eb0b 0301 	add.w	r3, fp, r1
 800e11c:	9a04      	ldr	r2, [sp, #16]
 800e11e:	459b      	cmp	fp, r3
 800e120:	448a      	add	sl, r1
 800e122:	4492      	add	sl, r2
 800e124:	465a      	mov	r2, fp
 800e126:	bfa8      	it	ge
 800e128:	461a      	movge	r2, r3
 800e12a:	4552      	cmp	r2, sl
 800e12c:	bfa8      	it	ge
 800e12e:	4652      	movge	r2, sl
 800e130:	2a00      	cmp	r2, #0
 800e132:	bfc2      	ittt	gt
 800e134:	1a9b      	subgt	r3, r3, r2
 800e136:	ebaa 0a02 	subgt.w	sl, sl, r2
 800e13a:	ebab 0b02 	subgt.w	fp, fp, r2
 800e13e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e140:	2a00      	cmp	r2, #0
 800e142:	dd18      	ble.n	800e176 <_strtod_l+0x766>
 800e144:	4631      	mov	r1, r6
 800e146:	4620      	mov	r0, r4
 800e148:	9315      	str	r3, [sp, #84]	; 0x54
 800e14a:	f002 f949 	bl	80103e0 <__pow5mult>
 800e14e:	4606      	mov	r6, r0
 800e150:	2800      	cmp	r0, #0
 800e152:	f43f aea9 	beq.w	800dea8 <_strtod_l+0x498>
 800e156:	4601      	mov	r1, r0
 800e158:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e15a:	4620      	mov	r0, r4
 800e15c:	f002 f89a 	bl	8010294 <__multiply>
 800e160:	9014      	str	r0, [sp, #80]	; 0x50
 800e162:	2800      	cmp	r0, #0
 800e164:	f43f aea0 	beq.w	800dea8 <_strtod_l+0x498>
 800e168:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e16a:	4620      	mov	r0, r4
 800e16c:	f001 ff76 	bl	801005c <_Bfree>
 800e170:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e172:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e174:	9218      	str	r2, [sp, #96]	; 0x60
 800e176:	2b00      	cmp	r3, #0
 800e178:	f300 8097 	bgt.w	800e2aa <_strtod_l+0x89a>
 800e17c:	9b06      	ldr	r3, [sp, #24]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	dd08      	ble.n	800e194 <_strtod_l+0x784>
 800e182:	4639      	mov	r1, r7
 800e184:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e186:	4620      	mov	r0, r4
 800e188:	f002 f92a 	bl	80103e0 <__pow5mult>
 800e18c:	4607      	mov	r7, r0
 800e18e:	2800      	cmp	r0, #0
 800e190:	f43f ae8a 	beq.w	800dea8 <_strtod_l+0x498>
 800e194:	f1ba 0f00 	cmp.w	sl, #0
 800e198:	dd08      	ble.n	800e1ac <_strtod_l+0x79c>
 800e19a:	4639      	mov	r1, r7
 800e19c:	4652      	mov	r2, sl
 800e19e:	4620      	mov	r0, r4
 800e1a0:	f002 f978 	bl	8010494 <__lshift>
 800e1a4:	4607      	mov	r7, r0
 800e1a6:	2800      	cmp	r0, #0
 800e1a8:	f43f ae7e 	beq.w	800dea8 <_strtod_l+0x498>
 800e1ac:	f1bb 0f00 	cmp.w	fp, #0
 800e1b0:	dd08      	ble.n	800e1c4 <_strtod_l+0x7b4>
 800e1b2:	4631      	mov	r1, r6
 800e1b4:	465a      	mov	r2, fp
 800e1b6:	4620      	mov	r0, r4
 800e1b8:	f002 f96c 	bl	8010494 <__lshift>
 800e1bc:	4606      	mov	r6, r0
 800e1be:	2800      	cmp	r0, #0
 800e1c0:	f43f ae72 	beq.w	800dea8 <_strtod_l+0x498>
 800e1c4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e1c6:	463a      	mov	r2, r7
 800e1c8:	4620      	mov	r0, r4
 800e1ca:	f002 f9eb 	bl	80105a4 <__mdiff>
 800e1ce:	4605      	mov	r5, r0
 800e1d0:	2800      	cmp	r0, #0
 800e1d2:	f43f ae69 	beq.w	800dea8 <_strtod_l+0x498>
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800e1dc:	60c3      	str	r3, [r0, #12]
 800e1de:	4631      	mov	r1, r6
 800e1e0:	f002 f9c4 	bl	801056c <__mcmp>
 800e1e4:	2800      	cmp	r0, #0
 800e1e6:	da7f      	bge.n	800e2e8 <_strtod_l+0x8d8>
 800e1e8:	ea5a 0308 	orrs.w	r3, sl, r8
 800e1ec:	f040 80a5 	bne.w	800e33a <_strtod_l+0x92a>
 800e1f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	f040 80a0 	bne.w	800e33a <_strtod_l+0x92a>
 800e1fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e1fe:	0d1b      	lsrs	r3, r3, #20
 800e200:	051b      	lsls	r3, r3, #20
 800e202:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e206:	f240 8098 	bls.w	800e33a <_strtod_l+0x92a>
 800e20a:	696b      	ldr	r3, [r5, #20]
 800e20c:	b91b      	cbnz	r3, 800e216 <_strtod_l+0x806>
 800e20e:	692b      	ldr	r3, [r5, #16]
 800e210:	2b01      	cmp	r3, #1
 800e212:	f340 8092 	ble.w	800e33a <_strtod_l+0x92a>
 800e216:	4629      	mov	r1, r5
 800e218:	2201      	movs	r2, #1
 800e21a:	4620      	mov	r0, r4
 800e21c:	f002 f93a 	bl	8010494 <__lshift>
 800e220:	4631      	mov	r1, r6
 800e222:	4605      	mov	r5, r0
 800e224:	f002 f9a2 	bl	801056c <__mcmp>
 800e228:	2800      	cmp	r0, #0
 800e22a:	f340 8086 	ble.w	800e33a <_strtod_l+0x92a>
 800e22e:	9904      	ldr	r1, [sp, #16]
 800e230:	4a2b      	ldr	r2, [pc, #172]	; (800e2e0 <_strtod_l+0x8d0>)
 800e232:	464b      	mov	r3, r9
 800e234:	2900      	cmp	r1, #0
 800e236:	f000 80a1 	beq.w	800e37c <_strtod_l+0x96c>
 800e23a:	ea02 0109 	and.w	r1, r2, r9
 800e23e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e242:	f300 809b 	bgt.w	800e37c <_strtod_l+0x96c>
 800e246:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e24a:	f77f aea2 	ble.w	800df92 <_strtod_l+0x582>
 800e24e:	4a25      	ldr	r2, [pc, #148]	; (800e2e4 <_strtod_l+0x8d4>)
 800e250:	2300      	movs	r3, #0
 800e252:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800e256:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 800e25a:	ec49 8b17 	vmov	d7, r8, r9
 800e25e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e262:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e266:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800e26a:	4313      	orrs	r3, r2
 800e26c:	bf08      	it	eq
 800e26e:	2322      	moveq	r3, #34	; 0x22
 800e270:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800e274:	bf08      	it	eq
 800e276:	6023      	streq	r3, [r4, #0]
 800e278:	e620      	b.n	800debc <_strtod_l+0x4ac>
 800e27a:	f04f 31ff 	mov.w	r1, #4294967295
 800e27e:	fa01 f202 	lsl.w	r2, r1, r2
 800e282:	ea02 0808 	and.w	r8, r2, r8
 800e286:	e6d4      	b.n	800e032 <_strtod_l+0x622>
 800e288:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800e28c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800e290:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800e294:	33e2      	adds	r3, #226	; 0xe2
 800e296:	fa00 f303 	lsl.w	r3, r0, r3
 800e29a:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 800e29e:	e73b      	b.n	800e118 <_strtod_l+0x708>
 800e2a0:	2000      	movs	r0, #0
 800e2a2:	2301      	movs	r3, #1
 800e2a4:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 800e2a8:	e736      	b.n	800e118 <_strtod_l+0x708>
 800e2aa:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e2ac:	461a      	mov	r2, r3
 800e2ae:	4620      	mov	r0, r4
 800e2b0:	f002 f8f0 	bl	8010494 <__lshift>
 800e2b4:	9018      	str	r0, [sp, #96]	; 0x60
 800e2b6:	2800      	cmp	r0, #0
 800e2b8:	f47f af60 	bne.w	800e17c <_strtod_l+0x76c>
 800e2bc:	e5f4      	b.n	800dea8 <_strtod_l+0x498>
 800e2be:	bf00      	nop
 800e2c0:	94a03595 	.word	0x94a03595
 800e2c4:	3fcfffff 	.word	0x3fcfffff
 800e2c8:	94a03595 	.word	0x94a03595
 800e2cc:	3fdfffff 	.word	0x3fdfffff
 800e2d0:	35afe535 	.word	0x35afe535
 800e2d4:	3fe00000 	.word	0x3fe00000
 800e2d8:	08012428 	.word	0x08012428
 800e2dc:	fffffc02 	.word	0xfffffc02
 800e2e0:	7ff00000 	.word	0x7ff00000
 800e2e4:	39500000 	.word	0x39500000
 800e2e8:	46cb      	mov	fp, r9
 800e2ea:	d165      	bne.n	800e3b8 <_strtod_l+0x9a8>
 800e2ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e2f0:	f1ba 0f00 	cmp.w	sl, #0
 800e2f4:	d02a      	beq.n	800e34c <_strtod_l+0x93c>
 800e2f6:	4aaa      	ldr	r2, [pc, #680]	; (800e5a0 <_strtod_l+0xb90>)
 800e2f8:	4293      	cmp	r3, r2
 800e2fa:	d12b      	bne.n	800e354 <_strtod_l+0x944>
 800e2fc:	9b04      	ldr	r3, [sp, #16]
 800e2fe:	4641      	mov	r1, r8
 800e300:	b1fb      	cbz	r3, 800e342 <_strtod_l+0x932>
 800e302:	4aa8      	ldr	r2, [pc, #672]	; (800e5a4 <_strtod_l+0xb94>)
 800e304:	ea09 0202 	and.w	r2, r9, r2
 800e308:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800e30c:	f04f 30ff 	mov.w	r0, #4294967295
 800e310:	d81a      	bhi.n	800e348 <_strtod_l+0x938>
 800e312:	0d12      	lsrs	r2, r2, #20
 800e314:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e318:	fa00 f303 	lsl.w	r3, r0, r3
 800e31c:	4299      	cmp	r1, r3
 800e31e:	d119      	bne.n	800e354 <_strtod_l+0x944>
 800e320:	4ba1      	ldr	r3, [pc, #644]	; (800e5a8 <_strtod_l+0xb98>)
 800e322:	459b      	cmp	fp, r3
 800e324:	d102      	bne.n	800e32c <_strtod_l+0x91c>
 800e326:	3101      	adds	r1, #1
 800e328:	f43f adbe 	beq.w	800dea8 <_strtod_l+0x498>
 800e32c:	4b9d      	ldr	r3, [pc, #628]	; (800e5a4 <_strtod_l+0xb94>)
 800e32e:	ea0b 0303 	and.w	r3, fp, r3
 800e332:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800e336:	f04f 0800 	mov.w	r8, #0
 800e33a:	9b04      	ldr	r3, [sp, #16]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d186      	bne.n	800e24e <_strtod_l+0x83e>
 800e340:	e5bc      	b.n	800debc <_strtod_l+0x4ac>
 800e342:	f04f 33ff 	mov.w	r3, #4294967295
 800e346:	e7e9      	b.n	800e31c <_strtod_l+0x90c>
 800e348:	4603      	mov	r3, r0
 800e34a:	e7e7      	b.n	800e31c <_strtod_l+0x90c>
 800e34c:	ea53 0308 	orrs.w	r3, r3, r8
 800e350:	f43f af6d 	beq.w	800e22e <_strtod_l+0x81e>
 800e354:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e356:	b1db      	cbz	r3, 800e390 <_strtod_l+0x980>
 800e358:	ea13 0f0b 	tst.w	r3, fp
 800e35c:	d0ed      	beq.n	800e33a <_strtod_l+0x92a>
 800e35e:	9a04      	ldr	r2, [sp, #16]
 800e360:	4640      	mov	r0, r8
 800e362:	4649      	mov	r1, r9
 800e364:	f1ba 0f00 	cmp.w	sl, #0
 800e368:	d016      	beq.n	800e398 <_strtod_l+0x988>
 800e36a:	f7ff fb35 	bl	800d9d8 <sulp>
 800e36e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800e372:	ee37 7b00 	vadd.f64	d7, d7, d0
 800e376:	ec59 8b17 	vmov	r8, r9, d7
 800e37a:	e7de      	b.n	800e33a <_strtod_l+0x92a>
 800e37c:	4013      	ands	r3, r2
 800e37e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e382:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800e386:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800e38a:	f04f 38ff 	mov.w	r8, #4294967295
 800e38e:	e7d4      	b.n	800e33a <_strtod_l+0x92a>
 800e390:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e392:	ea13 0f08 	tst.w	r3, r8
 800e396:	e7e1      	b.n	800e35c <_strtod_l+0x94c>
 800e398:	f7ff fb1e 	bl	800d9d8 <sulp>
 800e39c:	ed9d 7b08 	vldr	d7, [sp, #32]
 800e3a0:	ee37 7b40 	vsub.f64	d7, d7, d0
 800e3a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e3a8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e3ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3b0:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800e3b4:	d1c1      	bne.n	800e33a <_strtod_l+0x92a>
 800e3b6:	e5ec      	b.n	800df92 <_strtod_l+0x582>
 800e3b8:	4631      	mov	r1, r6
 800e3ba:	4628      	mov	r0, r5
 800e3bc:	f002 fa52 	bl	8010864 <__ratio>
 800e3c0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800e3c4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e3c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3cc:	d867      	bhi.n	800e49e <_strtod_l+0xa8e>
 800e3ce:	f1ba 0f00 	cmp.w	sl, #0
 800e3d2:	d044      	beq.n	800e45e <_strtod_l+0xa4e>
 800e3d4:	4b75      	ldr	r3, [pc, #468]	; (800e5ac <_strtod_l+0xb9c>)
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800e3dc:	4971      	ldr	r1, [pc, #452]	; (800e5a4 <_strtod_l+0xb94>)
 800e3de:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800e5b8 <_strtod_l+0xba8>
 800e3e2:	ea0b 0001 	and.w	r0, fp, r1
 800e3e6:	4560      	cmp	r0, ip
 800e3e8:	900d      	str	r0, [sp, #52]	; 0x34
 800e3ea:	f040 808b 	bne.w	800e504 <_strtod_l+0xaf4>
 800e3ee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e3f2:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800e3f6:	ec49 8b10 	vmov	d0, r8, r9
 800e3fa:	ec43 2b1c 	vmov	d12, r2, r3
 800e3fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e402:	f002 f957 	bl	80106b4 <__ulp>
 800e406:	ec49 8b1d 	vmov	d13, r8, r9
 800e40a:	eeac db00 	vfma.f64	d13, d12, d0
 800e40e:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 800e412:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e414:	4963      	ldr	r1, [pc, #396]	; (800e5a4 <_strtod_l+0xb94>)
 800e416:	4a66      	ldr	r2, [pc, #408]	; (800e5b0 <_strtod_l+0xba0>)
 800e418:	4019      	ands	r1, r3
 800e41a:	4291      	cmp	r1, r2
 800e41c:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 800e420:	d947      	bls.n	800e4b2 <_strtod_l+0xaa2>
 800e422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e424:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e428:	4293      	cmp	r3, r2
 800e42a:	d103      	bne.n	800e434 <_strtod_l+0xa24>
 800e42c:	9b08      	ldr	r3, [sp, #32]
 800e42e:	3301      	adds	r3, #1
 800e430:	f43f ad3a 	beq.w	800dea8 <_strtod_l+0x498>
 800e434:	f8df 9170 	ldr.w	r9, [pc, #368]	; 800e5a8 <_strtod_l+0xb98>
 800e438:	f04f 38ff 	mov.w	r8, #4294967295
 800e43c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e43e:	4620      	mov	r0, r4
 800e440:	f001 fe0c 	bl	801005c <_Bfree>
 800e444:	4639      	mov	r1, r7
 800e446:	4620      	mov	r0, r4
 800e448:	f001 fe08 	bl	801005c <_Bfree>
 800e44c:	4631      	mov	r1, r6
 800e44e:	4620      	mov	r0, r4
 800e450:	f001 fe04 	bl	801005c <_Bfree>
 800e454:	4629      	mov	r1, r5
 800e456:	4620      	mov	r0, r4
 800e458:	f001 fe00 	bl	801005c <_Bfree>
 800e45c:	e60f      	b.n	800e07e <_strtod_l+0x66e>
 800e45e:	f1b8 0f00 	cmp.w	r8, #0
 800e462:	d112      	bne.n	800e48a <_strtod_l+0xa7a>
 800e464:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e468:	b9b3      	cbnz	r3, 800e498 <_strtod_l+0xa88>
 800e46a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800e46e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e476:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800e47a:	d401      	bmi.n	800e480 <_strtod_l+0xa70>
 800e47c:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e480:	eeb1 7b48 	vneg.f64	d7, d8
 800e484:	ec53 2b17 	vmov	r2, r3, d7
 800e488:	e7a8      	b.n	800e3dc <_strtod_l+0x9cc>
 800e48a:	f1b8 0f01 	cmp.w	r8, #1
 800e48e:	d103      	bne.n	800e498 <_strtod_l+0xa88>
 800e490:	f1b9 0f00 	cmp.w	r9, #0
 800e494:	f43f ad7d 	beq.w	800df92 <_strtod_l+0x582>
 800e498:	4b46      	ldr	r3, [pc, #280]	; (800e5b4 <_strtod_l+0xba4>)
 800e49a:	2200      	movs	r2, #0
 800e49c:	e79c      	b.n	800e3d8 <_strtod_l+0x9c8>
 800e49e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800e4a2:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e4a6:	f1ba 0f00 	cmp.w	sl, #0
 800e4aa:	d0e9      	beq.n	800e480 <_strtod_l+0xa70>
 800e4ac:	ec53 2b18 	vmov	r2, r3, d8
 800e4b0:	e794      	b.n	800e3dc <_strtod_l+0x9cc>
 800e4b2:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800e4b6:	9b04      	ldr	r3, [sp, #16]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d1bf      	bne.n	800e43c <_strtod_l+0xa2c>
 800e4bc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e4c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e4c2:	0d1b      	lsrs	r3, r3, #20
 800e4c4:	051b      	lsls	r3, r3, #20
 800e4c6:	429a      	cmp	r2, r3
 800e4c8:	d1b8      	bne.n	800e43c <_strtod_l+0xa2c>
 800e4ca:	ec51 0b18 	vmov	r0, r1, d8
 800e4ce:	f7f2 f933 	bl	8000738 <__aeabi_d2lz>
 800e4d2:	f7f2 f8eb 	bl	80006ac <__aeabi_l2d>
 800e4d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e4da:	ec41 0b17 	vmov	d7, r0, r1
 800e4de:	ea43 0308 	orr.w	r3, r3, r8
 800e4e2:	ea53 030a 	orrs.w	r3, r3, sl
 800e4e6:	ee38 8b47 	vsub.f64	d8, d8, d7
 800e4ea:	d03e      	beq.n	800e56a <_strtod_l+0xb5a>
 800e4ec:	eeb4 8bca 	vcmpe.f64	d8, d10
 800e4f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4f4:	f53f ace2 	bmi.w	800debc <_strtod_l+0x4ac>
 800e4f8:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800e4fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e500:	dd9c      	ble.n	800e43c <_strtod_l+0xa2c>
 800e502:	e4db      	b.n	800debc <_strtod_l+0x4ac>
 800e504:	9904      	ldr	r1, [sp, #16]
 800e506:	b301      	cbz	r1, 800e54a <_strtod_l+0xb3a>
 800e508:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e50a:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800e50e:	d81c      	bhi.n	800e54a <_strtod_l+0xb3a>
 800e510:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800e598 <_strtod_l+0xb88>
 800e514:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e51c:	d811      	bhi.n	800e542 <_strtod_l+0xb32>
 800e51e:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800e522:	ee18 3a10 	vmov	r3, s16
 800e526:	2b01      	cmp	r3, #1
 800e528:	bf38      	it	cc
 800e52a:	2301      	movcc	r3, #1
 800e52c:	ee08 3a10 	vmov	s16, r3
 800e530:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800e534:	f1ba 0f00 	cmp.w	sl, #0
 800e538:	d114      	bne.n	800e564 <_strtod_l+0xb54>
 800e53a:	eeb1 7b48 	vneg.f64	d7, d8
 800e53e:	ec53 2b17 	vmov	r2, r3, d7
 800e542:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e544:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 800e548:	1a0b      	subs	r3, r1, r0
 800e54a:	ed9d 0b08 	vldr	d0, [sp, #32]
 800e54e:	ec43 2b1c 	vmov	d12, r2, r3
 800e552:	f002 f8af 	bl	80106b4 <__ulp>
 800e556:	ed9d 7b08 	vldr	d7, [sp, #32]
 800e55a:	eeac 7b00 	vfma.f64	d7, d12, d0
 800e55e:	ec59 8b17 	vmov	r8, r9, d7
 800e562:	e7a8      	b.n	800e4b6 <_strtod_l+0xaa6>
 800e564:	ec53 2b18 	vmov	r2, r3, d8
 800e568:	e7eb      	b.n	800e542 <_strtod_l+0xb32>
 800e56a:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800e56e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e572:	f57f af63 	bpl.w	800e43c <_strtod_l+0xa2c>
 800e576:	e4a1      	b.n	800debc <_strtod_l+0x4ac>
 800e578:	2300      	movs	r3, #0
 800e57a:	930b      	str	r3, [sp, #44]	; 0x2c
 800e57c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e57e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e580:	6013      	str	r3, [r2, #0]
 800e582:	f7ff ba8d 	b.w	800daa0 <_strtod_l+0x90>
 800e586:	2a65      	cmp	r2, #101	; 0x65
 800e588:	f43f ab89 	beq.w	800dc9e <_strtod_l+0x28e>
 800e58c:	2a45      	cmp	r2, #69	; 0x45
 800e58e:	f43f ab86 	beq.w	800dc9e <_strtod_l+0x28e>
 800e592:	2101      	movs	r1, #1
 800e594:	f7ff bbbe 	b.w	800dd14 <_strtod_l+0x304>
 800e598:	ffc00000 	.word	0xffc00000
 800e59c:	41dfffff 	.word	0x41dfffff
 800e5a0:	000fffff 	.word	0x000fffff
 800e5a4:	7ff00000 	.word	0x7ff00000
 800e5a8:	7fefffff 	.word	0x7fefffff
 800e5ac:	3ff00000 	.word	0x3ff00000
 800e5b0:	7c9fffff 	.word	0x7c9fffff
 800e5b4:	bff00000 	.word	0xbff00000
 800e5b8:	7fe00000 	.word	0x7fe00000

0800e5bc <_strtod_r>:
 800e5bc:	4b01      	ldr	r3, [pc, #4]	; (800e5c4 <_strtod_r+0x8>)
 800e5be:	f7ff ba27 	b.w	800da10 <_strtod_l>
 800e5c2:	bf00      	nop
 800e5c4:	24000078 	.word	0x24000078

0800e5c8 <_strtol_l.isra.0>:
 800e5c8:	2b01      	cmp	r3, #1
 800e5ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5ce:	d001      	beq.n	800e5d4 <_strtol_l.isra.0+0xc>
 800e5d0:	2b24      	cmp	r3, #36	; 0x24
 800e5d2:	d906      	bls.n	800e5e2 <_strtol_l.isra.0+0x1a>
 800e5d4:	f7fe fa00 	bl	800c9d8 <__errno>
 800e5d8:	2316      	movs	r3, #22
 800e5da:	6003      	str	r3, [r0, #0]
 800e5dc:	2000      	movs	r0, #0
 800e5de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5e2:	4f3a      	ldr	r7, [pc, #232]	; (800e6cc <_strtol_l.isra.0+0x104>)
 800e5e4:	468e      	mov	lr, r1
 800e5e6:	4676      	mov	r6, lr
 800e5e8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800e5ec:	5de5      	ldrb	r5, [r4, r7]
 800e5ee:	f015 0508 	ands.w	r5, r5, #8
 800e5f2:	d1f8      	bne.n	800e5e6 <_strtol_l.isra.0+0x1e>
 800e5f4:	2c2d      	cmp	r4, #45	; 0x2d
 800e5f6:	d134      	bne.n	800e662 <_strtol_l.isra.0+0x9a>
 800e5f8:	f89e 4000 	ldrb.w	r4, [lr]
 800e5fc:	f04f 0801 	mov.w	r8, #1
 800e600:	f106 0e02 	add.w	lr, r6, #2
 800e604:	2b00      	cmp	r3, #0
 800e606:	d05c      	beq.n	800e6c2 <_strtol_l.isra.0+0xfa>
 800e608:	2b10      	cmp	r3, #16
 800e60a:	d10c      	bne.n	800e626 <_strtol_l.isra.0+0x5e>
 800e60c:	2c30      	cmp	r4, #48	; 0x30
 800e60e:	d10a      	bne.n	800e626 <_strtol_l.isra.0+0x5e>
 800e610:	f89e 4000 	ldrb.w	r4, [lr]
 800e614:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e618:	2c58      	cmp	r4, #88	; 0x58
 800e61a:	d14d      	bne.n	800e6b8 <_strtol_l.isra.0+0xf0>
 800e61c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800e620:	2310      	movs	r3, #16
 800e622:	f10e 0e02 	add.w	lr, lr, #2
 800e626:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800e62a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e62e:	2600      	movs	r6, #0
 800e630:	fbbc f9f3 	udiv	r9, ip, r3
 800e634:	4635      	mov	r5, r6
 800e636:	fb03 ca19 	mls	sl, r3, r9, ip
 800e63a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800e63e:	2f09      	cmp	r7, #9
 800e640:	d818      	bhi.n	800e674 <_strtol_l.isra.0+0xac>
 800e642:	463c      	mov	r4, r7
 800e644:	42a3      	cmp	r3, r4
 800e646:	dd24      	ble.n	800e692 <_strtol_l.isra.0+0xca>
 800e648:	2e00      	cmp	r6, #0
 800e64a:	db1f      	blt.n	800e68c <_strtol_l.isra.0+0xc4>
 800e64c:	45a9      	cmp	r9, r5
 800e64e:	d31d      	bcc.n	800e68c <_strtol_l.isra.0+0xc4>
 800e650:	d101      	bne.n	800e656 <_strtol_l.isra.0+0x8e>
 800e652:	45a2      	cmp	sl, r4
 800e654:	db1a      	blt.n	800e68c <_strtol_l.isra.0+0xc4>
 800e656:	fb05 4503 	mla	r5, r5, r3, r4
 800e65a:	2601      	movs	r6, #1
 800e65c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800e660:	e7eb      	b.n	800e63a <_strtol_l.isra.0+0x72>
 800e662:	2c2b      	cmp	r4, #43	; 0x2b
 800e664:	bf08      	it	eq
 800e666:	f89e 4000 	ldrbeq.w	r4, [lr]
 800e66a:	46a8      	mov	r8, r5
 800e66c:	bf08      	it	eq
 800e66e:	f106 0e02 	addeq.w	lr, r6, #2
 800e672:	e7c7      	b.n	800e604 <_strtol_l.isra.0+0x3c>
 800e674:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800e678:	2f19      	cmp	r7, #25
 800e67a:	d801      	bhi.n	800e680 <_strtol_l.isra.0+0xb8>
 800e67c:	3c37      	subs	r4, #55	; 0x37
 800e67e:	e7e1      	b.n	800e644 <_strtol_l.isra.0+0x7c>
 800e680:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800e684:	2f19      	cmp	r7, #25
 800e686:	d804      	bhi.n	800e692 <_strtol_l.isra.0+0xca>
 800e688:	3c57      	subs	r4, #87	; 0x57
 800e68a:	e7db      	b.n	800e644 <_strtol_l.isra.0+0x7c>
 800e68c:	f04f 36ff 	mov.w	r6, #4294967295
 800e690:	e7e4      	b.n	800e65c <_strtol_l.isra.0+0x94>
 800e692:	2e00      	cmp	r6, #0
 800e694:	da05      	bge.n	800e6a2 <_strtol_l.isra.0+0xda>
 800e696:	2322      	movs	r3, #34	; 0x22
 800e698:	6003      	str	r3, [r0, #0]
 800e69a:	4665      	mov	r5, ip
 800e69c:	b942      	cbnz	r2, 800e6b0 <_strtol_l.isra.0+0xe8>
 800e69e:	4628      	mov	r0, r5
 800e6a0:	e79d      	b.n	800e5de <_strtol_l.isra.0+0x16>
 800e6a2:	f1b8 0f00 	cmp.w	r8, #0
 800e6a6:	d000      	beq.n	800e6aa <_strtol_l.isra.0+0xe2>
 800e6a8:	426d      	negs	r5, r5
 800e6aa:	2a00      	cmp	r2, #0
 800e6ac:	d0f7      	beq.n	800e69e <_strtol_l.isra.0+0xd6>
 800e6ae:	b10e      	cbz	r6, 800e6b4 <_strtol_l.isra.0+0xec>
 800e6b0:	f10e 31ff 	add.w	r1, lr, #4294967295
 800e6b4:	6011      	str	r1, [r2, #0]
 800e6b6:	e7f2      	b.n	800e69e <_strtol_l.isra.0+0xd6>
 800e6b8:	2430      	movs	r4, #48	; 0x30
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d1b3      	bne.n	800e626 <_strtol_l.isra.0+0x5e>
 800e6be:	2308      	movs	r3, #8
 800e6c0:	e7b1      	b.n	800e626 <_strtol_l.isra.0+0x5e>
 800e6c2:	2c30      	cmp	r4, #48	; 0x30
 800e6c4:	d0a4      	beq.n	800e610 <_strtol_l.isra.0+0x48>
 800e6c6:	230a      	movs	r3, #10
 800e6c8:	e7ad      	b.n	800e626 <_strtol_l.isra.0+0x5e>
 800e6ca:	bf00      	nop
 800e6cc:	08012451 	.word	0x08012451

0800e6d0 <_strtol_r>:
 800e6d0:	f7ff bf7a 	b.w	800e5c8 <_strtol_l.isra.0>

0800e6d4 <strtol>:
 800e6d4:	4613      	mov	r3, r2
 800e6d6:	460a      	mov	r2, r1
 800e6d8:	4601      	mov	r1, r0
 800e6da:	4802      	ldr	r0, [pc, #8]	; (800e6e4 <strtol+0x10>)
 800e6dc:	6800      	ldr	r0, [r0, #0]
 800e6de:	f7ff bf73 	b.w	800e5c8 <_strtol_l.isra.0>
 800e6e2:	bf00      	nop
 800e6e4:	24000010 	.word	0x24000010

0800e6e8 <__swbuf_r>:
 800e6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6ea:	460e      	mov	r6, r1
 800e6ec:	4614      	mov	r4, r2
 800e6ee:	4605      	mov	r5, r0
 800e6f0:	b118      	cbz	r0, 800e6fa <__swbuf_r+0x12>
 800e6f2:	6983      	ldr	r3, [r0, #24]
 800e6f4:	b90b      	cbnz	r3, 800e6fa <__swbuf_r+0x12>
 800e6f6:	f000 ffdf 	bl	800f6b8 <__sinit>
 800e6fa:	4b21      	ldr	r3, [pc, #132]	; (800e780 <__swbuf_r+0x98>)
 800e6fc:	429c      	cmp	r4, r3
 800e6fe:	d12b      	bne.n	800e758 <__swbuf_r+0x70>
 800e700:	686c      	ldr	r4, [r5, #4]
 800e702:	69a3      	ldr	r3, [r4, #24]
 800e704:	60a3      	str	r3, [r4, #8]
 800e706:	89a3      	ldrh	r3, [r4, #12]
 800e708:	071a      	lsls	r2, r3, #28
 800e70a:	d52f      	bpl.n	800e76c <__swbuf_r+0x84>
 800e70c:	6923      	ldr	r3, [r4, #16]
 800e70e:	b36b      	cbz	r3, 800e76c <__swbuf_r+0x84>
 800e710:	6923      	ldr	r3, [r4, #16]
 800e712:	6820      	ldr	r0, [r4, #0]
 800e714:	1ac0      	subs	r0, r0, r3
 800e716:	6963      	ldr	r3, [r4, #20]
 800e718:	b2f6      	uxtb	r6, r6
 800e71a:	4283      	cmp	r3, r0
 800e71c:	4637      	mov	r7, r6
 800e71e:	dc04      	bgt.n	800e72a <__swbuf_r+0x42>
 800e720:	4621      	mov	r1, r4
 800e722:	4628      	mov	r0, r5
 800e724:	f000 ff34 	bl	800f590 <_fflush_r>
 800e728:	bb30      	cbnz	r0, 800e778 <__swbuf_r+0x90>
 800e72a:	68a3      	ldr	r3, [r4, #8]
 800e72c:	3b01      	subs	r3, #1
 800e72e:	60a3      	str	r3, [r4, #8]
 800e730:	6823      	ldr	r3, [r4, #0]
 800e732:	1c5a      	adds	r2, r3, #1
 800e734:	6022      	str	r2, [r4, #0]
 800e736:	701e      	strb	r6, [r3, #0]
 800e738:	6963      	ldr	r3, [r4, #20]
 800e73a:	3001      	adds	r0, #1
 800e73c:	4283      	cmp	r3, r0
 800e73e:	d004      	beq.n	800e74a <__swbuf_r+0x62>
 800e740:	89a3      	ldrh	r3, [r4, #12]
 800e742:	07db      	lsls	r3, r3, #31
 800e744:	d506      	bpl.n	800e754 <__swbuf_r+0x6c>
 800e746:	2e0a      	cmp	r6, #10
 800e748:	d104      	bne.n	800e754 <__swbuf_r+0x6c>
 800e74a:	4621      	mov	r1, r4
 800e74c:	4628      	mov	r0, r5
 800e74e:	f000 ff1f 	bl	800f590 <_fflush_r>
 800e752:	b988      	cbnz	r0, 800e778 <__swbuf_r+0x90>
 800e754:	4638      	mov	r0, r7
 800e756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e758:	4b0a      	ldr	r3, [pc, #40]	; (800e784 <__swbuf_r+0x9c>)
 800e75a:	429c      	cmp	r4, r3
 800e75c:	d101      	bne.n	800e762 <__swbuf_r+0x7a>
 800e75e:	68ac      	ldr	r4, [r5, #8]
 800e760:	e7cf      	b.n	800e702 <__swbuf_r+0x1a>
 800e762:	4b09      	ldr	r3, [pc, #36]	; (800e788 <__swbuf_r+0xa0>)
 800e764:	429c      	cmp	r4, r3
 800e766:	bf08      	it	eq
 800e768:	68ec      	ldreq	r4, [r5, #12]
 800e76a:	e7ca      	b.n	800e702 <__swbuf_r+0x1a>
 800e76c:	4621      	mov	r1, r4
 800e76e:	4628      	mov	r0, r5
 800e770:	f000 f80c 	bl	800e78c <__swsetup_r>
 800e774:	2800      	cmp	r0, #0
 800e776:	d0cb      	beq.n	800e710 <__swbuf_r+0x28>
 800e778:	f04f 37ff 	mov.w	r7, #4294967295
 800e77c:	e7ea      	b.n	800e754 <__swbuf_r+0x6c>
 800e77e:	bf00      	nop
 800e780:	08012608 	.word	0x08012608
 800e784:	08012628 	.word	0x08012628
 800e788:	080125e8 	.word	0x080125e8

0800e78c <__swsetup_r>:
 800e78c:	4b32      	ldr	r3, [pc, #200]	; (800e858 <__swsetup_r+0xcc>)
 800e78e:	b570      	push	{r4, r5, r6, lr}
 800e790:	681d      	ldr	r5, [r3, #0]
 800e792:	4606      	mov	r6, r0
 800e794:	460c      	mov	r4, r1
 800e796:	b125      	cbz	r5, 800e7a2 <__swsetup_r+0x16>
 800e798:	69ab      	ldr	r3, [r5, #24]
 800e79a:	b913      	cbnz	r3, 800e7a2 <__swsetup_r+0x16>
 800e79c:	4628      	mov	r0, r5
 800e79e:	f000 ff8b 	bl	800f6b8 <__sinit>
 800e7a2:	4b2e      	ldr	r3, [pc, #184]	; (800e85c <__swsetup_r+0xd0>)
 800e7a4:	429c      	cmp	r4, r3
 800e7a6:	d10f      	bne.n	800e7c8 <__swsetup_r+0x3c>
 800e7a8:	686c      	ldr	r4, [r5, #4]
 800e7aa:	89a3      	ldrh	r3, [r4, #12]
 800e7ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e7b0:	0719      	lsls	r1, r3, #28
 800e7b2:	d42c      	bmi.n	800e80e <__swsetup_r+0x82>
 800e7b4:	06dd      	lsls	r5, r3, #27
 800e7b6:	d411      	bmi.n	800e7dc <__swsetup_r+0x50>
 800e7b8:	2309      	movs	r3, #9
 800e7ba:	6033      	str	r3, [r6, #0]
 800e7bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e7c0:	81a3      	strh	r3, [r4, #12]
 800e7c2:	f04f 30ff 	mov.w	r0, #4294967295
 800e7c6:	e03e      	b.n	800e846 <__swsetup_r+0xba>
 800e7c8:	4b25      	ldr	r3, [pc, #148]	; (800e860 <__swsetup_r+0xd4>)
 800e7ca:	429c      	cmp	r4, r3
 800e7cc:	d101      	bne.n	800e7d2 <__swsetup_r+0x46>
 800e7ce:	68ac      	ldr	r4, [r5, #8]
 800e7d0:	e7eb      	b.n	800e7aa <__swsetup_r+0x1e>
 800e7d2:	4b24      	ldr	r3, [pc, #144]	; (800e864 <__swsetup_r+0xd8>)
 800e7d4:	429c      	cmp	r4, r3
 800e7d6:	bf08      	it	eq
 800e7d8:	68ec      	ldreq	r4, [r5, #12]
 800e7da:	e7e6      	b.n	800e7aa <__swsetup_r+0x1e>
 800e7dc:	0758      	lsls	r0, r3, #29
 800e7de:	d512      	bpl.n	800e806 <__swsetup_r+0x7a>
 800e7e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e7e2:	b141      	cbz	r1, 800e7f6 <__swsetup_r+0x6a>
 800e7e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e7e8:	4299      	cmp	r1, r3
 800e7ea:	d002      	beq.n	800e7f2 <__swsetup_r+0x66>
 800e7ec:	4630      	mov	r0, r6
 800e7ee:	f002 f8c1 	bl	8010974 <_free_r>
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	6363      	str	r3, [r4, #52]	; 0x34
 800e7f6:	89a3      	ldrh	r3, [r4, #12]
 800e7f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e7fc:	81a3      	strh	r3, [r4, #12]
 800e7fe:	2300      	movs	r3, #0
 800e800:	6063      	str	r3, [r4, #4]
 800e802:	6923      	ldr	r3, [r4, #16]
 800e804:	6023      	str	r3, [r4, #0]
 800e806:	89a3      	ldrh	r3, [r4, #12]
 800e808:	f043 0308 	orr.w	r3, r3, #8
 800e80c:	81a3      	strh	r3, [r4, #12]
 800e80e:	6923      	ldr	r3, [r4, #16]
 800e810:	b94b      	cbnz	r3, 800e826 <__swsetup_r+0x9a>
 800e812:	89a3      	ldrh	r3, [r4, #12]
 800e814:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e81c:	d003      	beq.n	800e826 <__swsetup_r+0x9a>
 800e81e:	4621      	mov	r1, r4
 800e820:	4630      	mov	r0, r6
 800e822:	f001 fb81 	bl	800ff28 <__smakebuf_r>
 800e826:	89a0      	ldrh	r0, [r4, #12]
 800e828:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e82c:	f010 0301 	ands.w	r3, r0, #1
 800e830:	d00a      	beq.n	800e848 <__swsetup_r+0xbc>
 800e832:	2300      	movs	r3, #0
 800e834:	60a3      	str	r3, [r4, #8]
 800e836:	6963      	ldr	r3, [r4, #20]
 800e838:	425b      	negs	r3, r3
 800e83a:	61a3      	str	r3, [r4, #24]
 800e83c:	6923      	ldr	r3, [r4, #16]
 800e83e:	b943      	cbnz	r3, 800e852 <__swsetup_r+0xc6>
 800e840:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e844:	d1ba      	bne.n	800e7bc <__swsetup_r+0x30>
 800e846:	bd70      	pop	{r4, r5, r6, pc}
 800e848:	0781      	lsls	r1, r0, #30
 800e84a:	bf58      	it	pl
 800e84c:	6963      	ldrpl	r3, [r4, #20]
 800e84e:	60a3      	str	r3, [r4, #8]
 800e850:	e7f4      	b.n	800e83c <__swsetup_r+0xb0>
 800e852:	2000      	movs	r0, #0
 800e854:	e7f7      	b.n	800e846 <__swsetup_r+0xba>
 800e856:	bf00      	nop
 800e858:	24000010 	.word	0x24000010
 800e85c:	08012608 	.word	0x08012608
 800e860:	08012628 	.word	0x08012628
 800e864:	080125e8 	.word	0x080125e8

0800e868 <quorem>:
 800e868:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e86c:	6903      	ldr	r3, [r0, #16]
 800e86e:	690c      	ldr	r4, [r1, #16]
 800e870:	42a3      	cmp	r3, r4
 800e872:	4607      	mov	r7, r0
 800e874:	f2c0 8081 	blt.w	800e97a <quorem+0x112>
 800e878:	3c01      	subs	r4, #1
 800e87a:	f101 0814 	add.w	r8, r1, #20
 800e87e:	f100 0514 	add.w	r5, r0, #20
 800e882:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e886:	9301      	str	r3, [sp, #4]
 800e888:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e88c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e890:	3301      	adds	r3, #1
 800e892:	429a      	cmp	r2, r3
 800e894:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e898:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e89c:	fbb2 f6f3 	udiv	r6, r2, r3
 800e8a0:	d331      	bcc.n	800e906 <quorem+0x9e>
 800e8a2:	f04f 0e00 	mov.w	lr, #0
 800e8a6:	4640      	mov	r0, r8
 800e8a8:	46ac      	mov	ip, r5
 800e8aa:	46f2      	mov	sl, lr
 800e8ac:	f850 2b04 	ldr.w	r2, [r0], #4
 800e8b0:	b293      	uxth	r3, r2
 800e8b2:	fb06 e303 	mla	r3, r6, r3, lr
 800e8b6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e8ba:	b29b      	uxth	r3, r3
 800e8bc:	ebaa 0303 	sub.w	r3, sl, r3
 800e8c0:	0c12      	lsrs	r2, r2, #16
 800e8c2:	f8dc a000 	ldr.w	sl, [ip]
 800e8c6:	fb06 e202 	mla	r2, r6, r2, lr
 800e8ca:	fa13 f38a 	uxtah	r3, r3, sl
 800e8ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e8d2:	fa1f fa82 	uxth.w	sl, r2
 800e8d6:	f8dc 2000 	ldr.w	r2, [ip]
 800e8da:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800e8de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e8e2:	b29b      	uxth	r3, r3
 800e8e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e8e8:	4581      	cmp	r9, r0
 800e8ea:	f84c 3b04 	str.w	r3, [ip], #4
 800e8ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e8f2:	d2db      	bcs.n	800e8ac <quorem+0x44>
 800e8f4:	f855 300b 	ldr.w	r3, [r5, fp]
 800e8f8:	b92b      	cbnz	r3, 800e906 <quorem+0x9e>
 800e8fa:	9b01      	ldr	r3, [sp, #4]
 800e8fc:	3b04      	subs	r3, #4
 800e8fe:	429d      	cmp	r5, r3
 800e900:	461a      	mov	r2, r3
 800e902:	d32e      	bcc.n	800e962 <quorem+0xfa>
 800e904:	613c      	str	r4, [r7, #16]
 800e906:	4638      	mov	r0, r7
 800e908:	f001 fe30 	bl	801056c <__mcmp>
 800e90c:	2800      	cmp	r0, #0
 800e90e:	db24      	blt.n	800e95a <quorem+0xf2>
 800e910:	3601      	adds	r6, #1
 800e912:	4628      	mov	r0, r5
 800e914:	f04f 0c00 	mov.w	ip, #0
 800e918:	f858 2b04 	ldr.w	r2, [r8], #4
 800e91c:	f8d0 e000 	ldr.w	lr, [r0]
 800e920:	b293      	uxth	r3, r2
 800e922:	ebac 0303 	sub.w	r3, ip, r3
 800e926:	0c12      	lsrs	r2, r2, #16
 800e928:	fa13 f38e 	uxtah	r3, r3, lr
 800e92c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e930:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e934:	b29b      	uxth	r3, r3
 800e936:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e93a:	45c1      	cmp	r9, r8
 800e93c:	f840 3b04 	str.w	r3, [r0], #4
 800e940:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e944:	d2e8      	bcs.n	800e918 <quorem+0xb0>
 800e946:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e94a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e94e:	b922      	cbnz	r2, 800e95a <quorem+0xf2>
 800e950:	3b04      	subs	r3, #4
 800e952:	429d      	cmp	r5, r3
 800e954:	461a      	mov	r2, r3
 800e956:	d30a      	bcc.n	800e96e <quorem+0x106>
 800e958:	613c      	str	r4, [r7, #16]
 800e95a:	4630      	mov	r0, r6
 800e95c:	b003      	add	sp, #12
 800e95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e962:	6812      	ldr	r2, [r2, #0]
 800e964:	3b04      	subs	r3, #4
 800e966:	2a00      	cmp	r2, #0
 800e968:	d1cc      	bne.n	800e904 <quorem+0x9c>
 800e96a:	3c01      	subs	r4, #1
 800e96c:	e7c7      	b.n	800e8fe <quorem+0x96>
 800e96e:	6812      	ldr	r2, [r2, #0]
 800e970:	3b04      	subs	r3, #4
 800e972:	2a00      	cmp	r2, #0
 800e974:	d1f0      	bne.n	800e958 <quorem+0xf0>
 800e976:	3c01      	subs	r4, #1
 800e978:	e7eb      	b.n	800e952 <quorem+0xea>
 800e97a:	2000      	movs	r0, #0
 800e97c:	e7ee      	b.n	800e95c <quorem+0xf4>
	...

0800e980 <_dtoa_r>:
 800e980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e984:	ec59 8b10 	vmov	r8, r9, d0
 800e988:	b095      	sub	sp, #84	; 0x54
 800e98a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e98c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800e98e:	9107      	str	r1, [sp, #28]
 800e990:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e994:	4606      	mov	r6, r0
 800e996:	9209      	str	r2, [sp, #36]	; 0x24
 800e998:	9310      	str	r3, [sp, #64]	; 0x40
 800e99a:	b975      	cbnz	r5, 800e9ba <_dtoa_r+0x3a>
 800e99c:	2010      	movs	r0, #16
 800e99e:	f001 fb03 	bl	800ffa8 <malloc>
 800e9a2:	4602      	mov	r2, r0
 800e9a4:	6270      	str	r0, [r6, #36]	; 0x24
 800e9a6:	b920      	cbnz	r0, 800e9b2 <_dtoa_r+0x32>
 800e9a8:	4bab      	ldr	r3, [pc, #684]	; (800ec58 <_dtoa_r+0x2d8>)
 800e9aa:	21ea      	movs	r1, #234	; 0xea
 800e9ac:	48ab      	ldr	r0, [pc, #684]	; (800ec5c <_dtoa_r+0x2dc>)
 800e9ae:	f002 fbcf 	bl	8011150 <__assert_func>
 800e9b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e9b6:	6005      	str	r5, [r0, #0]
 800e9b8:	60c5      	str	r5, [r0, #12]
 800e9ba:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e9bc:	6819      	ldr	r1, [r3, #0]
 800e9be:	b151      	cbz	r1, 800e9d6 <_dtoa_r+0x56>
 800e9c0:	685a      	ldr	r2, [r3, #4]
 800e9c2:	604a      	str	r2, [r1, #4]
 800e9c4:	2301      	movs	r3, #1
 800e9c6:	4093      	lsls	r3, r2
 800e9c8:	608b      	str	r3, [r1, #8]
 800e9ca:	4630      	mov	r0, r6
 800e9cc:	f001 fb46 	bl	801005c <_Bfree>
 800e9d0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	601a      	str	r2, [r3, #0]
 800e9d6:	f1b9 0300 	subs.w	r3, r9, #0
 800e9da:	bfbb      	ittet	lt
 800e9dc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e9e0:	9303      	strlt	r3, [sp, #12]
 800e9e2:	2300      	movge	r3, #0
 800e9e4:	2201      	movlt	r2, #1
 800e9e6:	bfac      	ite	ge
 800e9e8:	6023      	strge	r3, [r4, #0]
 800e9ea:	6022      	strlt	r2, [r4, #0]
 800e9ec:	4b9c      	ldr	r3, [pc, #624]	; (800ec60 <_dtoa_r+0x2e0>)
 800e9ee:	9c03      	ldr	r4, [sp, #12]
 800e9f0:	43a3      	bics	r3, r4
 800e9f2:	d11a      	bne.n	800ea2a <_dtoa_r+0xaa>
 800e9f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e9f6:	f242 730f 	movw	r3, #9999	; 0x270f
 800e9fa:	6013      	str	r3, [r2, #0]
 800e9fc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800ea00:	ea53 0308 	orrs.w	r3, r3, r8
 800ea04:	f000 8512 	beq.w	800f42c <_dtoa_r+0xaac>
 800ea08:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ea0a:	b953      	cbnz	r3, 800ea22 <_dtoa_r+0xa2>
 800ea0c:	4b95      	ldr	r3, [pc, #596]	; (800ec64 <_dtoa_r+0x2e4>)
 800ea0e:	e01f      	b.n	800ea50 <_dtoa_r+0xd0>
 800ea10:	4b95      	ldr	r3, [pc, #596]	; (800ec68 <_dtoa_r+0x2e8>)
 800ea12:	9300      	str	r3, [sp, #0]
 800ea14:	3308      	adds	r3, #8
 800ea16:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ea18:	6013      	str	r3, [r2, #0]
 800ea1a:	9800      	ldr	r0, [sp, #0]
 800ea1c:	b015      	add	sp, #84	; 0x54
 800ea1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea22:	4b90      	ldr	r3, [pc, #576]	; (800ec64 <_dtoa_r+0x2e4>)
 800ea24:	9300      	str	r3, [sp, #0]
 800ea26:	3303      	adds	r3, #3
 800ea28:	e7f5      	b.n	800ea16 <_dtoa_r+0x96>
 800ea2a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ea2e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ea32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea36:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ea3a:	d10b      	bne.n	800ea54 <_dtoa_r+0xd4>
 800ea3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ea3e:	2301      	movs	r3, #1
 800ea40:	6013      	str	r3, [r2, #0]
 800ea42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	f000 84ee 	beq.w	800f426 <_dtoa_r+0xaa6>
 800ea4a:	4888      	ldr	r0, [pc, #544]	; (800ec6c <_dtoa_r+0x2ec>)
 800ea4c:	6018      	str	r0, [r3, #0]
 800ea4e:	1e43      	subs	r3, r0, #1
 800ea50:	9300      	str	r3, [sp, #0]
 800ea52:	e7e2      	b.n	800ea1a <_dtoa_r+0x9a>
 800ea54:	a913      	add	r1, sp, #76	; 0x4c
 800ea56:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ea5a:	aa12      	add	r2, sp, #72	; 0x48
 800ea5c:	4630      	mov	r0, r6
 800ea5e:	f001 fea5 	bl	80107ac <__d2b>
 800ea62:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800ea66:	4605      	mov	r5, r0
 800ea68:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ea6a:	2900      	cmp	r1, #0
 800ea6c:	d047      	beq.n	800eafe <_dtoa_r+0x17e>
 800ea6e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800ea70:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ea74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ea78:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800ea7c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ea80:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800ea84:	2400      	movs	r4, #0
 800ea86:	ec43 2b16 	vmov	d6, r2, r3
 800ea8a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800ea8e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800ec40 <_dtoa_r+0x2c0>
 800ea92:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ea96:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800ec48 <_dtoa_r+0x2c8>
 800ea9a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ea9e:	eeb0 7b46 	vmov.f64	d7, d6
 800eaa2:	ee06 1a90 	vmov	s13, r1
 800eaa6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800eaaa:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800ec50 <_dtoa_r+0x2d0>
 800eaae:	eea5 7b06 	vfma.f64	d7, d5, d6
 800eab2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800eab6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800eaba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eabe:	ee16 ba90 	vmov	fp, s13
 800eac2:	9411      	str	r4, [sp, #68]	; 0x44
 800eac4:	d508      	bpl.n	800ead8 <_dtoa_r+0x158>
 800eac6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800eaca:	eeb4 6b47 	vcmp.f64	d6, d7
 800eace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ead2:	bf18      	it	ne
 800ead4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800ead8:	f1bb 0f16 	cmp.w	fp, #22
 800eadc:	d832      	bhi.n	800eb44 <_dtoa_r+0x1c4>
 800eade:	4b64      	ldr	r3, [pc, #400]	; (800ec70 <_dtoa_r+0x2f0>)
 800eae0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800eae4:	ed93 7b00 	vldr	d7, [r3]
 800eae8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800eaec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800eaf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaf4:	d501      	bpl.n	800eafa <_dtoa_r+0x17a>
 800eaf6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800eafa:	2300      	movs	r3, #0
 800eafc:	e023      	b.n	800eb46 <_dtoa_r+0x1c6>
 800eafe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800eb00:	4401      	add	r1, r0
 800eb02:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800eb06:	2b20      	cmp	r3, #32
 800eb08:	bfc3      	ittte	gt
 800eb0a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800eb0e:	fa04 f303 	lslgt.w	r3, r4, r3
 800eb12:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800eb16:	f1c3 0320 	rsble	r3, r3, #32
 800eb1a:	bfc6      	itte	gt
 800eb1c:	fa28 f804 	lsrgt.w	r8, r8, r4
 800eb20:	ea43 0308 	orrgt.w	r3, r3, r8
 800eb24:	fa08 f303 	lslle.w	r3, r8, r3
 800eb28:	ee07 3a90 	vmov	s15, r3
 800eb2c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800eb30:	3901      	subs	r1, #1
 800eb32:	ed8d 7b00 	vstr	d7, [sp]
 800eb36:	9c01      	ldr	r4, [sp, #4]
 800eb38:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb3c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800eb40:	2401      	movs	r4, #1
 800eb42:	e7a0      	b.n	800ea86 <_dtoa_r+0x106>
 800eb44:	2301      	movs	r3, #1
 800eb46:	930f      	str	r3, [sp, #60]	; 0x3c
 800eb48:	1a43      	subs	r3, r0, r1
 800eb4a:	1e5a      	subs	r2, r3, #1
 800eb4c:	bf45      	ittet	mi
 800eb4e:	f1c3 0301 	rsbmi	r3, r3, #1
 800eb52:	9305      	strmi	r3, [sp, #20]
 800eb54:	2300      	movpl	r3, #0
 800eb56:	2300      	movmi	r3, #0
 800eb58:	9206      	str	r2, [sp, #24]
 800eb5a:	bf54      	ite	pl
 800eb5c:	9305      	strpl	r3, [sp, #20]
 800eb5e:	9306      	strmi	r3, [sp, #24]
 800eb60:	f1bb 0f00 	cmp.w	fp, #0
 800eb64:	db18      	blt.n	800eb98 <_dtoa_r+0x218>
 800eb66:	9b06      	ldr	r3, [sp, #24]
 800eb68:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800eb6c:	445b      	add	r3, fp
 800eb6e:	9306      	str	r3, [sp, #24]
 800eb70:	2300      	movs	r3, #0
 800eb72:	9a07      	ldr	r2, [sp, #28]
 800eb74:	2a09      	cmp	r2, #9
 800eb76:	d849      	bhi.n	800ec0c <_dtoa_r+0x28c>
 800eb78:	2a05      	cmp	r2, #5
 800eb7a:	bfc4      	itt	gt
 800eb7c:	3a04      	subgt	r2, #4
 800eb7e:	9207      	strgt	r2, [sp, #28]
 800eb80:	9a07      	ldr	r2, [sp, #28]
 800eb82:	f1a2 0202 	sub.w	r2, r2, #2
 800eb86:	bfcc      	ite	gt
 800eb88:	2400      	movgt	r4, #0
 800eb8a:	2401      	movle	r4, #1
 800eb8c:	2a03      	cmp	r2, #3
 800eb8e:	d848      	bhi.n	800ec22 <_dtoa_r+0x2a2>
 800eb90:	e8df f002 	tbb	[pc, r2]
 800eb94:	3a2c2e0b 	.word	0x3a2c2e0b
 800eb98:	9b05      	ldr	r3, [sp, #20]
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	eba3 030b 	sub.w	r3, r3, fp
 800eba0:	9305      	str	r3, [sp, #20]
 800eba2:	920e      	str	r2, [sp, #56]	; 0x38
 800eba4:	f1cb 0300 	rsb	r3, fp, #0
 800eba8:	e7e3      	b.n	800eb72 <_dtoa_r+0x1f2>
 800ebaa:	2200      	movs	r2, #0
 800ebac:	9208      	str	r2, [sp, #32]
 800ebae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ebb0:	2a00      	cmp	r2, #0
 800ebb2:	dc39      	bgt.n	800ec28 <_dtoa_r+0x2a8>
 800ebb4:	f04f 0a01 	mov.w	sl, #1
 800ebb8:	46d1      	mov	r9, sl
 800ebba:	4652      	mov	r2, sl
 800ebbc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ebc0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800ebc2:	2100      	movs	r1, #0
 800ebc4:	6079      	str	r1, [r7, #4]
 800ebc6:	2004      	movs	r0, #4
 800ebc8:	f100 0c14 	add.w	ip, r0, #20
 800ebcc:	4594      	cmp	ip, r2
 800ebce:	6879      	ldr	r1, [r7, #4]
 800ebd0:	d92f      	bls.n	800ec32 <_dtoa_r+0x2b2>
 800ebd2:	4630      	mov	r0, r6
 800ebd4:	930c      	str	r3, [sp, #48]	; 0x30
 800ebd6:	f001 fa01 	bl	800ffdc <_Balloc>
 800ebda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ebdc:	9000      	str	r0, [sp, #0]
 800ebde:	4602      	mov	r2, r0
 800ebe0:	2800      	cmp	r0, #0
 800ebe2:	d149      	bne.n	800ec78 <_dtoa_r+0x2f8>
 800ebe4:	4b23      	ldr	r3, [pc, #140]	; (800ec74 <_dtoa_r+0x2f4>)
 800ebe6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ebea:	e6df      	b.n	800e9ac <_dtoa_r+0x2c>
 800ebec:	2201      	movs	r2, #1
 800ebee:	e7dd      	b.n	800ebac <_dtoa_r+0x22c>
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	9208      	str	r2, [sp, #32]
 800ebf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ebf6:	eb0b 0a02 	add.w	sl, fp, r2
 800ebfa:	f10a 0901 	add.w	r9, sl, #1
 800ebfe:	464a      	mov	r2, r9
 800ec00:	2a01      	cmp	r2, #1
 800ec02:	bfb8      	it	lt
 800ec04:	2201      	movlt	r2, #1
 800ec06:	e7db      	b.n	800ebc0 <_dtoa_r+0x240>
 800ec08:	2201      	movs	r2, #1
 800ec0a:	e7f2      	b.n	800ebf2 <_dtoa_r+0x272>
 800ec0c:	2401      	movs	r4, #1
 800ec0e:	2200      	movs	r2, #0
 800ec10:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800ec14:	f04f 3aff 	mov.w	sl, #4294967295
 800ec18:	2100      	movs	r1, #0
 800ec1a:	46d1      	mov	r9, sl
 800ec1c:	2212      	movs	r2, #18
 800ec1e:	9109      	str	r1, [sp, #36]	; 0x24
 800ec20:	e7ce      	b.n	800ebc0 <_dtoa_r+0x240>
 800ec22:	2201      	movs	r2, #1
 800ec24:	9208      	str	r2, [sp, #32]
 800ec26:	e7f5      	b.n	800ec14 <_dtoa_r+0x294>
 800ec28:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800ec2c:	46d1      	mov	r9, sl
 800ec2e:	4652      	mov	r2, sl
 800ec30:	e7c6      	b.n	800ebc0 <_dtoa_r+0x240>
 800ec32:	3101      	adds	r1, #1
 800ec34:	6079      	str	r1, [r7, #4]
 800ec36:	0040      	lsls	r0, r0, #1
 800ec38:	e7c6      	b.n	800ebc8 <_dtoa_r+0x248>
 800ec3a:	bf00      	nop
 800ec3c:	f3af 8000 	nop.w
 800ec40:	636f4361 	.word	0x636f4361
 800ec44:	3fd287a7 	.word	0x3fd287a7
 800ec48:	8b60c8b3 	.word	0x8b60c8b3
 800ec4c:	3fc68a28 	.word	0x3fc68a28
 800ec50:	509f79fb 	.word	0x509f79fb
 800ec54:	3fd34413 	.word	0x3fd34413
 800ec58:	0801255e 	.word	0x0801255e
 800ec5c:	08012575 	.word	0x08012575
 800ec60:	7ff00000 	.word	0x7ff00000
 800ec64:	0801255a 	.word	0x0801255a
 800ec68:	08012551 	.word	0x08012551
 800ec6c:	080123d1 	.word	0x080123d1
 800ec70:	08012750 	.word	0x08012750
 800ec74:	080125d4 	.word	0x080125d4
 800ec78:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800ec7a:	9900      	ldr	r1, [sp, #0]
 800ec7c:	6011      	str	r1, [r2, #0]
 800ec7e:	f1b9 0f0e 	cmp.w	r9, #14
 800ec82:	d872      	bhi.n	800ed6a <_dtoa_r+0x3ea>
 800ec84:	2c00      	cmp	r4, #0
 800ec86:	d070      	beq.n	800ed6a <_dtoa_r+0x3ea>
 800ec88:	f1bb 0f00 	cmp.w	fp, #0
 800ec8c:	f340 80a6 	ble.w	800eddc <_dtoa_r+0x45c>
 800ec90:	49ca      	ldr	r1, [pc, #808]	; (800efbc <_dtoa_r+0x63c>)
 800ec92:	f00b 020f 	and.w	r2, fp, #15
 800ec96:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800ec9a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ec9e:	ed92 7b00 	vldr	d7, [r2]
 800eca2:	ea4f 112b 	mov.w	r1, fp, asr #4
 800eca6:	f000 808d 	beq.w	800edc4 <_dtoa_r+0x444>
 800ecaa:	4ac5      	ldr	r2, [pc, #788]	; (800efc0 <_dtoa_r+0x640>)
 800ecac:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800ecb0:	ed92 6b08 	vldr	d6, [r2, #32]
 800ecb4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800ecb8:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ecbc:	f001 010f 	and.w	r1, r1, #15
 800ecc0:	2203      	movs	r2, #3
 800ecc2:	48bf      	ldr	r0, [pc, #764]	; (800efc0 <_dtoa_r+0x640>)
 800ecc4:	2900      	cmp	r1, #0
 800ecc6:	d17f      	bne.n	800edc8 <_dtoa_r+0x448>
 800ecc8:	ed9d 6b02 	vldr	d6, [sp, #8]
 800eccc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ecd0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ecd4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ecd6:	2900      	cmp	r1, #0
 800ecd8:	f000 80b2 	beq.w	800ee40 <_dtoa_r+0x4c0>
 800ecdc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ece0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ece4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ece8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecec:	f140 80a8 	bpl.w	800ee40 <_dtoa_r+0x4c0>
 800ecf0:	f1b9 0f00 	cmp.w	r9, #0
 800ecf4:	f000 80a4 	beq.w	800ee40 <_dtoa_r+0x4c0>
 800ecf8:	f1ba 0f00 	cmp.w	sl, #0
 800ecfc:	dd31      	ble.n	800ed62 <_dtoa_r+0x3e2>
 800ecfe:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800ed02:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ed06:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ed0a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ed0e:	3201      	adds	r2, #1
 800ed10:	4650      	mov	r0, sl
 800ed12:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ed16:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800ed1a:	ee07 2a90 	vmov	s15, r2
 800ed1e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ed22:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ed26:	ed8d 5b02 	vstr	d5, [sp, #8]
 800ed2a:	9c03      	ldr	r4, [sp, #12]
 800ed2c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ed30:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800ed34:	2800      	cmp	r0, #0
 800ed36:	f040 8086 	bne.w	800ee46 <_dtoa_r+0x4c6>
 800ed3a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ed3e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ed42:	ec42 1b17 	vmov	d7, r1, r2
 800ed46:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ed4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed4e:	f300 8272 	bgt.w	800f236 <_dtoa_r+0x8b6>
 800ed52:	eeb1 7b47 	vneg.f64	d7, d7
 800ed56:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ed5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed5e:	f100 8267 	bmi.w	800f230 <_dtoa_r+0x8b0>
 800ed62:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800ed66:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800ed6a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ed6c:	2a00      	cmp	r2, #0
 800ed6e:	f2c0 8129 	blt.w	800efc4 <_dtoa_r+0x644>
 800ed72:	f1bb 0f0e 	cmp.w	fp, #14
 800ed76:	f300 8125 	bgt.w	800efc4 <_dtoa_r+0x644>
 800ed7a:	4b90      	ldr	r3, [pc, #576]	; (800efbc <_dtoa_r+0x63c>)
 800ed7c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ed80:	ed93 6b00 	vldr	d6, [r3]
 800ed84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	f280 80c3 	bge.w	800ef12 <_dtoa_r+0x592>
 800ed8c:	f1b9 0f00 	cmp.w	r9, #0
 800ed90:	f300 80bf 	bgt.w	800ef12 <_dtoa_r+0x592>
 800ed94:	f040 824c 	bne.w	800f230 <_dtoa_r+0x8b0>
 800ed98:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ed9c:	ee26 6b07 	vmul.f64	d6, d6, d7
 800eda0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800eda4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800eda8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edac:	464c      	mov	r4, r9
 800edae:	464f      	mov	r7, r9
 800edb0:	f280 8222 	bge.w	800f1f8 <_dtoa_r+0x878>
 800edb4:	f8dd 8000 	ldr.w	r8, [sp]
 800edb8:	2331      	movs	r3, #49	; 0x31
 800edba:	f808 3b01 	strb.w	r3, [r8], #1
 800edbe:	f10b 0b01 	add.w	fp, fp, #1
 800edc2:	e21e      	b.n	800f202 <_dtoa_r+0x882>
 800edc4:	2202      	movs	r2, #2
 800edc6:	e77c      	b.n	800ecc2 <_dtoa_r+0x342>
 800edc8:	07cc      	lsls	r4, r1, #31
 800edca:	d504      	bpl.n	800edd6 <_dtoa_r+0x456>
 800edcc:	ed90 6b00 	vldr	d6, [r0]
 800edd0:	3201      	adds	r2, #1
 800edd2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800edd6:	1049      	asrs	r1, r1, #1
 800edd8:	3008      	adds	r0, #8
 800edda:	e773      	b.n	800ecc4 <_dtoa_r+0x344>
 800eddc:	d02e      	beq.n	800ee3c <_dtoa_r+0x4bc>
 800edde:	f1cb 0100 	rsb	r1, fp, #0
 800ede2:	4a76      	ldr	r2, [pc, #472]	; (800efbc <_dtoa_r+0x63c>)
 800ede4:	f001 000f 	and.w	r0, r1, #15
 800ede8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800edec:	ed92 7b00 	vldr	d7, [r2]
 800edf0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800edf4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800edf8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800edfc:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800ee00:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800ee04:	486e      	ldr	r0, [pc, #440]	; (800efc0 <_dtoa_r+0x640>)
 800ee06:	1109      	asrs	r1, r1, #4
 800ee08:	2400      	movs	r4, #0
 800ee0a:	2202      	movs	r2, #2
 800ee0c:	b939      	cbnz	r1, 800ee1e <_dtoa_r+0x49e>
 800ee0e:	2c00      	cmp	r4, #0
 800ee10:	f43f af60 	beq.w	800ecd4 <_dtoa_r+0x354>
 800ee14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ee18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ee1c:	e75a      	b.n	800ecd4 <_dtoa_r+0x354>
 800ee1e:	07cf      	lsls	r7, r1, #31
 800ee20:	d509      	bpl.n	800ee36 <_dtoa_r+0x4b6>
 800ee22:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800ee26:	ed90 7b00 	vldr	d7, [r0]
 800ee2a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ee2e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800ee32:	3201      	adds	r2, #1
 800ee34:	2401      	movs	r4, #1
 800ee36:	1049      	asrs	r1, r1, #1
 800ee38:	3008      	adds	r0, #8
 800ee3a:	e7e7      	b.n	800ee0c <_dtoa_r+0x48c>
 800ee3c:	2202      	movs	r2, #2
 800ee3e:	e749      	b.n	800ecd4 <_dtoa_r+0x354>
 800ee40:	465f      	mov	r7, fp
 800ee42:	4648      	mov	r0, r9
 800ee44:	e765      	b.n	800ed12 <_dtoa_r+0x392>
 800ee46:	ec42 1b17 	vmov	d7, r1, r2
 800ee4a:	4a5c      	ldr	r2, [pc, #368]	; (800efbc <_dtoa_r+0x63c>)
 800ee4c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ee50:	ed12 4b02 	vldr	d4, [r2, #-8]
 800ee54:	9a00      	ldr	r2, [sp, #0]
 800ee56:	1814      	adds	r4, r2, r0
 800ee58:	9a08      	ldr	r2, [sp, #32]
 800ee5a:	b352      	cbz	r2, 800eeb2 <_dtoa_r+0x532>
 800ee5c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800ee60:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800ee64:	f8dd 8000 	ldr.w	r8, [sp]
 800ee68:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800ee6c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ee70:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ee74:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ee78:	ee14 2a90 	vmov	r2, s9
 800ee7c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ee80:	3230      	adds	r2, #48	; 0x30
 800ee82:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ee86:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ee8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee8e:	f808 2b01 	strb.w	r2, [r8], #1
 800ee92:	d439      	bmi.n	800ef08 <_dtoa_r+0x588>
 800ee94:	ee32 5b46 	vsub.f64	d5, d2, d6
 800ee98:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800ee9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eea0:	d472      	bmi.n	800ef88 <_dtoa_r+0x608>
 800eea2:	45a0      	cmp	r8, r4
 800eea4:	f43f af5d 	beq.w	800ed62 <_dtoa_r+0x3e2>
 800eea8:	ee27 7b03 	vmul.f64	d7, d7, d3
 800eeac:	ee26 6b03 	vmul.f64	d6, d6, d3
 800eeb0:	e7e0      	b.n	800ee74 <_dtoa_r+0x4f4>
 800eeb2:	f8dd 8000 	ldr.w	r8, [sp]
 800eeb6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800eeba:	4621      	mov	r1, r4
 800eebc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800eec0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800eec4:	ee14 2a90 	vmov	r2, s9
 800eec8:	3230      	adds	r2, #48	; 0x30
 800eeca:	f808 2b01 	strb.w	r2, [r8], #1
 800eece:	45a0      	cmp	r8, r4
 800eed0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800eed4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800eed8:	d118      	bne.n	800ef0c <_dtoa_r+0x58c>
 800eeda:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800eede:	ee37 4b05 	vadd.f64	d4, d7, d5
 800eee2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800eee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeea:	dc4d      	bgt.n	800ef88 <_dtoa_r+0x608>
 800eeec:	ee35 7b47 	vsub.f64	d7, d5, d7
 800eef0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800eef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eef8:	f57f af33 	bpl.w	800ed62 <_dtoa_r+0x3e2>
 800eefc:	4688      	mov	r8, r1
 800eefe:	3901      	subs	r1, #1
 800ef00:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800ef04:	2b30      	cmp	r3, #48	; 0x30
 800ef06:	d0f9      	beq.n	800eefc <_dtoa_r+0x57c>
 800ef08:	46bb      	mov	fp, r7
 800ef0a:	e02a      	b.n	800ef62 <_dtoa_r+0x5e2>
 800ef0c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ef10:	e7d6      	b.n	800eec0 <_dtoa_r+0x540>
 800ef12:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ef16:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800ef1a:	f8dd 8000 	ldr.w	r8, [sp]
 800ef1e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ef22:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ef26:	ee15 3a10 	vmov	r3, s10
 800ef2a:	3330      	adds	r3, #48	; 0x30
 800ef2c:	f808 3b01 	strb.w	r3, [r8], #1
 800ef30:	9b00      	ldr	r3, [sp, #0]
 800ef32:	eba8 0303 	sub.w	r3, r8, r3
 800ef36:	4599      	cmp	r9, r3
 800ef38:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ef3c:	eea3 7b46 	vfms.f64	d7, d3, d6
 800ef40:	d133      	bne.n	800efaa <_dtoa_r+0x62a>
 800ef42:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ef46:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ef4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef4e:	dc1a      	bgt.n	800ef86 <_dtoa_r+0x606>
 800ef50:	eeb4 7b46 	vcmp.f64	d7, d6
 800ef54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef58:	d103      	bne.n	800ef62 <_dtoa_r+0x5e2>
 800ef5a:	ee15 3a10 	vmov	r3, s10
 800ef5e:	07d9      	lsls	r1, r3, #31
 800ef60:	d411      	bmi.n	800ef86 <_dtoa_r+0x606>
 800ef62:	4629      	mov	r1, r5
 800ef64:	4630      	mov	r0, r6
 800ef66:	f001 f879 	bl	801005c <_Bfree>
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ef6e:	f888 3000 	strb.w	r3, [r8]
 800ef72:	f10b 0301 	add.w	r3, fp, #1
 800ef76:	6013      	str	r3, [r2, #0]
 800ef78:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	f43f ad4d 	beq.w	800ea1a <_dtoa_r+0x9a>
 800ef80:	f8c3 8000 	str.w	r8, [r3]
 800ef84:	e549      	b.n	800ea1a <_dtoa_r+0x9a>
 800ef86:	465f      	mov	r7, fp
 800ef88:	4643      	mov	r3, r8
 800ef8a:	4698      	mov	r8, r3
 800ef8c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ef90:	2a39      	cmp	r2, #57	; 0x39
 800ef92:	d106      	bne.n	800efa2 <_dtoa_r+0x622>
 800ef94:	9a00      	ldr	r2, [sp, #0]
 800ef96:	429a      	cmp	r2, r3
 800ef98:	d1f7      	bne.n	800ef8a <_dtoa_r+0x60a>
 800ef9a:	9900      	ldr	r1, [sp, #0]
 800ef9c:	2230      	movs	r2, #48	; 0x30
 800ef9e:	3701      	adds	r7, #1
 800efa0:	700a      	strb	r2, [r1, #0]
 800efa2:	781a      	ldrb	r2, [r3, #0]
 800efa4:	3201      	adds	r2, #1
 800efa6:	701a      	strb	r2, [r3, #0]
 800efa8:	e7ae      	b.n	800ef08 <_dtoa_r+0x588>
 800efaa:	ee27 7b04 	vmul.f64	d7, d7, d4
 800efae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800efb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efb6:	d1b2      	bne.n	800ef1e <_dtoa_r+0x59e>
 800efb8:	e7d3      	b.n	800ef62 <_dtoa_r+0x5e2>
 800efba:	bf00      	nop
 800efbc:	08012750 	.word	0x08012750
 800efc0:	08012728 	.word	0x08012728
 800efc4:	9908      	ldr	r1, [sp, #32]
 800efc6:	2900      	cmp	r1, #0
 800efc8:	f000 80d1 	beq.w	800f16e <_dtoa_r+0x7ee>
 800efcc:	9907      	ldr	r1, [sp, #28]
 800efce:	2901      	cmp	r1, #1
 800efd0:	f300 80b4 	bgt.w	800f13c <_dtoa_r+0x7bc>
 800efd4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800efd6:	2900      	cmp	r1, #0
 800efd8:	f000 80ac 	beq.w	800f134 <_dtoa_r+0x7b4>
 800efdc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800efe0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800efe4:	461c      	mov	r4, r3
 800efe6:	930a      	str	r3, [sp, #40]	; 0x28
 800efe8:	9b05      	ldr	r3, [sp, #20]
 800efea:	4413      	add	r3, r2
 800efec:	9305      	str	r3, [sp, #20]
 800efee:	9b06      	ldr	r3, [sp, #24]
 800eff0:	2101      	movs	r1, #1
 800eff2:	4413      	add	r3, r2
 800eff4:	4630      	mov	r0, r6
 800eff6:	9306      	str	r3, [sp, #24]
 800eff8:	f001 f936 	bl	8010268 <__i2b>
 800effc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800effe:	4607      	mov	r7, r0
 800f000:	f1b8 0f00 	cmp.w	r8, #0
 800f004:	dd0d      	ble.n	800f022 <_dtoa_r+0x6a2>
 800f006:	9a06      	ldr	r2, [sp, #24]
 800f008:	2a00      	cmp	r2, #0
 800f00a:	dd0a      	ble.n	800f022 <_dtoa_r+0x6a2>
 800f00c:	4542      	cmp	r2, r8
 800f00e:	9905      	ldr	r1, [sp, #20]
 800f010:	bfa8      	it	ge
 800f012:	4642      	movge	r2, r8
 800f014:	1a89      	subs	r1, r1, r2
 800f016:	9105      	str	r1, [sp, #20]
 800f018:	9906      	ldr	r1, [sp, #24]
 800f01a:	eba8 0802 	sub.w	r8, r8, r2
 800f01e:	1a8a      	subs	r2, r1, r2
 800f020:	9206      	str	r2, [sp, #24]
 800f022:	b303      	cbz	r3, 800f066 <_dtoa_r+0x6e6>
 800f024:	9a08      	ldr	r2, [sp, #32]
 800f026:	2a00      	cmp	r2, #0
 800f028:	f000 80a6 	beq.w	800f178 <_dtoa_r+0x7f8>
 800f02c:	2c00      	cmp	r4, #0
 800f02e:	dd13      	ble.n	800f058 <_dtoa_r+0x6d8>
 800f030:	4639      	mov	r1, r7
 800f032:	4622      	mov	r2, r4
 800f034:	4630      	mov	r0, r6
 800f036:	930c      	str	r3, [sp, #48]	; 0x30
 800f038:	f001 f9d2 	bl	80103e0 <__pow5mult>
 800f03c:	462a      	mov	r2, r5
 800f03e:	4601      	mov	r1, r0
 800f040:	4607      	mov	r7, r0
 800f042:	4630      	mov	r0, r6
 800f044:	f001 f926 	bl	8010294 <__multiply>
 800f048:	4629      	mov	r1, r5
 800f04a:	900a      	str	r0, [sp, #40]	; 0x28
 800f04c:	4630      	mov	r0, r6
 800f04e:	f001 f805 	bl	801005c <_Bfree>
 800f052:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f054:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f056:	4615      	mov	r5, r2
 800f058:	1b1a      	subs	r2, r3, r4
 800f05a:	d004      	beq.n	800f066 <_dtoa_r+0x6e6>
 800f05c:	4629      	mov	r1, r5
 800f05e:	4630      	mov	r0, r6
 800f060:	f001 f9be 	bl	80103e0 <__pow5mult>
 800f064:	4605      	mov	r5, r0
 800f066:	2101      	movs	r1, #1
 800f068:	4630      	mov	r0, r6
 800f06a:	f001 f8fd 	bl	8010268 <__i2b>
 800f06e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f070:	2b00      	cmp	r3, #0
 800f072:	4604      	mov	r4, r0
 800f074:	f340 8082 	ble.w	800f17c <_dtoa_r+0x7fc>
 800f078:	461a      	mov	r2, r3
 800f07a:	4601      	mov	r1, r0
 800f07c:	4630      	mov	r0, r6
 800f07e:	f001 f9af 	bl	80103e0 <__pow5mult>
 800f082:	9b07      	ldr	r3, [sp, #28]
 800f084:	2b01      	cmp	r3, #1
 800f086:	4604      	mov	r4, r0
 800f088:	dd7b      	ble.n	800f182 <_dtoa_r+0x802>
 800f08a:	2300      	movs	r3, #0
 800f08c:	930a      	str	r3, [sp, #40]	; 0x28
 800f08e:	6922      	ldr	r2, [r4, #16]
 800f090:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f094:	6910      	ldr	r0, [r2, #16]
 800f096:	f001 f897 	bl	80101c8 <__hi0bits>
 800f09a:	f1c0 0020 	rsb	r0, r0, #32
 800f09e:	9b06      	ldr	r3, [sp, #24]
 800f0a0:	4418      	add	r0, r3
 800f0a2:	f010 001f 	ands.w	r0, r0, #31
 800f0a6:	f000 808d 	beq.w	800f1c4 <_dtoa_r+0x844>
 800f0aa:	f1c0 0220 	rsb	r2, r0, #32
 800f0ae:	2a04      	cmp	r2, #4
 800f0b0:	f340 8086 	ble.w	800f1c0 <_dtoa_r+0x840>
 800f0b4:	f1c0 001c 	rsb	r0, r0, #28
 800f0b8:	9b05      	ldr	r3, [sp, #20]
 800f0ba:	4403      	add	r3, r0
 800f0bc:	9305      	str	r3, [sp, #20]
 800f0be:	9b06      	ldr	r3, [sp, #24]
 800f0c0:	4403      	add	r3, r0
 800f0c2:	4480      	add	r8, r0
 800f0c4:	9306      	str	r3, [sp, #24]
 800f0c6:	9b05      	ldr	r3, [sp, #20]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	dd05      	ble.n	800f0d8 <_dtoa_r+0x758>
 800f0cc:	4629      	mov	r1, r5
 800f0ce:	461a      	mov	r2, r3
 800f0d0:	4630      	mov	r0, r6
 800f0d2:	f001 f9df 	bl	8010494 <__lshift>
 800f0d6:	4605      	mov	r5, r0
 800f0d8:	9b06      	ldr	r3, [sp, #24]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	dd05      	ble.n	800f0ea <_dtoa_r+0x76a>
 800f0de:	4621      	mov	r1, r4
 800f0e0:	461a      	mov	r2, r3
 800f0e2:	4630      	mov	r0, r6
 800f0e4:	f001 f9d6 	bl	8010494 <__lshift>
 800f0e8:	4604      	mov	r4, r0
 800f0ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d06b      	beq.n	800f1c8 <_dtoa_r+0x848>
 800f0f0:	4621      	mov	r1, r4
 800f0f2:	4628      	mov	r0, r5
 800f0f4:	f001 fa3a 	bl	801056c <__mcmp>
 800f0f8:	2800      	cmp	r0, #0
 800f0fa:	da65      	bge.n	800f1c8 <_dtoa_r+0x848>
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	4629      	mov	r1, r5
 800f100:	220a      	movs	r2, #10
 800f102:	4630      	mov	r0, r6
 800f104:	f000 ffcc 	bl	80100a0 <__multadd>
 800f108:	9b08      	ldr	r3, [sp, #32]
 800f10a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f10e:	4605      	mov	r5, r0
 800f110:	2b00      	cmp	r3, #0
 800f112:	f000 8192 	beq.w	800f43a <_dtoa_r+0xaba>
 800f116:	4639      	mov	r1, r7
 800f118:	2300      	movs	r3, #0
 800f11a:	220a      	movs	r2, #10
 800f11c:	4630      	mov	r0, r6
 800f11e:	f000 ffbf 	bl	80100a0 <__multadd>
 800f122:	f1ba 0f00 	cmp.w	sl, #0
 800f126:	4607      	mov	r7, r0
 800f128:	f300 808e 	bgt.w	800f248 <_dtoa_r+0x8c8>
 800f12c:	9b07      	ldr	r3, [sp, #28]
 800f12e:	2b02      	cmp	r3, #2
 800f130:	dc51      	bgt.n	800f1d6 <_dtoa_r+0x856>
 800f132:	e089      	b.n	800f248 <_dtoa_r+0x8c8>
 800f134:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f136:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f13a:	e751      	b.n	800efe0 <_dtoa_r+0x660>
 800f13c:	f109 34ff 	add.w	r4, r9, #4294967295
 800f140:	42a3      	cmp	r3, r4
 800f142:	bfbf      	itttt	lt
 800f144:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800f146:	1ae3      	sublt	r3, r4, r3
 800f148:	18d2      	addlt	r2, r2, r3
 800f14a:	4613      	movlt	r3, r2
 800f14c:	bfb7      	itett	lt
 800f14e:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f150:	1b1c      	subge	r4, r3, r4
 800f152:	4623      	movlt	r3, r4
 800f154:	2400      	movlt	r4, #0
 800f156:	f1b9 0f00 	cmp.w	r9, #0
 800f15a:	bfb5      	itete	lt
 800f15c:	9a05      	ldrlt	r2, [sp, #20]
 800f15e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800f162:	eba2 0809 	sublt.w	r8, r2, r9
 800f166:	464a      	movge	r2, r9
 800f168:	bfb8      	it	lt
 800f16a:	2200      	movlt	r2, #0
 800f16c:	e73b      	b.n	800efe6 <_dtoa_r+0x666>
 800f16e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f172:	9f08      	ldr	r7, [sp, #32]
 800f174:	461c      	mov	r4, r3
 800f176:	e743      	b.n	800f000 <_dtoa_r+0x680>
 800f178:	461a      	mov	r2, r3
 800f17a:	e76f      	b.n	800f05c <_dtoa_r+0x6dc>
 800f17c:	9b07      	ldr	r3, [sp, #28]
 800f17e:	2b01      	cmp	r3, #1
 800f180:	dc18      	bgt.n	800f1b4 <_dtoa_r+0x834>
 800f182:	9b02      	ldr	r3, [sp, #8]
 800f184:	b9b3      	cbnz	r3, 800f1b4 <_dtoa_r+0x834>
 800f186:	9b03      	ldr	r3, [sp, #12]
 800f188:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800f18c:	b9a2      	cbnz	r2, 800f1b8 <_dtoa_r+0x838>
 800f18e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f192:	0d12      	lsrs	r2, r2, #20
 800f194:	0512      	lsls	r2, r2, #20
 800f196:	b18a      	cbz	r2, 800f1bc <_dtoa_r+0x83c>
 800f198:	9b05      	ldr	r3, [sp, #20]
 800f19a:	3301      	adds	r3, #1
 800f19c:	9305      	str	r3, [sp, #20]
 800f19e:	9b06      	ldr	r3, [sp, #24]
 800f1a0:	3301      	adds	r3, #1
 800f1a2:	9306      	str	r3, [sp, #24]
 800f1a4:	2301      	movs	r3, #1
 800f1a6:	930a      	str	r3, [sp, #40]	; 0x28
 800f1a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	f47f af6f 	bne.w	800f08e <_dtoa_r+0x70e>
 800f1b0:	2001      	movs	r0, #1
 800f1b2:	e774      	b.n	800f09e <_dtoa_r+0x71e>
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	e7f6      	b.n	800f1a6 <_dtoa_r+0x826>
 800f1b8:	9b02      	ldr	r3, [sp, #8]
 800f1ba:	e7f4      	b.n	800f1a6 <_dtoa_r+0x826>
 800f1bc:	920a      	str	r2, [sp, #40]	; 0x28
 800f1be:	e7f3      	b.n	800f1a8 <_dtoa_r+0x828>
 800f1c0:	d081      	beq.n	800f0c6 <_dtoa_r+0x746>
 800f1c2:	4610      	mov	r0, r2
 800f1c4:	301c      	adds	r0, #28
 800f1c6:	e777      	b.n	800f0b8 <_dtoa_r+0x738>
 800f1c8:	f1b9 0f00 	cmp.w	r9, #0
 800f1cc:	dc37      	bgt.n	800f23e <_dtoa_r+0x8be>
 800f1ce:	9b07      	ldr	r3, [sp, #28]
 800f1d0:	2b02      	cmp	r3, #2
 800f1d2:	dd34      	ble.n	800f23e <_dtoa_r+0x8be>
 800f1d4:	46ca      	mov	sl, r9
 800f1d6:	f1ba 0f00 	cmp.w	sl, #0
 800f1da:	d10d      	bne.n	800f1f8 <_dtoa_r+0x878>
 800f1dc:	4621      	mov	r1, r4
 800f1de:	4653      	mov	r3, sl
 800f1e0:	2205      	movs	r2, #5
 800f1e2:	4630      	mov	r0, r6
 800f1e4:	f000 ff5c 	bl	80100a0 <__multadd>
 800f1e8:	4601      	mov	r1, r0
 800f1ea:	4604      	mov	r4, r0
 800f1ec:	4628      	mov	r0, r5
 800f1ee:	f001 f9bd 	bl	801056c <__mcmp>
 800f1f2:	2800      	cmp	r0, #0
 800f1f4:	f73f adde 	bgt.w	800edb4 <_dtoa_r+0x434>
 800f1f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1fa:	f8dd 8000 	ldr.w	r8, [sp]
 800f1fe:	ea6f 0b03 	mvn.w	fp, r3
 800f202:	f04f 0900 	mov.w	r9, #0
 800f206:	4621      	mov	r1, r4
 800f208:	4630      	mov	r0, r6
 800f20a:	f000 ff27 	bl	801005c <_Bfree>
 800f20e:	2f00      	cmp	r7, #0
 800f210:	f43f aea7 	beq.w	800ef62 <_dtoa_r+0x5e2>
 800f214:	f1b9 0f00 	cmp.w	r9, #0
 800f218:	d005      	beq.n	800f226 <_dtoa_r+0x8a6>
 800f21a:	45b9      	cmp	r9, r7
 800f21c:	d003      	beq.n	800f226 <_dtoa_r+0x8a6>
 800f21e:	4649      	mov	r1, r9
 800f220:	4630      	mov	r0, r6
 800f222:	f000 ff1b 	bl	801005c <_Bfree>
 800f226:	4639      	mov	r1, r7
 800f228:	4630      	mov	r0, r6
 800f22a:	f000 ff17 	bl	801005c <_Bfree>
 800f22e:	e698      	b.n	800ef62 <_dtoa_r+0x5e2>
 800f230:	2400      	movs	r4, #0
 800f232:	4627      	mov	r7, r4
 800f234:	e7e0      	b.n	800f1f8 <_dtoa_r+0x878>
 800f236:	46bb      	mov	fp, r7
 800f238:	4604      	mov	r4, r0
 800f23a:	4607      	mov	r7, r0
 800f23c:	e5ba      	b.n	800edb4 <_dtoa_r+0x434>
 800f23e:	9b08      	ldr	r3, [sp, #32]
 800f240:	46ca      	mov	sl, r9
 800f242:	2b00      	cmp	r3, #0
 800f244:	f000 8100 	beq.w	800f448 <_dtoa_r+0xac8>
 800f248:	f1b8 0f00 	cmp.w	r8, #0
 800f24c:	dd05      	ble.n	800f25a <_dtoa_r+0x8da>
 800f24e:	4639      	mov	r1, r7
 800f250:	4642      	mov	r2, r8
 800f252:	4630      	mov	r0, r6
 800f254:	f001 f91e 	bl	8010494 <__lshift>
 800f258:	4607      	mov	r7, r0
 800f25a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d05d      	beq.n	800f31c <_dtoa_r+0x99c>
 800f260:	6879      	ldr	r1, [r7, #4]
 800f262:	4630      	mov	r0, r6
 800f264:	f000 feba 	bl	800ffdc <_Balloc>
 800f268:	4680      	mov	r8, r0
 800f26a:	b928      	cbnz	r0, 800f278 <_dtoa_r+0x8f8>
 800f26c:	4b82      	ldr	r3, [pc, #520]	; (800f478 <_dtoa_r+0xaf8>)
 800f26e:	4602      	mov	r2, r0
 800f270:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f274:	f7ff bb9a 	b.w	800e9ac <_dtoa_r+0x2c>
 800f278:	693a      	ldr	r2, [r7, #16]
 800f27a:	3202      	adds	r2, #2
 800f27c:	0092      	lsls	r2, r2, #2
 800f27e:	f107 010c 	add.w	r1, r7, #12
 800f282:	300c      	adds	r0, #12
 800f284:	f7fd fbd2 	bl	800ca2c <memcpy>
 800f288:	2201      	movs	r2, #1
 800f28a:	4641      	mov	r1, r8
 800f28c:	4630      	mov	r0, r6
 800f28e:	f001 f901 	bl	8010494 <__lshift>
 800f292:	9b00      	ldr	r3, [sp, #0]
 800f294:	3301      	adds	r3, #1
 800f296:	9305      	str	r3, [sp, #20]
 800f298:	9b00      	ldr	r3, [sp, #0]
 800f29a:	4453      	add	r3, sl
 800f29c:	9309      	str	r3, [sp, #36]	; 0x24
 800f29e:	9b02      	ldr	r3, [sp, #8]
 800f2a0:	f003 0301 	and.w	r3, r3, #1
 800f2a4:	46b9      	mov	r9, r7
 800f2a6:	9308      	str	r3, [sp, #32]
 800f2a8:	4607      	mov	r7, r0
 800f2aa:	9b05      	ldr	r3, [sp, #20]
 800f2ac:	4621      	mov	r1, r4
 800f2ae:	3b01      	subs	r3, #1
 800f2b0:	4628      	mov	r0, r5
 800f2b2:	9302      	str	r3, [sp, #8]
 800f2b4:	f7ff fad8 	bl	800e868 <quorem>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	3330      	adds	r3, #48	; 0x30
 800f2bc:	9006      	str	r0, [sp, #24]
 800f2be:	4649      	mov	r1, r9
 800f2c0:	4628      	mov	r0, r5
 800f2c2:	930a      	str	r3, [sp, #40]	; 0x28
 800f2c4:	f001 f952 	bl	801056c <__mcmp>
 800f2c8:	463a      	mov	r2, r7
 800f2ca:	4682      	mov	sl, r0
 800f2cc:	4621      	mov	r1, r4
 800f2ce:	4630      	mov	r0, r6
 800f2d0:	f001 f968 	bl	80105a4 <__mdiff>
 800f2d4:	68c2      	ldr	r2, [r0, #12]
 800f2d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2d8:	4680      	mov	r8, r0
 800f2da:	bb0a      	cbnz	r2, 800f320 <_dtoa_r+0x9a0>
 800f2dc:	4601      	mov	r1, r0
 800f2de:	4628      	mov	r0, r5
 800f2e0:	f001 f944 	bl	801056c <__mcmp>
 800f2e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2e6:	4602      	mov	r2, r0
 800f2e8:	4641      	mov	r1, r8
 800f2ea:	4630      	mov	r0, r6
 800f2ec:	920e      	str	r2, [sp, #56]	; 0x38
 800f2ee:	930a      	str	r3, [sp, #40]	; 0x28
 800f2f0:	f000 feb4 	bl	801005c <_Bfree>
 800f2f4:	9b07      	ldr	r3, [sp, #28]
 800f2f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f2f8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f2fc:	ea43 0102 	orr.w	r1, r3, r2
 800f300:	9b08      	ldr	r3, [sp, #32]
 800f302:	430b      	orrs	r3, r1
 800f304:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f306:	d10d      	bne.n	800f324 <_dtoa_r+0x9a4>
 800f308:	2b39      	cmp	r3, #57	; 0x39
 800f30a:	d029      	beq.n	800f360 <_dtoa_r+0x9e0>
 800f30c:	f1ba 0f00 	cmp.w	sl, #0
 800f310:	dd01      	ble.n	800f316 <_dtoa_r+0x996>
 800f312:	9b06      	ldr	r3, [sp, #24]
 800f314:	3331      	adds	r3, #49	; 0x31
 800f316:	9a02      	ldr	r2, [sp, #8]
 800f318:	7013      	strb	r3, [r2, #0]
 800f31a:	e774      	b.n	800f206 <_dtoa_r+0x886>
 800f31c:	4638      	mov	r0, r7
 800f31e:	e7b8      	b.n	800f292 <_dtoa_r+0x912>
 800f320:	2201      	movs	r2, #1
 800f322:	e7e1      	b.n	800f2e8 <_dtoa_r+0x968>
 800f324:	f1ba 0f00 	cmp.w	sl, #0
 800f328:	db06      	blt.n	800f338 <_dtoa_r+0x9b8>
 800f32a:	9907      	ldr	r1, [sp, #28]
 800f32c:	ea41 0a0a 	orr.w	sl, r1, sl
 800f330:	9908      	ldr	r1, [sp, #32]
 800f332:	ea5a 0101 	orrs.w	r1, sl, r1
 800f336:	d120      	bne.n	800f37a <_dtoa_r+0x9fa>
 800f338:	2a00      	cmp	r2, #0
 800f33a:	ddec      	ble.n	800f316 <_dtoa_r+0x996>
 800f33c:	4629      	mov	r1, r5
 800f33e:	2201      	movs	r2, #1
 800f340:	4630      	mov	r0, r6
 800f342:	9305      	str	r3, [sp, #20]
 800f344:	f001 f8a6 	bl	8010494 <__lshift>
 800f348:	4621      	mov	r1, r4
 800f34a:	4605      	mov	r5, r0
 800f34c:	f001 f90e 	bl	801056c <__mcmp>
 800f350:	2800      	cmp	r0, #0
 800f352:	9b05      	ldr	r3, [sp, #20]
 800f354:	dc02      	bgt.n	800f35c <_dtoa_r+0x9dc>
 800f356:	d1de      	bne.n	800f316 <_dtoa_r+0x996>
 800f358:	07da      	lsls	r2, r3, #31
 800f35a:	d5dc      	bpl.n	800f316 <_dtoa_r+0x996>
 800f35c:	2b39      	cmp	r3, #57	; 0x39
 800f35e:	d1d8      	bne.n	800f312 <_dtoa_r+0x992>
 800f360:	9a02      	ldr	r2, [sp, #8]
 800f362:	2339      	movs	r3, #57	; 0x39
 800f364:	7013      	strb	r3, [r2, #0]
 800f366:	4643      	mov	r3, r8
 800f368:	4698      	mov	r8, r3
 800f36a:	3b01      	subs	r3, #1
 800f36c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800f370:	2a39      	cmp	r2, #57	; 0x39
 800f372:	d051      	beq.n	800f418 <_dtoa_r+0xa98>
 800f374:	3201      	adds	r2, #1
 800f376:	701a      	strb	r2, [r3, #0]
 800f378:	e745      	b.n	800f206 <_dtoa_r+0x886>
 800f37a:	2a00      	cmp	r2, #0
 800f37c:	dd03      	ble.n	800f386 <_dtoa_r+0xa06>
 800f37e:	2b39      	cmp	r3, #57	; 0x39
 800f380:	d0ee      	beq.n	800f360 <_dtoa_r+0x9e0>
 800f382:	3301      	adds	r3, #1
 800f384:	e7c7      	b.n	800f316 <_dtoa_r+0x996>
 800f386:	9a05      	ldr	r2, [sp, #20]
 800f388:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f38a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f38e:	428a      	cmp	r2, r1
 800f390:	d02b      	beq.n	800f3ea <_dtoa_r+0xa6a>
 800f392:	4629      	mov	r1, r5
 800f394:	2300      	movs	r3, #0
 800f396:	220a      	movs	r2, #10
 800f398:	4630      	mov	r0, r6
 800f39a:	f000 fe81 	bl	80100a0 <__multadd>
 800f39e:	45b9      	cmp	r9, r7
 800f3a0:	4605      	mov	r5, r0
 800f3a2:	f04f 0300 	mov.w	r3, #0
 800f3a6:	f04f 020a 	mov.w	r2, #10
 800f3aa:	4649      	mov	r1, r9
 800f3ac:	4630      	mov	r0, r6
 800f3ae:	d107      	bne.n	800f3c0 <_dtoa_r+0xa40>
 800f3b0:	f000 fe76 	bl	80100a0 <__multadd>
 800f3b4:	4681      	mov	r9, r0
 800f3b6:	4607      	mov	r7, r0
 800f3b8:	9b05      	ldr	r3, [sp, #20]
 800f3ba:	3301      	adds	r3, #1
 800f3bc:	9305      	str	r3, [sp, #20]
 800f3be:	e774      	b.n	800f2aa <_dtoa_r+0x92a>
 800f3c0:	f000 fe6e 	bl	80100a0 <__multadd>
 800f3c4:	4639      	mov	r1, r7
 800f3c6:	4681      	mov	r9, r0
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	220a      	movs	r2, #10
 800f3cc:	4630      	mov	r0, r6
 800f3ce:	f000 fe67 	bl	80100a0 <__multadd>
 800f3d2:	4607      	mov	r7, r0
 800f3d4:	e7f0      	b.n	800f3b8 <_dtoa_r+0xa38>
 800f3d6:	f1ba 0f00 	cmp.w	sl, #0
 800f3da:	9a00      	ldr	r2, [sp, #0]
 800f3dc:	bfcc      	ite	gt
 800f3de:	46d0      	movgt	r8, sl
 800f3e0:	f04f 0801 	movle.w	r8, #1
 800f3e4:	4490      	add	r8, r2
 800f3e6:	f04f 0900 	mov.w	r9, #0
 800f3ea:	4629      	mov	r1, r5
 800f3ec:	2201      	movs	r2, #1
 800f3ee:	4630      	mov	r0, r6
 800f3f0:	9302      	str	r3, [sp, #8]
 800f3f2:	f001 f84f 	bl	8010494 <__lshift>
 800f3f6:	4621      	mov	r1, r4
 800f3f8:	4605      	mov	r5, r0
 800f3fa:	f001 f8b7 	bl	801056c <__mcmp>
 800f3fe:	2800      	cmp	r0, #0
 800f400:	dcb1      	bgt.n	800f366 <_dtoa_r+0x9e6>
 800f402:	d102      	bne.n	800f40a <_dtoa_r+0xa8a>
 800f404:	9b02      	ldr	r3, [sp, #8]
 800f406:	07db      	lsls	r3, r3, #31
 800f408:	d4ad      	bmi.n	800f366 <_dtoa_r+0x9e6>
 800f40a:	4643      	mov	r3, r8
 800f40c:	4698      	mov	r8, r3
 800f40e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f412:	2a30      	cmp	r2, #48	; 0x30
 800f414:	d0fa      	beq.n	800f40c <_dtoa_r+0xa8c>
 800f416:	e6f6      	b.n	800f206 <_dtoa_r+0x886>
 800f418:	9a00      	ldr	r2, [sp, #0]
 800f41a:	429a      	cmp	r2, r3
 800f41c:	d1a4      	bne.n	800f368 <_dtoa_r+0x9e8>
 800f41e:	f10b 0b01 	add.w	fp, fp, #1
 800f422:	2331      	movs	r3, #49	; 0x31
 800f424:	e778      	b.n	800f318 <_dtoa_r+0x998>
 800f426:	4b15      	ldr	r3, [pc, #84]	; (800f47c <_dtoa_r+0xafc>)
 800f428:	f7ff bb12 	b.w	800ea50 <_dtoa_r+0xd0>
 800f42c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f42e:	2b00      	cmp	r3, #0
 800f430:	f47f aaee 	bne.w	800ea10 <_dtoa_r+0x90>
 800f434:	4b12      	ldr	r3, [pc, #72]	; (800f480 <_dtoa_r+0xb00>)
 800f436:	f7ff bb0b 	b.w	800ea50 <_dtoa_r+0xd0>
 800f43a:	f1ba 0f00 	cmp.w	sl, #0
 800f43e:	dc03      	bgt.n	800f448 <_dtoa_r+0xac8>
 800f440:	9b07      	ldr	r3, [sp, #28]
 800f442:	2b02      	cmp	r3, #2
 800f444:	f73f aec7 	bgt.w	800f1d6 <_dtoa_r+0x856>
 800f448:	f8dd 8000 	ldr.w	r8, [sp]
 800f44c:	4621      	mov	r1, r4
 800f44e:	4628      	mov	r0, r5
 800f450:	f7ff fa0a 	bl	800e868 <quorem>
 800f454:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f458:	f808 3b01 	strb.w	r3, [r8], #1
 800f45c:	9a00      	ldr	r2, [sp, #0]
 800f45e:	eba8 0202 	sub.w	r2, r8, r2
 800f462:	4592      	cmp	sl, r2
 800f464:	ddb7      	ble.n	800f3d6 <_dtoa_r+0xa56>
 800f466:	4629      	mov	r1, r5
 800f468:	2300      	movs	r3, #0
 800f46a:	220a      	movs	r2, #10
 800f46c:	4630      	mov	r0, r6
 800f46e:	f000 fe17 	bl	80100a0 <__multadd>
 800f472:	4605      	mov	r5, r0
 800f474:	e7ea      	b.n	800f44c <_dtoa_r+0xacc>
 800f476:	bf00      	nop
 800f478:	080125d4 	.word	0x080125d4
 800f47c:	080123d0 	.word	0x080123d0
 800f480:	08012551 	.word	0x08012551

0800f484 <__sflush_r>:
 800f484:	898a      	ldrh	r2, [r1, #12]
 800f486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f48a:	4605      	mov	r5, r0
 800f48c:	0710      	lsls	r0, r2, #28
 800f48e:	460c      	mov	r4, r1
 800f490:	d458      	bmi.n	800f544 <__sflush_r+0xc0>
 800f492:	684b      	ldr	r3, [r1, #4]
 800f494:	2b00      	cmp	r3, #0
 800f496:	dc05      	bgt.n	800f4a4 <__sflush_r+0x20>
 800f498:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	dc02      	bgt.n	800f4a4 <__sflush_r+0x20>
 800f49e:	2000      	movs	r0, #0
 800f4a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f4a6:	2e00      	cmp	r6, #0
 800f4a8:	d0f9      	beq.n	800f49e <__sflush_r+0x1a>
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f4b0:	682f      	ldr	r7, [r5, #0]
 800f4b2:	602b      	str	r3, [r5, #0]
 800f4b4:	d032      	beq.n	800f51c <__sflush_r+0x98>
 800f4b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f4b8:	89a3      	ldrh	r3, [r4, #12]
 800f4ba:	075a      	lsls	r2, r3, #29
 800f4bc:	d505      	bpl.n	800f4ca <__sflush_r+0x46>
 800f4be:	6863      	ldr	r3, [r4, #4]
 800f4c0:	1ac0      	subs	r0, r0, r3
 800f4c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f4c4:	b10b      	cbz	r3, 800f4ca <__sflush_r+0x46>
 800f4c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f4c8:	1ac0      	subs	r0, r0, r3
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	4602      	mov	r2, r0
 800f4ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f4d0:	6a21      	ldr	r1, [r4, #32]
 800f4d2:	4628      	mov	r0, r5
 800f4d4:	47b0      	blx	r6
 800f4d6:	1c43      	adds	r3, r0, #1
 800f4d8:	89a3      	ldrh	r3, [r4, #12]
 800f4da:	d106      	bne.n	800f4ea <__sflush_r+0x66>
 800f4dc:	6829      	ldr	r1, [r5, #0]
 800f4de:	291d      	cmp	r1, #29
 800f4e0:	d82c      	bhi.n	800f53c <__sflush_r+0xb8>
 800f4e2:	4a2a      	ldr	r2, [pc, #168]	; (800f58c <__sflush_r+0x108>)
 800f4e4:	40ca      	lsrs	r2, r1
 800f4e6:	07d6      	lsls	r6, r2, #31
 800f4e8:	d528      	bpl.n	800f53c <__sflush_r+0xb8>
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	6062      	str	r2, [r4, #4]
 800f4ee:	04d9      	lsls	r1, r3, #19
 800f4f0:	6922      	ldr	r2, [r4, #16]
 800f4f2:	6022      	str	r2, [r4, #0]
 800f4f4:	d504      	bpl.n	800f500 <__sflush_r+0x7c>
 800f4f6:	1c42      	adds	r2, r0, #1
 800f4f8:	d101      	bne.n	800f4fe <__sflush_r+0x7a>
 800f4fa:	682b      	ldr	r3, [r5, #0]
 800f4fc:	b903      	cbnz	r3, 800f500 <__sflush_r+0x7c>
 800f4fe:	6560      	str	r0, [r4, #84]	; 0x54
 800f500:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f502:	602f      	str	r7, [r5, #0]
 800f504:	2900      	cmp	r1, #0
 800f506:	d0ca      	beq.n	800f49e <__sflush_r+0x1a>
 800f508:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f50c:	4299      	cmp	r1, r3
 800f50e:	d002      	beq.n	800f516 <__sflush_r+0x92>
 800f510:	4628      	mov	r0, r5
 800f512:	f001 fa2f 	bl	8010974 <_free_r>
 800f516:	2000      	movs	r0, #0
 800f518:	6360      	str	r0, [r4, #52]	; 0x34
 800f51a:	e7c1      	b.n	800f4a0 <__sflush_r+0x1c>
 800f51c:	6a21      	ldr	r1, [r4, #32]
 800f51e:	2301      	movs	r3, #1
 800f520:	4628      	mov	r0, r5
 800f522:	47b0      	blx	r6
 800f524:	1c41      	adds	r1, r0, #1
 800f526:	d1c7      	bne.n	800f4b8 <__sflush_r+0x34>
 800f528:	682b      	ldr	r3, [r5, #0]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d0c4      	beq.n	800f4b8 <__sflush_r+0x34>
 800f52e:	2b1d      	cmp	r3, #29
 800f530:	d001      	beq.n	800f536 <__sflush_r+0xb2>
 800f532:	2b16      	cmp	r3, #22
 800f534:	d101      	bne.n	800f53a <__sflush_r+0xb6>
 800f536:	602f      	str	r7, [r5, #0]
 800f538:	e7b1      	b.n	800f49e <__sflush_r+0x1a>
 800f53a:	89a3      	ldrh	r3, [r4, #12]
 800f53c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f540:	81a3      	strh	r3, [r4, #12]
 800f542:	e7ad      	b.n	800f4a0 <__sflush_r+0x1c>
 800f544:	690f      	ldr	r7, [r1, #16]
 800f546:	2f00      	cmp	r7, #0
 800f548:	d0a9      	beq.n	800f49e <__sflush_r+0x1a>
 800f54a:	0793      	lsls	r3, r2, #30
 800f54c:	680e      	ldr	r6, [r1, #0]
 800f54e:	bf08      	it	eq
 800f550:	694b      	ldreq	r3, [r1, #20]
 800f552:	600f      	str	r7, [r1, #0]
 800f554:	bf18      	it	ne
 800f556:	2300      	movne	r3, #0
 800f558:	eba6 0807 	sub.w	r8, r6, r7
 800f55c:	608b      	str	r3, [r1, #8]
 800f55e:	f1b8 0f00 	cmp.w	r8, #0
 800f562:	dd9c      	ble.n	800f49e <__sflush_r+0x1a>
 800f564:	6a21      	ldr	r1, [r4, #32]
 800f566:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f568:	4643      	mov	r3, r8
 800f56a:	463a      	mov	r2, r7
 800f56c:	4628      	mov	r0, r5
 800f56e:	47b0      	blx	r6
 800f570:	2800      	cmp	r0, #0
 800f572:	dc06      	bgt.n	800f582 <__sflush_r+0xfe>
 800f574:	89a3      	ldrh	r3, [r4, #12]
 800f576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f57a:	81a3      	strh	r3, [r4, #12]
 800f57c:	f04f 30ff 	mov.w	r0, #4294967295
 800f580:	e78e      	b.n	800f4a0 <__sflush_r+0x1c>
 800f582:	4407      	add	r7, r0
 800f584:	eba8 0800 	sub.w	r8, r8, r0
 800f588:	e7e9      	b.n	800f55e <__sflush_r+0xda>
 800f58a:	bf00      	nop
 800f58c:	20400001 	.word	0x20400001

0800f590 <_fflush_r>:
 800f590:	b538      	push	{r3, r4, r5, lr}
 800f592:	690b      	ldr	r3, [r1, #16]
 800f594:	4605      	mov	r5, r0
 800f596:	460c      	mov	r4, r1
 800f598:	b913      	cbnz	r3, 800f5a0 <_fflush_r+0x10>
 800f59a:	2500      	movs	r5, #0
 800f59c:	4628      	mov	r0, r5
 800f59e:	bd38      	pop	{r3, r4, r5, pc}
 800f5a0:	b118      	cbz	r0, 800f5aa <_fflush_r+0x1a>
 800f5a2:	6983      	ldr	r3, [r0, #24]
 800f5a4:	b90b      	cbnz	r3, 800f5aa <_fflush_r+0x1a>
 800f5a6:	f000 f887 	bl	800f6b8 <__sinit>
 800f5aa:	4b14      	ldr	r3, [pc, #80]	; (800f5fc <_fflush_r+0x6c>)
 800f5ac:	429c      	cmp	r4, r3
 800f5ae:	d11b      	bne.n	800f5e8 <_fflush_r+0x58>
 800f5b0:	686c      	ldr	r4, [r5, #4]
 800f5b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d0ef      	beq.n	800f59a <_fflush_r+0xa>
 800f5ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f5bc:	07d0      	lsls	r0, r2, #31
 800f5be:	d404      	bmi.n	800f5ca <_fflush_r+0x3a>
 800f5c0:	0599      	lsls	r1, r3, #22
 800f5c2:	d402      	bmi.n	800f5ca <_fflush_r+0x3a>
 800f5c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5c6:	f000 fc88 	bl	800feda <__retarget_lock_acquire_recursive>
 800f5ca:	4628      	mov	r0, r5
 800f5cc:	4621      	mov	r1, r4
 800f5ce:	f7ff ff59 	bl	800f484 <__sflush_r>
 800f5d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f5d4:	07da      	lsls	r2, r3, #31
 800f5d6:	4605      	mov	r5, r0
 800f5d8:	d4e0      	bmi.n	800f59c <_fflush_r+0xc>
 800f5da:	89a3      	ldrh	r3, [r4, #12]
 800f5dc:	059b      	lsls	r3, r3, #22
 800f5de:	d4dd      	bmi.n	800f59c <_fflush_r+0xc>
 800f5e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5e2:	f000 fc7b 	bl	800fedc <__retarget_lock_release_recursive>
 800f5e6:	e7d9      	b.n	800f59c <_fflush_r+0xc>
 800f5e8:	4b05      	ldr	r3, [pc, #20]	; (800f600 <_fflush_r+0x70>)
 800f5ea:	429c      	cmp	r4, r3
 800f5ec:	d101      	bne.n	800f5f2 <_fflush_r+0x62>
 800f5ee:	68ac      	ldr	r4, [r5, #8]
 800f5f0:	e7df      	b.n	800f5b2 <_fflush_r+0x22>
 800f5f2:	4b04      	ldr	r3, [pc, #16]	; (800f604 <_fflush_r+0x74>)
 800f5f4:	429c      	cmp	r4, r3
 800f5f6:	bf08      	it	eq
 800f5f8:	68ec      	ldreq	r4, [r5, #12]
 800f5fa:	e7da      	b.n	800f5b2 <_fflush_r+0x22>
 800f5fc:	08012608 	.word	0x08012608
 800f600:	08012628 	.word	0x08012628
 800f604:	080125e8 	.word	0x080125e8

0800f608 <std>:
 800f608:	2300      	movs	r3, #0
 800f60a:	b510      	push	{r4, lr}
 800f60c:	4604      	mov	r4, r0
 800f60e:	e9c0 3300 	strd	r3, r3, [r0]
 800f612:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f616:	6083      	str	r3, [r0, #8]
 800f618:	8181      	strh	r1, [r0, #12]
 800f61a:	6643      	str	r3, [r0, #100]	; 0x64
 800f61c:	81c2      	strh	r2, [r0, #14]
 800f61e:	6183      	str	r3, [r0, #24]
 800f620:	4619      	mov	r1, r3
 800f622:	2208      	movs	r2, #8
 800f624:	305c      	adds	r0, #92	; 0x5c
 800f626:	f7fd fa0f 	bl	800ca48 <memset>
 800f62a:	4b05      	ldr	r3, [pc, #20]	; (800f640 <std+0x38>)
 800f62c:	6263      	str	r3, [r4, #36]	; 0x24
 800f62e:	4b05      	ldr	r3, [pc, #20]	; (800f644 <std+0x3c>)
 800f630:	62a3      	str	r3, [r4, #40]	; 0x28
 800f632:	4b05      	ldr	r3, [pc, #20]	; (800f648 <std+0x40>)
 800f634:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f636:	4b05      	ldr	r3, [pc, #20]	; (800f64c <std+0x44>)
 800f638:	6224      	str	r4, [r4, #32]
 800f63a:	6323      	str	r3, [r4, #48]	; 0x30
 800f63c:	bd10      	pop	{r4, pc}
 800f63e:	bf00      	nop
 800f640:	08011069 	.word	0x08011069
 800f644:	0801108b 	.word	0x0801108b
 800f648:	080110c3 	.word	0x080110c3
 800f64c:	080110e7 	.word	0x080110e7

0800f650 <_cleanup_r>:
 800f650:	4901      	ldr	r1, [pc, #4]	; (800f658 <_cleanup_r+0x8>)
 800f652:	f000 b8af 	b.w	800f7b4 <_fwalk_reent>
 800f656:	bf00      	nop
 800f658:	0800f591 	.word	0x0800f591

0800f65c <__sfmoreglue>:
 800f65c:	b570      	push	{r4, r5, r6, lr}
 800f65e:	1e4a      	subs	r2, r1, #1
 800f660:	2568      	movs	r5, #104	; 0x68
 800f662:	4355      	muls	r5, r2
 800f664:	460e      	mov	r6, r1
 800f666:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f66a:	f001 f9d3 	bl	8010a14 <_malloc_r>
 800f66e:	4604      	mov	r4, r0
 800f670:	b140      	cbz	r0, 800f684 <__sfmoreglue+0x28>
 800f672:	2100      	movs	r1, #0
 800f674:	e9c0 1600 	strd	r1, r6, [r0]
 800f678:	300c      	adds	r0, #12
 800f67a:	60a0      	str	r0, [r4, #8]
 800f67c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f680:	f7fd f9e2 	bl	800ca48 <memset>
 800f684:	4620      	mov	r0, r4
 800f686:	bd70      	pop	{r4, r5, r6, pc}

0800f688 <__sfp_lock_acquire>:
 800f688:	4801      	ldr	r0, [pc, #4]	; (800f690 <__sfp_lock_acquire+0x8>)
 800f68a:	f000 bc26 	b.w	800feda <__retarget_lock_acquire_recursive>
 800f68e:	bf00      	nop
 800f690:	2400c738 	.word	0x2400c738

0800f694 <__sfp_lock_release>:
 800f694:	4801      	ldr	r0, [pc, #4]	; (800f69c <__sfp_lock_release+0x8>)
 800f696:	f000 bc21 	b.w	800fedc <__retarget_lock_release_recursive>
 800f69a:	bf00      	nop
 800f69c:	2400c738 	.word	0x2400c738

0800f6a0 <__sinit_lock_acquire>:
 800f6a0:	4801      	ldr	r0, [pc, #4]	; (800f6a8 <__sinit_lock_acquire+0x8>)
 800f6a2:	f000 bc1a 	b.w	800feda <__retarget_lock_acquire_recursive>
 800f6a6:	bf00      	nop
 800f6a8:	2400c733 	.word	0x2400c733

0800f6ac <__sinit_lock_release>:
 800f6ac:	4801      	ldr	r0, [pc, #4]	; (800f6b4 <__sinit_lock_release+0x8>)
 800f6ae:	f000 bc15 	b.w	800fedc <__retarget_lock_release_recursive>
 800f6b2:	bf00      	nop
 800f6b4:	2400c733 	.word	0x2400c733

0800f6b8 <__sinit>:
 800f6b8:	b510      	push	{r4, lr}
 800f6ba:	4604      	mov	r4, r0
 800f6bc:	f7ff fff0 	bl	800f6a0 <__sinit_lock_acquire>
 800f6c0:	69a3      	ldr	r3, [r4, #24]
 800f6c2:	b11b      	cbz	r3, 800f6cc <__sinit+0x14>
 800f6c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6c8:	f7ff bff0 	b.w	800f6ac <__sinit_lock_release>
 800f6cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f6d0:	6523      	str	r3, [r4, #80]	; 0x50
 800f6d2:	4b13      	ldr	r3, [pc, #76]	; (800f720 <__sinit+0x68>)
 800f6d4:	4a13      	ldr	r2, [pc, #76]	; (800f724 <__sinit+0x6c>)
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	62a2      	str	r2, [r4, #40]	; 0x28
 800f6da:	42a3      	cmp	r3, r4
 800f6dc:	bf04      	itt	eq
 800f6de:	2301      	moveq	r3, #1
 800f6e0:	61a3      	streq	r3, [r4, #24]
 800f6e2:	4620      	mov	r0, r4
 800f6e4:	f000 f820 	bl	800f728 <__sfp>
 800f6e8:	6060      	str	r0, [r4, #4]
 800f6ea:	4620      	mov	r0, r4
 800f6ec:	f000 f81c 	bl	800f728 <__sfp>
 800f6f0:	60a0      	str	r0, [r4, #8]
 800f6f2:	4620      	mov	r0, r4
 800f6f4:	f000 f818 	bl	800f728 <__sfp>
 800f6f8:	2200      	movs	r2, #0
 800f6fa:	60e0      	str	r0, [r4, #12]
 800f6fc:	2104      	movs	r1, #4
 800f6fe:	6860      	ldr	r0, [r4, #4]
 800f700:	f7ff ff82 	bl	800f608 <std>
 800f704:	68a0      	ldr	r0, [r4, #8]
 800f706:	2201      	movs	r2, #1
 800f708:	2109      	movs	r1, #9
 800f70a:	f7ff ff7d 	bl	800f608 <std>
 800f70e:	68e0      	ldr	r0, [r4, #12]
 800f710:	2202      	movs	r2, #2
 800f712:	2112      	movs	r1, #18
 800f714:	f7ff ff78 	bl	800f608 <std>
 800f718:	2301      	movs	r3, #1
 800f71a:	61a3      	str	r3, [r4, #24]
 800f71c:	e7d2      	b.n	800f6c4 <__sinit+0xc>
 800f71e:	bf00      	nop
 800f720:	080123bc 	.word	0x080123bc
 800f724:	0800f651 	.word	0x0800f651

0800f728 <__sfp>:
 800f728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f72a:	4607      	mov	r7, r0
 800f72c:	f7ff ffac 	bl	800f688 <__sfp_lock_acquire>
 800f730:	4b1e      	ldr	r3, [pc, #120]	; (800f7ac <__sfp+0x84>)
 800f732:	681e      	ldr	r6, [r3, #0]
 800f734:	69b3      	ldr	r3, [r6, #24]
 800f736:	b913      	cbnz	r3, 800f73e <__sfp+0x16>
 800f738:	4630      	mov	r0, r6
 800f73a:	f7ff ffbd 	bl	800f6b8 <__sinit>
 800f73e:	3648      	adds	r6, #72	; 0x48
 800f740:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f744:	3b01      	subs	r3, #1
 800f746:	d503      	bpl.n	800f750 <__sfp+0x28>
 800f748:	6833      	ldr	r3, [r6, #0]
 800f74a:	b30b      	cbz	r3, 800f790 <__sfp+0x68>
 800f74c:	6836      	ldr	r6, [r6, #0]
 800f74e:	e7f7      	b.n	800f740 <__sfp+0x18>
 800f750:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f754:	b9d5      	cbnz	r5, 800f78c <__sfp+0x64>
 800f756:	4b16      	ldr	r3, [pc, #88]	; (800f7b0 <__sfp+0x88>)
 800f758:	60e3      	str	r3, [r4, #12]
 800f75a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f75e:	6665      	str	r5, [r4, #100]	; 0x64
 800f760:	f000 fbba 	bl	800fed8 <__retarget_lock_init_recursive>
 800f764:	f7ff ff96 	bl	800f694 <__sfp_lock_release>
 800f768:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f76c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f770:	6025      	str	r5, [r4, #0]
 800f772:	61a5      	str	r5, [r4, #24]
 800f774:	2208      	movs	r2, #8
 800f776:	4629      	mov	r1, r5
 800f778:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f77c:	f7fd f964 	bl	800ca48 <memset>
 800f780:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f784:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f788:	4620      	mov	r0, r4
 800f78a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f78c:	3468      	adds	r4, #104	; 0x68
 800f78e:	e7d9      	b.n	800f744 <__sfp+0x1c>
 800f790:	2104      	movs	r1, #4
 800f792:	4638      	mov	r0, r7
 800f794:	f7ff ff62 	bl	800f65c <__sfmoreglue>
 800f798:	4604      	mov	r4, r0
 800f79a:	6030      	str	r0, [r6, #0]
 800f79c:	2800      	cmp	r0, #0
 800f79e:	d1d5      	bne.n	800f74c <__sfp+0x24>
 800f7a0:	f7ff ff78 	bl	800f694 <__sfp_lock_release>
 800f7a4:	230c      	movs	r3, #12
 800f7a6:	603b      	str	r3, [r7, #0]
 800f7a8:	e7ee      	b.n	800f788 <__sfp+0x60>
 800f7aa:	bf00      	nop
 800f7ac:	080123bc 	.word	0x080123bc
 800f7b0:	ffff0001 	.word	0xffff0001

0800f7b4 <_fwalk_reent>:
 800f7b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7b8:	4606      	mov	r6, r0
 800f7ba:	4688      	mov	r8, r1
 800f7bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f7c0:	2700      	movs	r7, #0
 800f7c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f7c6:	f1b9 0901 	subs.w	r9, r9, #1
 800f7ca:	d505      	bpl.n	800f7d8 <_fwalk_reent+0x24>
 800f7cc:	6824      	ldr	r4, [r4, #0]
 800f7ce:	2c00      	cmp	r4, #0
 800f7d0:	d1f7      	bne.n	800f7c2 <_fwalk_reent+0xe>
 800f7d2:	4638      	mov	r0, r7
 800f7d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7d8:	89ab      	ldrh	r3, [r5, #12]
 800f7da:	2b01      	cmp	r3, #1
 800f7dc:	d907      	bls.n	800f7ee <_fwalk_reent+0x3a>
 800f7de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f7e2:	3301      	adds	r3, #1
 800f7e4:	d003      	beq.n	800f7ee <_fwalk_reent+0x3a>
 800f7e6:	4629      	mov	r1, r5
 800f7e8:	4630      	mov	r0, r6
 800f7ea:	47c0      	blx	r8
 800f7ec:	4307      	orrs	r7, r0
 800f7ee:	3568      	adds	r5, #104	; 0x68
 800f7f0:	e7e9      	b.n	800f7c6 <_fwalk_reent+0x12>

0800f7f2 <rshift>:
 800f7f2:	6903      	ldr	r3, [r0, #16]
 800f7f4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f7f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f7fc:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f800:	f100 0414 	add.w	r4, r0, #20
 800f804:	dd45      	ble.n	800f892 <rshift+0xa0>
 800f806:	f011 011f 	ands.w	r1, r1, #31
 800f80a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f80e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f812:	d10c      	bne.n	800f82e <rshift+0x3c>
 800f814:	f100 0710 	add.w	r7, r0, #16
 800f818:	4629      	mov	r1, r5
 800f81a:	42b1      	cmp	r1, r6
 800f81c:	d334      	bcc.n	800f888 <rshift+0x96>
 800f81e:	1a9b      	subs	r3, r3, r2
 800f820:	009b      	lsls	r3, r3, #2
 800f822:	1eea      	subs	r2, r5, #3
 800f824:	4296      	cmp	r6, r2
 800f826:	bf38      	it	cc
 800f828:	2300      	movcc	r3, #0
 800f82a:	4423      	add	r3, r4
 800f82c:	e015      	b.n	800f85a <rshift+0x68>
 800f82e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f832:	f1c1 0820 	rsb	r8, r1, #32
 800f836:	40cf      	lsrs	r7, r1
 800f838:	f105 0e04 	add.w	lr, r5, #4
 800f83c:	46a1      	mov	r9, r4
 800f83e:	4576      	cmp	r6, lr
 800f840:	46f4      	mov	ip, lr
 800f842:	d815      	bhi.n	800f870 <rshift+0x7e>
 800f844:	1a9b      	subs	r3, r3, r2
 800f846:	009a      	lsls	r2, r3, #2
 800f848:	3a04      	subs	r2, #4
 800f84a:	3501      	adds	r5, #1
 800f84c:	42ae      	cmp	r6, r5
 800f84e:	bf38      	it	cc
 800f850:	2200      	movcc	r2, #0
 800f852:	18a3      	adds	r3, r4, r2
 800f854:	50a7      	str	r7, [r4, r2]
 800f856:	b107      	cbz	r7, 800f85a <rshift+0x68>
 800f858:	3304      	adds	r3, #4
 800f85a:	1b1a      	subs	r2, r3, r4
 800f85c:	42a3      	cmp	r3, r4
 800f85e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f862:	bf08      	it	eq
 800f864:	2300      	moveq	r3, #0
 800f866:	6102      	str	r2, [r0, #16]
 800f868:	bf08      	it	eq
 800f86a:	6143      	streq	r3, [r0, #20]
 800f86c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f870:	f8dc c000 	ldr.w	ip, [ip]
 800f874:	fa0c fc08 	lsl.w	ip, ip, r8
 800f878:	ea4c 0707 	orr.w	r7, ip, r7
 800f87c:	f849 7b04 	str.w	r7, [r9], #4
 800f880:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f884:	40cf      	lsrs	r7, r1
 800f886:	e7da      	b.n	800f83e <rshift+0x4c>
 800f888:	f851 cb04 	ldr.w	ip, [r1], #4
 800f88c:	f847 cf04 	str.w	ip, [r7, #4]!
 800f890:	e7c3      	b.n	800f81a <rshift+0x28>
 800f892:	4623      	mov	r3, r4
 800f894:	e7e1      	b.n	800f85a <rshift+0x68>

0800f896 <__hexdig_fun>:
 800f896:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f89a:	2b09      	cmp	r3, #9
 800f89c:	d802      	bhi.n	800f8a4 <__hexdig_fun+0xe>
 800f89e:	3820      	subs	r0, #32
 800f8a0:	b2c0      	uxtb	r0, r0
 800f8a2:	4770      	bx	lr
 800f8a4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f8a8:	2b05      	cmp	r3, #5
 800f8aa:	d801      	bhi.n	800f8b0 <__hexdig_fun+0x1a>
 800f8ac:	3847      	subs	r0, #71	; 0x47
 800f8ae:	e7f7      	b.n	800f8a0 <__hexdig_fun+0xa>
 800f8b0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f8b4:	2b05      	cmp	r3, #5
 800f8b6:	d801      	bhi.n	800f8bc <__hexdig_fun+0x26>
 800f8b8:	3827      	subs	r0, #39	; 0x27
 800f8ba:	e7f1      	b.n	800f8a0 <__hexdig_fun+0xa>
 800f8bc:	2000      	movs	r0, #0
 800f8be:	4770      	bx	lr

0800f8c0 <__gethex>:
 800f8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8c4:	ed2d 8b02 	vpush	{d8}
 800f8c8:	b089      	sub	sp, #36	; 0x24
 800f8ca:	ee08 0a10 	vmov	s16, r0
 800f8ce:	9304      	str	r3, [sp, #16]
 800f8d0:	4bbc      	ldr	r3, [pc, #752]	; (800fbc4 <__gethex+0x304>)
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	9301      	str	r3, [sp, #4]
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	468b      	mov	fp, r1
 800f8da:	4690      	mov	r8, r2
 800f8dc:	f7f0 fd00 	bl	80002e0 <strlen>
 800f8e0:	9b01      	ldr	r3, [sp, #4]
 800f8e2:	f8db 2000 	ldr.w	r2, [fp]
 800f8e6:	4403      	add	r3, r0
 800f8e8:	4682      	mov	sl, r0
 800f8ea:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f8ee:	9305      	str	r3, [sp, #20]
 800f8f0:	1c93      	adds	r3, r2, #2
 800f8f2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f8f6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f8fa:	32fe      	adds	r2, #254	; 0xfe
 800f8fc:	18d1      	adds	r1, r2, r3
 800f8fe:	461f      	mov	r7, r3
 800f900:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f904:	9100      	str	r1, [sp, #0]
 800f906:	2830      	cmp	r0, #48	; 0x30
 800f908:	d0f8      	beq.n	800f8fc <__gethex+0x3c>
 800f90a:	f7ff ffc4 	bl	800f896 <__hexdig_fun>
 800f90e:	4604      	mov	r4, r0
 800f910:	2800      	cmp	r0, #0
 800f912:	d13a      	bne.n	800f98a <__gethex+0xca>
 800f914:	9901      	ldr	r1, [sp, #4]
 800f916:	4652      	mov	r2, sl
 800f918:	4638      	mov	r0, r7
 800f91a:	f001 fbe8 	bl	80110ee <strncmp>
 800f91e:	4605      	mov	r5, r0
 800f920:	2800      	cmp	r0, #0
 800f922:	d168      	bne.n	800f9f6 <__gethex+0x136>
 800f924:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f928:	eb07 060a 	add.w	r6, r7, sl
 800f92c:	f7ff ffb3 	bl	800f896 <__hexdig_fun>
 800f930:	2800      	cmp	r0, #0
 800f932:	d062      	beq.n	800f9fa <__gethex+0x13a>
 800f934:	4633      	mov	r3, r6
 800f936:	7818      	ldrb	r0, [r3, #0]
 800f938:	2830      	cmp	r0, #48	; 0x30
 800f93a:	461f      	mov	r7, r3
 800f93c:	f103 0301 	add.w	r3, r3, #1
 800f940:	d0f9      	beq.n	800f936 <__gethex+0x76>
 800f942:	f7ff ffa8 	bl	800f896 <__hexdig_fun>
 800f946:	2301      	movs	r3, #1
 800f948:	fab0 f480 	clz	r4, r0
 800f94c:	0964      	lsrs	r4, r4, #5
 800f94e:	4635      	mov	r5, r6
 800f950:	9300      	str	r3, [sp, #0]
 800f952:	463a      	mov	r2, r7
 800f954:	4616      	mov	r6, r2
 800f956:	3201      	adds	r2, #1
 800f958:	7830      	ldrb	r0, [r6, #0]
 800f95a:	f7ff ff9c 	bl	800f896 <__hexdig_fun>
 800f95e:	2800      	cmp	r0, #0
 800f960:	d1f8      	bne.n	800f954 <__gethex+0x94>
 800f962:	9901      	ldr	r1, [sp, #4]
 800f964:	4652      	mov	r2, sl
 800f966:	4630      	mov	r0, r6
 800f968:	f001 fbc1 	bl	80110ee <strncmp>
 800f96c:	b980      	cbnz	r0, 800f990 <__gethex+0xd0>
 800f96e:	b94d      	cbnz	r5, 800f984 <__gethex+0xc4>
 800f970:	eb06 050a 	add.w	r5, r6, sl
 800f974:	462a      	mov	r2, r5
 800f976:	4616      	mov	r6, r2
 800f978:	3201      	adds	r2, #1
 800f97a:	7830      	ldrb	r0, [r6, #0]
 800f97c:	f7ff ff8b 	bl	800f896 <__hexdig_fun>
 800f980:	2800      	cmp	r0, #0
 800f982:	d1f8      	bne.n	800f976 <__gethex+0xb6>
 800f984:	1bad      	subs	r5, r5, r6
 800f986:	00ad      	lsls	r5, r5, #2
 800f988:	e004      	b.n	800f994 <__gethex+0xd4>
 800f98a:	2400      	movs	r4, #0
 800f98c:	4625      	mov	r5, r4
 800f98e:	e7e0      	b.n	800f952 <__gethex+0x92>
 800f990:	2d00      	cmp	r5, #0
 800f992:	d1f7      	bne.n	800f984 <__gethex+0xc4>
 800f994:	7833      	ldrb	r3, [r6, #0]
 800f996:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f99a:	2b50      	cmp	r3, #80	; 0x50
 800f99c:	d13b      	bne.n	800fa16 <__gethex+0x156>
 800f99e:	7873      	ldrb	r3, [r6, #1]
 800f9a0:	2b2b      	cmp	r3, #43	; 0x2b
 800f9a2:	d02c      	beq.n	800f9fe <__gethex+0x13e>
 800f9a4:	2b2d      	cmp	r3, #45	; 0x2d
 800f9a6:	d02e      	beq.n	800fa06 <__gethex+0x146>
 800f9a8:	1c71      	adds	r1, r6, #1
 800f9aa:	f04f 0900 	mov.w	r9, #0
 800f9ae:	7808      	ldrb	r0, [r1, #0]
 800f9b0:	f7ff ff71 	bl	800f896 <__hexdig_fun>
 800f9b4:	1e43      	subs	r3, r0, #1
 800f9b6:	b2db      	uxtb	r3, r3
 800f9b8:	2b18      	cmp	r3, #24
 800f9ba:	d82c      	bhi.n	800fa16 <__gethex+0x156>
 800f9bc:	f1a0 0210 	sub.w	r2, r0, #16
 800f9c0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f9c4:	f7ff ff67 	bl	800f896 <__hexdig_fun>
 800f9c8:	1e43      	subs	r3, r0, #1
 800f9ca:	b2db      	uxtb	r3, r3
 800f9cc:	2b18      	cmp	r3, #24
 800f9ce:	d91d      	bls.n	800fa0c <__gethex+0x14c>
 800f9d0:	f1b9 0f00 	cmp.w	r9, #0
 800f9d4:	d000      	beq.n	800f9d8 <__gethex+0x118>
 800f9d6:	4252      	negs	r2, r2
 800f9d8:	4415      	add	r5, r2
 800f9da:	f8cb 1000 	str.w	r1, [fp]
 800f9de:	b1e4      	cbz	r4, 800fa1a <__gethex+0x15a>
 800f9e0:	9b00      	ldr	r3, [sp, #0]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	bf14      	ite	ne
 800f9e6:	2700      	movne	r7, #0
 800f9e8:	2706      	moveq	r7, #6
 800f9ea:	4638      	mov	r0, r7
 800f9ec:	b009      	add	sp, #36	; 0x24
 800f9ee:	ecbd 8b02 	vpop	{d8}
 800f9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9f6:	463e      	mov	r6, r7
 800f9f8:	4625      	mov	r5, r4
 800f9fa:	2401      	movs	r4, #1
 800f9fc:	e7ca      	b.n	800f994 <__gethex+0xd4>
 800f9fe:	f04f 0900 	mov.w	r9, #0
 800fa02:	1cb1      	adds	r1, r6, #2
 800fa04:	e7d3      	b.n	800f9ae <__gethex+0xee>
 800fa06:	f04f 0901 	mov.w	r9, #1
 800fa0a:	e7fa      	b.n	800fa02 <__gethex+0x142>
 800fa0c:	230a      	movs	r3, #10
 800fa0e:	fb03 0202 	mla	r2, r3, r2, r0
 800fa12:	3a10      	subs	r2, #16
 800fa14:	e7d4      	b.n	800f9c0 <__gethex+0x100>
 800fa16:	4631      	mov	r1, r6
 800fa18:	e7df      	b.n	800f9da <__gethex+0x11a>
 800fa1a:	1bf3      	subs	r3, r6, r7
 800fa1c:	3b01      	subs	r3, #1
 800fa1e:	4621      	mov	r1, r4
 800fa20:	2b07      	cmp	r3, #7
 800fa22:	dc0b      	bgt.n	800fa3c <__gethex+0x17c>
 800fa24:	ee18 0a10 	vmov	r0, s16
 800fa28:	f000 fad8 	bl	800ffdc <_Balloc>
 800fa2c:	4604      	mov	r4, r0
 800fa2e:	b940      	cbnz	r0, 800fa42 <__gethex+0x182>
 800fa30:	4b65      	ldr	r3, [pc, #404]	; (800fbc8 <__gethex+0x308>)
 800fa32:	4602      	mov	r2, r0
 800fa34:	21de      	movs	r1, #222	; 0xde
 800fa36:	4865      	ldr	r0, [pc, #404]	; (800fbcc <__gethex+0x30c>)
 800fa38:	f001 fb8a 	bl	8011150 <__assert_func>
 800fa3c:	3101      	adds	r1, #1
 800fa3e:	105b      	asrs	r3, r3, #1
 800fa40:	e7ee      	b.n	800fa20 <__gethex+0x160>
 800fa42:	f100 0914 	add.w	r9, r0, #20
 800fa46:	f04f 0b00 	mov.w	fp, #0
 800fa4a:	f1ca 0301 	rsb	r3, sl, #1
 800fa4e:	f8cd 9008 	str.w	r9, [sp, #8]
 800fa52:	f8cd b000 	str.w	fp, [sp]
 800fa56:	9306      	str	r3, [sp, #24]
 800fa58:	42b7      	cmp	r7, r6
 800fa5a:	d340      	bcc.n	800fade <__gethex+0x21e>
 800fa5c:	9802      	ldr	r0, [sp, #8]
 800fa5e:	9b00      	ldr	r3, [sp, #0]
 800fa60:	f840 3b04 	str.w	r3, [r0], #4
 800fa64:	eba0 0009 	sub.w	r0, r0, r9
 800fa68:	1080      	asrs	r0, r0, #2
 800fa6a:	0146      	lsls	r6, r0, #5
 800fa6c:	6120      	str	r0, [r4, #16]
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f000 fbaa 	bl	80101c8 <__hi0bits>
 800fa74:	1a30      	subs	r0, r6, r0
 800fa76:	f8d8 6000 	ldr.w	r6, [r8]
 800fa7a:	42b0      	cmp	r0, r6
 800fa7c:	dd63      	ble.n	800fb46 <__gethex+0x286>
 800fa7e:	1b87      	subs	r7, r0, r6
 800fa80:	4639      	mov	r1, r7
 800fa82:	4620      	mov	r0, r4
 800fa84:	f000 ff45 	bl	8010912 <__any_on>
 800fa88:	4682      	mov	sl, r0
 800fa8a:	b1a8      	cbz	r0, 800fab8 <__gethex+0x1f8>
 800fa8c:	1e7b      	subs	r3, r7, #1
 800fa8e:	1159      	asrs	r1, r3, #5
 800fa90:	f003 021f 	and.w	r2, r3, #31
 800fa94:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800fa98:	f04f 0a01 	mov.w	sl, #1
 800fa9c:	fa0a f202 	lsl.w	r2, sl, r2
 800faa0:	420a      	tst	r2, r1
 800faa2:	d009      	beq.n	800fab8 <__gethex+0x1f8>
 800faa4:	4553      	cmp	r3, sl
 800faa6:	dd05      	ble.n	800fab4 <__gethex+0x1f4>
 800faa8:	1eb9      	subs	r1, r7, #2
 800faaa:	4620      	mov	r0, r4
 800faac:	f000 ff31 	bl	8010912 <__any_on>
 800fab0:	2800      	cmp	r0, #0
 800fab2:	d145      	bne.n	800fb40 <__gethex+0x280>
 800fab4:	f04f 0a02 	mov.w	sl, #2
 800fab8:	4639      	mov	r1, r7
 800faba:	4620      	mov	r0, r4
 800fabc:	f7ff fe99 	bl	800f7f2 <rshift>
 800fac0:	443d      	add	r5, r7
 800fac2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fac6:	42ab      	cmp	r3, r5
 800fac8:	da4c      	bge.n	800fb64 <__gethex+0x2a4>
 800faca:	ee18 0a10 	vmov	r0, s16
 800face:	4621      	mov	r1, r4
 800fad0:	f000 fac4 	bl	801005c <_Bfree>
 800fad4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fad6:	2300      	movs	r3, #0
 800fad8:	6013      	str	r3, [r2, #0]
 800fada:	27a3      	movs	r7, #163	; 0xa3
 800fadc:	e785      	b.n	800f9ea <__gethex+0x12a>
 800fade:	1e73      	subs	r3, r6, #1
 800fae0:	9a05      	ldr	r2, [sp, #20]
 800fae2:	9303      	str	r3, [sp, #12]
 800fae4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fae8:	4293      	cmp	r3, r2
 800faea:	d019      	beq.n	800fb20 <__gethex+0x260>
 800faec:	f1bb 0f20 	cmp.w	fp, #32
 800faf0:	d107      	bne.n	800fb02 <__gethex+0x242>
 800faf2:	9b02      	ldr	r3, [sp, #8]
 800faf4:	9a00      	ldr	r2, [sp, #0]
 800faf6:	f843 2b04 	str.w	r2, [r3], #4
 800fafa:	9302      	str	r3, [sp, #8]
 800fafc:	2300      	movs	r3, #0
 800fafe:	9300      	str	r3, [sp, #0]
 800fb00:	469b      	mov	fp, r3
 800fb02:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800fb06:	f7ff fec6 	bl	800f896 <__hexdig_fun>
 800fb0a:	9b00      	ldr	r3, [sp, #0]
 800fb0c:	f000 000f 	and.w	r0, r0, #15
 800fb10:	fa00 f00b 	lsl.w	r0, r0, fp
 800fb14:	4303      	orrs	r3, r0
 800fb16:	9300      	str	r3, [sp, #0]
 800fb18:	f10b 0b04 	add.w	fp, fp, #4
 800fb1c:	9b03      	ldr	r3, [sp, #12]
 800fb1e:	e00d      	b.n	800fb3c <__gethex+0x27c>
 800fb20:	9b03      	ldr	r3, [sp, #12]
 800fb22:	9a06      	ldr	r2, [sp, #24]
 800fb24:	4413      	add	r3, r2
 800fb26:	42bb      	cmp	r3, r7
 800fb28:	d3e0      	bcc.n	800faec <__gethex+0x22c>
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	9901      	ldr	r1, [sp, #4]
 800fb2e:	9307      	str	r3, [sp, #28]
 800fb30:	4652      	mov	r2, sl
 800fb32:	f001 fadc 	bl	80110ee <strncmp>
 800fb36:	9b07      	ldr	r3, [sp, #28]
 800fb38:	2800      	cmp	r0, #0
 800fb3a:	d1d7      	bne.n	800faec <__gethex+0x22c>
 800fb3c:	461e      	mov	r6, r3
 800fb3e:	e78b      	b.n	800fa58 <__gethex+0x198>
 800fb40:	f04f 0a03 	mov.w	sl, #3
 800fb44:	e7b8      	b.n	800fab8 <__gethex+0x1f8>
 800fb46:	da0a      	bge.n	800fb5e <__gethex+0x29e>
 800fb48:	1a37      	subs	r7, r6, r0
 800fb4a:	4621      	mov	r1, r4
 800fb4c:	ee18 0a10 	vmov	r0, s16
 800fb50:	463a      	mov	r2, r7
 800fb52:	f000 fc9f 	bl	8010494 <__lshift>
 800fb56:	1bed      	subs	r5, r5, r7
 800fb58:	4604      	mov	r4, r0
 800fb5a:	f100 0914 	add.w	r9, r0, #20
 800fb5e:	f04f 0a00 	mov.w	sl, #0
 800fb62:	e7ae      	b.n	800fac2 <__gethex+0x202>
 800fb64:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800fb68:	42a8      	cmp	r0, r5
 800fb6a:	dd72      	ble.n	800fc52 <__gethex+0x392>
 800fb6c:	1b45      	subs	r5, r0, r5
 800fb6e:	42ae      	cmp	r6, r5
 800fb70:	dc36      	bgt.n	800fbe0 <__gethex+0x320>
 800fb72:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fb76:	2b02      	cmp	r3, #2
 800fb78:	d02a      	beq.n	800fbd0 <__gethex+0x310>
 800fb7a:	2b03      	cmp	r3, #3
 800fb7c:	d02c      	beq.n	800fbd8 <__gethex+0x318>
 800fb7e:	2b01      	cmp	r3, #1
 800fb80:	d115      	bne.n	800fbae <__gethex+0x2ee>
 800fb82:	42ae      	cmp	r6, r5
 800fb84:	d113      	bne.n	800fbae <__gethex+0x2ee>
 800fb86:	2e01      	cmp	r6, #1
 800fb88:	d10b      	bne.n	800fba2 <__gethex+0x2e2>
 800fb8a:	9a04      	ldr	r2, [sp, #16]
 800fb8c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fb90:	6013      	str	r3, [r2, #0]
 800fb92:	2301      	movs	r3, #1
 800fb94:	6123      	str	r3, [r4, #16]
 800fb96:	f8c9 3000 	str.w	r3, [r9]
 800fb9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fb9c:	2762      	movs	r7, #98	; 0x62
 800fb9e:	601c      	str	r4, [r3, #0]
 800fba0:	e723      	b.n	800f9ea <__gethex+0x12a>
 800fba2:	1e71      	subs	r1, r6, #1
 800fba4:	4620      	mov	r0, r4
 800fba6:	f000 feb4 	bl	8010912 <__any_on>
 800fbaa:	2800      	cmp	r0, #0
 800fbac:	d1ed      	bne.n	800fb8a <__gethex+0x2ca>
 800fbae:	ee18 0a10 	vmov	r0, s16
 800fbb2:	4621      	mov	r1, r4
 800fbb4:	f000 fa52 	bl	801005c <_Bfree>
 800fbb8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fbba:	2300      	movs	r3, #0
 800fbbc:	6013      	str	r3, [r2, #0]
 800fbbe:	2750      	movs	r7, #80	; 0x50
 800fbc0:	e713      	b.n	800f9ea <__gethex+0x12a>
 800fbc2:	bf00      	nop
 800fbc4:	080126b4 	.word	0x080126b4
 800fbc8:	080125d4 	.word	0x080125d4
 800fbcc:	08012648 	.word	0x08012648
 800fbd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d1eb      	bne.n	800fbae <__gethex+0x2ee>
 800fbd6:	e7d8      	b.n	800fb8a <__gethex+0x2ca>
 800fbd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d1d5      	bne.n	800fb8a <__gethex+0x2ca>
 800fbde:	e7e6      	b.n	800fbae <__gethex+0x2ee>
 800fbe0:	1e6f      	subs	r7, r5, #1
 800fbe2:	f1ba 0f00 	cmp.w	sl, #0
 800fbe6:	d131      	bne.n	800fc4c <__gethex+0x38c>
 800fbe8:	b127      	cbz	r7, 800fbf4 <__gethex+0x334>
 800fbea:	4639      	mov	r1, r7
 800fbec:	4620      	mov	r0, r4
 800fbee:	f000 fe90 	bl	8010912 <__any_on>
 800fbf2:	4682      	mov	sl, r0
 800fbf4:	117b      	asrs	r3, r7, #5
 800fbf6:	2101      	movs	r1, #1
 800fbf8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800fbfc:	f007 071f 	and.w	r7, r7, #31
 800fc00:	fa01 f707 	lsl.w	r7, r1, r7
 800fc04:	421f      	tst	r7, r3
 800fc06:	4629      	mov	r1, r5
 800fc08:	4620      	mov	r0, r4
 800fc0a:	bf18      	it	ne
 800fc0c:	f04a 0a02 	orrne.w	sl, sl, #2
 800fc10:	1b76      	subs	r6, r6, r5
 800fc12:	f7ff fdee 	bl	800f7f2 <rshift>
 800fc16:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fc1a:	2702      	movs	r7, #2
 800fc1c:	f1ba 0f00 	cmp.w	sl, #0
 800fc20:	d048      	beq.n	800fcb4 <__gethex+0x3f4>
 800fc22:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fc26:	2b02      	cmp	r3, #2
 800fc28:	d015      	beq.n	800fc56 <__gethex+0x396>
 800fc2a:	2b03      	cmp	r3, #3
 800fc2c:	d017      	beq.n	800fc5e <__gethex+0x39e>
 800fc2e:	2b01      	cmp	r3, #1
 800fc30:	d109      	bne.n	800fc46 <__gethex+0x386>
 800fc32:	f01a 0f02 	tst.w	sl, #2
 800fc36:	d006      	beq.n	800fc46 <__gethex+0x386>
 800fc38:	f8d9 0000 	ldr.w	r0, [r9]
 800fc3c:	ea4a 0a00 	orr.w	sl, sl, r0
 800fc40:	f01a 0f01 	tst.w	sl, #1
 800fc44:	d10e      	bne.n	800fc64 <__gethex+0x3a4>
 800fc46:	f047 0710 	orr.w	r7, r7, #16
 800fc4a:	e033      	b.n	800fcb4 <__gethex+0x3f4>
 800fc4c:	f04f 0a01 	mov.w	sl, #1
 800fc50:	e7d0      	b.n	800fbf4 <__gethex+0x334>
 800fc52:	2701      	movs	r7, #1
 800fc54:	e7e2      	b.n	800fc1c <__gethex+0x35c>
 800fc56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fc58:	f1c3 0301 	rsb	r3, r3, #1
 800fc5c:	9315      	str	r3, [sp, #84]	; 0x54
 800fc5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d0f0      	beq.n	800fc46 <__gethex+0x386>
 800fc64:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fc68:	f104 0314 	add.w	r3, r4, #20
 800fc6c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fc70:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fc74:	f04f 0c00 	mov.w	ip, #0
 800fc78:	4618      	mov	r0, r3
 800fc7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc7e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fc82:	d01c      	beq.n	800fcbe <__gethex+0x3fe>
 800fc84:	3201      	adds	r2, #1
 800fc86:	6002      	str	r2, [r0, #0]
 800fc88:	2f02      	cmp	r7, #2
 800fc8a:	f104 0314 	add.w	r3, r4, #20
 800fc8e:	d13f      	bne.n	800fd10 <__gethex+0x450>
 800fc90:	f8d8 2000 	ldr.w	r2, [r8]
 800fc94:	3a01      	subs	r2, #1
 800fc96:	42b2      	cmp	r2, r6
 800fc98:	d10a      	bne.n	800fcb0 <__gethex+0x3f0>
 800fc9a:	1171      	asrs	r1, r6, #5
 800fc9c:	2201      	movs	r2, #1
 800fc9e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fca2:	f006 061f 	and.w	r6, r6, #31
 800fca6:	fa02 f606 	lsl.w	r6, r2, r6
 800fcaa:	421e      	tst	r6, r3
 800fcac:	bf18      	it	ne
 800fcae:	4617      	movne	r7, r2
 800fcb0:	f047 0720 	orr.w	r7, r7, #32
 800fcb4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fcb6:	601c      	str	r4, [r3, #0]
 800fcb8:	9b04      	ldr	r3, [sp, #16]
 800fcba:	601d      	str	r5, [r3, #0]
 800fcbc:	e695      	b.n	800f9ea <__gethex+0x12a>
 800fcbe:	4299      	cmp	r1, r3
 800fcc0:	f843 cc04 	str.w	ip, [r3, #-4]
 800fcc4:	d8d8      	bhi.n	800fc78 <__gethex+0x3b8>
 800fcc6:	68a3      	ldr	r3, [r4, #8]
 800fcc8:	459b      	cmp	fp, r3
 800fcca:	db19      	blt.n	800fd00 <__gethex+0x440>
 800fccc:	6861      	ldr	r1, [r4, #4]
 800fcce:	ee18 0a10 	vmov	r0, s16
 800fcd2:	3101      	adds	r1, #1
 800fcd4:	f000 f982 	bl	800ffdc <_Balloc>
 800fcd8:	4681      	mov	r9, r0
 800fcda:	b918      	cbnz	r0, 800fce4 <__gethex+0x424>
 800fcdc:	4b1a      	ldr	r3, [pc, #104]	; (800fd48 <__gethex+0x488>)
 800fcde:	4602      	mov	r2, r0
 800fce0:	2184      	movs	r1, #132	; 0x84
 800fce2:	e6a8      	b.n	800fa36 <__gethex+0x176>
 800fce4:	6922      	ldr	r2, [r4, #16]
 800fce6:	3202      	adds	r2, #2
 800fce8:	f104 010c 	add.w	r1, r4, #12
 800fcec:	0092      	lsls	r2, r2, #2
 800fcee:	300c      	adds	r0, #12
 800fcf0:	f7fc fe9c 	bl	800ca2c <memcpy>
 800fcf4:	4621      	mov	r1, r4
 800fcf6:	ee18 0a10 	vmov	r0, s16
 800fcfa:	f000 f9af 	bl	801005c <_Bfree>
 800fcfe:	464c      	mov	r4, r9
 800fd00:	6923      	ldr	r3, [r4, #16]
 800fd02:	1c5a      	adds	r2, r3, #1
 800fd04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fd08:	6122      	str	r2, [r4, #16]
 800fd0a:	2201      	movs	r2, #1
 800fd0c:	615a      	str	r2, [r3, #20]
 800fd0e:	e7bb      	b.n	800fc88 <__gethex+0x3c8>
 800fd10:	6922      	ldr	r2, [r4, #16]
 800fd12:	455a      	cmp	r2, fp
 800fd14:	dd0b      	ble.n	800fd2e <__gethex+0x46e>
 800fd16:	2101      	movs	r1, #1
 800fd18:	4620      	mov	r0, r4
 800fd1a:	f7ff fd6a 	bl	800f7f2 <rshift>
 800fd1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fd22:	3501      	adds	r5, #1
 800fd24:	42ab      	cmp	r3, r5
 800fd26:	f6ff aed0 	blt.w	800faca <__gethex+0x20a>
 800fd2a:	2701      	movs	r7, #1
 800fd2c:	e7c0      	b.n	800fcb0 <__gethex+0x3f0>
 800fd2e:	f016 061f 	ands.w	r6, r6, #31
 800fd32:	d0fa      	beq.n	800fd2a <__gethex+0x46a>
 800fd34:	449a      	add	sl, r3
 800fd36:	f1c6 0620 	rsb	r6, r6, #32
 800fd3a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800fd3e:	f000 fa43 	bl	80101c8 <__hi0bits>
 800fd42:	42b0      	cmp	r0, r6
 800fd44:	dbe7      	blt.n	800fd16 <__gethex+0x456>
 800fd46:	e7f0      	b.n	800fd2a <__gethex+0x46a>
 800fd48:	080125d4 	.word	0x080125d4

0800fd4c <L_shift>:
 800fd4c:	f1c2 0208 	rsb	r2, r2, #8
 800fd50:	0092      	lsls	r2, r2, #2
 800fd52:	b570      	push	{r4, r5, r6, lr}
 800fd54:	f1c2 0620 	rsb	r6, r2, #32
 800fd58:	6843      	ldr	r3, [r0, #4]
 800fd5a:	6804      	ldr	r4, [r0, #0]
 800fd5c:	fa03 f506 	lsl.w	r5, r3, r6
 800fd60:	432c      	orrs	r4, r5
 800fd62:	40d3      	lsrs	r3, r2
 800fd64:	6004      	str	r4, [r0, #0]
 800fd66:	f840 3f04 	str.w	r3, [r0, #4]!
 800fd6a:	4288      	cmp	r0, r1
 800fd6c:	d3f4      	bcc.n	800fd58 <L_shift+0xc>
 800fd6e:	bd70      	pop	{r4, r5, r6, pc}

0800fd70 <__match>:
 800fd70:	b530      	push	{r4, r5, lr}
 800fd72:	6803      	ldr	r3, [r0, #0]
 800fd74:	3301      	adds	r3, #1
 800fd76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd7a:	b914      	cbnz	r4, 800fd82 <__match+0x12>
 800fd7c:	6003      	str	r3, [r0, #0]
 800fd7e:	2001      	movs	r0, #1
 800fd80:	bd30      	pop	{r4, r5, pc}
 800fd82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd86:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800fd8a:	2d19      	cmp	r5, #25
 800fd8c:	bf98      	it	ls
 800fd8e:	3220      	addls	r2, #32
 800fd90:	42a2      	cmp	r2, r4
 800fd92:	d0f0      	beq.n	800fd76 <__match+0x6>
 800fd94:	2000      	movs	r0, #0
 800fd96:	e7f3      	b.n	800fd80 <__match+0x10>

0800fd98 <__hexnan>:
 800fd98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd9c:	680b      	ldr	r3, [r1, #0]
 800fd9e:	6801      	ldr	r1, [r0, #0]
 800fda0:	115e      	asrs	r6, r3, #5
 800fda2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fda6:	f013 031f 	ands.w	r3, r3, #31
 800fdaa:	b087      	sub	sp, #28
 800fdac:	bf18      	it	ne
 800fdae:	3604      	addne	r6, #4
 800fdb0:	2500      	movs	r5, #0
 800fdb2:	1f37      	subs	r7, r6, #4
 800fdb4:	4682      	mov	sl, r0
 800fdb6:	4690      	mov	r8, r2
 800fdb8:	9301      	str	r3, [sp, #4]
 800fdba:	f846 5c04 	str.w	r5, [r6, #-4]
 800fdbe:	46b9      	mov	r9, r7
 800fdc0:	463c      	mov	r4, r7
 800fdc2:	9502      	str	r5, [sp, #8]
 800fdc4:	46ab      	mov	fp, r5
 800fdc6:	784a      	ldrb	r2, [r1, #1]
 800fdc8:	1c4b      	adds	r3, r1, #1
 800fdca:	9303      	str	r3, [sp, #12]
 800fdcc:	b342      	cbz	r2, 800fe20 <__hexnan+0x88>
 800fdce:	4610      	mov	r0, r2
 800fdd0:	9105      	str	r1, [sp, #20]
 800fdd2:	9204      	str	r2, [sp, #16]
 800fdd4:	f7ff fd5f 	bl	800f896 <__hexdig_fun>
 800fdd8:	2800      	cmp	r0, #0
 800fdda:	d14f      	bne.n	800fe7c <__hexnan+0xe4>
 800fddc:	9a04      	ldr	r2, [sp, #16]
 800fdde:	9905      	ldr	r1, [sp, #20]
 800fde0:	2a20      	cmp	r2, #32
 800fde2:	d818      	bhi.n	800fe16 <__hexnan+0x7e>
 800fde4:	9b02      	ldr	r3, [sp, #8]
 800fde6:	459b      	cmp	fp, r3
 800fde8:	dd13      	ble.n	800fe12 <__hexnan+0x7a>
 800fdea:	454c      	cmp	r4, r9
 800fdec:	d206      	bcs.n	800fdfc <__hexnan+0x64>
 800fdee:	2d07      	cmp	r5, #7
 800fdf0:	dc04      	bgt.n	800fdfc <__hexnan+0x64>
 800fdf2:	462a      	mov	r2, r5
 800fdf4:	4649      	mov	r1, r9
 800fdf6:	4620      	mov	r0, r4
 800fdf8:	f7ff ffa8 	bl	800fd4c <L_shift>
 800fdfc:	4544      	cmp	r4, r8
 800fdfe:	d950      	bls.n	800fea2 <__hexnan+0x10a>
 800fe00:	2300      	movs	r3, #0
 800fe02:	f1a4 0904 	sub.w	r9, r4, #4
 800fe06:	f844 3c04 	str.w	r3, [r4, #-4]
 800fe0a:	f8cd b008 	str.w	fp, [sp, #8]
 800fe0e:	464c      	mov	r4, r9
 800fe10:	461d      	mov	r5, r3
 800fe12:	9903      	ldr	r1, [sp, #12]
 800fe14:	e7d7      	b.n	800fdc6 <__hexnan+0x2e>
 800fe16:	2a29      	cmp	r2, #41	; 0x29
 800fe18:	d156      	bne.n	800fec8 <__hexnan+0x130>
 800fe1a:	3102      	adds	r1, #2
 800fe1c:	f8ca 1000 	str.w	r1, [sl]
 800fe20:	f1bb 0f00 	cmp.w	fp, #0
 800fe24:	d050      	beq.n	800fec8 <__hexnan+0x130>
 800fe26:	454c      	cmp	r4, r9
 800fe28:	d206      	bcs.n	800fe38 <__hexnan+0xa0>
 800fe2a:	2d07      	cmp	r5, #7
 800fe2c:	dc04      	bgt.n	800fe38 <__hexnan+0xa0>
 800fe2e:	462a      	mov	r2, r5
 800fe30:	4649      	mov	r1, r9
 800fe32:	4620      	mov	r0, r4
 800fe34:	f7ff ff8a 	bl	800fd4c <L_shift>
 800fe38:	4544      	cmp	r4, r8
 800fe3a:	d934      	bls.n	800fea6 <__hexnan+0x10e>
 800fe3c:	f1a8 0204 	sub.w	r2, r8, #4
 800fe40:	4623      	mov	r3, r4
 800fe42:	f853 1b04 	ldr.w	r1, [r3], #4
 800fe46:	f842 1f04 	str.w	r1, [r2, #4]!
 800fe4a:	429f      	cmp	r7, r3
 800fe4c:	d2f9      	bcs.n	800fe42 <__hexnan+0xaa>
 800fe4e:	1b3b      	subs	r3, r7, r4
 800fe50:	f023 0303 	bic.w	r3, r3, #3
 800fe54:	3304      	adds	r3, #4
 800fe56:	3401      	adds	r4, #1
 800fe58:	3e03      	subs	r6, #3
 800fe5a:	42b4      	cmp	r4, r6
 800fe5c:	bf88      	it	hi
 800fe5e:	2304      	movhi	r3, #4
 800fe60:	4443      	add	r3, r8
 800fe62:	2200      	movs	r2, #0
 800fe64:	f843 2b04 	str.w	r2, [r3], #4
 800fe68:	429f      	cmp	r7, r3
 800fe6a:	d2fb      	bcs.n	800fe64 <__hexnan+0xcc>
 800fe6c:	683b      	ldr	r3, [r7, #0]
 800fe6e:	b91b      	cbnz	r3, 800fe78 <__hexnan+0xe0>
 800fe70:	4547      	cmp	r7, r8
 800fe72:	d127      	bne.n	800fec4 <__hexnan+0x12c>
 800fe74:	2301      	movs	r3, #1
 800fe76:	603b      	str	r3, [r7, #0]
 800fe78:	2005      	movs	r0, #5
 800fe7a:	e026      	b.n	800feca <__hexnan+0x132>
 800fe7c:	3501      	adds	r5, #1
 800fe7e:	2d08      	cmp	r5, #8
 800fe80:	f10b 0b01 	add.w	fp, fp, #1
 800fe84:	dd06      	ble.n	800fe94 <__hexnan+0xfc>
 800fe86:	4544      	cmp	r4, r8
 800fe88:	d9c3      	bls.n	800fe12 <__hexnan+0x7a>
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	f844 3c04 	str.w	r3, [r4, #-4]
 800fe90:	2501      	movs	r5, #1
 800fe92:	3c04      	subs	r4, #4
 800fe94:	6822      	ldr	r2, [r4, #0]
 800fe96:	f000 000f 	and.w	r0, r0, #15
 800fe9a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800fe9e:	6022      	str	r2, [r4, #0]
 800fea0:	e7b7      	b.n	800fe12 <__hexnan+0x7a>
 800fea2:	2508      	movs	r5, #8
 800fea4:	e7b5      	b.n	800fe12 <__hexnan+0x7a>
 800fea6:	9b01      	ldr	r3, [sp, #4]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d0df      	beq.n	800fe6c <__hexnan+0xd4>
 800feac:	f04f 32ff 	mov.w	r2, #4294967295
 800feb0:	f1c3 0320 	rsb	r3, r3, #32
 800feb4:	fa22 f303 	lsr.w	r3, r2, r3
 800feb8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800febc:	401a      	ands	r2, r3
 800febe:	f846 2c04 	str.w	r2, [r6, #-4]
 800fec2:	e7d3      	b.n	800fe6c <__hexnan+0xd4>
 800fec4:	3f04      	subs	r7, #4
 800fec6:	e7d1      	b.n	800fe6c <__hexnan+0xd4>
 800fec8:	2004      	movs	r0, #4
 800feca:	b007      	add	sp, #28
 800fecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fed0 <_localeconv_r>:
 800fed0:	4800      	ldr	r0, [pc, #0]	; (800fed4 <_localeconv_r+0x4>)
 800fed2:	4770      	bx	lr
 800fed4:	24000168 	.word	0x24000168

0800fed8 <__retarget_lock_init_recursive>:
 800fed8:	4770      	bx	lr

0800feda <__retarget_lock_acquire_recursive>:
 800feda:	4770      	bx	lr

0800fedc <__retarget_lock_release_recursive>:
 800fedc:	4770      	bx	lr

0800fede <__swhatbuf_r>:
 800fede:	b570      	push	{r4, r5, r6, lr}
 800fee0:	460e      	mov	r6, r1
 800fee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fee6:	2900      	cmp	r1, #0
 800fee8:	b096      	sub	sp, #88	; 0x58
 800feea:	4614      	mov	r4, r2
 800feec:	461d      	mov	r5, r3
 800feee:	da07      	bge.n	800ff00 <__swhatbuf_r+0x22>
 800fef0:	2300      	movs	r3, #0
 800fef2:	602b      	str	r3, [r5, #0]
 800fef4:	89b3      	ldrh	r3, [r6, #12]
 800fef6:	061a      	lsls	r2, r3, #24
 800fef8:	d410      	bmi.n	800ff1c <__swhatbuf_r+0x3e>
 800fefa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fefe:	e00e      	b.n	800ff1e <__swhatbuf_r+0x40>
 800ff00:	466a      	mov	r2, sp
 800ff02:	f001 f965 	bl	80111d0 <_fstat_r>
 800ff06:	2800      	cmp	r0, #0
 800ff08:	dbf2      	blt.n	800fef0 <__swhatbuf_r+0x12>
 800ff0a:	9a01      	ldr	r2, [sp, #4]
 800ff0c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ff10:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ff14:	425a      	negs	r2, r3
 800ff16:	415a      	adcs	r2, r3
 800ff18:	602a      	str	r2, [r5, #0]
 800ff1a:	e7ee      	b.n	800fefa <__swhatbuf_r+0x1c>
 800ff1c:	2340      	movs	r3, #64	; 0x40
 800ff1e:	2000      	movs	r0, #0
 800ff20:	6023      	str	r3, [r4, #0]
 800ff22:	b016      	add	sp, #88	; 0x58
 800ff24:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ff28 <__smakebuf_r>:
 800ff28:	898b      	ldrh	r3, [r1, #12]
 800ff2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ff2c:	079d      	lsls	r5, r3, #30
 800ff2e:	4606      	mov	r6, r0
 800ff30:	460c      	mov	r4, r1
 800ff32:	d507      	bpl.n	800ff44 <__smakebuf_r+0x1c>
 800ff34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ff38:	6023      	str	r3, [r4, #0]
 800ff3a:	6123      	str	r3, [r4, #16]
 800ff3c:	2301      	movs	r3, #1
 800ff3e:	6163      	str	r3, [r4, #20]
 800ff40:	b002      	add	sp, #8
 800ff42:	bd70      	pop	{r4, r5, r6, pc}
 800ff44:	ab01      	add	r3, sp, #4
 800ff46:	466a      	mov	r2, sp
 800ff48:	f7ff ffc9 	bl	800fede <__swhatbuf_r>
 800ff4c:	9900      	ldr	r1, [sp, #0]
 800ff4e:	4605      	mov	r5, r0
 800ff50:	4630      	mov	r0, r6
 800ff52:	f000 fd5f 	bl	8010a14 <_malloc_r>
 800ff56:	b948      	cbnz	r0, 800ff6c <__smakebuf_r+0x44>
 800ff58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff5c:	059a      	lsls	r2, r3, #22
 800ff5e:	d4ef      	bmi.n	800ff40 <__smakebuf_r+0x18>
 800ff60:	f023 0303 	bic.w	r3, r3, #3
 800ff64:	f043 0302 	orr.w	r3, r3, #2
 800ff68:	81a3      	strh	r3, [r4, #12]
 800ff6a:	e7e3      	b.n	800ff34 <__smakebuf_r+0xc>
 800ff6c:	4b0d      	ldr	r3, [pc, #52]	; (800ffa4 <__smakebuf_r+0x7c>)
 800ff6e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ff70:	89a3      	ldrh	r3, [r4, #12]
 800ff72:	6020      	str	r0, [r4, #0]
 800ff74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff78:	81a3      	strh	r3, [r4, #12]
 800ff7a:	9b00      	ldr	r3, [sp, #0]
 800ff7c:	6163      	str	r3, [r4, #20]
 800ff7e:	9b01      	ldr	r3, [sp, #4]
 800ff80:	6120      	str	r0, [r4, #16]
 800ff82:	b15b      	cbz	r3, 800ff9c <__smakebuf_r+0x74>
 800ff84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff88:	4630      	mov	r0, r6
 800ff8a:	f001 f933 	bl	80111f4 <_isatty_r>
 800ff8e:	b128      	cbz	r0, 800ff9c <__smakebuf_r+0x74>
 800ff90:	89a3      	ldrh	r3, [r4, #12]
 800ff92:	f023 0303 	bic.w	r3, r3, #3
 800ff96:	f043 0301 	orr.w	r3, r3, #1
 800ff9a:	81a3      	strh	r3, [r4, #12]
 800ff9c:	89a0      	ldrh	r0, [r4, #12]
 800ff9e:	4305      	orrs	r5, r0
 800ffa0:	81a5      	strh	r5, [r4, #12]
 800ffa2:	e7cd      	b.n	800ff40 <__smakebuf_r+0x18>
 800ffa4:	0800f651 	.word	0x0800f651

0800ffa8 <malloc>:
 800ffa8:	4b02      	ldr	r3, [pc, #8]	; (800ffb4 <malloc+0xc>)
 800ffaa:	4601      	mov	r1, r0
 800ffac:	6818      	ldr	r0, [r3, #0]
 800ffae:	f000 bd31 	b.w	8010a14 <_malloc_r>
 800ffb2:	bf00      	nop
 800ffb4:	24000010 	.word	0x24000010

0800ffb8 <__ascii_mbtowc>:
 800ffb8:	b082      	sub	sp, #8
 800ffba:	b901      	cbnz	r1, 800ffbe <__ascii_mbtowc+0x6>
 800ffbc:	a901      	add	r1, sp, #4
 800ffbe:	b142      	cbz	r2, 800ffd2 <__ascii_mbtowc+0x1a>
 800ffc0:	b14b      	cbz	r3, 800ffd6 <__ascii_mbtowc+0x1e>
 800ffc2:	7813      	ldrb	r3, [r2, #0]
 800ffc4:	600b      	str	r3, [r1, #0]
 800ffc6:	7812      	ldrb	r2, [r2, #0]
 800ffc8:	1e10      	subs	r0, r2, #0
 800ffca:	bf18      	it	ne
 800ffcc:	2001      	movne	r0, #1
 800ffce:	b002      	add	sp, #8
 800ffd0:	4770      	bx	lr
 800ffd2:	4610      	mov	r0, r2
 800ffd4:	e7fb      	b.n	800ffce <__ascii_mbtowc+0x16>
 800ffd6:	f06f 0001 	mvn.w	r0, #1
 800ffda:	e7f8      	b.n	800ffce <__ascii_mbtowc+0x16>

0800ffdc <_Balloc>:
 800ffdc:	b570      	push	{r4, r5, r6, lr}
 800ffde:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ffe0:	4604      	mov	r4, r0
 800ffe2:	460d      	mov	r5, r1
 800ffe4:	b976      	cbnz	r6, 8010004 <_Balloc+0x28>
 800ffe6:	2010      	movs	r0, #16
 800ffe8:	f7ff ffde 	bl	800ffa8 <malloc>
 800ffec:	4602      	mov	r2, r0
 800ffee:	6260      	str	r0, [r4, #36]	; 0x24
 800fff0:	b920      	cbnz	r0, 800fffc <_Balloc+0x20>
 800fff2:	4b18      	ldr	r3, [pc, #96]	; (8010054 <_Balloc+0x78>)
 800fff4:	4818      	ldr	r0, [pc, #96]	; (8010058 <_Balloc+0x7c>)
 800fff6:	2166      	movs	r1, #102	; 0x66
 800fff8:	f001 f8aa 	bl	8011150 <__assert_func>
 800fffc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010000:	6006      	str	r6, [r0, #0]
 8010002:	60c6      	str	r6, [r0, #12]
 8010004:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010006:	68f3      	ldr	r3, [r6, #12]
 8010008:	b183      	cbz	r3, 801002c <_Balloc+0x50>
 801000a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801000c:	68db      	ldr	r3, [r3, #12]
 801000e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010012:	b9b8      	cbnz	r0, 8010044 <_Balloc+0x68>
 8010014:	2101      	movs	r1, #1
 8010016:	fa01 f605 	lsl.w	r6, r1, r5
 801001a:	1d72      	adds	r2, r6, #5
 801001c:	0092      	lsls	r2, r2, #2
 801001e:	4620      	mov	r0, r4
 8010020:	f000 fc98 	bl	8010954 <_calloc_r>
 8010024:	b160      	cbz	r0, 8010040 <_Balloc+0x64>
 8010026:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801002a:	e00e      	b.n	801004a <_Balloc+0x6e>
 801002c:	2221      	movs	r2, #33	; 0x21
 801002e:	2104      	movs	r1, #4
 8010030:	4620      	mov	r0, r4
 8010032:	f000 fc8f 	bl	8010954 <_calloc_r>
 8010036:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010038:	60f0      	str	r0, [r6, #12]
 801003a:	68db      	ldr	r3, [r3, #12]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d1e4      	bne.n	801000a <_Balloc+0x2e>
 8010040:	2000      	movs	r0, #0
 8010042:	bd70      	pop	{r4, r5, r6, pc}
 8010044:	6802      	ldr	r2, [r0, #0]
 8010046:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801004a:	2300      	movs	r3, #0
 801004c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010050:	e7f7      	b.n	8010042 <_Balloc+0x66>
 8010052:	bf00      	nop
 8010054:	0801255e 	.word	0x0801255e
 8010058:	080126c8 	.word	0x080126c8

0801005c <_Bfree>:
 801005c:	b570      	push	{r4, r5, r6, lr}
 801005e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010060:	4605      	mov	r5, r0
 8010062:	460c      	mov	r4, r1
 8010064:	b976      	cbnz	r6, 8010084 <_Bfree+0x28>
 8010066:	2010      	movs	r0, #16
 8010068:	f7ff ff9e 	bl	800ffa8 <malloc>
 801006c:	4602      	mov	r2, r0
 801006e:	6268      	str	r0, [r5, #36]	; 0x24
 8010070:	b920      	cbnz	r0, 801007c <_Bfree+0x20>
 8010072:	4b09      	ldr	r3, [pc, #36]	; (8010098 <_Bfree+0x3c>)
 8010074:	4809      	ldr	r0, [pc, #36]	; (801009c <_Bfree+0x40>)
 8010076:	218a      	movs	r1, #138	; 0x8a
 8010078:	f001 f86a 	bl	8011150 <__assert_func>
 801007c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010080:	6006      	str	r6, [r0, #0]
 8010082:	60c6      	str	r6, [r0, #12]
 8010084:	b13c      	cbz	r4, 8010096 <_Bfree+0x3a>
 8010086:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010088:	6862      	ldr	r2, [r4, #4]
 801008a:	68db      	ldr	r3, [r3, #12]
 801008c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010090:	6021      	str	r1, [r4, #0]
 8010092:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010096:	bd70      	pop	{r4, r5, r6, pc}
 8010098:	0801255e 	.word	0x0801255e
 801009c:	080126c8 	.word	0x080126c8

080100a0 <__multadd>:
 80100a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100a4:	690e      	ldr	r6, [r1, #16]
 80100a6:	4607      	mov	r7, r0
 80100a8:	4698      	mov	r8, r3
 80100aa:	460c      	mov	r4, r1
 80100ac:	f101 0014 	add.w	r0, r1, #20
 80100b0:	2300      	movs	r3, #0
 80100b2:	6805      	ldr	r5, [r0, #0]
 80100b4:	b2a9      	uxth	r1, r5
 80100b6:	fb02 8101 	mla	r1, r2, r1, r8
 80100ba:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80100be:	0c2d      	lsrs	r5, r5, #16
 80100c0:	fb02 c505 	mla	r5, r2, r5, ip
 80100c4:	b289      	uxth	r1, r1
 80100c6:	3301      	adds	r3, #1
 80100c8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80100cc:	429e      	cmp	r6, r3
 80100ce:	f840 1b04 	str.w	r1, [r0], #4
 80100d2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80100d6:	dcec      	bgt.n	80100b2 <__multadd+0x12>
 80100d8:	f1b8 0f00 	cmp.w	r8, #0
 80100dc:	d022      	beq.n	8010124 <__multadd+0x84>
 80100de:	68a3      	ldr	r3, [r4, #8]
 80100e0:	42b3      	cmp	r3, r6
 80100e2:	dc19      	bgt.n	8010118 <__multadd+0x78>
 80100e4:	6861      	ldr	r1, [r4, #4]
 80100e6:	4638      	mov	r0, r7
 80100e8:	3101      	adds	r1, #1
 80100ea:	f7ff ff77 	bl	800ffdc <_Balloc>
 80100ee:	4605      	mov	r5, r0
 80100f0:	b928      	cbnz	r0, 80100fe <__multadd+0x5e>
 80100f2:	4602      	mov	r2, r0
 80100f4:	4b0d      	ldr	r3, [pc, #52]	; (801012c <__multadd+0x8c>)
 80100f6:	480e      	ldr	r0, [pc, #56]	; (8010130 <__multadd+0x90>)
 80100f8:	21b5      	movs	r1, #181	; 0xb5
 80100fa:	f001 f829 	bl	8011150 <__assert_func>
 80100fe:	6922      	ldr	r2, [r4, #16]
 8010100:	3202      	adds	r2, #2
 8010102:	f104 010c 	add.w	r1, r4, #12
 8010106:	0092      	lsls	r2, r2, #2
 8010108:	300c      	adds	r0, #12
 801010a:	f7fc fc8f 	bl	800ca2c <memcpy>
 801010e:	4621      	mov	r1, r4
 8010110:	4638      	mov	r0, r7
 8010112:	f7ff ffa3 	bl	801005c <_Bfree>
 8010116:	462c      	mov	r4, r5
 8010118:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801011c:	3601      	adds	r6, #1
 801011e:	f8c3 8014 	str.w	r8, [r3, #20]
 8010122:	6126      	str	r6, [r4, #16]
 8010124:	4620      	mov	r0, r4
 8010126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801012a:	bf00      	nop
 801012c:	080125d4 	.word	0x080125d4
 8010130:	080126c8 	.word	0x080126c8

08010134 <__s2b>:
 8010134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010138:	460c      	mov	r4, r1
 801013a:	4615      	mov	r5, r2
 801013c:	461f      	mov	r7, r3
 801013e:	2209      	movs	r2, #9
 8010140:	3308      	adds	r3, #8
 8010142:	4606      	mov	r6, r0
 8010144:	fb93 f3f2 	sdiv	r3, r3, r2
 8010148:	2100      	movs	r1, #0
 801014a:	2201      	movs	r2, #1
 801014c:	429a      	cmp	r2, r3
 801014e:	db09      	blt.n	8010164 <__s2b+0x30>
 8010150:	4630      	mov	r0, r6
 8010152:	f7ff ff43 	bl	800ffdc <_Balloc>
 8010156:	b940      	cbnz	r0, 801016a <__s2b+0x36>
 8010158:	4602      	mov	r2, r0
 801015a:	4b19      	ldr	r3, [pc, #100]	; (80101c0 <__s2b+0x8c>)
 801015c:	4819      	ldr	r0, [pc, #100]	; (80101c4 <__s2b+0x90>)
 801015e:	21ce      	movs	r1, #206	; 0xce
 8010160:	f000 fff6 	bl	8011150 <__assert_func>
 8010164:	0052      	lsls	r2, r2, #1
 8010166:	3101      	adds	r1, #1
 8010168:	e7f0      	b.n	801014c <__s2b+0x18>
 801016a:	9b08      	ldr	r3, [sp, #32]
 801016c:	6143      	str	r3, [r0, #20]
 801016e:	2d09      	cmp	r5, #9
 8010170:	f04f 0301 	mov.w	r3, #1
 8010174:	6103      	str	r3, [r0, #16]
 8010176:	dd16      	ble.n	80101a6 <__s2b+0x72>
 8010178:	f104 0909 	add.w	r9, r4, #9
 801017c:	46c8      	mov	r8, r9
 801017e:	442c      	add	r4, r5
 8010180:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010184:	4601      	mov	r1, r0
 8010186:	3b30      	subs	r3, #48	; 0x30
 8010188:	220a      	movs	r2, #10
 801018a:	4630      	mov	r0, r6
 801018c:	f7ff ff88 	bl	80100a0 <__multadd>
 8010190:	45a0      	cmp	r8, r4
 8010192:	d1f5      	bne.n	8010180 <__s2b+0x4c>
 8010194:	f1a5 0408 	sub.w	r4, r5, #8
 8010198:	444c      	add	r4, r9
 801019a:	1b2d      	subs	r5, r5, r4
 801019c:	1963      	adds	r3, r4, r5
 801019e:	42bb      	cmp	r3, r7
 80101a0:	db04      	blt.n	80101ac <__s2b+0x78>
 80101a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101a6:	340a      	adds	r4, #10
 80101a8:	2509      	movs	r5, #9
 80101aa:	e7f6      	b.n	801019a <__s2b+0x66>
 80101ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80101b0:	4601      	mov	r1, r0
 80101b2:	3b30      	subs	r3, #48	; 0x30
 80101b4:	220a      	movs	r2, #10
 80101b6:	4630      	mov	r0, r6
 80101b8:	f7ff ff72 	bl	80100a0 <__multadd>
 80101bc:	e7ee      	b.n	801019c <__s2b+0x68>
 80101be:	bf00      	nop
 80101c0:	080125d4 	.word	0x080125d4
 80101c4:	080126c8 	.word	0x080126c8

080101c8 <__hi0bits>:
 80101c8:	0c03      	lsrs	r3, r0, #16
 80101ca:	041b      	lsls	r3, r3, #16
 80101cc:	b9d3      	cbnz	r3, 8010204 <__hi0bits+0x3c>
 80101ce:	0400      	lsls	r0, r0, #16
 80101d0:	2310      	movs	r3, #16
 80101d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80101d6:	bf04      	itt	eq
 80101d8:	0200      	lsleq	r0, r0, #8
 80101da:	3308      	addeq	r3, #8
 80101dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80101e0:	bf04      	itt	eq
 80101e2:	0100      	lsleq	r0, r0, #4
 80101e4:	3304      	addeq	r3, #4
 80101e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80101ea:	bf04      	itt	eq
 80101ec:	0080      	lsleq	r0, r0, #2
 80101ee:	3302      	addeq	r3, #2
 80101f0:	2800      	cmp	r0, #0
 80101f2:	db05      	blt.n	8010200 <__hi0bits+0x38>
 80101f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80101f8:	f103 0301 	add.w	r3, r3, #1
 80101fc:	bf08      	it	eq
 80101fe:	2320      	moveq	r3, #32
 8010200:	4618      	mov	r0, r3
 8010202:	4770      	bx	lr
 8010204:	2300      	movs	r3, #0
 8010206:	e7e4      	b.n	80101d2 <__hi0bits+0xa>

08010208 <__lo0bits>:
 8010208:	6803      	ldr	r3, [r0, #0]
 801020a:	f013 0207 	ands.w	r2, r3, #7
 801020e:	4601      	mov	r1, r0
 8010210:	d00b      	beq.n	801022a <__lo0bits+0x22>
 8010212:	07da      	lsls	r2, r3, #31
 8010214:	d424      	bmi.n	8010260 <__lo0bits+0x58>
 8010216:	0798      	lsls	r0, r3, #30
 8010218:	bf49      	itett	mi
 801021a:	085b      	lsrmi	r3, r3, #1
 801021c:	089b      	lsrpl	r3, r3, #2
 801021e:	2001      	movmi	r0, #1
 8010220:	600b      	strmi	r3, [r1, #0]
 8010222:	bf5c      	itt	pl
 8010224:	600b      	strpl	r3, [r1, #0]
 8010226:	2002      	movpl	r0, #2
 8010228:	4770      	bx	lr
 801022a:	b298      	uxth	r0, r3
 801022c:	b9b0      	cbnz	r0, 801025c <__lo0bits+0x54>
 801022e:	0c1b      	lsrs	r3, r3, #16
 8010230:	2010      	movs	r0, #16
 8010232:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010236:	bf04      	itt	eq
 8010238:	0a1b      	lsreq	r3, r3, #8
 801023a:	3008      	addeq	r0, #8
 801023c:	071a      	lsls	r2, r3, #28
 801023e:	bf04      	itt	eq
 8010240:	091b      	lsreq	r3, r3, #4
 8010242:	3004      	addeq	r0, #4
 8010244:	079a      	lsls	r2, r3, #30
 8010246:	bf04      	itt	eq
 8010248:	089b      	lsreq	r3, r3, #2
 801024a:	3002      	addeq	r0, #2
 801024c:	07da      	lsls	r2, r3, #31
 801024e:	d403      	bmi.n	8010258 <__lo0bits+0x50>
 8010250:	085b      	lsrs	r3, r3, #1
 8010252:	f100 0001 	add.w	r0, r0, #1
 8010256:	d005      	beq.n	8010264 <__lo0bits+0x5c>
 8010258:	600b      	str	r3, [r1, #0]
 801025a:	4770      	bx	lr
 801025c:	4610      	mov	r0, r2
 801025e:	e7e8      	b.n	8010232 <__lo0bits+0x2a>
 8010260:	2000      	movs	r0, #0
 8010262:	4770      	bx	lr
 8010264:	2020      	movs	r0, #32
 8010266:	4770      	bx	lr

08010268 <__i2b>:
 8010268:	b510      	push	{r4, lr}
 801026a:	460c      	mov	r4, r1
 801026c:	2101      	movs	r1, #1
 801026e:	f7ff feb5 	bl	800ffdc <_Balloc>
 8010272:	4602      	mov	r2, r0
 8010274:	b928      	cbnz	r0, 8010282 <__i2b+0x1a>
 8010276:	4b05      	ldr	r3, [pc, #20]	; (801028c <__i2b+0x24>)
 8010278:	4805      	ldr	r0, [pc, #20]	; (8010290 <__i2b+0x28>)
 801027a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801027e:	f000 ff67 	bl	8011150 <__assert_func>
 8010282:	2301      	movs	r3, #1
 8010284:	6144      	str	r4, [r0, #20]
 8010286:	6103      	str	r3, [r0, #16]
 8010288:	bd10      	pop	{r4, pc}
 801028a:	bf00      	nop
 801028c:	080125d4 	.word	0x080125d4
 8010290:	080126c8 	.word	0x080126c8

08010294 <__multiply>:
 8010294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010298:	4614      	mov	r4, r2
 801029a:	690a      	ldr	r2, [r1, #16]
 801029c:	6923      	ldr	r3, [r4, #16]
 801029e:	429a      	cmp	r2, r3
 80102a0:	bfb8      	it	lt
 80102a2:	460b      	movlt	r3, r1
 80102a4:	460d      	mov	r5, r1
 80102a6:	bfbc      	itt	lt
 80102a8:	4625      	movlt	r5, r4
 80102aa:	461c      	movlt	r4, r3
 80102ac:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80102b0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80102b4:	68ab      	ldr	r3, [r5, #8]
 80102b6:	6869      	ldr	r1, [r5, #4]
 80102b8:	eb0a 0709 	add.w	r7, sl, r9
 80102bc:	42bb      	cmp	r3, r7
 80102be:	b085      	sub	sp, #20
 80102c0:	bfb8      	it	lt
 80102c2:	3101      	addlt	r1, #1
 80102c4:	f7ff fe8a 	bl	800ffdc <_Balloc>
 80102c8:	b930      	cbnz	r0, 80102d8 <__multiply+0x44>
 80102ca:	4602      	mov	r2, r0
 80102cc:	4b42      	ldr	r3, [pc, #264]	; (80103d8 <__multiply+0x144>)
 80102ce:	4843      	ldr	r0, [pc, #268]	; (80103dc <__multiply+0x148>)
 80102d0:	f240 115d 	movw	r1, #349	; 0x15d
 80102d4:	f000 ff3c 	bl	8011150 <__assert_func>
 80102d8:	f100 0614 	add.w	r6, r0, #20
 80102dc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80102e0:	4633      	mov	r3, r6
 80102e2:	2200      	movs	r2, #0
 80102e4:	4543      	cmp	r3, r8
 80102e6:	d31e      	bcc.n	8010326 <__multiply+0x92>
 80102e8:	f105 0c14 	add.w	ip, r5, #20
 80102ec:	f104 0314 	add.w	r3, r4, #20
 80102f0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80102f4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80102f8:	9202      	str	r2, [sp, #8]
 80102fa:	ebac 0205 	sub.w	r2, ip, r5
 80102fe:	3a15      	subs	r2, #21
 8010300:	f022 0203 	bic.w	r2, r2, #3
 8010304:	3204      	adds	r2, #4
 8010306:	f105 0115 	add.w	r1, r5, #21
 801030a:	458c      	cmp	ip, r1
 801030c:	bf38      	it	cc
 801030e:	2204      	movcc	r2, #4
 8010310:	9201      	str	r2, [sp, #4]
 8010312:	9a02      	ldr	r2, [sp, #8]
 8010314:	9303      	str	r3, [sp, #12]
 8010316:	429a      	cmp	r2, r3
 8010318:	d808      	bhi.n	801032c <__multiply+0x98>
 801031a:	2f00      	cmp	r7, #0
 801031c:	dc55      	bgt.n	80103ca <__multiply+0x136>
 801031e:	6107      	str	r7, [r0, #16]
 8010320:	b005      	add	sp, #20
 8010322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010326:	f843 2b04 	str.w	r2, [r3], #4
 801032a:	e7db      	b.n	80102e4 <__multiply+0x50>
 801032c:	f8b3 a000 	ldrh.w	sl, [r3]
 8010330:	f1ba 0f00 	cmp.w	sl, #0
 8010334:	d020      	beq.n	8010378 <__multiply+0xe4>
 8010336:	f105 0e14 	add.w	lr, r5, #20
 801033a:	46b1      	mov	r9, r6
 801033c:	2200      	movs	r2, #0
 801033e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8010342:	f8d9 b000 	ldr.w	fp, [r9]
 8010346:	b2a1      	uxth	r1, r4
 8010348:	fa1f fb8b 	uxth.w	fp, fp
 801034c:	fb0a b101 	mla	r1, sl, r1, fp
 8010350:	4411      	add	r1, r2
 8010352:	f8d9 2000 	ldr.w	r2, [r9]
 8010356:	0c24      	lsrs	r4, r4, #16
 8010358:	0c12      	lsrs	r2, r2, #16
 801035a:	fb0a 2404 	mla	r4, sl, r4, r2
 801035e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8010362:	b289      	uxth	r1, r1
 8010364:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010368:	45f4      	cmp	ip, lr
 801036a:	f849 1b04 	str.w	r1, [r9], #4
 801036e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8010372:	d8e4      	bhi.n	801033e <__multiply+0xaa>
 8010374:	9901      	ldr	r1, [sp, #4]
 8010376:	5072      	str	r2, [r6, r1]
 8010378:	9a03      	ldr	r2, [sp, #12]
 801037a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801037e:	3304      	adds	r3, #4
 8010380:	f1b9 0f00 	cmp.w	r9, #0
 8010384:	d01f      	beq.n	80103c6 <__multiply+0x132>
 8010386:	6834      	ldr	r4, [r6, #0]
 8010388:	f105 0114 	add.w	r1, r5, #20
 801038c:	46b6      	mov	lr, r6
 801038e:	f04f 0a00 	mov.w	sl, #0
 8010392:	880a      	ldrh	r2, [r1, #0]
 8010394:	f8be b002 	ldrh.w	fp, [lr, #2]
 8010398:	fb09 b202 	mla	r2, r9, r2, fp
 801039c:	4492      	add	sl, r2
 801039e:	b2a4      	uxth	r4, r4
 80103a0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80103a4:	f84e 4b04 	str.w	r4, [lr], #4
 80103a8:	f851 4b04 	ldr.w	r4, [r1], #4
 80103ac:	f8be 2000 	ldrh.w	r2, [lr]
 80103b0:	0c24      	lsrs	r4, r4, #16
 80103b2:	fb09 2404 	mla	r4, r9, r4, r2
 80103b6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80103ba:	458c      	cmp	ip, r1
 80103bc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80103c0:	d8e7      	bhi.n	8010392 <__multiply+0xfe>
 80103c2:	9a01      	ldr	r2, [sp, #4]
 80103c4:	50b4      	str	r4, [r6, r2]
 80103c6:	3604      	adds	r6, #4
 80103c8:	e7a3      	b.n	8010312 <__multiply+0x7e>
 80103ca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d1a5      	bne.n	801031e <__multiply+0x8a>
 80103d2:	3f01      	subs	r7, #1
 80103d4:	e7a1      	b.n	801031a <__multiply+0x86>
 80103d6:	bf00      	nop
 80103d8:	080125d4 	.word	0x080125d4
 80103dc:	080126c8 	.word	0x080126c8

080103e0 <__pow5mult>:
 80103e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103e4:	4615      	mov	r5, r2
 80103e6:	f012 0203 	ands.w	r2, r2, #3
 80103ea:	4606      	mov	r6, r0
 80103ec:	460f      	mov	r7, r1
 80103ee:	d007      	beq.n	8010400 <__pow5mult+0x20>
 80103f0:	4c25      	ldr	r4, [pc, #148]	; (8010488 <__pow5mult+0xa8>)
 80103f2:	3a01      	subs	r2, #1
 80103f4:	2300      	movs	r3, #0
 80103f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80103fa:	f7ff fe51 	bl	80100a0 <__multadd>
 80103fe:	4607      	mov	r7, r0
 8010400:	10ad      	asrs	r5, r5, #2
 8010402:	d03d      	beq.n	8010480 <__pow5mult+0xa0>
 8010404:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010406:	b97c      	cbnz	r4, 8010428 <__pow5mult+0x48>
 8010408:	2010      	movs	r0, #16
 801040a:	f7ff fdcd 	bl	800ffa8 <malloc>
 801040e:	4602      	mov	r2, r0
 8010410:	6270      	str	r0, [r6, #36]	; 0x24
 8010412:	b928      	cbnz	r0, 8010420 <__pow5mult+0x40>
 8010414:	4b1d      	ldr	r3, [pc, #116]	; (801048c <__pow5mult+0xac>)
 8010416:	481e      	ldr	r0, [pc, #120]	; (8010490 <__pow5mult+0xb0>)
 8010418:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801041c:	f000 fe98 	bl	8011150 <__assert_func>
 8010420:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010424:	6004      	str	r4, [r0, #0]
 8010426:	60c4      	str	r4, [r0, #12]
 8010428:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801042c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010430:	b94c      	cbnz	r4, 8010446 <__pow5mult+0x66>
 8010432:	f240 2171 	movw	r1, #625	; 0x271
 8010436:	4630      	mov	r0, r6
 8010438:	f7ff ff16 	bl	8010268 <__i2b>
 801043c:	2300      	movs	r3, #0
 801043e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010442:	4604      	mov	r4, r0
 8010444:	6003      	str	r3, [r0, #0]
 8010446:	f04f 0900 	mov.w	r9, #0
 801044a:	07eb      	lsls	r3, r5, #31
 801044c:	d50a      	bpl.n	8010464 <__pow5mult+0x84>
 801044e:	4639      	mov	r1, r7
 8010450:	4622      	mov	r2, r4
 8010452:	4630      	mov	r0, r6
 8010454:	f7ff ff1e 	bl	8010294 <__multiply>
 8010458:	4639      	mov	r1, r7
 801045a:	4680      	mov	r8, r0
 801045c:	4630      	mov	r0, r6
 801045e:	f7ff fdfd 	bl	801005c <_Bfree>
 8010462:	4647      	mov	r7, r8
 8010464:	106d      	asrs	r5, r5, #1
 8010466:	d00b      	beq.n	8010480 <__pow5mult+0xa0>
 8010468:	6820      	ldr	r0, [r4, #0]
 801046a:	b938      	cbnz	r0, 801047c <__pow5mult+0x9c>
 801046c:	4622      	mov	r2, r4
 801046e:	4621      	mov	r1, r4
 8010470:	4630      	mov	r0, r6
 8010472:	f7ff ff0f 	bl	8010294 <__multiply>
 8010476:	6020      	str	r0, [r4, #0]
 8010478:	f8c0 9000 	str.w	r9, [r0]
 801047c:	4604      	mov	r4, r0
 801047e:	e7e4      	b.n	801044a <__pow5mult+0x6a>
 8010480:	4638      	mov	r0, r7
 8010482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010486:	bf00      	nop
 8010488:	08012818 	.word	0x08012818
 801048c:	0801255e 	.word	0x0801255e
 8010490:	080126c8 	.word	0x080126c8

08010494 <__lshift>:
 8010494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010498:	460c      	mov	r4, r1
 801049a:	6849      	ldr	r1, [r1, #4]
 801049c:	6923      	ldr	r3, [r4, #16]
 801049e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80104a2:	68a3      	ldr	r3, [r4, #8]
 80104a4:	4607      	mov	r7, r0
 80104a6:	4691      	mov	r9, r2
 80104a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80104ac:	f108 0601 	add.w	r6, r8, #1
 80104b0:	42b3      	cmp	r3, r6
 80104b2:	db0b      	blt.n	80104cc <__lshift+0x38>
 80104b4:	4638      	mov	r0, r7
 80104b6:	f7ff fd91 	bl	800ffdc <_Balloc>
 80104ba:	4605      	mov	r5, r0
 80104bc:	b948      	cbnz	r0, 80104d2 <__lshift+0x3e>
 80104be:	4602      	mov	r2, r0
 80104c0:	4b28      	ldr	r3, [pc, #160]	; (8010564 <__lshift+0xd0>)
 80104c2:	4829      	ldr	r0, [pc, #164]	; (8010568 <__lshift+0xd4>)
 80104c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80104c8:	f000 fe42 	bl	8011150 <__assert_func>
 80104cc:	3101      	adds	r1, #1
 80104ce:	005b      	lsls	r3, r3, #1
 80104d0:	e7ee      	b.n	80104b0 <__lshift+0x1c>
 80104d2:	2300      	movs	r3, #0
 80104d4:	f100 0114 	add.w	r1, r0, #20
 80104d8:	f100 0210 	add.w	r2, r0, #16
 80104dc:	4618      	mov	r0, r3
 80104de:	4553      	cmp	r3, sl
 80104e0:	db33      	blt.n	801054a <__lshift+0xb6>
 80104e2:	6920      	ldr	r0, [r4, #16]
 80104e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80104e8:	f104 0314 	add.w	r3, r4, #20
 80104ec:	f019 091f 	ands.w	r9, r9, #31
 80104f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80104f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80104f8:	d02b      	beq.n	8010552 <__lshift+0xbe>
 80104fa:	f1c9 0e20 	rsb	lr, r9, #32
 80104fe:	468a      	mov	sl, r1
 8010500:	2200      	movs	r2, #0
 8010502:	6818      	ldr	r0, [r3, #0]
 8010504:	fa00 f009 	lsl.w	r0, r0, r9
 8010508:	4302      	orrs	r2, r0
 801050a:	f84a 2b04 	str.w	r2, [sl], #4
 801050e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010512:	459c      	cmp	ip, r3
 8010514:	fa22 f20e 	lsr.w	r2, r2, lr
 8010518:	d8f3      	bhi.n	8010502 <__lshift+0x6e>
 801051a:	ebac 0304 	sub.w	r3, ip, r4
 801051e:	3b15      	subs	r3, #21
 8010520:	f023 0303 	bic.w	r3, r3, #3
 8010524:	3304      	adds	r3, #4
 8010526:	f104 0015 	add.w	r0, r4, #21
 801052a:	4584      	cmp	ip, r0
 801052c:	bf38      	it	cc
 801052e:	2304      	movcc	r3, #4
 8010530:	50ca      	str	r2, [r1, r3]
 8010532:	b10a      	cbz	r2, 8010538 <__lshift+0xa4>
 8010534:	f108 0602 	add.w	r6, r8, #2
 8010538:	3e01      	subs	r6, #1
 801053a:	4638      	mov	r0, r7
 801053c:	612e      	str	r6, [r5, #16]
 801053e:	4621      	mov	r1, r4
 8010540:	f7ff fd8c 	bl	801005c <_Bfree>
 8010544:	4628      	mov	r0, r5
 8010546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801054a:	f842 0f04 	str.w	r0, [r2, #4]!
 801054e:	3301      	adds	r3, #1
 8010550:	e7c5      	b.n	80104de <__lshift+0x4a>
 8010552:	3904      	subs	r1, #4
 8010554:	f853 2b04 	ldr.w	r2, [r3], #4
 8010558:	f841 2f04 	str.w	r2, [r1, #4]!
 801055c:	459c      	cmp	ip, r3
 801055e:	d8f9      	bhi.n	8010554 <__lshift+0xc0>
 8010560:	e7ea      	b.n	8010538 <__lshift+0xa4>
 8010562:	bf00      	nop
 8010564:	080125d4 	.word	0x080125d4
 8010568:	080126c8 	.word	0x080126c8

0801056c <__mcmp>:
 801056c:	b530      	push	{r4, r5, lr}
 801056e:	6902      	ldr	r2, [r0, #16]
 8010570:	690c      	ldr	r4, [r1, #16]
 8010572:	1b12      	subs	r2, r2, r4
 8010574:	d10e      	bne.n	8010594 <__mcmp+0x28>
 8010576:	f100 0314 	add.w	r3, r0, #20
 801057a:	3114      	adds	r1, #20
 801057c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010580:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010584:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010588:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801058c:	42a5      	cmp	r5, r4
 801058e:	d003      	beq.n	8010598 <__mcmp+0x2c>
 8010590:	d305      	bcc.n	801059e <__mcmp+0x32>
 8010592:	2201      	movs	r2, #1
 8010594:	4610      	mov	r0, r2
 8010596:	bd30      	pop	{r4, r5, pc}
 8010598:	4283      	cmp	r3, r0
 801059a:	d3f3      	bcc.n	8010584 <__mcmp+0x18>
 801059c:	e7fa      	b.n	8010594 <__mcmp+0x28>
 801059e:	f04f 32ff 	mov.w	r2, #4294967295
 80105a2:	e7f7      	b.n	8010594 <__mcmp+0x28>

080105a4 <__mdiff>:
 80105a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105a8:	460c      	mov	r4, r1
 80105aa:	4606      	mov	r6, r0
 80105ac:	4611      	mov	r1, r2
 80105ae:	4620      	mov	r0, r4
 80105b0:	4617      	mov	r7, r2
 80105b2:	f7ff ffdb 	bl	801056c <__mcmp>
 80105b6:	1e05      	subs	r5, r0, #0
 80105b8:	d110      	bne.n	80105dc <__mdiff+0x38>
 80105ba:	4629      	mov	r1, r5
 80105bc:	4630      	mov	r0, r6
 80105be:	f7ff fd0d 	bl	800ffdc <_Balloc>
 80105c2:	b930      	cbnz	r0, 80105d2 <__mdiff+0x2e>
 80105c4:	4b39      	ldr	r3, [pc, #228]	; (80106ac <__mdiff+0x108>)
 80105c6:	4602      	mov	r2, r0
 80105c8:	f240 2132 	movw	r1, #562	; 0x232
 80105cc:	4838      	ldr	r0, [pc, #224]	; (80106b0 <__mdiff+0x10c>)
 80105ce:	f000 fdbf 	bl	8011150 <__assert_func>
 80105d2:	2301      	movs	r3, #1
 80105d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80105d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105dc:	bfa4      	itt	ge
 80105de:	463b      	movge	r3, r7
 80105e0:	4627      	movge	r7, r4
 80105e2:	4630      	mov	r0, r6
 80105e4:	6879      	ldr	r1, [r7, #4]
 80105e6:	bfa6      	itte	ge
 80105e8:	461c      	movge	r4, r3
 80105ea:	2500      	movge	r5, #0
 80105ec:	2501      	movlt	r5, #1
 80105ee:	f7ff fcf5 	bl	800ffdc <_Balloc>
 80105f2:	b920      	cbnz	r0, 80105fe <__mdiff+0x5a>
 80105f4:	4b2d      	ldr	r3, [pc, #180]	; (80106ac <__mdiff+0x108>)
 80105f6:	4602      	mov	r2, r0
 80105f8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80105fc:	e7e6      	b.n	80105cc <__mdiff+0x28>
 80105fe:	693e      	ldr	r6, [r7, #16]
 8010600:	60c5      	str	r5, [r0, #12]
 8010602:	6925      	ldr	r5, [r4, #16]
 8010604:	f107 0114 	add.w	r1, r7, #20
 8010608:	f104 0914 	add.w	r9, r4, #20
 801060c:	f100 0e14 	add.w	lr, r0, #20
 8010610:	f107 0210 	add.w	r2, r7, #16
 8010614:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8010618:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801061c:	46f2      	mov	sl, lr
 801061e:	2700      	movs	r7, #0
 8010620:	f859 3b04 	ldr.w	r3, [r9], #4
 8010624:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010628:	fa1f f883 	uxth.w	r8, r3
 801062c:	fa17 f78b 	uxtah	r7, r7, fp
 8010630:	0c1b      	lsrs	r3, r3, #16
 8010632:	eba7 0808 	sub.w	r8, r7, r8
 8010636:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801063a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801063e:	fa1f f888 	uxth.w	r8, r8
 8010642:	141f      	asrs	r7, r3, #16
 8010644:	454d      	cmp	r5, r9
 8010646:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801064a:	f84a 3b04 	str.w	r3, [sl], #4
 801064e:	d8e7      	bhi.n	8010620 <__mdiff+0x7c>
 8010650:	1b2b      	subs	r3, r5, r4
 8010652:	3b15      	subs	r3, #21
 8010654:	f023 0303 	bic.w	r3, r3, #3
 8010658:	3304      	adds	r3, #4
 801065a:	3415      	adds	r4, #21
 801065c:	42a5      	cmp	r5, r4
 801065e:	bf38      	it	cc
 8010660:	2304      	movcc	r3, #4
 8010662:	4419      	add	r1, r3
 8010664:	4473      	add	r3, lr
 8010666:	469e      	mov	lr, r3
 8010668:	460d      	mov	r5, r1
 801066a:	4565      	cmp	r5, ip
 801066c:	d30e      	bcc.n	801068c <__mdiff+0xe8>
 801066e:	f10c 0203 	add.w	r2, ip, #3
 8010672:	1a52      	subs	r2, r2, r1
 8010674:	f022 0203 	bic.w	r2, r2, #3
 8010678:	3903      	subs	r1, #3
 801067a:	458c      	cmp	ip, r1
 801067c:	bf38      	it	cc
 801067e:	2200      	movcc	r2, #0
 8010680:	441a      	add	r2, r3
 8010682:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010686:	b17b      	cbz	r3, 80106a8 <__mdiff+0x104>
 8010688:	6106      	str	r6, [r0, #16]
 801068a:	e7a5      	b.n	80105d8 <__mdiff+0x34>
 801068c:	f855 8b04 	ldr.w	r8, [r5], #4
 8010690:	fa17 f488 	uxtah	r4, r7, r8
 8010694:	1422      	asrs	r2, r4, #16
 8010696:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801069a:	b2a4      	uxth	r4, r4
 801069c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80106a0:	f84e 4b04 	str.w	r4, [lr], #4
 80106a4:	1417      	asrs	r7, r2, #16
 80106a6:	e7e0      	b.n	801066a <__mdiff+0xc6>
 80106a8:	3e01      	subs	r6, #1
 80106aa:	e7ea      	b.n	8010682 <__mdiff+0xde>
 80106ac:	080125d4 	.word	0x080125d4
 80106b0:	080126c8 	.word	0x080126c8

080106b4 <__ulp>:
 80106b4:	b082      	sub	sp, #8
 80106b6:	ed8d 0b00 	vstr	d0, [sp]
 80106ba:	9b01      	ldr	r3, [sp, #4]
 80106bc:	4912      	ldr	r1, [pc, #72]	; (8010708 <__ulp+0x54>)
 80106be:	4019      	ands	r1, r3
 80106c0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80106c4:	2900      	cmp	r1, #0
 80106c6:	dd05      	ble.n	80106d4 <__ulp+0x20>
 80106c8:	2200      	movs	r2, #0
 80106ca:	460b      	mov	r3, r1
 80106cc:	ec43 2b10 	vmov	d0, r2, r3
 80106d0:	b002      	add	sp, #8
 80106d2:	4770      	bx	lr
 80106d4:	4249      	negs	r1, r1
 80106d6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80106da:	ea4f 5021 	mov.w	r0, r1, asr #20
 80106de:	f04f 0200 	mov.w	r2, #0
 80106e2:	f04f 0300 	mov.w	r3, #0
 80106e6:	da04      	bge.n	80106f2 <__ulp+0x3e>
 80106e8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80106ec:	fa41 f300 	asr.w	r3, r1, r0
 80106f0:	e7ec      	b.n	80106cc <__ulp+0x18>
 80106f2:	f1a0 0114 	sub.w	r1, r0, #20
 80106f6:	291e      	cmp	r1, #30
 80106f8:	bfda      	itte	le
 80106fa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80106fe:	fa20 f101 	lsrle.w	r1, r0, r1
 8010702:	2101      	movgt	r1, #1
 8010704:	460a      	mov	r2, r1
 8010706:	e7e1      	b.n	80106cc <__ulp+0x18>
 8010708:	7ff00000 	.word	0x7ff00000

0801070c <__b2d>:
 801070c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801070e:	6905      	ldr	r5, [r0, #16]
 8010710:	f100 0714 	add.w	r7, r0, #20
 8010714:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010718:	1f2e      	subs	r6, r5, #4
 801071a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801071e:	4620      	mov	r0, r4
 8010720:	f7ff fd52 	bl	80101c8 <__hi0bits>
 8010724:	f1c0 0320 	rsb	r3, r0, #32
 8010728:	280a      	cmp	r0, #10
 801072a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80107a8 <__b2d+0x9c>
 801072e:	600b      	str	r3, [r1, #0]
 8010730:	dc14      	bgt.n	801075c <__b2d+0x50>
 8010732:	f1c0 0e0b 	rsb	lr, r0, #11
 8010736:	fa24 f10e 	lsr.w	r1, r4, lr
 801073a:	42b7      	cmp	r7, r6
 801073c:	ea41 030c 	orr.w	r3, r1, ip
 8010740:	bf34      	ite	cc
 8010742:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010746:	2100      	movcs	r1, #0
 8010748:	3015      	adds	r0, #21
 801074a:	fa04 f000 	lsl.w	r0, r4, r0
 801074e:	fa21 f10e 	lsr.w	r1, r1, lr
 8010752:	ea40 0201 	orr.w	r2, r0, r1
 8010756:	ec43 2b10 	vmov	d0, r2, r3
 801075a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801075c:	42b7      	cmp	r7, r6
 801075e:	bf3a      	itte	cc
 8010760:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010764:	f1a5 0608 	subcc.w	r6, r5, #8
 8010768:	2100      	movcs	r1, #0
 801076a:	380b      	subs	r0, #11
 801076c:	d017      	beq.n	801079e <__b2d+0x92>
 801076e:	f1c0 0c20 	rsb	ip, r0, #32
 8010772:	fa04 f500 	lsl.w	r5, r4, r0
 8010776:	42be      	cmp	r6, r7
 8010778:	fa21 f40c 	lsr.w	r4, r1, ip
 801077c:	ea45 0504 	orr.w	r5, r5, r4
 8010780:	bf8c      	ite	hi
 8010782:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010786:	2400      	movls	r4, #0
 8010788:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801078c:	fa01 f000 	lsl.w	r0, r1, r0
 8010790:	fa24 f40c 	lsr.w	r4, r4, ip
 8010794:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010798:	ea40 0204 	orr.w	r2, r0, r4
 801079c:	e7db      	b.n	8010756 <__b2d+0x4a>
 801079e:	ea44 030c 	orr.w	r3, r4, ip
 80107a2:	460a      	mov	r2, r1
 80107a4:	e7d7      	b.n	8010756 <__b2d+0x4a>
 80107a6:	bf00      	nop
 80107a8:	3ff00000 	.word	0x3ff00000

080107ac <__d2b>:
 80107ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80107b0:	4689      	mov	r9, r1
 80107b2:	2101      	movs	r1, #1
 80107b4:	ec57 6b10 	vmov	r6, r7, d0
 80107b8:	4690      	mov	r8, r2
 80107ba:	f7ff fc0f 	bl	800ffdc <_Balloc>
 80107be:	4604      	mov	r4, r0
 80107c0:	b930      	cbnz	r0, 80107d0 <__d2b+0x24>
 80107c2:	4602      	mov	r2, r0
 80107c4:	4b25      	ldr	r3, [pc, #148]	; (801085c <__d2b+0xb0>)
 80107c6:	4826      	ldr	r0, [pc, #152]	; (8010860 <__d2b+0xb4>)
 80107c8:	f240 310a 	movw	r1, #778	; 0x30a
 80107cc:	f000 fcc0 	bl	8011150 <__assert_func>
 80107d0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80107d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80107d8:	bb35      	cbnz	r5, 8010828 <__d2b+0x7c>
 80107da:	2e00      	cmp	r6, #0
 80107dc:	9301      	str	r3, [sp, #4]
 80107de:	d028      	beq.n	8010832 <__d2b+0x86>
 80107e0:	4668      	mov	r0, sp
 80107e2:	9600      	str	r6, [sp, #0]
 80107e4:	f7ff fd10 	bl	8010208 <__lo0bits>
 80107e8:	9900      	ldr	r1, [sp, #0]
 80107ea:	b300      	cbz	r0, 801082e <__d2b+0x82>
 80107ec:	9a01      	ldr	r2, [sp, #4]
 80107ee:	f1c0 0320 	rsb	r3, r0, #32
 80107f2:	fa02 f303 	lsl.w	r3, r2, r3
 80107f6:	430b      	orrs	r3, r1
 80107f8:	40c2      	lsrs	r2, r0
 80107fa:	6163      	str	r3, [r4, #20]
 80107fc:	9201      	str	r2, [sp, #4]
 80107fe:	9b01      	ldr	r3, [sp, #4]
 8010800:	61a3      	str	r3, [r4, #24]
 8010802:	2b00      	cmp	r3, #0
 8010804:	bf14      	ite	ne
 8010806:	2202      	movne	r2, #2
 8010808:	2201      	moveq	r2, #1
 801080a:	6122      	str	r2, [r4, #16]
 801080c:	b1d5      	cbz	r5, 8010844 <__d2b+0x98>
 801080e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010812:	4405      	add	r5, r0
 8010814:	f8c9 5000 	str.w	r5, [r9]
 8010818:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801081c:	f8c8 0000 	str.w	r0, [r8]
 8010820:	4620      	mov	r0, r4
 8010822:	b003      	add	sp, #12
 8010824:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010828:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801082c:	e7d5      	b.n	80107da <__d2b+0x2e>
 801082e:	6161      	str	r1, [r4, #20]
 8010830:	e7e5      	b.n	80107fe <__d2b+0x52>
 8010832:	a801      	add	r0, sp, #4
 8010834:	f7ff fce8 	bl	8010208 <__lo0bits>
 8010838:	9b01      	ldr	r3, [sp, #4]
 801083a:	6163      	str	r3, [r4, #20]
 801083c:	2201      	movs	r2, #1
 801083e:	6122      	str	r2, [r4, #16]
 8010840:	3020      	adds	r0, #32
 8010842:	e7e3      	b.n	801080c <__d2b+0x60>
 8010844:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010848:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801084c:	f8c9 0000 	str.w	r0, [r9]
 8010850:	6918      	ldr	r0, [r3, #16]
 8010852:	f7ff fcb9 	bl	80101c8 <__hi0bits>
 8010856:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801085a:	e7df      	b.n	801081c <__d2b+0x70>
 801085c:	080125d4 	.word	0x080125d4
 8010860:	080126c8 	.word	0x080126c8

08010864 <__ratio>:
 8010864:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010868:	468a      	mov	sl, r1
 801086a:	4669      	mov	r1, sp
 801086c:	4683      	mov	fp, r0
 801086e:	f7ff ff4d 	bl	801070c <__b2d>
 8010872:	a901      	add	r1, sp, #4
 8010874:	4650      	mov	r0, sl
 8010876:	ec59 8b10 	vmov	r8, r9, d0
 801087a:	ee10 6a10 	vmov	r6, s0
 801087e:	f7ff ff45 	bl	801070c <__b2d>
 8010882:	f8db 3010 	ldr.w	r3, [fp, #16]
 8010886:	f8da 2010 	ldr.w	r2, [sl, #16]
 801088a:	eba3 0c02 	sub.w	ip, r3, r2
 801088e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010892:	1a9b      	subs	r3, r3, r2
 8010894:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010898:	ec55 4b10 	vmov	r4, r5, d0
 801089c:	2b00      	cmp	r3, #0
 801089e:	ee10 0a10 	vmov	r0, s0
 80108a2:	bfce      	itee	gt
 80108a4:	464a      	movgt	r2, r9
 80108a6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80108aa:	462a      	movle	r2, r5
 80108ac:	464f      	mov	r7, r9
 80108ae:	4629      	mov	r1, r5
 80108b0:	bfcc      	ite	gt
 80108b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80108b6:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80108ba:	ec47 6b17 	vmov	d7, r6, r7
 80108be:	ec41 0b16 	vmov	d6, r0, r1
 80108c2:	ee87 0b06 	vdiv.f64	d0, d7, d6
 80108c6:	b003      	add	sp, #12
 80108c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080108cc <__copybits>:
 80108cc:	3901      	subs	r1, #1
 80108ce:	b570      	push	{r4, r5, r6, lr}
 80108d0:	1149      	asrs	r1, r1, #5
 80108d2:	6914      	ldr	r4, [r2, #16]
 80108d4:	3101      	adds	r1, #1
 80108d6:	f102 0314 	add.w	r3, r2, #20
 80108da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80108de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80108e2:	1f05      	subs	r5, r0, #4
 80108e4:	42a3      	cmp	r3, r4
 80108e6:	d30c      	bcc.n	8010902 <__copybits+0x36>
 80108e8:	1aa3      	subs	r3, r4, r2
 80108ea:	3b11      	subs	r3, #17
 80108ec:	f023 0303 	bic.w	r3, r3, #3
 80108f0:	3211      	adds	r2, #17
 80108f2:	42a2      	cmp	r2, r4
 80108f4:	bf88      	it	hi
 80108f6:	2300      	movhi	r3, #0
 80108f8:	4418      	add	r0, r3
 80108fa:	2300      	movs	r3, #0
 80108fc:	4288      	cmp	r0, r1
 80108fe:	d305      	bcc.n	801090c <__copybits+0x40>
 8010900:	bd70      	pop	{r4, r5, r6, pc}
 8010902:	f853 6b04 	ldr.w	r6, [r3], #4
 8010906:	f845 6f04 	str.w	r6, [r5, #4]!
 801090a:	e7eb      	b.n	80108e4 <__copybits+0x18>
 801090c:	f840 3b04 	str.w	r3, [r0], #4
 8010910:	e7f4      	b.n	80108fc <__copybits+0x30>

08010912 <__any_on>:
 8010912:	f100 0214 	add.w	r2, r0, #20
 8010916:	6900      	ldr	r0, [r0, #16]
 8010918:	114b      	asrs	r3, r1, #5
 801091a:	4298      	cmp	r0, r3
 801091c:	b510      	push	{r4, lr}
 801091e:	db11      	blt.n	8010944 <__any_on+0x32>
 8010920:	dd0a      	ble.n	8010938 <__any_on+0x26>
 8010922:	f011 011f 	ands.w	r1, r1, #31
 8010926:	d007      	beq.n	8010938 <__any_on+0x26>
 8010928:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801092c:	fa24 f001 	lsr.w	r0, r4, r1
 8010930:	fa00 f101 	lsl.w	r1, r0, r1
 8010934:	428c      	cmp	r4, r1
 8010936:	d10b      	bne.n	8010950 <__any_on+0x3e>
 8010938:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801093c:	4293      	cmp	r3, r2
 801093e:	d803      	bhi.n	8010948 <__any_on+0x36>
 8010940:	2000      	movs	r0, #0
 8010942:	bd10      	pop	{r4, pc}
 8010944:	4603      	mov	r3, r0
 8010946:	e7f7      	b.n	8010938 <__any_on+0x26>
 8010948:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801094c:	2900      	cmp	r1, #0
 801094e:	d0f5      	beq.n	801093c <__any_on+0x2a>
 8010950:	2001      	movs	r0, #1
 8010952:	e7f6      	b.n	8010942 <__any_on+0x30>

08010954 <_calloc_r>:
 8010954:	b513      	push	{r0, r1, r4, lr}
 8010956:	434a      	muls	r2, r1
 8010958:	4611      	mov	r1, r2
 801095a:	9201      	str	r2, [sp, #4]
 801095c:	f000 f85a 	bl	8010a14 <_malloc_r>
 8010960:	4604      	mov	r4, r0
 8010962:	b118      	cbz	r0, 801096c <_calloc_r+0x18>
 8010964:	9a01      	ldr	r2, [sp, #4]
 8010966:	2100      	movs	r1, #0
 8010968:	f7fc f86e 	bl	800ca48 <memset>
 801096c:	4620      	mov	r0, r4
 801096e:	b002      	add	sp, #8
 8010970:	bd10      	pop	{r4, pc}
	...

08010974 <_free_r>:
 8010974:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010976:	2900      	cmp	r1, #0
 8010978:	d048      	beq.n	8010a0c <_free_r+0x98>
 801097a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801097e:	9001      	str	r0, [sp, #4]
 8010980:	2b00      	cmp	r3, #0
 8010982:	f1a1 0404 	sub.w	r4, r1, #4
 8010986:	bfb8      	it	lt
 8010988:	18e4      	addlt	r4, r4, r3
 801098a:	f000 fc6f 	bl	801126c <__malloc_lock>
 801098e:	4a20      	ldr	r2, [pc, #128]	; (8010a10 <_free_r+0x9c>)
 8010990:	9801      	ldr	r0, [sp, #4]
 8010992:	6813      	ldr	r3, [r2, #0]
 8010994:	4615      	mov	r5, r2
 8010996:	b933      	cbnz	r3, 80109a6 <_free_r+0x32>
 8010998:	6063      	str	r3, [r4, #4]
 801099a:	6014      	str	r4, [r2, #0]
 801099c:	b003      	add	sp, #12
 801099e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80109a2:	f000 bc69 	b.w	8011278 <__malloc_unlock>
 80109a6:	42a3      	cmp	r3, r4
 80109a8:	d90b      	bls.n	80109c2 <_free_r+0x4e>
 80109aa:	6821      	ldr	r1, [r4, #0]
 80109ac:	1862      	adds	r2, r4, r1
 80109ae:	4293      	cmp	r3, r2
 80109b0:	bf04      	itt	eq
 80109b2:	681a      	ldreq	r2, [r3, #0]
 80109b4:	685b      	ldreq	r3, [r3, #4]
 80109b6:	6063      	str	r3, [r4, #4]
 80109b8:	bf04      	itt	eq
 80109ba:	1852      	addeq	r2, r2, r1
 80109bc:	6022      	streq	r2, [r4, #0]
 80109be:	602c      	str	r4, [r5, #0]
 80109c0:	e7ec      	b.n	801099c <_free_r+0x28>
 80109c2:	461a      	mov	r2, r3
 80109c4:	685b      	ldr	r3, [r3, #4]
 80109c6:	b10b      	cbz	r3, 80109cc <_free_r+0x58>
 80109c8:	42a3      	cmp	r3, r4
 80109ca:	d9fa      	bls.n	80109c2 <_free_r+0x4e>
 80109cc:	6811      	ldr	r1, [r2, #0]
 80109ce:	1855      	adds	r5, r2, r1
 80109d0:	42a5      	cmp	r5, r4
 80109d2:	d10b      	bne.n	80109ec <_free_r+0x78>
 80109d4:	6824      	ldr	r4, [r4, #0]
 80109d6:	4421      	add	r1, r4
 80109d8:	1854      	adds	r4, r2, r1
 80109da:	42a3      	cmp	r3, r4
 80109dc:	6011      	str	r1, [r2, #0]
 80109de:	d1dd      	bne.n	801099c <_free_r+0x28>
 80109e0:	681c      	ldr	r4, [r3, #0]
 80109e2:	685b      	ldr	r3, [r3, #4]
 80109e4:	6053      	str	r3, [r2, #4]
 80109e6:	4421      	add	r1, r4
 80109e8:	6011      	str	r1, [r2, #0]
 80109ea:	e7d7      	b.n	801099c <_free_r+0x28>
 80109ec:	d902      	bls.n	80109f4 <_free_r+0x80>
 80109ee:	230c      	movs	r3, #12
 80109f0:	6003      	str	r3, [r0, #0]
 80109f2:	e7d3      	b.n	801099c <_free_r+0x28>
 80109f4:	6825      	ldr	r5, [r4, #0]
 80109f6:	1961      	adds	r1, r4, r5
 80109f8:	428b      	cmp	r3, r1
 80109fa:	bf04      	itt	eq
 80109fc:	6819      	ldreq	r1, [r3, #0]
 80109fe:	685b      	ldreq	r3, [r3, #4]
 8010a00:	6063      	str	r3, [r4, #4]
 8010a02:	bf04      	itt	eq
 8010a04:	1949      	addeq	r1, r1, r5
 8010a06:	6021      	streq	r1, [r4, #0]
 8010a08:	6054      	str	r4, [r2, #4]
 8010a0a:	e7c7      	b.n	801099c <_free_r+0x28>
 8010a0c:	b003      	add	sp, #12
 8010a0e:	bd30      	pop	{r4, r5, pc}
 8010a10:	24000310 	.word	0x24000310

08010a14 <_malloc_r>:
 8010a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a16:	1ccd      	adds	r5, r1, #3
 8010a18:	f025 0503 	bic.w	r5, r5, #3
 8010a1c:	3508      	adds	r5, #8
 8010a1e:	2d0c      	cmp	r5, #12
 8010a20:	bf38      	it	cc
 8010a22:	250c      	movcc	r5, #12
 8010a24:	2d00      	cmp	r5, #0
 8010a26:	4606      	mov	r6, r0
 8010a28:	db01      	blt.n	8010a2e <_malloc_r+0x1a>
 8010a2a:	42a9      	cmp	r1, r5
 8010a2c:	d903      	bls.n	8010a36 <_malloc_r+0x22>
 8010a2e:	230c      	movs	r3, #12
 8010a30:	6033      	str	r3, [r6, #0]
 8010a32:	2000      	movs	r0, #0
 8010a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a36:	f000 fc19 	bl	801126c <__malloc_lock>
 8010a3a:	4921      	ldr	r1, [pc, #132]	; (8010ac0 <_malloc_r+0xac>)
 8010a3c:	680a      	ldr	r2, [r1, #0]
 8010a3e:	4614      	mov	r4, r2
 8010a40:	b99c      	cbnz	r4, 8010a6a <_malloc_r+0x56>
 8010a42:	4f20      	ldr	r7, [pc, #128]	; (8010ac4 <_malloc_r+0xb0>)
 8010a44:	683b      	ldr	r3, [r7, #0]
 8010a46:	b923      	cbnz	r3, 8010a52 <_malloc_r+0x3e>
 8010a48:	4621      	mov	r1, r4
 8010a4a:	4630      	mov	r0, r6
 8010a4c:	f000 fafc 	bl	8011048 <_sbrk_r>
 8010a50:	6038      	str	r0, [r7, #0]
 8010a52:	4629      	mov	r1, r5
 8010a54:	4630      	mov	r0, r6
 8010a56:	f000 faf7 	bl	8011048 <_sbrk_r>
 8010a5a:	1c43      	adds	r3, r0, #1
 8010a5c:	d123      	bne.n	8010aa6 <_malloc_r+0x92>
 8010a5e:	230c      	movs	r3, #12
 8010a60:	6033      	str	r3, [r6, #0]
 8010a62:	4630      	mov	r0, r6
 8010a64:	f000 fc08 	bl	8011278 <__malloc_unlock>
 8010a68:	e7e3      	b.n	8010a32 <_malloc_r+0x1e>
 8010a6a:	6823      	ldr	r3, [r4, #0]
 8010a6c:	1b5b      	subs	r3, r3, r5
 8010a6e:	d417      	bmi.n	8010aa0 <_malloc_r+0x8c>
 8010a70:	2b0b      	cmp	r3, #11
 8010a72:	d903      	bls.n	8010a7c <_malloc_r+0x68>
 8010a74:	6023      	str	r3, [r4, #0]
 8010a76:	441c      	add	r4, r3
 8010a78:	6025      	str	r5, [r4, #0]
 8010a7a:	e004      	b.n	8010a86 <_malloc_r+0x72>
 8010a7c:	6863      	ldr	r3, [r4, #4]
 8010a7e:	42a2      	cmp	r2, r4
 8010a80:	bf0c      	ite	eq
 8010a82:	600b      	streq	r3, [r1, #0]
 8010a84:	6053      	strne	r3, [r2, #4]
 8010a86:	4630      	mov	r0, r6
 8010a88:	f000 fbf6 	bl	8011278 <__malloc_unlock>
 8010a8c:	f104 000b 	add.w	r0, r4, #11
 8010a90:	1d23      	adds	r3, r4, #4
 8010a92:	f020 0007 	bic.w	r0, r0, #7
 8010a96:	1ac2      	subs	r2, r0, r3
 8010a98:	d0cc      	beq.n	8010a34 <_malloc_r+0x20>
 8010a9a:	1a1b      	subs	r3, r3, r0
 8010a9c:	50a3      	str	r3, [r4, r2]
 8010a9e:	e7c9      	b.n	8010a34 <_malloc_r+0x20>
 8010aa0:	4622      	mov	r2, r4
 8010aa2:	6864      	ldr	r4, [r4, #4]
 8010aa4:	e7cc      	b.n	8010a40 <_malloc_r+0x2c>
 8010aa6:	1cc4      	adds	r4, r0, #3
 8010aa8:	f024 0403 	bic.w	r4, r4, #3
 8010aac:	42a0      	cmp	r0, r4
 8010aae:	d0e3      	beq.n	8010a78 <_malloc_r+0x64>
 8010ab0:	1a21      	subs	r1, r4, r0
 8010ab2:	4630      	mov	r0, r6
 8010ab4:	f000 fac8 	bl	8011048 <_sbrk_r>
 8010ab8:	3001      	adds	r0, #1
 8010aba:	d1dd      	bne.n	8010a78 <_malloc_r+0x64>
 8010abc:	e7cf      	b.n	8010a5e <_malloc_r+0x4a>
 8010abe:	bf00      	nop
 8010ac0:	24000310 	.word	0x24000310
 8010ac4:	24000314 	.word	0x24000314

08010ac8 <__ssputs_r>:
 8010ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010acc:	688e      	ldr	r6, [r1, #8]
 8010ace:	429e      	cmp	r6, r3
 8010ad0:	4682      	mov	sl, r0
 8010ad2:	460c      	mov	r4, r1
 8010ad4:	4690      	mov	r8, r2
 8010ad6:	461f      	mov	r7, r3
 8010ad8:	d838      	bhi.n	8010b4c <__ssputs_r+0x84>
 8010ada:	898a      	ldrh	r2, [r1, #12]
 8010adc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010ae0:	d032      	beq.n	8010b48 <__ssputs_r+0x80>
 8010ae2:	6825      	ldr	r5, [r4, #0]
 8010ae4:	6909      	ldr	r1, [r1, #16]
 8010ae6:	eba5 0901 	sub.w	r9, r5, r1
 8010aea:	6965      	ldr	r5, [r4, #20]
 8010aec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010af0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010af4:	3301      	adds	r3, #1
 8010af6:	444b      	add	r3, r9
 8010af8:	106d      	asrs	r5, r5, #1
 8010afa:	429d      	cmp	r5, r3
 8010afc:	bf38      	it	cc
 8010afe:	461d      	movcc	r5, r3
 8010b00:	0553      	lsls	r3, r2, #21
 8010b02:	d531      	bpl.n	8010b68 <__ssputs_r+0xa0>
 8010b04:	4629      	mov	r1, r5
 8010b06:	f7ff ff85 	bl	8010a14 <_malloc_r>
 8010b0a:	4606      	mov	r6, r0
 8010b0c:	b950      	cbnz	r0, 8010b24 <__ssputs_r+0x5c>
 8010b0e:	230c      	movs	r3, #12
 8010b10:	f8ca 3000 	str.w	r3, [sl]
 8010b14:	89a3      	ldrh	r3, [r4, #12]
 8010b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b1a:	81a3      	strh	r3, [r4, #12]
 8010b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8010b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b24:	6921      	ldr	r1, [r4, #16]
 8010b26:	464a      	mov	r2, r9
 8010b28:	f7fb ff80 	bl	800ca2c <memcpy>
 8010b2c:	89a3      	ldrh	r3, [r4, #12]
 8010b2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b36:	81a3      	strh	r3, [r4, #12]
 8010b38:	6126      	str	r6, [r4, #16]
 8010b3a:	6165      	str	r5, [r4, #20]
 8010b3c:	444e      	add	r6, r9
 8010b3e:	eba5 0509 	sub.w	r5, r5, r9
 8010b42:	6026      	str	r6, [r4, #0]
 8010b44:	60a5      	str	r5, [r4, #8]
 8010b46:	463e      	mov	r6, r7
 8010b48:	42be      	cmp	r6, r7
 8010b4a:	d900      	bls.n	8010b4e <__ssputs_r+0x86>
 8010b4c:	463e      	mov	r6, r7
 8010b4e:	4632      	mov	r2, r6
 8010b50:	6820      	ldr	r0, [r4, #0]
 8010b52:	4641      	mov	r1, r8
 8010b54:	f000 fb70 	bl	8011238 <memmove>
 8010b58:	68a3      	ldr	r3, [r4, #8]
 8010b5a:	6822      	ldr	r2, [r4, #0]
 8010b5c:	1b9b      	subs	r3, r3, r6
 8010b5e:	4432      	add	r2, r6
 8010b60:	60a3      	str	r3, [r4, #8]
 8010b62:	6022      	str	r2, [r4, #0]
 8010b64:	2000      	movs	r0, #0
 8010b66:	e7db      	b.n	8010b20 <__ssputs_r+0x58>
 8010b68:	462a      	mov	r2, r5
 8010b6a:	f000 fb8b 	bl	8011284 <_realloc_r>
 8010b6e:	4606      	mov	r6, r0
 8010b70:	2800      	cmp	r0, #0
 8010b72:	d1e1      	bne.n	8010b38 <__ssputs_r+0x70>
 8010b74:	6921      	ldr	r1, [r4, #16]
 8010b76:	4650      	mov	r0, sl
 8010b78:	f7ff fefc 	bl	8010974 <_free_r>
 8010b7c:	e7c7      	b.n	8010b0e <__ssputs_r+0x46>
	...

08010b80 <_svfiprintf_r>:
 8010b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b84:	4698      	mov	r8, r3
 8010b86:	898b      	ldrh	r3, [r1, #12]
 8010b88:	061b      	lsls	r3, r3, #24
 8010b8a:	b09d      	sub	sp, #116	; 0x74
 8010b8c:	4607      	mov	r7, r0
 8010b8e:	460d      	mov	r5, r1
 8010b90:	4614      	mov	r4, r2
 8010b92:	d50e      	bpl.n	8010bb2 <_svfiprintf_r+0x32>
 8010b94:	690b      	ldr	r3, [r1, #16]
 8010b96:	b963      	cbnz	r3, 8010bb2 <_svfiprintf_r+0x32>
 8010b98:	2140      	movs	r1, #64	; 0x40
 8010b9a:	f7ff ff3b 	bl	8010a14 <_malloc_r>
 8010b9e:	6028      	str	r0, [r5, #0]
 8010ba0:	6128      	str	r0, [r5, #16]
 8010ba2:	b920      	cbnz	r0, 8010bae <_svfiprintf_r+0x2e>
 8010ba4:	230c      	movs	r3, #12
 8010ba6:	603b      	str	r3, [r7, #0]
 8010ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8010bac:	e0d1      	b.n	8010d52 <_svfiprintf_r+0x1d2>
 8010bae:	2340      	movs	r3, #64	; 0x40
 8010bb0:	616b      	str	r3, [r5, #20]
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8010bb6:	2320      	movs	r3, #32
 8010bb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010bbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8010bc0:	2330      	movs	r3, #48	; 0x30
 8010bc2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010d6c <_svfiprintf_r+0x1ec>
 8010bc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010bca:	f04f 0901 	mov.w	r9, #1
 8010bce:	4623      	mov	r3, r4
 8010bd0:	469a      	mov	sl, r3
 8010bd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010bd6:	b10a      	cbz	r2, 8010bdc <_svfiprintf_r+0x5c>
 8010bd8:	2a25      	cmp	r2, #37	; 0x25
 8010bda:	d1f9      	bne.n	8010bd0 <_svfiprintf_r+0x50>
 8010bdc:	ebba 0b04 	subs.w	fp, sl, r4
 8010be0:	d00b      	beq.n	8010bfa <_svfiprintf_r+0x7a>
 8010be2:	465b      	mov	r3, fp
 8010be4:	4622      	mov	r2, r4
 8010be6:	4629      	mov	r1, r5
 8010be8:	4638      	mov	r0, r7
 8010bea:	f7ff ff6d 	bl	8010ac8 <__ssputs_r>
 8010bee:	3001      	adds	r0, #1
 8010bf0:	f000 80aa 	beq.w	8010d48 <_svfiprintf_r+0x1c8>
 8010bf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010bf6:	445a      	add	r2, fp
 8010bf8:	9209      	str	r2, [sp, #36]	; 0x24
 8010bfa:	f89a 3000 	ldrb.w	r3, [sl]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	f000 80a2 	beq.w	8010d48 <_svfiprintf_r+0x1c8>
 8010c04:	2300      	movs	r3, #0
 8010c06:	f04f 32ff 	mov.w	r2, #4294967295
 8010c0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010c0e:	f10a 0a01 	add.w	sl, sl, #1
 8010c12:	9304      	str	r3, [sp, #16]
 8010c14:	9307      	str	r3, [sp, #28]
 8010c16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010c1a:	931a      	str	r3, [sp, #104]	; 0x68
 8010c1c:	4654      	mov	r4, sl
 8010c1e:	2205      	movs	r2, #5
 8010c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c24:	4851      	ldr	r0, [pc, #324]	; (8010d6c <_svfiprintf_r+0x1ec>)
 8010c26:	f7ef fb63 	bl	80002f0 <memchr>
 8010c2a:	9a04      	ldr	r2, [sp, #16]
 8010c2c:	b9d8      	cbnz	r0, 8010c66 <_svfiprintf_r+0xe6>
 8010c2e:	06d0      	lsls	r0, r2, #27
 8010c30:	bf44      	itt	mi
 8010c32:	2320      	movmi	r3, #32
 8010c34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010c38:	0711      	lsls	r1, r2, #28
 8010c3a:	bf44      	itt	mi
 8010c3c:	232b      	movmi	r3, #43	; 0x2b
 8010c3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010c42:	f89a 3000 	ldrb.w	r3, [sl]
 8010c46:	2b2a      	cmp	r3, #42	; 0x2a
 8010c48:	d015      	beq.n	8010c76 <_svfiprintf_r+0xf6>
 8010c4a:	9a07      	ldr	r2, [sp, #28]
 8010c4c:	4654      	mov	r4, sl
 8010c4e:	2000      	movs	r0, #0
 8010c50:	f04f 0c0a 	mov.w	ip, #10
 8010c54:	4621      	mov	r1, r4
 8010c56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010c5a:	3b30      	subs	r3, #48	; 0x30
 8010c5c:	2b09      	cmp	r3, #9
 8010c5e:	d94e      	bls.n	8010cfe <_svfiprintf_r+0x17e>
 8010c60:	b1b0      	cbz	r0, 8010c90 <_svfiprintf_r+0x110>
 8010c62:	9207      	str	r2, [sp, #28]
 8010c64:	e014      	b.n	8010c90 <_svfiprintf_r+0x110>
 8010c66:	eba0 0308 	sub.w	r3, r0, r8
 8010c6a:	fa09 f303 	lsl.w	r3, r9, r3
 8010c6e:	4313      	orrs	r3, r2
 8010c70:	9304      	str	r3, [sp, #16]
 8010c72:	46a2      	mov	sl, r4
 8010c74:	e7d2      	b.n	8010c1c <_svfiprintf_r+0x9c>
 8010c76:	9b03      	ldr	r3, [sp, #12]
 8010c78:	1d19      	adds	r1, r3, #4
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	9103      	str	r1, [sp, #12]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	bfbb      	ittet	lt
 8010c82:	425b      	neglt	r3, r3
 8010c84:	f042 0202 	orrlt.w	r2, r2, #2
 8010c88:	9307      	strge	r3, [sp, #28]
 8010c8a:	9307      	strlt	r3, [sp, #28]
 8010c8c:	bfb8      	it	lt
 8010c8e:	9204      	strlt	r2, [sp, #16]
 8010c90:	7823      	ldrb	r3, [r4, #0]
 8010c92:	2b2e      	cmp	r3, #46	; 0x2e
 8010c94:	d10c      	bne.n	8010cb0 <_svfiprintf_r+0x130>
 8010c96:	7863      	ldrb	r3, [r4, #1]
 8010c98:	2b2a      	cmp	r3, #42	; 0x2a
 8010c9a:	d135      	bne.n	8010d08 <_svfiprintf_r+0x188>
 8010c9c:	9b03      	ldr	r3, [sp, #12]
 8010c9e:	1d1a      	adds	r2, r3, #4
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	9203      	str	r2, [sp, #12]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	bfb8      	it	lt
 8010ca8:	f04f 33ff 	movlt.w	r3, #4294967295
 8010cac:	3402      	adds	r4, #2
 8010cae:	9305      	str	r3, [sp, #20]
 8010cb0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010d7c <_svfiprintf_r+0x1fc>
 8010cb4:	7821      	ldrb	r1, [r4, #0]
 8010cb6:	2203      	movs	r2, #3
 8010cb8:	4650      	mov	r0, sl
 8010cba:	f7ef fb19 	bl	80002f0 <memchr>
 8010cbe:	b140      	cbz	r0, 8010cd2 <_svfiprintf_r+0x152>
 8010cc0:	2340      	movs	r3, #64	; 0x40
 8010cc2:	eba0 000a 	sub.w	r0, r0, sl
 8010cc6:	fa03 f000 	lsl.w	r0, r3, r0
 8010cca:	9b04      	ldr	r3, [sp, #16]
 8010ccc:	4303      	orrs	r3, r0
 8010cce:	3401      	adds	r4, #1
 8010cd0:	9304      	str	r3, [sp, #16]
 8010cd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cd6:	4826      	ldr	r0, [pc, #152]	; (8010d70 <_svfiprintf_r+0x1f0>)
 8010cd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010cdc:	2206      	movs	r2, #6
 8010cde:	f7ef fb07 	bl	80002f0 <memchr>
 8010ce2:	2800      	cmp	r0, #0
 8010ce4:	d038      	beq.n	8010d58 <_svfiprintf_r+0x1d8>
 8010ce6:	4b23      	ldr	r3, [pc, #140]	; (8010d74 <_svfiprintf_r+0x1f4>)
 8010ce8:	bb1b      	cbnz	r3, 8010d32 <_svfiprintf_r+0x1b2>
 8010cea:	9b03      	ldr	r3, [sp, #12]
 8010cec:	3307      	adds	r3, #7
 8010cee:	f023 0307 	bic.w	r3, r3, #7
 8010cf2:	3308      	adds	r3, #8
 8010cf4:	9303      	str	r3, [sp, #12]
 8010cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cf8:	4433      	add	r3, r6
 8010cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8010cfc:	e767      	b.n	8010bce <_svfiprintf_r+0x4e>
 8010cfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8010d02:	460c      	mov	r4, r1
 8010d04:	2001      	movs	r0, #1
 8010d06:	e7a5      	b.n	8010c54 <_svfiprintf_r+0xd4>
 8010d08:	2300      	movs	r3, #0
 8010d0a:	3401      	adds	r4, #1
 8010d0c:	9305      	str	r3, [sp, #20]
 8010d0e:	4619      	mov	r1, r3
 8010d10:	f04f 0c0a 	mov.w	ip, #10
 8010d14:	4620      	mov	r0, r4
 8010d16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010d1a:	3a30      	subs	r2, #48	; 0x30
 8010d1c:	2a09      	cmp	r2, #9
 8010d1e:	d903      	bls.n	8010d28 <_svfiprintf_r+0x1a8>
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d0c5      	beq.n	8010cb0 <_svfiprintf_r+0x130>
 8010d24:	9105      	str	r1, [sp, #20]
 8010d26:	e7c3      	b.n	8010cb0 <_svfiprintf_r+0x130>
 8010d28:	fb0c 2101 	mla	r1, ip, r1, r2
 8010d2c:	4604      	mov	r4, r0
 8010d2e:	2301      	movs	r3, #1
 8010d30:	e7f0      	b.n	8010d14 <_svfiprintf_r+0x194>
 8010d32:	ab03      	add	r3, sp, #12
 8010d34:	9300      	str	r3, [sp, #0]
 8010d36:	462a      	mov	r2, r5
 8010d38:	4b0f      	ldr	r3, [pc, #60]	; (8010d78 <_svfiprintf_r+0x1f8>)
 8010d3a:	a904      	add	r1, sp, #16
 8010d3c:	4638      	mov	r0, r7
 8010d3e:	f7fb ff1b 	bl	800cb78 <_printf_float>
 8010d42:	1c42      	adds	r2, r0, #1
 8010d44:	4606      	mov	r6, r0
 8010d46:	d1d6      	bne.n	8010cf6 <_svfiprintf_r+0x176>
 8010d48:	89ab      	ldrh	r3, [r5, #12]
 8010d4a:	065b      	lsls	r3, r3, #25
 8010d4c:	f53f af2c 	bmi.w	8010ba8 <_svfiprintf_r+0x28>
 8010d50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010d52:	b01d      	add	sp, #116	; 0x74
 8010d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d58:	ab03      	add	r3, sp, #12
 8010d5a:	9300      	str	r3, [sp, #0]
 8010d5c:	462a      	mov	r2, r5
 8010d5e:	4b06      	ldr	r3, [pc, #24]	; (8010d78 <_svfiprintf_r+0x1f8>)
 8010d60:	a904      	add	r1, sp, #16
 8010d62:	4638      	mov	r0, r7
 8010d64:	f7fc f994 	bl	800d090 <_printf_i>
 8010d68:	e7eb      	b.n	8010d42 <_svfiprintf_r+0x1c2>
 8010d6a:	bf00      	nop
 8010d6c:	08012824 	.word	0x08012824
 8010d70:	0801282e 	.word	0x0801282e
 8010d74:	0800cb79 	.word	0x0800cb79
 8010d78:	08010ac9 	.word	0x08010ac9
 8010d7c:	0801282a 	.word	0x0801282a

08010d80 <__sfputc_r>:
 8010d80:	6893      	ldr	r3, [r2, #8]
 8010d82:	3b01      	subs	r3, #1
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	b410      	push	{r4}
 8010d88:	6093      	str	r3, [r2, #8]
 8010d8a:	da08      	bge.n	8010d9e <__sfputc_r+0x1e>
 8010d8c:	6994      	ldr	r4, [r2, #24]
 8010d8e:	42a3      	cmp	r3, r4
 8010d90:	db01      	blt.n	8010d96 <__sfputc_r+0x16>
 8010d92:	290a      	cmp	r1, #10
 8010d94:	d103      	bne.n	8010d9e <__sfputc_r+0x1e>
 8010d96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010d9a:	f7fd bca5 	b.w	800e6e8 <__swbuf_r>
 8010d9e:	6813      	ldr	r3, [r2, #0]
 8010da0:	1c58      	adds	r0, r3, #1
 8010da2:	6010      	str	r0, [r2, #0]
 8010da4:	7019      	strb	r1, [r3, #0]
 8010da6:	4608      	mov	r0, r1
 8010da8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010dac:	4770      	bx	lr

08010dae <__sfputs_r>:
 8010dae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010db0:	4606      	mov	r6, r0
 8010db2:	460f      	mov	r7, r1
 8010db4:	4614      	mov	r4, r2
 8010db6:	18d5      	adds	r5, r2, r3
 8010db8:	42ac      	cmp	r4, r5
 8010dba:	d101      	bne.n	8010dc0 <__sfputs_r+0x12>
 8010dbc:	2000      	movs	r0, #0
 8010dbe:	e007      	b.n	8010dd0 <__sfputs_r+0x22>
 8010dc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010dc4:	463a      	mov	r2, r7
 8010dc6:	4630      	mov	r0, r6
 8010dc8:	f7ff ffda 	bl	8010d80 <__sfputc_r>
 8010dcc:	1c43      	adds	r3, r0, #1
 8010dce:	d1f3      	bne.n	8010db8 <__sfputs_r+0xa>
 8010dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010dd4 <_vfiprintf_r>:
 8010dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dd8:	460d      	mov	r5, r1
 8010dda:	b09d      	sub	sp, #116	; 0x74
 8010ddc:	4614      	mov	r4, r2
 8010dde:	4698      	mov	r8, r3
 8010de0:	4606      	mov	r6, r0
 8010de2:	b118      	cbz	r0, 8010dec <_vfiprintf_r+0x18>
 8010de4:	6983      	ldr	r3, [r0, #24]
 8010de6:	b90b      	cbnz	r3, 8010dec <_vfiprintf_r+0x18>
 8010de8:	f7fe fc66 	bl	800f6b8 <__sinit>
 8010dec:	4b89      	ldr	r3, [pc, #548]	; (8011014 <_vfiprintf_r+0x240>)
 8010dee:	429d      	cmp	r5, r3
 8010df0:	d11b      	bne.n	8010e2a <_vfiprintf_r+0x56>
 8010df2:	6875      	ldr	r5, [r6, #4]
 8010df4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010df6:	07d9      	lsls	r1, r3, #31
 8010df8:	d405      	bmi.n	8010e06 <_vfiprintf_r+0x32>
 8010dfa:	89ab      	ldrh	r3, [r5, #12]
 8010dfc:	059a      	lsls	r2, r3, #22
 8010dfe:	d402      	bmi.n	8010e06 <_vfiprintf_r+0x32>
 8010e00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e02:	f7ff f86a 	bl	800feda <__retarget_lock_acquire_recursive>
 8010e06:	89ab      	ldrh	r3, [r5, #12]
 8010e08:	071b      	lsls	r3, r3, #28
 8010e0a:	d501      	bpl.n	8010e10 <_vfiprintf_r+0x3c>
 8010e0c:	692b      	ldr	r3, [r5, #16]
 8010e0e:	b9eb      	cbnz	r3, 8010e4c <_vfiprintf_r+0x78>
 8010e10:	4629      	mov	r1, r5
 8010e12:	4630      	mov	r0, r6
 8010e14:	f7fd fcba 	bl	800e78c <__swsetup_r>
 8010e18:	b1c0      	cbz	r0, 8010e4c <_vfiprintf_r+0x78>
 8010e1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e1c:	07dc      	lsls	r4, r3, #31
 8010e1e:	d50e      	bpl.n	8010e3e <_vfiprintf_r+0x6a>
 8010e20:	f04f 30ff 	mov.w	r0, #4294967295
 8010e24:	b01d      	add	sp, #116	; 0x74
 8010e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e2a:	4b7b      	ldr	r3, [pc, #492]	; (8011018 <_vfiprintf_r+0x244>)
 8010e2c:	429d      	cmp	r5, r3
 8010e2e:	d101      	bne.n	8010e34 <_vfiprintf_r+0x60>
 8010e30:	68b5      	ldr	r5, [r6, #8]
 8010e32:	e7df      	b.n	8010df4 <_vfiprintf_r+0x20>
 8010e34:	4b79      	ldr	r3, [pc, #484]	; (801101c <_vfiprintf_r+0x248>)
 8010e36:	429d      	cmp	r5, r3
 8010e38:	bf08      	it	eq
 8010e3a:	68f5      	ldreq	r5, [r6, #12]
 8010e3c:	e7da      	b.n	8010df4 <_vfiprintf_r+0x20>
 8010e3e:	89ab      	ldrh	r3, [r5, #12]
 8010e40:	0598      	lsls	r0, r3, #22
 8010e42:	d4ed      	bmi.n	8010e20 <_vfiprintf_r+0x4c>
 8010e44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e46:	f7ff f849 	bl	800fedc <__retarget_lock_release_recursive>
 8010e4a:	e7e9      	b.n	8010e20 <_vfiprintf_r+0x4c>
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8010e50:	2320      	movs	r3, #32
 8010e52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010e56:	f8cd 800c 	str.w	r8, [sp, #12]
 8010e5a:	2330      	movs	r3, #48	; 0x30
 8010e5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011020 <_vfiprintf_r+0x24c>
 8010e60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010e64:	f04f 0901 	mov.w	r9, #1
 8010e68:	4623      	mov	r3, r4
 8010e6a:	469a      	mov	sl, r3
 8010e6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e70:	b10a      	cbz	r2, 8010e76 <_vfiprintf_r+0xa2>
 8010e72:	2a25      	cmp	r2, #37	; 0x25
 8010e74:	d1f9      	bne.n	8010e6a <_vfiprintf_r+0x96>
 8010e76:	ebba 0b04 	subs.w	fp, sl, r4
 8010e7a:	d00b      	beq.n	8010e94 <_vfiprintf_r+0xc0>
 8010e7c:	465b      	mov	r3, fp
 8010e7e:	4622      	mov	r2, r4
 8010e80:	4629      	mov	r1, r5
 8010e82:	4630      	mov	r0, r6
 8010e84:	f7ff ff93 	bl	8010dae <__sfputs_r>
 8010e88:	3001      	adds	r0, #1
 8010e8a:	f000 80aa 	beq.w	8010fe2 <_vfiprintf_r+0x20e>
 8010e8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010e90:	445a      	add	r2, fp
 8010e92:	9209      	str	r2, [sp, #36]	; 0x24
 8010e94:	f89a 3000 	ldrb.w	r3, [sl]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	f000 80a2 	beq.w	8010fe2 <_vfiprintf_r+0x20e>
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8010ea4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010ea8:	f10a 0a01 	add.w	sl, sl, #1
 8010eac:	9304      	str	r3, [sp, #16]
 8010eae:	9307      	str	r3, [sp, #28]
 8010eb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010eb4:	931a      	str	r3, [sp, #104]	; 0x68
 8010eb6:	4654      	mov	r4, sl
 8010eb8:	2205      	movs	r2, #5
 8010eba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ebe:	4858      	ldr	r0, [pc, #352]	; (8011020 <_vfiprintf_r+0x24c>)
 8010ec0:	f7ef fa16 	bl	80002f0 <memchr>
 8010ec4:	9a04      	ldr	r2, [sp, #16]
 8010ec6:	b9d8      	cbnz	r0, 8010f00 <_vfiprintf_r+0x12c>
 8010ec8:	06d1      	lsls	r1, r2, #27
 8010eca:	bf44      	itt	mi
 8010ecc:	2320      	movmi	r3, #32
 8010ece:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010ed2:	0713      	lsls	r3, r2, #28
 8010ed4:	bf44      	itt	mi
 8010ed6:	232b      	movmi	r3, #43	; 0x2b
 8010ed8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010edc:	f89a 3000 	ldrb.w	r3, [sl]
 8010ee0:	2b2a      	cmp	r3, #42	; 0x2a
 8010ee2:	d015      	beq.n	8010f10 <_vfiprintf_r+0x13c>
 8010ee4:	9a07      	ldr	r2, [sp, #28]
 8010ee6:	4654      	mov	r4, sl
 8010ee8:	2000      	movs	r0, #0
 8010eea:	f04f 0c0a 	mov.w	ip, #10
 8010eee:	4621      	mov	r1, r4
 8010ef0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ef4:	3b30      	subs	r3, #48	; 0x30
 8010ef6:	2b09      	cmp	r3, #9
 8010ef8:	d94e      	bls.n	8010f98 <_vfiprintf_r+0x1c4>
 8010efa:	b1b0      	cbz	r0, 8010f2a <_vfiprintf_r+0x156>
 8010efc:	9207      	str	r2, [sp, #28]
 8010efe:	e014      	b.n	8010f2a <_vfiprintf_r+0x156>
 8010f00:	eba0 0308 	sub.w	r3, r0, r8
 8010f04:	fa09 f303 	lsl.w	r3, r9, r3
 8010f08:	4313      	orrs	r3, r2
 8010f0a:	9304      	str	r3, [sp, #16]
 8010f0c:	46a2      	mov	sl, r4
 8010f0e:	e7d2      	b.n	8010eb6 <_vfiprintf_r+0xe2>
 8010f10:	9b03      	ldr	r3, [sp, #12]
 8010f12:	1d19      	adds	r1, r3, #4
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	9103      	str	r1, [sp, #12]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	bfbb      	ittet	lt
 8010f1c:	425b      	neglt	r3, r3
 8010f1e:	f042 0202 	orrlt.w	r2, r2, #2
 8010f22:	9307      	strge	r3, [sp, #28]
 8010f24:	9307      	strlt	r3, [sp, #28]
 8010f26:	bfb8      	it	lt
 8010f28:	9204      	strlt	r2, [sp, #16]
 8010f2a:	7823      	ldrb	r3, [r4, #0]
 8010f2c:	2b2e      	cmp	r3, #46	; 0x2e
 8010f2e:	d10c      	bne.n	8010f4a <_vfiprintf_r+0x176>
 8010f30:	7863      	ldrb	r3, [r4, #1]
 8010f32:	2b2a      	cmp	r3, #42	; 0x2a
 8010f34:	d135      	bne.n	8010fa2 <_vfiprintf_r+0x1ce>
 8010f36:	9b03      	ldr	r3, [sp, #12]
 8010f38:	1d1a      	adds	r2, r3, #4
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	9203      	str	r2, [sp, #12]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	bfb8      	it	lt
 8010f42:	f04f 33ff 	movlt.w	r3, #4294967295
 8010f46:	3402      	adds	r4, #2
 8010f48:	9305      	str	r3, [sp, #20]
 8010f4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011030 <_vfiprintf_r+0x25c>
 8010f4e:	7821      	ldrb	r1, [r4, #0]
 8010f50:	2203      	movs	r2, #3
 8010f52:	4650      	mov	r0, sl
 8010f54:	f7ef f9cc 	bl	80002f0 <memchr>
 8010f58:	b140      	cbz	r0, 8010f6c <_vfiprintf_r+0x198>
 8010f5a:	2340      	movs	r3, #64	; 0x40
 8010f5c:	eba0 000a 	sub.w	r0, r0, sl
 8010f60:	fa03 f000 	lsl.w	r0, r3, r0
 8010f64:	9b04      	ldr	r3, [sp, #16]
 8010f66:	4303      	orrs	r3, r0
 8010f68:	3401      	adds	r4, #1
 8010f6a:	9304      	str	r3, [sp, #16]
 8010f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f70:	482c      	ldr	r0, [pc, #176]	; (8011024 <_vfiprintf_r+0x250>)
 8010f72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010f76:	2206      	movs	r2, #6
 8010f78:	f7ef f9ba 	bl	80002f0 <memchr>
 8010f7c:	2800      	cmp	r0, #0
 8010f7e:	d03f      	beq.n	8011000 <_vfiprintf_r+0x22c>
 8010f80:	4b29      	ldr	r3, [pc, #164]	; (8011028 <_vfiprintf_r+0x254>)
 8010f82:	bb1b      	cbnz	r3, 8010fcc <_vfiprintf_r+0x1f8>
 8010f84:	9b03      	ldr	r3, [sp, #12]
 8010f86:	3307      	adds	r3, #7
 8010f88:	f023 0307 	bic.w	r3, r3, #7
 8010f8c:	3308      	adds	r3, #8
 8010f8e:	9303      	str	r3, [sp, #12]
 8010f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f92:	443b      	add	r3, r7
 8010f94:	9309      	str	r3, [sp, #36]	; 0x24
 8010f96:	e767      	b.n	8010e68 <_vfiprintf_r+0x94>
 8010f98:	fb0c 3202 	mla	r2, ip, r2, r3
 8010f9c:	460c      	mov	r4, r1
 8010f9e:	2001      	movs	r0, #1
 8010fa0:	e7a5      	b.n	8010eee <_vfiprintf_r+0x11a>
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	3401      	adds	r4, #1
 8010fa6:	9305      	str	r3, [sp, #20]
 8010fa8:	4619      	mov	r1, r3
 8010faa:	f04f 0c0a 	mov.w	ip, #10
 8010fae:	4620      	mov	r0, r4
 8010fb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010fb4:	3a30      	subs	r2, #48	; 0x30
 8010fb6:	2a09      	cmp	r2, #9
 8010fb8:	d903      	bls.n	8010fc2 <_vfiprintf_r+0x1ee>
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d0c5      	beq.n	8010f4a <_vfiprintf_r+0x176>
 8010fbe:	9105      	str	r1, [sp, #20]
 8010fc0:	e7c3      	b.n	8010f4a <_vfiprintf_r+0x176>
 8010fc2:	fb0c 2101 	mla	r1, ip, r1, r2
 8010fc6:	4604      	mov	r4, r0
 8010fc8:	2301      	movs	r3, #1
 8010fca:	e7f0      	b.n	8010fae <_vfiprintf_r+0x1da>
 8010fcc:	ab03      	add	r3, sp, #12
 8010fce:	9300      	str	r3, [sp, #0]
 8010fd0:	462a      	mov	r2, r5
 8010fd2:	4b16      	ldr	r3, [pc, #88]	; (801102c <_vfiprintf_r+0x258>)
 8010fd4:	a904      	add	r1, sp, #16
 8010fd6:	4630      	mov	r0, r6
 8010fd8:	f7fb fdce 	bl	800cb78 <_printf_float>
 8010fdc:	4607      	mov	r7, r0
 8010fde:	1c78      	adds	r0, r7, #1
 8010fe0:	d1d6      	bne.n	8010f90 <_vfiprintf_r+0x1bc>
 8010fe2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010fe4:	07d9      	lsls	r1, r3, #31
 8010fe6:	d405      	bmi.n	8010ff4 <_vfiprintf_r+0x220>
 8010fe8:	89ab      	ldrh	r3, [r5, #12]
 8010fea:	059a      	lsls	r2, r3, #22
 8010fec:	d402      	bmi.n	8010ff4 <_vfiprintf_r+0x220>
 8010fee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010ff0:	f7fe ff74 	bl	800fedc <__retarget_lock_release_recursive>
 8010ff4:	89ab      	ldrh	r3, [r5, #12]
 8010ff6:	065b      	lsls	r3, r3, #25
 8010ff8:	f53f af12 	bmi.w	8010e20 <_vfiprintf_r+0x4c>
 8010ffc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010ffe:	e711      	b.n	8010e24 <_vfiprintf_r+0x50>
 8011000:	ab03      	add	r3, sp, #12
 8011002:	9300      	str	r3, [sp, #0]
 8011004:	462a      	mov	r2, r5
 8011006:	4b09      	ldr	r3, [pc, #36]	; (801102c <_vfiprintf_r+0x258>)
 8011008:	a904      	add	r1, sp, #16
 801100a:	4630      	mov	r0, r6
 801100c:	f7fc f840 	bl	800d090 <_printf_i>
 8011010:	e7e4      	b.n	8010fdc <_vfiprintf_r+0x208>
 8011012:	bf00      	nop
 8011014:	08012608 	.word	0x08012608
 8011018:	08012628 	.word	0x08012628
 801101c:	080125e8 	.word	0x080125e8
 8011020:	08012824 	.word	0x08012824
 8011024:	0801282e 	.word	0x0801282e
 8011028:	0800cb79 	.word	0x0800cb79
 801102c:	08010daf 	.word	0x08010daf
 8011030:	0801282a 	.word	0x0801282a
 8011034:	00000000 	.word	0x00000000

08011038 <nan>:
 8011038:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011040 <nan+0x8>
 801103c:	4770      	bx	lr
 801103e:	bf00      	nop
 8011040:	00000000 	.word	0x00000000
 8011044:	7ff80000 	.word	0x7ff80000

08011048 <_sbrk_r>:
 8011048:	b538      	push	{r3, r4, r5, lr}
 801104a:	4d06      	ldr	r5, [pc, #24]	; (8011064 <_sbrk_r+0x1c>)
 801104c:	2300      	movs	r3, #0
 801104e:	4604      	mov	r4, r0
 8011050:	4608      	mov	r0, r1
 8011052:	602b      	str	r3, [r5, #0]
 8011054:	f7f2 ff96 	bl	8003f84 <_sbrk>
 8011058:	1c43      	adds	r3, r0, #1
 801105a:	d102      	bne.n	8011062 <_sbrk_r+0x1a>
 801105c:	682b      	ldr	r3, [r5, #0]
 801105e:	b103      	cbz	r3, 8011062 <_sbrk_r+0x1a>
 8011060:	6023      	str	r3, [r4, #0]
 8011062:	bd38      	pop	{r3, r4, r5, pc}
 8011064:	2400c73c 	.word	0x2400c73c

08011068 <__sread>:
 8011068:	b510      	push	{r4, lr}
 801106a:	460c      	mov	r4, r1
 801106c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011070:	f000 f92e 	bl	80112d0 <_read_r>
 8011074:	2800      	cmp	r0, #0
 8011076:	bfab      	itete	ge
 8011078:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801107a:	89a3      	ldrhlt	r3, [r4, #12]
 801107c:	181b      	addge	r3, r3, r0
 801107e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011082:	bfac      	ite	ge
 8011084:	6563      	strge	r3, [r4, #84]	; 0x54
 8011086:	81a3      	strhlt	r3, [r4, #12]
 8011088:	bd10      	pop	{r4, pc}

0801108a <__swrite>:
 801108a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801108e:	461f      	mov	r7, r3
 8011090:	898b      	ldrh	r3, [r1, #12]
 8011092:	05db      	lsls	r3, r3, #23
 8011094:	4605      	mov	r5, r0
 8011096:	460c      	mov	r4, r1
 8011098:	4616      	mov	r6, r2
 801109a:	d505      	bpl.n	80110a8 <__swrite+0x1e>
 801109c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80110a0:	2302      	movs	r3, #2
 80110a2:	2200      	movs	r2, #0
 80110a4:	f000 f8b6 	bl	8011214 <_lseek_r>
 80110a8:	89a3      	ldrh	r3, [r4, #12]
 80110aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80110ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80110b2:	81a3      	strh	r3, [r4, #12]
 80110b4:	4632      	mov	r2, r6
 80110b6:	463b      	mov	r3, r7
 80110b8:	4628      	mov	r0, r5
 80110ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80110be:	f000 b835 	b.w	801112c <_write_r>

080110c2 <__sseek>:
 80110c2:	b510      	push	{r4, lr}
 80110c4:	460c      	mov	r4, r1
 80110c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80110ca:	f000 f8a3 	bl	8011214 <_lseek_r>
 80110ce:	1c43      	adds	r3, r0, #1
 80110d0:	89a3      	ldrh	r3, [r4, #12]
 80110d2:	bf15      	itete	ne
 80110d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80110d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80110da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80110de:	81a3      	strheq	r3, [r4, #12]
 80110e0:	bf18      	it	ne
 80110e2:	81a3      	strhne	r3, [r4, #12]
 80110e4:	bd10      	pop	{r4, pc}

080110e6 <__sclose>:
 80110e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80110ea:	f000 b84f 	b.w	801118c <_close_r>

080110ee <strncmp>:
 80110ee:	b510      	push	{r4, lr}
 80110f0:	b16a      	cbz	r2, 801110e <strncmp+0x20>
 80110f2:	3901      	subs	r1, #1
 80110f4:	1884      	adds	r4, r0, r2
 80110f6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80110fa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80110fe:	4293      	cmp	r3, r2
 8011100:	d103      	bne.n	801110a <strncmp+0x1c>
 8011102:	42a0      	cmp	r0, r4
 8011104:	d001      	beq.n	801110a <strncmp+0x1c>
 8011106:	2b00      	cmp	r3, #0
 8011108:	d1f5      	bne.n	80110f6 <strncmp+0x8>
 801110a:	1a98      	subs	r0, r3, r2
 801110c:	bd10      	pop	{r4, pc}
 801110e:	4610      	mov	r0, r2
 8011110:	e7fc      	b.n	801110c <strncmp+0x1e>

08011112 <__ascii_wctomb>:
 8011112:	b149      	cbz	r1, 8011128 <__ascii_wctomb+0x16>
 8011114:	2aff      	cmp	r2, #255	; 0xff
 8011116:	bf85      	ittet	hi
 8011118:	238a      	movhi	r3, #138	; 0x8a
 801111a:	6003      	strhi	r3, [r0, #0]
 801111c:	700a      	strbls	r2, [r1, #0]
 801111e:	f04f 30ff 	movhi.w	r0, #4294967295
 8011122:	bf98      	it	ls
 8011124:	2001      	movls	r0, #1
 8011126:	4770      	bx	lr
 8011128:	4608      	mov	r0, r1
 801112a:	4770      	bx	lr

0801112c <_write_r>:
 801112c:	b538      	push	{r3, r4, r5, lr}
 801112e:	4d07      	ldr	r5, [pc, #28]	; (801114c <_write_r+0x20>)
 8011130:	4604      	mov	r4, r0
 8011132:	4608      	mov	r0, r1
 8011134:	4611      	mov	r1, r2
 8011136:	2200      	movs	r2, #0
 8011138:	602a      	str	r2, [r5, #0]
 801113a:	461a      	mov	r2, r3
 801113c:	f7f2 fb8c 	bl	8003858 <_write>
 8011140:	1c43      	adds	r3, r0, #1
 8011142:	d102      	bne.n	801114a <_write_r+0x1e>
 8011144:	682b      	ldr	r3, [r5, #0]
 8011146:	b103      	cbz	r3, 801114a <_write_r+0x1e>
 8011148:	6023      	str	r3, [r4, #0]
 801114a:	bd38      	pop	{r3, r4, r5, pc}
 801114c:	2400c73c 	.word	0x2400c73c

08011150 <__assert_func>:
 8011150:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011152:	4614      	mov	r4, r2
 8011154:	461a      	mov	r2, r3
 8011156:	4b09      	ldr	r3, [pc, #36]	; (801117c <__assert_func+0x2c>)
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	4605      	mov	r5, r0
 801115c:	68d8      	ldr	r0, [r3, #12]
 801115e:	b14c      	cbz	r4, 8011174 <__assert_func+0x24>
 8011160:	4b07      	ldr	r3, [pc, #28]	; (8011180 <__assert_func+0x30>)
 8011162:	9100      	str	r1, [sp, #0]
 8011164:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011168:	4906      	ldr	r1, [pc, #24]	; (8011184 <__assert_func+0x34>)
 801116a:	462b      	mov	r3, r5
 801116c:	f000 f81e 	bl	80111ac <fiprintf>
 8011170:	f000 f8c0 	bl	80112f4 <abort>
 8011174:	4b04      	ldr	r3, [pc, #16]	; (8011188 <__assert_func+0x38>)
 8011176:	461c      	mov	r4, r3
 8011178:	e7f3      	b.n	8011162 <__assert_func+0x12>
 801117a:	bf00      	nop
 801117c:	24000010 	.word	0x24000010
 8011180:	08012835 	.word	0x08012835
 8011184:	08012842 	.word	0x08012842
 8011188:	08012870 	.word	0x08012870

0801118c <_close_r>:
 801118c:	b538      	push	{r3, r4, r5, lr}
 801118e:	4d06      	ldr	r5, [pc, #24]	; (80111a8 <_close_r+0x1c>)
 8011190:	2300      	movs	r3, #0
 8011192:	4604      	mov	r4, r0
 8011194:	4608      	mov	r0, r1
 8011196:	602b      	str	r3, [r5, #0]
 8011198:	f7f2 fb8a 	bl	80038b0 <_close>
 801119c:	1c43      	adds	r3, r0, #1
 801119e:	d102      	bne.n	80111a6 <_close_r+0x1a>
 80111a0:	682b      	ldr	r3, [r5, #0]
 80111a2:	b103      	cbz	r3, 80111a6 <_close_r+0x1a>
 80111a4:	6023      	str	r3, [r4, #0]
 80111a6:	bd38      	pop	{r3, r4, r5, pc}
 80111a8:	2400c73c 	.word	0x2400c73c

080111ac <fiprintf>:
 80111ac:	b40e      	push	{r1, r2, r3}
 80111ae:	b503      	push	{r0, r1, lr}
 80111b0:	4601      	mov	r1, r0
 80111b2:	ab03      	add	r3, sp, #12
 80111b4:	4805      	ldr	r0, [pc, #20]	; (80111cc <fiprintf+0x20>)
 80111b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80111ba:	6800      	ldr	r0, [r0, #0]
 80111bc:	9301      	str	r3, [sp, #4]
 80111be:	f7ff fe09 	bl	8010dd4 <_vfiprintf_r>
 80111c2:	b002      	add	sp, #8
 80111c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80111c8:	b003      	add	sp, #12
 80111ca:	4770      	bx	lr
 80111cc:	24000010 	.word	0x24000010

080111d0 <_fstat_r>:
 80111d0:	b538      	push	{r3, r4, r5, lr}
 80111d2:	4d07      	ldr	r5, [pc, #28]	; (80111f0 <_fstat_r+0x20>)
 80111d4:	2300      	movs	r3, #0
 80111d6:	4604      	mov	r4, r0
 80111d8:	4608      	mov	r0, r1
 80111da:	4611      	mov	r1, r2
 80111dc:	602b      	str	r3, [r5, #0]
 80111de:	f7f2 fbb7 	bl	8003950 <_fstat>
 80111e2:	1c43      	adds	r3, r0, #1
 80111e4:	d102      	bne.n	80111ec <_fstat_r+0x1c>
 80111e6:	682b      	ldr	r3, [r5, #0]
 80111e8:	b103      	cbz	r3, 80111ec <_fstat_r+0x1c>
 80111ea:	6023      	str	r3, [r4, #0]
 80111ec:	bd38      	pop	{r3, r4, r5, pc}
 80111ee:	bf00      	nop
 80111f0:	2400c73c 	.word	0x2400c73c

080111f4 <_isatty_r>:
 80111f4:	b538      	push	{r3, r4, r5, lr}
 80111f6:	4d06      	ldr	r5, [pc, #24]	; (8011210 <_isatty_r+0x1c>)
 80111f8:	2300      	movs	r3, #0
 80111fa:	4604      	mov	r4, r0
 80111fc:	4608      	mov	r0, r1
 80111fe:	602b      	str	r3, [r5, #0]
 8011200:	f7f2 fb14 	bl	800382c <_isatty>
 8011204:	1c43      	adds	r3, r0, #1
 8011206:	d102      	bne.n	801120e <_isatty_r+0x1a>
 8011208:	682b      	ldr	r3, [r5, #0]
 801120a:	b103      	cbz	r3, 801120e <_isatty_r+0x1a>
 801120c:	6023      	str	r3, [r4, #0]
 801120e:	bd38      	pop	{r3, r4, r5, pc}
 8011210:	2400c73c 	.word	0x2400c73c

08011214 <_lseek_r>:
 8011214:	b538      	push	{r3, r4, r5, lr}
 8011216:	4d07      	ldr	r5, [pc, #28]	; (8011234 <_lseek_r+0x20>)
 8011218:	4604      	mov	r4, r0
 801121a:	4608      	mov	r0, r1
 801121c:	4611      	mov	r1, r2
 801121e:	2200      	movs	r2, #0
 8011220:	602a      	str	r2, [r5, #0]
 8011222:	461a      	mov	r2, r3
 8011224:	f7f2 fb5b 	bl	80038de <_lseek>
 8011228:	1c43      	adds	r3, r0, #1
 801122a:	d102      	bne.n	8011232 <_lseek_r+0x1e>
 801122c:	682b      	ldr	r3, [r5, #0]
 801122e:	b103      	cbz	r3, 8011232 <_lseek_r+0x1e>
 8011230:	6023      	str	r3, [r4, #0]
 8011232:	bd38      	pop	{r3, r4, r5, pc}
 8011234:	2400c73c 	.word	0x2400c73c

08011238 <memmove>:
 8011238:	4288      	cmp	r0, r1
 801123a:	b510      	push	{r4, lr}
 801123c:	eb01 0402 	add.w	r4, r1, r2
 8011240:	d902      	bls.n	8011248 <memmove+0x10>
 8011242:	4284      	cmp	r4, r0
 8011244:	4623      	mov	r3, r4
 8011246:	d807      	bhi.n	8011258 <memmove+0x20>
 8011248:	1e43      	subs	r3, r0, #1
 801124a:	42a1      	cmp	r1, r4
 801124c:	d008      	beq.n	8011260 <memmove+0x28>
 801124e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011252:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011256:	e7f8      	b.n	801124a <memmove+0x12>
 8011258:	4402      	add	r2, r0
 801125a:	4601      	mov	r1, r0
 801125c:	428a      	cmp	r2, r1
 801125e:	d100      	bne.n	8011262 <memmove+0x2a>
 8011260:	bd10      	pop	{r4, pc}
 8011262:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011266:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801126a:	e7f7      	b.n	801125c <memmove+0x24>

0801126c <__malloc_lock>:
 801126c:	4801      	ldr	r0, [pc, #4]	; (8011274 <__malloc_lock+0x8>)
 801126e:	f7fe be34 	b.w	800feda <__retarget_lock_acquire_recursive>
 8011272:	bf00      	nop
 8011274:	2400c734 	.word	0x2400c734

08011278 <__malloc_unlock>:
 8011278:	4801      	ldr	r0, [pc, #4]	; (8011280 <__malloc_unlock+0x8>)
 801127a:	f7fe be2f 	b.w	800fedc <__retarget_lock_release_recursive>
 801127e:	bf00      	nop
 8011280:	2400c734 	.word	0x2400c734

08011284 <_realloc_r>:
 8011284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011286:	4607      	mov	r7, r0
 8011288:	4614      	mov	r4, r2
 801128a:	460e      	mov	r6, r1
 801128c:	b921      	cbnz	r1, 8011298 <_realloc_r+0x14>
 801128e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011292:	4611      	mov	r1, r2
 8011294:	f7ff bbbe 	b.w	8010a14 <_malloc_r>
 8011298:	b922      	cbnz	r2, 80112a4 <_realloc_r+0x20>
 801129a:	f7ff fb6b 	bl	8010974 <_free_r>
 801129e:	4625      	mov	r5, r4
 80112a0:	4628      	mov	r0, r5
 80112a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112a4:	f000 f82d 	bl	8011302 <_malloc_usable_size_r>
 80112a8:	42a0      	cmp	r0, r4
 80112aa:	d20f      	bcs.n	80112cc <_realloc_r+0x48>
 80112ac:	4621      	mov	r1, r4
 80112ae:	4638      	mov	r0, r7
 80112b0:	f7ff fbb0 	bl	8010a14 <_malloc_r>
 80112b4:	4605      	mov	r5, r0
 80112b6:	2800      	cmp	r0, #0
 80112b8:	d0f2      	beq.n	80112a0 <_realloc_r+0x1c>
 80112ba:	4631      	mov	r1, r6
 80112bc:	4622      	mov	r2, r4
 80112be:	f7fb fbb5 	bl	800ca2c <memcpy>
 80112c2:	4631      	mov	r1, r6
 80112c4:	4638      	mov	r0, r7
 80112c6:	f7ff fb55 	bl	8010974 <_free_r>
 80112ca:	e7e9      	b.n	80112a0 <_realloc_r+0x1c>
 80112cc:	4635      	mov	r5, r6
 80112ce:	e7e7      	b.n	80112a0 <_realloc_r+0x1c>

080112d0 <_read_r>:
 80112d0:	b538      	push	{r3, r4, r5, lr}
 80112d2:	4d07      	ldr	r5, [pc, #28]	; (80112f0 <_read_r+0x20>)
 80112d4:	4604      	mov	r4, r0
 80112d6:	4608      	mov	r0, r1
 80112d8:	4611      	mov	r1, r2
 80112da:	2200      	movs	r2, #0
 80112dc:	602a      	str	r2, [r5, #0]
 80112de:	461a      	mov	r2, r3
 80112e0:	f7f2 fb0e 	bl	8003900 <_read>
 80112e4:	1c43      	adds	r3, r0, #1
 80112e6:	d102      	bne.n	80112ee <_read_r+0x1e>
 80112e8:	682b      	ldr	r3, [r5, #0]
 80112ea:	b103      	cbz	r3, 80112ee <_read_r+0x1e>
 80112ec:	6023      	str	r3, [r4, #0]
 80112ee:	bd38      	pop	{r3, r4, r5, pc}
 80112f0:	2400c73c 	.word	0x2400c73c

080112f4 <abort>:
 80112f4:	b508      	push	{r3, lr}
 80112f6:	2006      	movs	r0, #6
 80112f8:	f000 f834 	bl	8011364 <raise>
 80112fc:	2001      	movs	r0, #1
 80112fe:	f000 fdcb 	bl	8011e98 <_exit>

08011302 <_malloc_usable_size_r>:
 8011302:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011306:	1f18      	subs	r0, r3, #4
 8011308:	2b00      	cmp	r3, #0
 801130a:	bfbc      	itt	lt
 801130c:	580b      	ldrlt	r3, [r1, r0]
 801130e:	18c0      	addlt	r0, r0, r3
 8011310:	4770      	bx	lr

08011312 <_raise_r>:
 8011312:	291f      	cmp	r1, #31
 8011314:	b538      	push	{r3, r4, r5, lr}
 8011316:	4604      	mov	r4, r0
 8011318:	460d      	mov	r5, r1
 801131a:	d904      	bls.n	8011326 <_raise_r+0x14>
 801131c:	2316      	movs	r3, #22
 801131e:	6003      	str	r3, [r0, #0]
 8011320:	f04f 30ff 	mov.w	r0, #4294967295
 8011324:	bd38      	pop	{r3, r4, r5, pc}
 8011326:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011328:	b112      	cbz	r2, 8011330 <_raise_r+0x1e>
 801132a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801132e:	b94b      	cbnz	r3, 8011344 <_raise_r+0x32>
 8011330:	4620      	mov	r0, r4
 8011332:	f000 f831 	bl	8011398 <_getpid_r>
 8011336:	462a      	mov	r2, r5
 8011338:	4601      	mov	r1, r0
 801133a:	4620      	mov	r0, r4
 801133c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011340:	f000 b818 	b.w	8011374 <_kill_r>
 8011344:	2b01      	cmp	r3, #1
 8011346:	d00a      	beq.n	801135e <_raise_r+0x4c>
 8011348:	1c59      	adds	r1, r3, #1
 801134a:	d103      	bne.n	8011354 <_raise_r+0x42>
 801134c:	2316      	movs	r3, #22
 801134e:	6003      	str	r3, [r0, #0]
 8011350:	2001      	movs	r0, #1
 8011352:	e7e7      	b.n	8011324 <_raise_r+0x12>
 8011354:	2400      	movs	r4, #0
 8011356:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801135a:	4628      	mov	r0, r5
 801135c:	4798      	blx	r3
 801135e:	2000      	movs	r0, #0
 8011360:	e7e0      	b.n	8011324 <_raise_r+0x12>
	...

08011364 <raise>:
 8011364:	4b02      	ldr	r3, [pc, #8]	; (8011370 <raise+0xc>)
 8011366:	4601      	mov	r1, r0
 8011368:	6818      	ldr	r0, [r3, #0]
 801136a:	f7ff bfd2 	b.w	8011312 <_raise_r>
 801136e:	bf00      	nop
 8011370:	24000010 	.word	0x24000010

08011374 <_kill_r>:
 8011374:	b538      	push	{r3, r4, r5, lr}
 8011376:	4d07      	ldr	r5, [pc, #28]	; (8011394 <_kill_r+0x20>)
 8011378:	2300      	movs	r3, #0
 801137a:	4604      	mov	r4, r0
 801137c:	4608      	mov	r0, r1
 801137e:	4611      	mov	r1, r2
 8011380:	602b      	str	r3, [r5, #0]
 8011382:	f000 fd81 	bl	8011e88 <_kill>
 8011386:	1c43      	adds	r3, r0, #1
 8011388:	d102      	bne.n	8011390 <_kill_r+0x1c>
 801138a:	682b      	ldr	r3, [r5, #0]
 801138c:	b103      	cbz	r3, 8011390 <_kill_r+0x1c>
 801138e:	6023      	str	r3, [r4, #0]
 8011390:	bd38      	pop	{r3, r4, r5, pc}
 8011392:	bf00      	nop
 8011394:	2400c73c 	.word	0x2400c73c

08011398 <_getpid_r>:
 8011398:	f000 bd6e 	b.w	8011e78 <_getpid>

0801139c <checkint>:
 801139c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80113a0:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80113a4:	429a      	cmp	r2, r3
 80113a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113a8:	dd2b      	ble.n	8011402 <checkint+0x66>
 80113aa:	f240 4333 	movw	r3, #1075	; 0x433
 80113ae:	429a      	cmp	r2, r3
 80113b0:	dc25      	bgt.n	80113fe <checkint+0x62>
 80113b2:	1a9b      	subs	r3, r3, r2
 80113b4:	f1a3 0620 	sub.w	r6, r3, #32
 80113b8:	f04f 32ff 	mov.w	r2, #4294967295
 80113bc:	fa02 f606 	lsl.w	r6, r2, r6
 80113c0:	fa02 f403 	lsl.w	r4, r2, r3
 80113c4:	f1c3 0520 	rsb	r5, r3, #32
 80113c8:	4334      	orrs	r4, r6
 80113ca:	fa22 f505 	lsr.w	r5, r2, r5
 80113ce:	432c      	orrs	r4, r5
 80113d0:	409a      	lsls	r2, r3
 80113d2:	ea20 0602 	bic.w	r6, r0, r2
 80113d6:	ea21 0704 	bic.w	r7, r1, r4
 80113da:	ea56 0207 	orrs.w	r2, r6, r7
 80113de:	f1a3 0420 	sub.w	r4, r3, #32
 80113e2:	f1c3 0220 	rsb	r2, r3, #32
 80113e6:	d10c      	bne.n	8011402 <checkint+0x66>
 80113e8:	40d8      	lsrs	r0, r3
 80113ea:	fa01 f302 	lsl.w	r3, r1, r2
 80113ee:	4318      	orrs	r0, r3
 80113f0:	40e1      	lsrs	r1, r4
 80113f2:	4308      	orrs	r0, r1
 80113f4:	f000 0301 	and.w	r3, r0, #1
 80113f8:	f1c3 0002 	rsb	r0, r3, #2
 80113fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113fe:	2002      	movs	r0, #2
 8011400:	e7fc      	b.n	80113fc <checkint+0x60>
 8011402:	2000      	movs	r0, #0
 8011404:	e7fa      	b.n	80113fc <checkint+0x60>
	...

08011408 <pow>:
 8011408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801140c:	ed2d 8b0a 	vpush	{d8-d12}
 8011410:	b09b      	sub	sp, #108	; 0x6c
 8011412:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011416:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801141a:	ed8d 1b00 	vstr	d1, [sp]
 801141e:	ea4f 5915 	mov.w	r9, r5, lsr #20
 8011422:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011426:	f109 30ff 	add.w	r0, r9, #4294967295
 801142a:	f240 71fd 	movw	r1, #2045	; 0x7fd
 801142e:	4288      	cmp	r0, r1
 8011430:	46cc      	mov	ip, r9
 8011432:	ea4f 5817 	mov.w	r8, r7, lsr #20
 8011436:	d806      	bhi.n	8011446 <pow+0x3e>
 8011438:	f3c8 010a 	ubfx	r1, r8, #0, #11
 801143c:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 8011440:	297f      	cmp	r1, #127	; 0x7f
 8011442:	f240 81ab 	bls.w	801179c <pow+0x394>
 8011446:	19b1      	adds	r1, r6, r6
 8011448:	9104      	str	r1, [sp, #16]
 801144a:	eb47 0107 	adc.w	r1, r7, r7
 801144e:	9105      	str	r1, [sp, #20]
 8011450:	9904      	ldr	r1, [sp, #16]
 8011452:	f111 31ff 	adds.w	r1, r1, #4294967295
 8011456:	460a      	mov	r2, r1
 8011458:	9905      	ldr	r1, [sp, #20]
 801145a:	f141 31ff 	adc.w	r1, r1, #4294967295
 801145e:	460b      	mov	r3, r1
 8011460:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 8011464:	f06f 0001 	mvn.w	r0, #1
 8011468:	4299      	cmp	r1, r3
 801146a:	bf08      	it	eq
 801146c:	4290      	cmpeq	r0, r2
 801146e:	d260      	bcs.n	8011532 <pow+0x12a>
 8011470:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011474:	4313      	orrs	r3, r2
 8011476:	d11a      	bne.n	80114ae <pow+0xa6>
 8011478:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 801147c:	1923      	adds	r3, r4, r4
 801147e:	930c      	str	r3, [sp, #48]	; 0x30
 8011480:	eb42 0302 	adc.w	r3, r2, r2
 8011484:	930d      	str	r3, [sp, #52]	; 0x34
 8011486:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801148a:	4bcf      	ldr	r3, [pc, #828]	; (80117c8 <pow+0x3c0>)
 801148c:	2200      	movs	r2, #0
 801148e:	428b      	cmp	r3, r1
 8011490:	bf08      	it	eq
 8011492:	4282      	cmpeq	r2, r0
 8011494:	f080 8265 	bcs.w	8011962 <pow+0x55a>
 8011498:	ed9d 7b02 	vldr	d7, [sp, #8]
 801149c:	ed9d 6b00 	vldr	d6, [sp]
 80114a0:	ee37 0b06 	vadd.f64	d0, d7, d6
 80114a4:	b01b      	add	sp, #108	; 0x6c
 80114a6:	ecbd 8b0a 	vpop	{d8-d12}
 80114aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114ae:	49c7      	ldr	r1, [pc, #796]	; (80117cc <pow+0x3c4>)
 80114b0:	2000      	movs	r0, #0
 80114b2:	428d      	cmp	r5, r1
 80114b4:	bf08      	it	eq
 80114b6:	4284      	cmpeq	r4, r0
 80114b8:	d10b      	bne.n	80114d2 <pow+0xca>
 80114ba:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80114be:	19b3      	adds	r3, r6, r6
 80114c0:	930e      	str	r3, [sp, #56]	; 0x38
 80114c2:	eb42 0302 	adc.w	r3, r2, r2
 80114c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80114c8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80114cc:	4bbe      	ldr	r3, [pc, #760]	; (80117c8 <pow+0x3c0>)
 80114ce:	2200      	movs	r2, #0
 80114d0:	e7dd      	b.n	801148e <pow+0x86>
 80114d2:	1921      	adds	r1, r4, r4
 80114d4:	9106      	str	r1, [sp, #24]
 80114d6:	eb45 0105 	adc.w	r1, r5, r5
 80114da:	9107      	str	r1, [sp, #28]
 80114dc:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80114e0:	49bb      	ldr	r1, [pc, #748]	; (80117d0 <pow+0x3c8>)
 80114e2:	2000      	movs	r0, #0
 80114e4:	42a1      	cmp	r1, r4
 80114e6:	bf08      	it	eq
 80114e8:	4298      	cmpeq	r0, r3
 80114ea:	d3d5      	bcc.n	8011498 <pow+0x90>
 80114ec:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80114f0:	428c      	cmp	r4, r1
 80114f2:	bf08      	it	eq
 80114f4:	4283      	cmpeq	r3, r0
 80114f6:	d1cf      	bne.n	8011498 <pow+0x90>
 80114f8:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80114fc:	49b5      	ldr	r1, [pc, #724]	; (80117d4 <pow+0x3cc>)
 80114fe:	2000      	movs	r0, #0
 8011500:	428c      	cmp	r4, r1
 8011502:	bf08      	it	eq
 8011504:	4283      	cmpeq	r3, r0
 8011506:	f000 822c 	beq.w	8011962 <pow+0x55a>
 801150a:	49b3      	ldr	r1, [pc, #716]	; (80117d8 <pow+0x3d0>)
 801150c:	f04f 30ff 	mov.w	r0, #4294967295
 8011510:	42a1      	cmp	r1, r4
 8011512:	bf08      	it	eq
 8011514:	4298      	cmpeq	r0, r3
 8011516:	ea6f 0307 	mvn.w	r3, r7
 801151a:	bf34      	ite	cc
 801151c:	2201      	movcc	r2, #1
 801151e:	2200      	movcs	r2, #0
 8011520:	0fdb      	lsrs	r3, r3, #31
 8011522:	429a      	cmp	r2, r3
 8011524:	f040 821a 	bne.w	801195c <pow+0x554>
 8011528:	ed9d 7b00 	vldr	d7, [sp]
 801152c:	ee27 0b07 	vmul.f64	d0, d7, d7
 8011530:	e7b8      	b.n	80114a4 <pow+0x9c>
 8011532:	1923      	adds	r3, r4, r4
 8011534:	9308      	str	r3, [sp, #32]
 8011536:	eb45 0305 	adc.w	r3, r5, r5
 801153a:	9309      	str	r3, [sp, #36]	; 0x24
 801153c:	9b08      	ldr	r3, [sp, #32]
 801153e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8011542:	9310      	str	r3, [sp, #64]	; 0x40
 8011544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011546:	f143 33ff 	adc.w	r3, r3, #4294967295
 801154a:	9311      	str	r3, [sp, #68]	; 0x44
 801154c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011550:	4299      	cmp	r1, r3
 8011552:	bf08      	it	eq
 8011554:	4290      	cmpeq	r0, r2
 8011556:	d22d      	bcs.n	80115b4 <pow+0x1ac>
 8011558:	ed9d 7b02 	vldr	d7, [sp, #8]
 801155c:	2c00      	cmp	r4, #0
 801155e:	f175 0300 	sbcs.w	r3, r5, #0
 8011562:	ee27 0b07 	vmul.f64	d0, d7, d7
 8011566:	da16      	bge.n	8011596 <pow+0x18e>
 8011568:	4630      	mov	r0, r6
 801156a:	4639      	mov	r1, r7
 801156c:	f7ff ff16 	bl	801139c <checkint>
 8011570:	2801      	cmp	r0, #1
 8011572:	d110      	bne.n	8011596 <pow+0x18e>
 8011574:	eeb1 0b40 	vneg.f64	d0, d0
 8011578:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 801157c:	4323      	orrs	r3, r4
 801157e:	d10c      	bne.n	801159a <pow+0x192>
 8011580:	2e00      	cmp	r6, #0
 8011582:	f177 0300 	sbcs.w	r3, r7, #0
 8011586:	da8d      	bge.n	80114a4 <pow+0x9c>
 8011588:	b01b      	add	sp, #108	; 0x6c
 801158a:	ecbd 8b0a 	vpop	{d8-d12}
 801158e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011592:	f000 bb29 	b.w	8011be8 <__math_divzero>
 8011596:	2000      	movs	r0, #0
 8011598:	e7ee      	b.n	8011578 <pow+0x170>
 801159a:	2e00      	cmp	r6, #0
 801159c:	f177 0300 	sbcs.w	r3, r7, #0
 80115a0:	da80      	bge.n	80114a4 <pow+0x9c>
 80115a2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80115a6:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80115aa:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80115ae:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 80115b2:	e777      	b.n	80114a4 <pow+0x9c>
 80115b4:	2c00      	cmp	r4, #0
 80115b6:	f175 0300 	sbcs.w	r3, r5, #0
 80115ba:	da35      	bge.n	8011628 <pow+0x220>
 80115bc:	4630      	mov	r0, r6
 80115be:	4639      	mov	r1, r7
 80115c0:	f7ff feec 	bl	801139c <checkint>
 80115c4:	b940      	cbnz	r0, 80115d8 <pow+0x1d0>
 80115c6:	ed9d 0b02 	vldr	d0, [sp, #8]
 80115ca:	b01b      	add	sp, #108	; 0x6c
 80115cc:	ecbd 8b0a 	vpop	{d8-d12}
 80115d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115d4:	f000 bb20 	b.w	8011c18 <__math_invalid>
 80115d8:	2801      	cmp	r0, #1
 80115da:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80115de:	bf14      	ite	ne
 80115e0:	2000      	movne	r0, #0
 80115e2:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 80115e6:	461d      	mov	r5, r3
 80115e8:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 80115ec:	f3c8 030a 	ubfx	r3, r8, #0, #11
 80115f0:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 80115f4:	2a7f      	cmp	r2, #127	; 0x7f
 80115f6:	d933      	bls.n	8011660 <pow+0x258>
 80115f8:	4974      	ldr	r1, [pc, #464]	; (80117cc <pow+0x3c4>)
 80115fa:	2000      	movs	r0, #0
 80115fc:	428d      	cmp	r5, r1
 80115fe:	bf08      	it	eq
 8011600:	4284      	cmpeq	r4, r0
 8011602:	f000 81ae 	beq.w	8011962 <pow+0x55a>
 8011606:	f240 32bd 	movw	r2, #957	; 0x3bd
 801160a:	4293      	cmp	r3, r2
 801160c:	d80e      	bhi.n	801162c <pow+0x224>
 801160e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011612:	ed9d 7b00 	vldr	d7, [sp]
 8011616:	42a9      	cmp	r1, r5
 8011618:	bf08      	it	eq
 801161a:	42a0      	cmpeq	r0, r4
 801161c:	bf34      	ite	cc
 801161e:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 8011622:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 8011626:	e73d      	b.n	80114a4 <pow+0x9c>
 8011628:	2000      	movs	r0, #0
 801162a:	e7df      	b.n	80115ec <pow+0x1e4>
 801162c:	42a9      	cmp	r1, r5
 801162e:	bf08      	it	eq
 8011630:	42a0      	cmpeq	r0, r4
 8011632:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011636:	bf2c      	ite	cs
 8011638:	2301      	movcs	r3, #1
 801163a:	2300      	movcc	r3, #0
 801163c:	4590      	cmp	r8, r2
 801163e:	bf8c      	ite	hi
 8011640:	f04f 0800 	movhi.w	r8, #0
 8011644:	f04f 0801 	movls.w	r8, #1
 8011648:	4543      	cmp	r3, r8
 801164a:	f04f 0000 	mov.w	r0, #0
 801164e:	f000 80af 	beq.w	80117b0 <pow+0x3a8>
 8011652:	b01b      	add	sp, #108	; 0x6c
 8011654:	ecbd 8b0a 	vpop	{d8-d12}
 8011658:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801165c:	f000 babc 	b.w	8011bd8 <__math_oflow>
 8011660:	f1bc 0f00 	cmp.w	ip, #0
 8011664:	d10e      	bne.n	8011684 <pow+0x27c>
 8011666:	ed9f 7b56 	vldr	d7, [pc, #344]	; 80117c0 <pow+0x3b8>
 801166a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801166e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011672:	ec57 6b17 	vmov	r6, r7, d7
 8011676:	4b59      	ldr	r3, [pc, #356]	; (80117dc <pow+0x3d4>)
 8011678:	2100      	movs	r1, #0
 801167a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801167e:	1874      	adds	r4, r6, r1
 8011680:	eb42 0503 	adc.w	r5, r2, r3
 8011684:	2300      	movs	r3, #0
 8011686:	18e3      	adds	r3, r4, r3
 8011688:	4b55      	ldr	r3, [pc, #340]	; (80117e0 <pow+0x3d8>)
 801168a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 801168e:	eb45 0303 	adc.w	r3, r5, r3
 8011692:	1519      	asrs	r1, r3, #20
 8011694:	ee03 1a10 	vmov	s6, r1
 8011698:	0d1e      	lsrs	r6, r3, #20
 801169a:	2100      	movs	r1, #0
 801169c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 80116a0:	0536      	lsls	r6, r6, #20
 80116a2:	1a63      	subs	r3, r4, r1
 80116a4:	9312      	str	r3, [sp, #72]	; 0x48
 80116a6:	eb65 0306 	sbc.w	r3, r5, r6
 80116aa:	9313      	str	r3, [sp, #76]	; 0x4c
 80116ac:	4b4d      	ldr	r3, [pc, #308]	; (80117e4 <pow+0x3dc>)
 80116ae:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 80116b2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80116b6:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 80116ba:	eea5 6b07 	vfma.f64	d6, d5, d7
 80116be:	ed93 7b00 	vldr	d7, [r3]
 80116c2:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 80116c6:	ed93 4b02 	vldr	d4, [r3, #8]
 80116ca:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 80116ce:	eea3 5b07 	vfma.f64	d5, d3, d7
 80116d2:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 80116d6:	ee36 9b05 	vadd.f64	d9, d6, d5
 80116da:	ee35 5b49 	vsub.f64	d5, d5, d9
 80116de:	eea3 7b04 	vfma.f64	d7, d3, d4
 80116e2:	ed93 4b04 	vldr	d4, [r3, #16]
 80116e6:	ee35 5b06 	vadd.f64	d5, d5, d6
 80116ea:	ee37 7b05 	vadd.f64	d7, d7, d5
 80116ee:	ee26 4b04 	vmul.f64	d4, d6, d4
 80116f2:	ed93 3b08 	vldr	d3, [r3, #32]
 80116f6:	ee26 0b04 	vmul.f64	d0, d6, d4
 80116fa:	eeb0 8b40 	vmov.f64	d8, d0
 80116fe:	ee94 8b06 	vfnms.f64	d8, d4, d6
 8011702:	ed93 4b06 	vldr	d4, [r3, #24]
 8011706:	ee26 ab00 	vmul.f64	d10, d6, d0
 801170a:	ee39 1b00 	vadd.f64	d1, d9, d0
 801170e:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 8011712:	eea6 4b03 	vfma.f64	d4, d6, d3
 8011716:	ee39 9b41 	vsub.f64	d9, d9, d1
 801171a:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 801171e:	ee37 8b08 	vadd.f64	d8, d7, d8
 8011722:	ee39 9b00 	vadd.f64	d9, d9, d0
 8011726:	eea6 3b02 	vfma.f64	d3, d6, d2
 801172a:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 801172e:	ee38 9b09 	vadd.f64	d9, d8, d9
 8011732:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 8011736:	eea6 2b0c 	vfma.f64	d2, d6, d12
 801173a:	ed9d 6b00 	vldr	d6, [sp]
 801173e:	eea0 3b02 	vfma.f64	d3, d0, d2
 8011742:	eea0 4b03 	vfma.f64	d4, d0, d3
 8011746:	eeaa 9b04 	vfma.f64	d9, d10, d4
 801174a:	ee31 7b09 	vadd.f64	d7, d1, d9
 801174e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011752:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011756:	eeb0 3b46 	vmov.f64	d3, d6
 801175a:	ee31 1b47 	vsub.f64	d1, d1, d7
 801175e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011762:	ee31 9b09 	vadd.f64	d9, d1, d9
 8011766:	ed9d 6b00 	vldr	d6, [sp]
 801176a:	f3c3 570a 	ubfx	r7, r3, #20, #11
 801176e:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 8011772:	193c      	adds	r4, r7, r4
 8011774:	2c3e      	cmp	r4, #62	; 0x3e
 8011776:	ee96 3b07 	vfnms.f64	d3, d6, d7
 801177a:	eea6 3b09 	vfma.f64	d3, d6, d9
 801177e:	d934      	bls.n	80117ea <pow+0x3e2>
 8011780:	428c      	cmp	r4, r1
 8011782:	da0d      	bge.n	80117a0 <pow+0x398>
 8011784:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011788:	ed9d 7b02 	vldr	d7, [sp, #8]
 801178c:	ee37 0b00 	vadd.f64	d0, d7, d0
 8011790:	2800      	cmp	r0, #0
 8011792:	f43f ae87 	beq.w	80114a4 <pow+0x9c>
 8011796:	eeb1 0b40 	vneg.f64	d0, d0
 801179a:	e683      	b.n	80114a4 <pow+0x9c>
 801179c:	2000      	movs	r0, #0
 801179e:	e771      	b.n	8011684 <pow+0x27c>
 80117a0:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 80117a4:	d920      	bls.n	80117e8 <pow+0x3e0>
 80117a6:	2a00      	cmp	r2, #0
 80117a8:	f173 0300 	sbcs.w	r3, r3, #0
 80117ac:	f6bf af51 	bge.w	8011652 <pow+0x24a>
 80117b0:	b01b      	add	sp, #108	; 0x6c
 80117b2:	ecbd 8b0a 	vpop	{d8-d12}
 80117b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117ba:	f000 ba05 	b.w	8011bc8 <__math_uflow>
 80117be:	bf00      	nop
 80117c0:	00000000 	.word	0x00000000
 80117c4:	43300000 	.word	0x43300000
 80117c8:	fff00000 	.word	0xfff00000
 80117cc:	3ff00000 	.word	0x3ff00000
 80117d0:	ffe00000 	.word	0xffe00000
 80117d4:	7fe00000 	.word	0x7fe00000
 80117d8:	7fdfffff 	.word	0x7fdfffff
 80117dc:	fcc00000 	.word	0xfcc00000
 80117e0:	c0196aab 	.word	0xc0196aab
 80117e4:	08012878 	.word	0x08012878
 80117e8:	460f      	mov	r7, r1
 80117ea:	4e65      	ldr	r6, [pc, #404]	; (8011980 <pow+0x578>)
 80117ec:	ed9d 4b02 	vldr	d4, [sp, #8]
 80117f0:	ed96 6b02 	vldr	d6, [r6, #8]
 80117f4:	ed96 7b00 	vldr	d7, [r6]
 80117f8:	eeb0 5b46 	vmov.f64	d5, d6
 80117fc:	eea4 5b07 	vfma.f64	d5, d4, d7
 8011800:	ed8d 5b00 	vstr	d5, [sp]
 8011804:	ee35 6b46 	vsub.f64	d6, d5, d6
 8011808:	eeb0 5b44 	vmov.f64	d5, d4
 801180c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011810:	ed96 7b04 	vldr	d7, [r6, #16]
 8011814:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 8011818:	eea6 5b07 	vfma.f64	d5, d6, d7
 801181c:	eeb0 7b45 	vmov.f64	d7, d5
 8011820:	ed96 5b06 	vldr	d5, [r6, #24]
 8011824:	1849      	adds	r1, r1, r1
 8011826:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 801182a:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 801182e:	eea6 7b05 	vfma.f64	d7, d6, d5
 8011832:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 8011836:	ee33 3b07 	vadd.f64	d3, d3, d7
 801183a:	ee23 6b03 	vmul.f64	d6, d3, d3
 801183e:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 8011842:	ed96 5b08 	vldr	d5, [r6, #32]
 8011846:	ee33 7b07 	vadd.f64	d7, d3, d7
 801184a:	1814      	adds	r4, r2, r0
 801184c:	0365      	lsls	r5, r4, #13
 801184e:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 8011852:	eea3 5b04 	vfma.f64	d5, d3, d4
 8011856:	eea6 7b05 	vfma.f64	d7, d6, d5
 801185a:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 801185e:	ee26 6b06 	vmul.f64	d6, d6, d6
 8011862:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 8011866:	2000      	movs	r0, #0
 8011868:	eb10 0a04 	adds.w	sl, r0, r4
 801186c:	eea3 5b04 	vfma.f64	d5, d3, d4
 8011870:	eb45 0b0c 	adc.w	fp, r5, ip
 8011874:	eea6 7b05 	vfma.f64	d7, d6, d5
 8011878:	2f00      	cmp	r7, #0
 801187a:	d16a      	bne.n	8011952 <pow+0x54a>
 801187c:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 8011880:	4639      	mov	r1, r7
 8011882:	ea50 0301 	orrs.w	r3, r0, r1
 8011886:	f04f 0300 	mov.w	r3, #0
 801188a:	d115      	bne.n	80118b8 <pow+0x4b0>
 801188c:	eb1a 0303 	adds.w	r3, sl, r3
 8011890:	ee0b 3a10 	vmov	s22, r3
 8011894:	4b3b      	ldr	r3, [pc, #236]	; (8011984 <pow+0x57c>)
 8011896:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8011968 <pow+0x560>
 801189a:	eb4b 0303 	adc.w	r3, fp, r3
 801189e:	ee0b 3a90 	vmov	s23, r3
 80118a2:	eea7 bb0b 	vfma.f64	d11, d7, d11
 80118a6:	ee2b 0b00 	vmul.f64	d0, d11, d0
 80118aa:	b01b      	add	sp, #108	; 0x6c
 80118ac:	ecbd 8b0a 	vpop	{d8-d12}
 80118b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118b4:	f000 b9c8 	b.w	8011c48 <__math_check_oflow>
 80118b8:	eb1a 0303 	adds.w	r3, sl, r3
 80118bc:	930a      	str	r3, [sp, #40]	; 0x28
 80118be:	4b32      	ldr	r3, [pc, #200]	; (8011988 <pow+0x580>)
 80118c0:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80118c4:	eb4b 0303 	adc.w	r3, fp, r3
 80118c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80118ca:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80118ce:	ee27 6b05 	vmul.f64	d6, d7, d5
 80118d2:	ee35 7b06 	vadd.f64	d7, d5, d6
 80118d6:	eeb0 3bc7 	vabs.f64	d3, d7
 80118da:	eeb4 3bc4 	vcmpe.f64	d3, d4
 80118de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118e2:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8011970 <pow+0x568>
 80118e6:	d52b      	bpl.n	8011940 <pow+0x538>
 80118e8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80118ec:	ee35 5b47 	vsub.f64	d5, d5, d7
 80118f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118f4:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 80118f8:	ee35 6b06 	vadd.f64	d6, d5, d6
 80118fc:	bf48      	it	mi
 80118fe:	eeb0 4b43 	vmovmi.f64	d4, d3
 8011902:	ee37 3b04 	vadd.f64	d3, d7, d4
 8011906:	ee34 5b43 	vsub.f64	d5, d4, d3
 801190a:	ee35 7b07 	vadd.f64	d7, d5, d7
 801190e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011912:	ee37 7b03 	vadd.f64	d7, d7, d3
 8011916:	ee37 7b44 	vsub.f64	d7, d7, d4
 801191a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801191e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011922:	d105      	bne.n	8011930 <pow+0x528>
 8011924:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011926:	463a      	mov	r2, r7
 8011928:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801192c:	ec43 2b17 	vmov	d7, r2, r3
 8011930:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 8011934:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 8011938:	ee26 6b00 	vmul.f64	d6, d6, d0
 801193c:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 8011940:	ee27 0b00 	vmul.f64	d0, d7, d0
 8011944:	b01b      	add	sp, #108	; 0x6c
 8011946:	ecbd 8b0a 	vpop	{d8-d12}
 801194a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801194e:	f000 b972 	b.w	8011c36 <__math_check_uflow>
 8011952:	ec4b ab10 	vmov	d0, sl, fp
 8011956:	eea7 0b00 	vfma.f64	d0, d7, d0
 801195a:	e5a3      	b.n	80114a4 <pow+0x9c>
 801195c:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8011978 <pow+0x570>
 8011960:	e5a0      	b.n	80114a4 <pow+0x9c>
 8011962:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011966:	e59d      	b.n	80114a4 <pow+0x9c>
 8011968:	00000000 	.word	0x00000000
 801196c:	7f000000 	.word	0x7f000000
 8011970:	00000000 	.word	0x00000000
 8011974:	00100000 	.word	0x00100000
	...
 8011980:	080138f0 	.word	0x080138f0
 8011984:	c0f00000 	.word	0xc0f00000
 8011988:	3fe00000 	.word	0x3fe00000

0801198c <atan2>:
 801198c:	f000 b82c 	b.w	80119e8 <__ieee754_atan2>

08011990 <sqrt>:
 8011990:	b508      	push	{r3, lr}
 8011992:	ed2d 8b04 	vpush	{d8-d9}
 8011996:	eeb0 8b40 	vmov.f64	d8, d0
 801199a:	f000 f8f3 	bl	8011b84 <__ieee754_sqrt>
 801199e:	4b10      	ldr	r3, [pc, #64]	; (80119e0 <sqrt+0x50>)
 80119a0:	f993 3000 	ldrsb.w	r3, [r3]
 80119a4:	3301      	adds	r3, #1
 80119a6:	d011      	beq.n	80119cc <sqrt+0x3c>
 80119a8:	eeb4 8b48 	vcmp.f64	d8, d8
 80119ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119b0:	d60c      	bvs.n	80119cc <sqrt+0x3c>
 80119b2:	ed9f 9b09 	vldr	d9, [pc, #36]	; 80119d8 <sqrt+0x48>
 80119b6:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80119ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119be:	d505      	bpl.n	80119cc <sqrt+0x3c>
 80119c0:	f7fb f80a 	bl	800c9d8 <__errno>
 80119c4:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80119c8:	2321      	movs	r3, #33	; 0x21
 80119ca:	6003      	str	r3, [r0, #0]
 80119cc:	ecbd 8b04 	vpop	{d8-d9}
 80119d0:	bd08      	pop	{r3, pc}
 80119d2:	bf00      	nop
 80119d4:	f3af 8000 	nop.w
	...
 80119e0:	240001e4 	.word	0x240001e4
 80119e4:	00000000 	.word	0x00000000

080119e8 <__ieee754_atan2>:
 80119e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80119ea:	ee11 6a10 	vmov	r6, s2
 80119ee:	ee11 0a90 	vmov	r0, s3
 80119f2:	4273      	negs	r3, r6
 80119f4:	4f60      	ldr	r7, [pc, #384]	; (8011b78 <__ieee754_atan2+0x190>)
 80119f6:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80119fa:	4333      	orrs	r3, r6
 80119fc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8011a00:	42bb      	cmp	r3, r7
 8011a02:	ed8d 0b00 	vstr	d0, [sp]
 8011a06:	d80b      	bhi.n	8011a20 <__ieee754_atan2+0x38>
 8011a08:	e9dd c500 	ldrd	ip, r5, [sp]
 8011a0c:	f1cc 0100 	rsb	r1, ip, #0
 8011a10:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011a14:	ea41 010c 	orr.w	r1, r1, ip
 8011a18:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 8011a1c:	42b9      	cmp	r1, r7
 8011a1e:	d906      	bls.n	8011a2e <__ieee754_atan2+0x46>
 8011a20:	ed9d 7b00 	vldr	d7, [sp]
 8011a24:	ee37 7b01 	vadd.f64	d7, d7, d1
 8011a28:	ed8d 7b00 	vstr	d7, [sp]
 8011a2c:	e054      	b.n	8011ad8 <__ieee754_atan2+0xf0>
 8011a2e:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 8011a32:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8011a36:	4331      	orrs	r1, r6
 8011a38:	d104      	bne.n	8011a44 <__ieee754_atan2+0x5c>
 8011a3a:	b003      	add	sp, #12
 8011a3c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011a40:	f000 b916 	b.w	8011c70 <atan>
 8011a44:	1784      	asrs	r4, r0, #30
 8011a46:	f004 0402 	and.w	r4, r4, #2
 8011a4a:	ea53 010c 	orrs.w	r1, r3, ip
 8011a4e:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 8011a52:	d109      	bne.n	8011a68 <__ieee754_atan2+0x80>
 8011a54:	2c02      	cmp	r4, #2
 8011a56:	d069      	beq.n	8011b2c <__ieee754_atan2+0x144>
 8011a58:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8011b40 <__ieee754_atan2+0x158>
 8011a5c:	ed9d 6b00 	vldr	d6, [sp]
 8011a60:	2c03      	cmp	r4, #3
 8011a62:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8011a66:	e7df      	b.n	8011a28 <__ieee754_atan2+0x40>
 8011a68:	ea52 0106 	orrs.w	r1, r2, r6
 8011a6c:	d107      	bne.n	8011a7e <__ieee754_atan2+0x96>
 8011a6e:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8011b48 <__ieee754_atan2+0x160>
 8011a72:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8011b50 <__ieee754_atan2+0x168>
 8011a76:	2d00      	cmp	r5, #0
 8011a78:	fe26 7b07 	vselge.f64	d7, d6, d7
 8011a7c:	e7d4      	b.n	8011a28 <__ieee754_atan2+0x40>
 8011a7e:	42ba      	cmp	r2, r7
 8011a80:	d10f      	bne.n	8011aa2 <__ieee754_atan2+0xba>
 8011a82:	4293      	cmp	r3, r2
 8011a84:	f104 34ff 	add.w	r4, r4, #4294967295
 8011a88:	d107      	bne.n	8011a9a <__ieee754_atan2+0xb2>
 8011a8a:	2c02      	cmp	r4, #2
 8011a8c:	d851      	bhi.n	8011b32 <__ieee754_atan2+0x14a>
 8011a8e:	4b3b      	ldr	r3, [pc, #236]	; (8011b7c <__ieee754_atan2+0x194>)
 8011a90:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8011a94:	ed94 7b00 	vldr	d7, [r4]
 8011a98:	e7c6      	b.n	8011a28 <__ieee754_atan2+0x40>
 8011a9a:	2c02      	cmp	r4, #2
 8011a9c:	d84c      	bhi.n	8011b38 <__ieee754_atan2+0x150>
 8011a9e:	4b38      	ldr	r3, [pc, #224]	; (8011b80 <__ieee754_atan2+0x198>)
 8011aa0:	e7f6      	b.n	8011a90 <__ieee754_atan2+0xa8>
 8011aa2:	42bb      	cmp	r3, r7
 8011aa4:	d0e3      	beq.n	8011a6e <__ieee754_atan2+0x86>
 8011aa6:	1a9b      	subs	r3, r3, r2
 8011aa8:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8011aac:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011ab0:	da16      	bge.n	8011ae0 <__ieee754_atan2+0xf8>
 8011ab2:	2800      	cmp	r0, #0
 8011ab4:	da01      	bge.n	8011aba <__ieee754_atan2+0xd2>
 8011ab6:	323c      	adds	r2, #60	; 0x3c
 8011ab8:	db17      	blt.n	8011aea <__ieee754_atan2+0x102>
 8011aba:	ed9d 7b00 	vldr	d7, [sp]
 8011abe:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8011ac2:	f000 f9cf 	bl	8011e64 <fabs>
 8011ac6:	f000 f8d3 	bl	8011c70 <atan>
 8011aca:	ed8d 0b00 	vstr	d0, [sp]
 8011ace:	2c01      	cmp	r4, #1
 8011ad0:	d00e      	beq.n	8011af0 <__ieee754_atan2+0x108>
 8011ad2:	2c02      	cmp	r4, #2
 8011ad4:	d014      	beq.n	8011b00 <__ieee754_atan2+0x118>
 8011ad6:	b9f4      	cbnz	r4, 8011b16 <__ieee754_atan2+0x12e>
 8011ad8:	ed9d 0b00 	vldr	d0, [sp]
 8011adc:	b003      	add	sp, #12
 8011ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ae0:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8011b48 <__ieee754_atan2+0x160>
 8011ae4:	ed8d 7b00 	vstr	d7, [sp]
 8011ae8:	e7f1      	b.n	8011ace <__ieee754_atan2+0xe6>
 8011aea:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8011b58 <__ieee754_atan2+0x170>
 8011aee:	e7f9      	b.n	8011ae4 <__ieee754_atan2+0xfc>
 8011af0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011af4:	9901      	ldr	r1, [sp, #4]
 8011af6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011afa:	e9cd 2300 	strd	r2, r3, [sp]
 8011afe:	e7eb      	b.n	8011ad8 <__ieee754_atan2+0xf0>
 8011b00:	ed9d 6b00 	vldr	d6, [sp]
 8011b04:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011b60 <__ieee754_atan2+0x178>
 8011b08:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011b0c:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8011b68 <__ieee754_atan2+0x180>
 8011b10:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011b14:	e788      	b.n	8011a28 <__ieee754_atan2+0x40>
 8011b16:	ed9d 6b00 	vldr	d6, [sp]
 8011b1a:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8011b60 <__ieee754_atan2+0x178>
 8011b1e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011b22:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8011b68 <__ieee754_atan2+0x180>
 8011b26:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011b2a:	e77d      	b.n	8011a28 <__ieee754_atan2+0x40>
 8011b2c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011b68 <__ieee754_atan2+0x180>
 8011b30:	e77a      	b.n	8011a28 <__ieee754_atan2+0x40>
 8011b32:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8011b70 <__ieee754_atan2+0x188>
 8011b36:	e777      	b.n	8011a28 <__ieee754_atan2+0x40>
 8011b38:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8011b58 <__ieee754_atan2+0x170>
 8011b3c:	e774      	b.n	8011a28 <__ieee754_atan2+0x40>
 8011b3e:	bf00      	nop
 8011b40:	54442d18 	.word	0x54442d18
 8011b44:	c00921fb 	.word	0xc00921fb
 8011b48:	54442d18 	.word	0x54442d18
 8011b4c:	3ff921fb 	.word	0x3ff921fb
 8011b50:	54442d18 	.word	0x54442d18
 8011b54:	bff921fb 	.word	0xbff921fb
	...
 8011b60:	33145c07 	.word	0x33145c07
 8011b64:	3ca1a626 	.word	0x3ca1a626
 8011b68:	54442d18 	.word	0x54442d18
 8011b6c:	400921fb 	.word	0x400921fb
 8011b70:	54442d18 	.word	0x54442d18
 8011b74:	3fe921fb 	.word	0x3fe921fb
 8011b78:	7ff00000 	.word	0x7ff00000
 8011b7c:	080138c0 	.word	0x080138c0
 8011b80:	080138d8 	.word	0x080138d8

08011b84 <__ieee754_sqrt>:
 8011b84:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8011b88:	4770      	bx	lr

08011b8a <with_errno>:
 8011b8a:	b513      	push	{r0, r1, r4, lr}
 8011b8c:	4604      	mov	r4, r0
 8011b8e:	ed8d 0b00 	vstr	d0, [sp]
 8011b92:	f7fa ff21 	bl	800c9d8 <__errno>
 8011b96:	ed9d 0b00 	vldr	d0, [sp]
 8011b9a:	6004      	str	r4, [r0, #0]
 8011b9c:	b002      	add	sp, #8
 8011b9e:	bd10      	pop	{r4, pc}

08011ba0 <xflow>:
 8011ba0:	b082      	sub	sp, #8
 8011ba2:	b158      	cbz	r0, 8011bbc <xflow+0x1c>
 8011ba4:	eeb1 7b40 	vneg.f64	d7, d0
 8011ba8:	ed8d 7b00 	vstr	d7, [sp]
 8011bac:	ed9d 7b00 	vldr	d7, [sp]
 8011bb0:	2022      	movs	r0, #34	; 0x22
 8011bb2:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011bb6:	b002      	add	sp, #8
 8011bb8:	f7ff bfe7 	b.w	8011b8a <with_errno>
 8011bbc:	eeb0 7b40 	vmov.f64	d7, d0
 8011bc0:	e7f2      	b.n	8011ba8 <xflow+0x8>
 8011bc2:	0000      	movs	r0, r0
 8011bc4:	0000      	movs	r0, r0
	...

08011bc8 <__math_uflow>:
 8011bc8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011bd0 <__math_uflow+0x8>
 8011bcc:	f7ff bfe8 	b.w	8011ba0 <xflow>
 8011bd0:	00000000 	.word	0x00000000
 8011bd4:	10000000 	.word	0x10000000

08011bd8 <__math_oflow>:
 8011bd8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011be0 <__math_oflow+0x8>
 8011bdc:	f7ff bfe0 	b.w	8011ba0 <xflow>
 8011be0:	00000000 	.word	0x00000000
 8011be4:	70000000 	.word	0x70000000

08011be8 <__math_divzero>:
 8011be8:	b082      	sub	sp, #8
 8011bea:	2800      	cmp	r0, #0
 8011bec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011bf0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8011bf4:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8011bf8:	ed8d 7b00 	vstr	d7, [sp]
 8011bfc:	ed9d 0b00 	vldr	d0, [sp]
 8011c00:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8011c10 <__math_divzero+0x28>
 8011c04:	2022      	movs	r0, #34	; 0x22
 8011c06:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8011c0a:	b002      	add	sp, #8
 8011c0c:	f7ff bfbd 	b.w	8011b8a <with_errno>
	...

08011c18 <__math_invalid>:
 8011c18:	eeb0 7b40 	vmov.f64	d7, d0
 8011c1c:	eeb4 7b47 	vcmp.f64	d7, d7
 8011c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c24:	ee30 6b40 	vsub.f64	d6, d0, d0
 8011c28:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8011c2c:	d602      	bvs.n	8011c34 <__math_invalid+0x1c>
 8011c2e:	2021      	movs	r0, #33	; 0x21
 8011c30:	f7ff bfab 	b.w	8011b8a <with_errno>
 8011c34:	4770      	bx	lr

08011c36 <__math_check_uflow>:
 8011c36:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8011c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c3e:	d102      	bne.n	8011c46 <__math_check_uflow+0x10>
 8011c40:	2022      	movs	r0, #34	; 0x22
 8011c42:	f7ff bfa2 	b.w	8011b8a <with_errno>
 8011c46:	4770      	bx	lr

08011c48 <__math_check_oflow>:
 8011c48:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8011c68 <__math_check_oflow+0x20>
 8011c4c:	eeb0 7bc0 	vabs.f64	d7, d0
 8011c50:	eeb4 7b46 	vcmp.f64	d7, d6
 8011c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c58:	dd02      	ble.n	8011c60 <__math_check_oflow+0x18>
 8011c5a:	2022      	movs	r0, #34	; 0x22
 8011c5c:	f7ff bf95 	b.w	8011b8a <with_errno>
 8011c60:	4770      	bx	lr
 8011c62:	bf00      	nop
 8011c64:	f3af 8000 	nop.w
 8011c68:	ffffffff 	.word	0xffffffff
 8011c6c:	7fefffff 	.word	0x7fefffff

08011c70 <atan>:
 8011c70:	b538      	push	{r3, r4, r5, lr}
 8011c72:	eeb0 7b40 	vmov.f64	d7, d0
 8011c76:	ee17 5a90 	vmov	r5, s15
 8011c7a:	4b73      	ldr	r3, [pc, #460]	; (8011e48 <atan+0x1d8>)
 8011c7c:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8011c80:	429c      	cmp	r4, r3
 8011c82:	dd13      	ble.n	8011cac <atan+0x3c>
 8011c84:	4b71      	ldr	r3, [pc, #452]	; (8011e4c <atan+0x1dc>)
 8011c86:	429c      	cmp	r4, r3
 8011c88:	dc03      	bgt.n	8011c92 <atan+0x22>
 8011c8a:	d107      	bne.n	8011c9c <atan+0x2c>
 8011c8c:	ee10 3a10 	vmov	r3, s0
 8011c90:	b123      	cbz	r3, 8011c9c <atan+0x2c>
 8011c92:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011c96:	eeb0 0b47 	vmov.f64	d0, d7
 8011c9a:	bd38      	pop	{r3, r4, r5, pc}
 8011c9c:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8011dd8 <atan+0x168>
 8011ca0:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8011de0 <atan+0x170>
 8011ca4:	2d00      	cmp	r5, #0
 8011ca6:	fe36 7b07 	vselgt.f64	d7, d6, d7
 8011caa:	e7f4      	b.n	8011c96 <atan+0x26>
 8011cac:	4b68      	ldr	r3, [pc, #416]	; (8011e50 <atan+0x1e0>)
 8011cae:	429c      	cmp	r4, r3
 8011cb0:	dc11      	bgt.n	8011cd6 <atan+0x66>
 8011cb2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8011cb6:	429c      	cmp	r4, r3
 8011cb8:	dc0a      	bgt.n	8011cd0 <atan+0x60>
 8011cba:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8011cbe:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8011de8 <atan+0x178>
 8011cc2:	ee30 6b06 	vadd.f64	d6, d0, d6
 8011cc6:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8011cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cce:	dce2      	bgt.n	8011c96 <atan+0x26>
 8011cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8011cd4:	e013      	b.n	8011cfe <atan+0x8e>
 8011cd6:	f000 f8c5 	bl	8011e64 <fabs>
 8011cda:	4b5e      	ldr	r3, [pc, #376]	; (8011e54 <atan+0x1e4>)
 8011cdc:	429c      	cmp	r4, r3
 8011cde:	dc4f      	bgt.n	8011d80 <atan+0x110>
 8011ce0:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8011ce4:	429c      	cmp	r4, r3
 8011ce6:	dc41      	bgt.n	8011d6c <atan+0xfc>
 8011ce8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8011cec:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	eea0 6b07 	vfma.f64	d6, d0, d7
 8011cf6:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011cfa:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011cfe:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011df0 <atan+0x180>
 8011d02:	ee27 4b07 	vmul.f64	d4, d7, d7
 8011d06:	ee24 5b04 	vmul.f64	d5, d4, d4
 8011d0a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8011df8 <atan+0x188>
 8011d0e:	eea5 3b06 	vfma.f64	d3, d5, d6
 8011d12:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8011e00 <atan+0x190>
 8011d16:	eea3 6b05 	vfma.f64	d6, d3, d5
 8011d1a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8011e08 <atan+0x198>
 8011d1e:	eea6 3b05 	vfma.f64	d3, d6, d5
 8011d22:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8011e10 <atan+0x1a0>
 8011d26:	eea3 6b05 	vfma.f64	d6, d3, d5
 8011d2a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8011e18 <atan+0x1a8>
 8011d2e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8011e20 <atan+0x1b0>
 8011d32:	eea6 3b05 	vfma.f64	d3, d6, d5
 8011d36:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011e28 <atan+0x1b8>
 8011d3a:	eea5 2b06 	vfma.f64	d2, d5, d6
 8011d3e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011e30 <atan+0x1c0>
 8011d42:	eea2 6b05 	vfma.f64	d6, d2, d5
 8011d46:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8011e38 <atan+0x1c8>
 8011d4a:	eea6 2b05 	vfma.f64	d2, d6, d5
 8011d4e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011e40 <atan+0x1d0>
 8011d52:	1c5a      	adds	r2, r3, #1
 8011d54:	eea2 6b05 	vfma.f64	d6, d2, d5
 8011d58:	ee26 6b05 	vmul.f64	d6, d6, d5
 8011d5c:	eea3 6b04 	vfma.f64	d6, d3, d4
 8011d60:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011d64:	d121      	bne.n	8011daa <atan+0x13a>
 8011d66:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011d6a:	e794      	b.n	8011c96 <atan+0x26>
 8011d6c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8011d70:	2301      	movs	r3, #1
 8011d72:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011d76:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011d7a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011d7e:	e7be      	b.n	8011cfe <atan+0x8e>
 8011d80:	4b35      	ldr	r3, [pc, #212]	; (8011e58 <atan+0x1e8>)
 8011d82:	429c      	cmp	r4, r3
 8011d84:	da0b      	bge.n	8011d9e <atan+0x12e>
 8011d86:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8011d8a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011d8e:	ee30 5b47 	vsub.f64	d5, d0, d7
 8011d92:	eea0 6b07 	vfma.f64	d6, d0, d7
 8011d96:	2302      	movs	r3, #2
 8011d98:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8011d9c:	e7af      	b.n	8011cfe <atan+0x8e>
 8011d9e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8011da2:	2303      	movs	r3, #3
 8011da4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011da8:	e7a9      	b.n	8011cfe <atan+0x8e>
 8011daa:	4a2c      	ldr	r2, [pc, #176]	; (8011e5c <atan+0x1ec>)
 8011dac:	492c      	ldr	r1, [pc, #176]	; (8011e60 <atan+0x1f0>)
 8011dae:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8011db2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8011db6:	ed93 5b00 	vldr	d5, [r3]
 8011dba:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011dbe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011dc2:	ed92 6b00 	vldr	d6, [r2]
 8011dc6:	2d00      	cmp	r5, #0
 8011dc8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011dcc:	bfb8      	it	lt
 8011dce:	eeb1 7b47 	vneglt.f64	d7, d7
 8011dd2:	e760      	b.n	8011c96 <atan+0x26>
 8011dd4:	f3af 8000 	nop.w
 8011dd8:	54442d18 	.word	0x54442d18
 8011ddc:	3ff921fb 	.word	0x3ff921fb
 8011de0:	54442d18 	.word	0x54442d18
 8011de4:	bff921fb 	.word	0xbff921fb
 8011de8:	8800759c 	.word	0x8800759c
 8011dec:	7e37e43c 	.word	0x7e37e43c
 8011df0:	e322da11 	.word	0xe322da11
 8011df4:	3f90ad3a 	.word	0x3f90ad3a
 8011df8:	24760deb 	.word	0x24760deb
 8011dfc:	3fa97b4b 	.word	0x3fa97b4b
 8011e00:	a0d03d51 	.word	0xa0d03d51
 8011e04:	3fb10d66 	.word	0x3fb10d66
 8011e08:	c54c206e 	.word	0xc54c206e
 8011e0c:	3fb745cd 	.word	0x3fb745cd
 8011e10:	920083ff 	.word	0x920083ff
 8011e14:	3fc24924 	.word	0x3fc24924
 8011e18:	5555550d 	.word	0x5555550d
 8011e1c:	3fd55555 	.word	0x3fd55555
 8011e20:	52defd9a 	.word	0x52defd9a
 8011e24:	bfadde2d 	.word	0xbfadde2d
 8011e28:	2c6a6c2f 	.word	0x2c6a6c2f
 8011e2c:	bfa2b444 	.word	0xbfa2b444
 8011e30:	af749a6d 	.word	0xaf749a6d
 8011e34:	bfb3b0f2 	.word	0xbfb3b0f2
 8011e38:	fe231671 	.word	0xfe231671
 8011e3c:	bfbc71c6 	.word	0xbfbc71c6
 8011e40:	9998ebc4 	.word	0x9998ebc4
 8011e44:	bfc99999 	.word	0xbfc99999
 8011e48:	440fffff 	.word	0x440fffff
 8011e4c:	7ff00000 	.word	0x7ff00000
 8011e50:	3fdbffff 	.word	0x3fdbffff
 8011e54:	3ff2ffff 	.word	0x3ff2ffff
 8011e58:	40038000 	.word	0x40038000
 8011e5c:	08014160 	.word	0x08014160
 8011e60:	08014180 	.word	0x08014180

08011e64 <fabs>:
 8011e64:	ec51 0b10 	vmov	r0, r1, d0
 8011e68:	ee10 2a10 	vmov	r2, s0
 8011e6c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011e70:	ec43 2b10 	vmov	d0, r2, r3
 8011e74:	4770      	bx	lr
	...

08011e78 <_getpid>:
 8011e78:	4b02      	ldr	r3, [pc, #8]	; (8011e84 <_getpid+0xc>)
 8011e7a:	2258      	movs	r2, #88	; 0x58
 8011e7c:	601a      	str	r2, [r3, #0]
 8011e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8011e82:	4770      	bx	lr
 8011e84:	2400c73c 	.word	0x2400c73c

08011e88 <_kill>:
 8011e88:	4b02      	ldr	r3, [pc, #8]	; (8011e94 <_kill+0xc>)
 8011e8a:	2258      	movs	r2, #88	; 0x58
 8011e8c:	601a      	str	r2, [r3, #0]
 8011e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8011e92:	4770      	bx	lr
 8011e94:	2400c73c 	.word	0x2400c73c

08011e98 <_exit>:
 8011e98:	e7fe      	b.n	8011e98 <_exit>
	...

08011e9c <_init>:
 8011e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e9e:	bf00      	nop
 8011ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011ea2:	bc08      	pop	{r3}
 8011ea4:	469e      	mov	lr, r3
 8011ea6:	4770      	bx	lr

08011ea8 <_fini>:
 8011ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011eaa:	bf00      	nop
 8011eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011eae:	bc08      	pop	{r3}
 8011eb0:	469e      	mov	lr, r3
 8011eb2:	4770      	bx	lr
